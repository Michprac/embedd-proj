
parking-ctrl-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009058  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009624  08009624  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009624  08009624  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800962c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000015c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000338  20000338  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010464  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021bd  00000000  00000000  00030670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00032830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  000335d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219a6  00000000  00000000  000342a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113fa  00000000  00000000  00055c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb960  00000000  00000000  00067048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001329a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004abc  00000000  00000000  001329f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091e0 	.word	0x080091e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080091e0 	.word	0x080091e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <HAL_UART_RxCpltCallback>:
//
//  return 1;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART2){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_UART_RxCpltCallback+0x4c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d118      	bne.n	8000bfc <HAL_UART_RxCpltCallback+0x44>
		if(znak == 'e'){
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	2b65      	cmp	r3, #101	; 0x65
 8000bd0:	d108      	bne.n	8000be4 <HAL_UART_RxCpltCallback+0x2c>
			sprintf(kom, "Dioda on");
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_RxCpltCallback+0x54>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <HAL_UART_RxCpltCallback+0x58>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f006 f887 	bl	8006cec <siprintf>
			dl_kom = 8;
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_UART_RxCpltCallback+0x5c>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &znak, dl_kom);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_UART_RxCpltCallback+0x5c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4907      	ldr	r1, [pc, #28]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <HAL_UART_RxCpltCallback+0x60>)
 8000bee:	f004 f8db 	bl	8004da8 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4904      	ldr	r1, [pc, #16]	; (8000c08 <HAL_UART_RxCpltCallback+0x50>)
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <HAL_UART_RxCpltCallback+0x60>)
 8000bf8:	f004 f934 	bl	8004e64 <HAL_UART_Receive_IT>
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40004400 	.word	0x40004400
 8000c08:	2000031a 	.word	0x2000031a
 8000c0c:	20000318 	.word	0x20000318
 8000c10:	080091f8 	.word	0x080091f8
 8000c14:	2000031c 	.word	0x2000031c
 8000c18:	20000290 	.word	0x20000290

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fbf6 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f82a 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f97c 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c2c:	f000 f88a 	bl	8000d44 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000c30:	f000 f922 	bl	8000e78 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000c34:	f000 f946 	bl	8000ec4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	490c      	ldr	r1, [pc, #48]	; (8000c6c <main+0x50>)
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <main+0x54>)
 8000c3e:	f004 f911 	bl	8004e64 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000c42:	2100      	movs	r1, #0
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <main+0x58>)
 8000c46:	f002 fe4d 	bl	80038e4 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <main+0x58>)
 8000c4e:	f002 fcdb 	bl	8003608 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8000c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c56:	f000 fc41 	bl	80014dc <HAL_Delay>
//
//	  printf("%.1f cm\n", (value - 257) / 58.0f);
////	  printf("value = %lu\n", value);
//	  HAL_Delay(1000);
//	  printf("Current");
	  HAL_UART_Transmit(&huart2, "Hello world!", 12, HAL_MAX_DELAY);
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	220c      	movs	r2, #12
 8000c60:	4905      	ldr	r1, [pc, #20]	; (8000c78 <main+0x5c>)
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <main+0x54>)
 8000c64:	f004 f816 	bl	8004c94 <HAL_UART_Transmit>
 8000c68:	e7f7      	b.n	8000c5a <main+0x3e>
 8000c6a:	bf00      	nop
 8000c6c:	2000031a 	.word	0x2000031a
 8000c70:	20000290 	.word	0x20000290
 8000c74:	200001f8 	.word	0x200001f8
 8000c78:	08009204 	.word	0x08009204

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a6      	sub	sp, #152	; 0x98
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c86:	2228      	movs	r2, #40	; 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f005 fbbc 	bl	8006408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2258      	movs	r2, #88	; 0x58
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 fbae 	bl	8006408 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff34 	bl	8001b48 <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f941 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 ff72 	bl	8002bf0 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d12:	f000 f92b 	bl	8000f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <SystemClock_Config+0xc4>)
 8000d18:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 f997 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d34:	f000 f91a 	bl	8000f6c <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3798      	adds	r7, #152	; 0x98
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	00900002 	.word	0x00900002

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b092      	sub	sp, #72	; 0x48
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d84:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000d8c:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000d8e:	2247      	movs	r2, #71	; 0x47
 8000d90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8000d98:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000d9a:	4a36      	ldr	r2, [pc, #216]	; (8000e74 <MX_TIM2_Init+0x130>)
 8000d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000daa:	4831      	ldr	r0, [pc, #196]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000dac:	f002 fb74 	bl	8003498 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000db6:	f000 f8d9 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	482a      	ldr	r0, [pc, #168]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000dc8:	f003 f838 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000dd2:	f000 f8cb 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000dd6:	4826      	ldr	r0, [pc, #152]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000dd8:	f002 fd22 	bl	8003820 <HAL_TIM_IC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000de2:	f000 f8c3 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de6:	4822      	ldr	r0, [pc, #136]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000de8:	f002 fbad 	bl	8003546 <HAL_TIM_PWM_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000df2:	f000 f8bb 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000e06:	f003 fe6b 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000e10:	f000 f8ac 	bl	8000f6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000e2e:	f002 fe55 	bl	8003adc <HAL_TIM_IC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000e38:	f000 f898 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3c:	2360      	movs	r3, #96	; 0x60
 8000e3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000e40:	230a      	movs	r3, #10
 8000e42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000e54:	f002 fede 	bl	8003c14 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8000e5e:	f000 f885 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <MX_TIM2_Init+0x12c>)
 8000e64:	f000 f900 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000e68:	bf00      	nop
 8000e6a:	3748      	adds	r7, #72	; 0x48
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200001f8 	.word	0x200001f8
 8000e74:	000f423f 	.word	0x000f423f

08000e78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <MX_TIM16_Init+0x48>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_TIM16_Init+0x44>)
 8000eaa:	f002 faf5 	bl	8003498 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000eb4:	f000 f85a 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000244 	.word	0x20000244
 8000ec0:	40014400 	.word	0x40014400

08000ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_USART2_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f08:	f003 fe76 	bl	8004bf8 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f82b 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000290 	.word	0x20000290
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_GPIO_Init+0x44>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <MX_GPIO_Init+0x44>)
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_GPIO_Init+0x44>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_GPIO_Init+0x44>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <MX_GPIO_Init+0x44>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_GPIO_Init+0x44>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_MspInit+0x44>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_MspInit+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_MspInit+0x44>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_MspInit+0x44>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_MspInit+0x44>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_MspInit+0x44>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	d129      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f000 fc00 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001034:	e010      	b.n	8001058 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM16)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0xa4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d10b      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40014400 	.word	0x40014400

08001068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d11c      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <HAL_TIM_MspPostInit+0x68>)
 80010c0:	f000 fbb8 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_UART_MspInit+0xc4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d14c      	bne.n	8001190 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <HAL_UART_MspInit+0xc8>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a28      	ldr	r2, [pc, #160]	; (800119c <HAL_UART_MspInit+0xc8>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_UART_MspInit+0xc8>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_UART_MspInit+0xc8>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800113e:	2308      	movs	r3, #8
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 fb6a 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001160:	2308      	movs	r3, #8
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001170:	2307      	movs	r3, #7
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <HAL_UART_MspInit+0xcc>)
 800117c:	f000 fb5a 	bl	8001834 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2026      	movs	r0, #38	; 0x26
 8001186:	f000 faa8 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800118a:	2026      	movs	r0, #38	; 0x26
 800118c:	f000 fac1 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f954 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART2_IRQHandler+0x10>)
 80011fe:	f003 fe75 	bl	8004eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000290 	.word	0x20000290

0800120c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_kill>:

int _kill(int pid, int sig)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001226:	f005 f8c5 	bl	80063b4 <__errno>
 800122a:	4603      	mov	r3, r0
 800122c:	2216      	movs	r2, #22
 800122e:	601a      	str	r2, [r3, #0]
  return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_exit>:

void _exit (int status)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ffe7 	bl	800121c <_kill>
  while (1) {}    /* Make sure we hang here */
 800124e:	e7fe      	b.n	800124e <_exit+0x12>

08001250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e00a      	b.n	8001278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001262:	f3af 8000 	nop.w
 8001266:	4601      	mov	r1, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf0      	blt.n	8001262 <_read+0x12>
  }

  return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e009      	b.n	80012b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf1      	blt.n	800129c <_write+0x12>
  }
  return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_close>:

int _close(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_isatty>:

int _isatty(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f005 f82a 	bl	80063b4 <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20010000 	.word	0x20010000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000320 	.word	0x20000320
 8001394:	20000338 	.word	0x20000338

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c0:	f7ff ffea 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f004 ffe9 	bl	80063c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ee:	f7ff fc15 	bl	8000c1c <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001400:	0800962c 	.word	0x0800962c
  ldr r2, =_sbss
 8001404:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001408:	20000338 	.word	0x20000338

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x28>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x28>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f94f 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fda4 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f967 	bl	800172e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f92f 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000324 	.word	0x20000324

080014c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000324 	.word	0x20000324

080014dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001754:	2b02      	cmp	r3, #2
 8001756:	d008      	beq.n	800176a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2204      	movs	r2, #4
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e020      	b.n	80017ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 020e 	bic.w	r2, r2, #14
 8001778:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d005      	beq.n	80017da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2204      	movs	r2, #4
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e027      	b.n	800182a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020e 	bic.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
    } 
  }
  return status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	e160      	b.n	8001b06 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8152 	beq.w	8001b00 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d005      	beq.n	8001874 <HAL_GPIO_Init+0x40>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d130      	bne.n	80018d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018aa:	2201      	movs	r2, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f003 0201 	and.w	r2, r3, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d017      	beq.n	8001912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d123      	bne.n	8001966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	6939      	ldr	r1, [r7, #16]
 8001962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80ac 	beq.w	8001b00 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a8:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a5d      	ldr	r2, [pc, #372]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c0:	4a59      	ldr	r2, [pc, #356]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ea:	d025      	beq.n	8001a38 <HAL_GPIO_Init+0x204>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x2f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d01f      	beq.n	8001a34 <HAL_GPIO_Init+0x200>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <HAL_GPIO_Init+0x2fc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d019      	beq.n	8001a30 <HAL_GPIO_Init+0x1fc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x1f8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1f4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <HAL_GPIO_Init+0x308>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1f0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <HAL_GPIO_Init+0x30c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1ec>
 8001a1c:	2306      	movs	r3, #6
 8001a1e:	e00c      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a20:	2307      	movs	r3, #7
 8001a22:	e00a      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a24:	2305      	movs	r3, #5
 8001a26:	e008      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x206>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4a:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a58:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7c:	4a31      	ldr	r2, [pc, #196]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa6:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f ae97 	bne.w	8001844 <HAL_GPIO_Init+0x10>
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000c00 	.word	0x48000c00
 8001b38:	48001000 	.word	0x48001000
 8001b3c:	48001400 	.word	0x48001400
 8001b40:	48001800 	.word	0x48001800
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f001 b83a 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 816f 	beq.w	8001e62 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b84:	4bb5      	ldr	r3, [pc, #724]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4bb2      	ldr	r3, [pc, #712]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d15c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x10e>
 8001b9c:	4baf      	ldr	r3, [pc, #700]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d155      	bne.n	8001c56 <HAL_RCC_OscConfig+0x10e>
 8001baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x94>
 8001bd6:	4ba1      	ldr	r3, [pc, #644]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	e015      	b.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bf8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c04:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c0c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c10:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c14:	fa92 f2a2 	rbit	r2, r2
 8001c18:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8111 	beq.w	8001e60 <HAL_RCC_OscConfig+0x318>
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8108 	bne.w	8001e60 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f000 bfc6 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12e>
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a7b      	ldr	r2, [pc, #492]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e036      	b.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x158>
 8001c86:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a74      	ldr	r2, [pc, #464]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a71      	ldr	r2, [pc, #452]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e021      	b.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x184>
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a69      	ldr	r2, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a66      	ldr	r2, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
 8001ccc:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a62      	ldr	r2, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d059      	beq.n	8001da8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fbe6 	bl	80014c4 <HAL_GetTick>
 8001cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fbe1 	bl	80014c4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d902      	bls.n	8001d14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f000 bf67 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1fe>
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x22a>
 8001d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d62:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d76:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d8a:	fab2 f282 	clz	r2, r2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ab      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1b6>
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb8c 	bl	80014c4 <HAL_GetTick>
 8001dac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db2:	f7ff fb87 	bl	80014c4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f000 bf0d 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ddc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2b2>
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x2de>
 8001dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x314>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ab      	bne.n	8001db2 <HAL_RCC_OscConfig+0x26a>
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_OscConfig+0x31a>
 8001e5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 817f 	beq.w	8002176 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e78:	4ba7      	ldr	r3, [pc, #668]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e84:	4ba4      	ldr	r3, [pc, #656]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d173      	bne.n	8001f78 <HAL_RCC_OscConfig+0x430>
 8001e90:	4ba1      	ldr	r3, [pc, #644]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9c:	d16c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x430>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001eb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_OscConfig+0x386>
 8001ec8:	4b93      	ldr	r3, [pc, #588]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e013      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3ae>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ee6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001efc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f00:	fa92 f2a2 	rbit	r2, r2
 8001f04:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f08:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f042 0220 	orr.w	r2, r2, #32
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f002 021f 	and.w	r2, r2, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3f6>
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d002      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f000 be52 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	21f8      	movs	r1, #248	; 0xf8
 8001f54:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f5c:	fa91 f1a1 	rbit	r1, r1
 8001f60:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f64:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f68:	fab1 f181 	clz	r1, r1
 8001f6c:	b2c9      	uxtb	r1, r1
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	4969      	ldr	r1, [pc, #420]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e0fe      	b.n	8002176 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8088 	beq.w	800209a <HAL_RCC_OscConfig+0x552>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001faa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fa85 	bl	80014c4 <HAL_GetTick>
 8001fba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fa80 	bl	80014c4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d902      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f000 be06 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001fe8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_OscConfig+0x4be>
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	e013      	b.n	800202e <HAL_RCC_OscConfig+0x4e6>
 8002006:	2302      	movs	r3, #2
 8002008:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800201e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2202      	movs	r2, #2
 8002030:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002034:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002040:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f042 0220 	orr.w	r2, r2, #32
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f002 021f 	and.w	r2, r2, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0af      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	21f8      	movs	r1, #248	; 0xf8
 8002076:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800207e:	fa91 f1a1 	rbit	r1, r1
 8002082:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002086:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800208a:	fab1 f181 	clz	r1, r1
 800208e:	b2c9      	uxtb	r1, r1
 8002090:	408b      	lsls	r3, r1
 8002092:	4921      	ldr	r1, [pc, #132]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e06d      	b.n	8002176 <HAL_RCC_OscConfig+0x62e>
 800209a:	2301      	movs	r3, #1
 800209c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80020ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	461a      	mov	r2, r3
 80020c2:	2300      	movs	r3, #0
 80020c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f9fd 	bl	80014c4 <HAL_GetTick>
 80020ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff f9f8 	bl	80014c4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d902      	bls.n	80020e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f000 bd7e 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80020f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x5d4>
 8002110:	4b01      	ldr	r3, [pc, #4]	; (8002118 <HAL_RCC_OscConfig+0x5d0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	e016      	b.n	8002144 <HAL_RCC_OscConfig+0x5fc>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002134:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002140:	4bbf      	ldr	r3, [pc, #764]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2202      	movs	r2, #2
 8002146:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800214a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800214e:	fa92 f2a2 	rbit	r2, r2
 8002152:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002156:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ac      	bne.n	80020d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8113 	beq.w	80023b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d07c      	beq.n	8002296 <HAL_RCC_OscConfig+0x74e>
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80021ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4ba2      	ldr	r3, [pc, #648]	; (8002444 <HAL_RCC_OscConfig+0x8fc>)
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	461a      	mov	r2, r3
 80021c2:	2301      	movs	r3, #1
 80021c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff f97d 	bl	80014c4 <HAL_GetTick>
 80021ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff f978 	bl	80014c4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d902      	bls.n	80021e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f000 bcfe 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002206:	2202      	movs	r2, #2
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002240:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002244:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b7e      	ldr	r3, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 8002248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002252:	2102      	movs	r1, #2
 8002254:	6019      	str	r1, [r3, #0]
 8002256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f1a3 	rbit	r1, r3
 8002264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002268:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800226c:	6019      	str	r1, [r3, #0]
  return result;
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d09d      	beq.n	80021d0 <HAL_RCC_OscConfig+0x688>
 8002294:	e08d      	b.n	80023b2 <HAL_RCC_OscConfig+0x86a>
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022b8:	601a      	str	r2, [r3, #0]
  return result;
 80022ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x8fc>)
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	461a      	mov	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff f8f4 	bl	80014c4 <HAL_GetTick>
 80022dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e2:	f7ff f8ef 	bl	80014c4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d902      	bls.n	80022f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f000 bc75 	b.w	8002be2 <HAL_RCC_OscConfig+0x109a>
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002308:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002316:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002324:	2202      	movs	r2, #2
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002344:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002350:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002362:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 8002366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002370:	2102      	movs	r1, #2
 8002372:	6019      	str	r1, [r3, #0]
 8002374:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002378:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f1a3 	rbit	r1, r3
 8002382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002386:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800238a:	6019      	str	r1, [r3, #0]
  return result;
 800238c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002390:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d197      	bne.n	80022e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 81a5 	beq.w	8002712 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_RCC_OscConfig+0x8f8>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_RCC_OscConfig+0x900>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d121      	bne.n	8002458 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_RCC_OscConfig+0x900>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x900>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002420:	f7ff f850 	bl	80014c4 <HAL_GetTick>
 8002424:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e010      	b.n	800244c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7ff f84b 	bl	80014c4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d908      	bls.n	800244c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e3d1      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	10908120 	.word	0x10908120
 8002448:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <HAL_RCC_OscConfig+0xb3c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0e8      	beq.n	800242a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x92e>
 8002468:	4b87      	ldr	r3, [pc, #540]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a86      	ldr	r2, [pc, #536]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	e035      	b.n	80024e2 <HAL_RCC_OscConfig+0x99a>
 8002476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x958>
 8002486:	4b80      	ldr	r3, [pc, #512]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a7f      	ldr	r2, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	4b7d      	ldr	r3, [pc, #500]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a7c      	ldr	r2, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	e020      	b.n	80024e2 <HAL_RCC_OscConfig+0x99a>
 80024a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_OscConfig+0x982>
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a74      	ldr	r2, [pc, #464]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	4b72      	ldr	r3, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a71      	ldr	r2, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_OscConfig+0x99a>
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a6b      	ldr	r2, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80024dc:	f023 0304 	bic.w	r3, r3, #4
 80024e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8081 	beq.w	80025f6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe ffe6 	bl	80014c4 <HAL_GetTick>
 80024f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe ffe1 	bl	80014c4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e365      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
 8002516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002526:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002534:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0xa3a>
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	e013      	b.n	80025aa <HAL_RCC_OscConfig+0xa62>
 8002582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002586:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002592:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025b2:	2102      	movs	r1, #2
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fa92 f1a2 	rbit	r1, r2
 80025c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d084      	beq.n	80024fe <HAL_RCC_OscConfig+0x9b6>
 80025f4:	e083      	b.n	80026fe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7fe ff65 	bl	80014c4 <HAL_GetTick>
 80025fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe ff60 	bl	80014c4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e2e4      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
 8002618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002620:	2202      	movs	r2, #2
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002628:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002636:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002644:	2202      	movs	r2, #2
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002664:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0xb44>
 800267e:	4b02      	ldr	r3, [pc, #8]	; (8002688 <HAL_RCC_OscConfig+0xb40>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	e017      	b.n	80026b4 <HAL_RCC_OscConfig+0xb6c>
 8002684:	40007000 	.word	0x40007000
 8002688:	40021000 	.word	0x40021000
 800268c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002690:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002694:	2202      	movs	r2, #2
 8002696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	4bb3      	ldr	r3, [pc, #716]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026bc:	2102      	movs	r1, #2
 80026be:	6011      	str	r1, [r2, #0]
 80026c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	fa92 f1a2 	rbit	r1, r2
 80026ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026d2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80026d6:	6011      	str	r1, [r2, #0]
  return result;
 80026d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026dc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	fab2 f282 	clz	r2, r2
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f002 021f 	and.w	r2, r2, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d180      	bne.n	8002600 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026fe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002706:	4b9e      	ldr	r3, [pc, #632]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a9d      	ldr	r2, [pc, #628]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 800270c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 825e 	beq.w	8002be0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b96      	ldr	r3, [pc, #600]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	f000 821f 	beq.w	8002b70 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002736:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b02      	cmp	r3, #2
 8002740:	f040 8170 	bne.w	8002a24 <HAL_RCC_OscConfig+0xedc>
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800274c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002756:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002764:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002768:	601a      	str	r2, [r3, #0]
  return result;
 800276a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002772:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	461a      	mov	r2, r3
 8002786:	2300      	movs	r3, #0
 8002788:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fe9b 	bl	80014c4 <HAL_GetTick>
 800278e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	e009      	b.n	80027a8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fe96 	bl	80014c4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e21c      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
 80027a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xcaa>
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e027      	b.n	8002842 <HAL_RCC_OscConfig+0xcfa>
 80027f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002846:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800284a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002854:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fa92 f1a2 	rbit	r1, r2
 800285e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002862:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002866:	6011      	str	r1, [r2, #0]
  return result;
 8002868:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800286c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d182      	bne.n	8002794 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288e:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80028b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a19      	ldr	r1, [r3, #32]
 80028bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	492d      	ldr	r1, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028f4:	601a      	str	r2, [r3, #0]
  return result;
 80028f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80028fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800290a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	461a      	mov	r2, r3
 8002912:	2301      	movs	r3, #1
 8002914:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fdd5 	bl	80014c4 <HAL_GetTick>
 800291a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800291e:	e009      	b.n	8002934 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fdd0 	bl	80014c4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e156      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
 8002934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002938:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800293c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002946:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002954:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002958:	601a      	str	r2, [r3, #0]
  return result;
 800295a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002962:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0xe3c>
 8002978:	4b01      	ldr	r3, [pc, #4]	; (8002980 <HAL_RCC_OscConfig+0xe38>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e02a      	b.n	80029d4 <HAL_RCC_OscConfig+0xe8c>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002988:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800298c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002996:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029bc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4b86      	ldr	r3, [pc, #536]	; (8002bec <HAL_RCC_OscConfig+0x10a4>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029e0:	6011      	str	r1, [r2, #0]
 80029e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	fa92 f1a2 	rbit	r1, r2
 80029f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029f4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80029f8:	6011      	str	r1, [r2, #0]
  return result;
 80029fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029fe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f43f af7f 	beq.w	8002920 <HAL_RCC_OscConfig+0xdd8>
 8002a22:	e0dd      	b.n	8002be0 <HAL_RCC_OscConfig+0x1098>
 8002a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	fa93 f2a3 	rbit	r2, r3
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a48:	601a      	str	r2, [r3, #0]
  return result;
 8002a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a52:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fd2b 	bl	80014c4 <HAL_GetTick>
 8002a6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fd26 	bl	80014c4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0ac      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002aac:	601a      	str	r2, [r3, #0]
  return result;
 8002aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ab6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_OscConfig+0xf8a>
 8002acc:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_OscConfig+0x10a4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	e027      	b.n	8002b22 <HAL_RCC_OscConfig+0xfda>
 8002ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f2a3 	rbit	r2, r3
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b33      	ldr	r3, [pc, #204]	; (8002bec <HAL_RCC_OscConfig+0x10a4>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b2e:	6011      	str	r1, [r2, #0]
 8002b30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	fa92 f1a2 	rbit	r1, r2
 8002b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b42:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002b46:	6011      	str	r1, [r2, #0]
  return result;
 8002b48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b4c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d182      	bne.n	8002a74 <HAL_RCC_OscConfig+0xf2c>
 8002b6e:	e037      	b.n	8002be0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02e      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_OscConfig+0x10a4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_RCC_OscConfig+0x10a4>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b98:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d117      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bb0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b09e      	sub	sp, #120	; 0x78
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e162      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b90      	ldr	r3, [pc, #576]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d910      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 0207 	bic.w	r2, r3, #7
 8002c1e:	498b      	ldr	r1, [pc, #556]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e14a      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	497f      	ldr	r1, [pc, #508]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80dc 	beq.w	8002e1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d13c      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xf6>
 8002c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xa6>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	e00f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0xc6>
 8002c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8002caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cb2:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cba:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cbe:	fa92 f2a2 	rbit	r2, r2
 8002cc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cc6:	fab2 f282 	clz	r2, r2
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f002 021f 	and.w	r2, r2, #31
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d17b      	bne.n	8002dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0f3      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d13c      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x178>
 8002cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x128>
 8002d12:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e00f      	b.n	8002d38 <HAL_RCC_ClockConfig+0x148>
 8002d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
 8002d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d34:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f002 021f 	and.w	r2, r2, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d13a      	bne.n	8002dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b2      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1a0>
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e00d      	b.n	8002dac <HAL_RCC_ClockConfig+0x1bc>
 8002d90:	2302      	movs	r3, #2
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2202      	movs	r2, #2
 8002dae:	61ba      	str	r2, [r7, #24]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	fa92 f2a2 	rbit	r2, r2
 8002db6:	617a      	str	r2, [r7, #20]
  return result;
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	fab2 f282 	clz	r2, r2
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f002 021f 	and.w	r2, r2, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e079      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	491a      	ldr	r1, [pc, #104]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fb6a 	bl	80014c4 <HAL_GetTick>
 8002df0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe fb66 	bl	80014c4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e061      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_ClockConfig+0x260>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d214      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4906      	ldr	r1, [pc, #24]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e040      	b.n	8002ece <HAL_RCC_ClockConfig+0x2de>
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	491a      	ldr	r1, [pc, #104]	; (8002ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4912      	ldr	r1, [pc, #72]	; (8002ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e92:	f000 f829 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002e96:	4601      	mov	r1, r0
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea0:	22f0      	movs	r2, #240	; 0xf0
 8002ea2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	fa92 f2a2 	rbit	r2, r2
 8002eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	fab2 f282 	clz	r2, r2
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	40d3      	lsrs	r3, r2
 8002eb6:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x2ec>)
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	fa21 f303 	lsr.w	r3, r1, r3
 8002ebe:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fab8 	bl	800143c <HAL_InitTick>
  
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3778      	adds	r7, #120	; 0x78
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08009214 	.word	0x08009214
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b08b      	sub	sp, #44	; 0x2c
 8002eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x30>
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x36>
 8002f16:	e03f      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f1a:	623b      	str	r3, [r7, #32]
      break;
 8002f1c:	e03f      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	fa92 f2a2 	rbit	r2, r2
 8002f30:	607a      	str	r2, [r7, #4]
  return result;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fab2 f282 	clz	r2, r2
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	40d3      	lsrs	r3, r2
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	fa92 f2a2 	rbit	r2, r2
 8002f54:	60fa      	str	r2, [r7, #12]
  return result;
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	40d3      	lsrs	r3, r2
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	e007      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	623b      	str	r3, [r7, #32]
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f9a:	623b      	str	r3, [r7, #32]
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	372c      	adds	r7, #44	; 0x2c
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	007a1200 	.word	0x007a1200
 8002fb4:	0800922c 	.word	0x0800922c
 8002fb8:	0800923c 	.word	0x0800923c

08002fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20000000 	.word	0x20000000

08002fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fda:	f7ff ffef 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8002fde:	4601      	mov	r1, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fe8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	fa92 f2a2 	rbit	r2, r2
 8002ff4:	603a      	str	r2, [r7, #0]
  return result;
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	40d3      	lsrs	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08009224 	.word	0x08009224

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800301e:	f7ff ffcd 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8003022:	4601      	mov	r1, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800302c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003030:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	603a      	str	r2, [r7, #0]
  return result;
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	40d3      	lsrs	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08009224 	.word	0x08009224

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b092      	sub	sp, #72	; 0x48
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80d4 	beq.w	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10e      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b4b      	ldr	r3, [pc, #300]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4a4a      	ldr	r2, [pc, #296]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	61d3      	str	r3, [r2, #28]
 8003098:	4b48      	ldr	r3, [pc, #288]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a41      	ldr	r2, [pc, #260]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe f9ff 	bl	80014c4 <HAL_GetTick>
 80030c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe f9fb 	bl	80014c4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	; 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1d6      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8084 	beq.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003104:	429a      	cmp	r2, r3
 8003106:	d07c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	461a      	mov	r2, r3
 8003132:	2301      	movs	r3, #1
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	461a      	mov	r2, r3
 8003156:	2300      	movs	r3, #0
 8003158:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04b      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe f9ab 	bl	80014c4 <HAL_GetTick>
 800316e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe f9a7 	bl	80014c4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e180      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003188:	2302      	movs	r3, #2
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	2302      	movs	r3, #2
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	61fb      	str	r3, [r7, #28]
  return result;
 80031a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d108      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031b6:	4b01      	ldr	r3, [pc, #4]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	e00d      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40007000 	.word	0x40007000
 80031c4:	10908100 	.word	0x10908100
 80031c8:	2302      	movs	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	4b9a      	ldr	r3, [pc, #616]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2202      	movs	r2, #2
 80031da:	613a      	str	r2, [r7, #16]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	fa92 f2a2 	rbit	r2, r2
 80031e2:	60fa      	str	r2, [r7, #12]
  return result;
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fab2 f282 	clz	r2, r2
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	f002 021f 	and.w	r2, r2, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0b7      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003202:	4b8f      	ldr	r3, [pc, #572]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	498c      	ldr	r1, [pc, #560]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003214:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4a87      	ldr	r2, [pc, #540]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003234:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f023 0203 	bic.w	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	497f      	ldr	r1, [pc, #508]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003252:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4978      	ldr	r1, [pc, #480]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003270:	4b73      	ldr	r3, [pc, #460]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4970      	ldr	r1, [pc, #448]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800328e:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f023 0210 	bic.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4969      	ldr	r1, [pc, #420]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032ac:	4b64      	ldr	r3, [pc, #400]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	4961      	ldr	r1, [pc, #388]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ca:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f023 0220 	bic.w	r2, r3, #32
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	495a      	ldr	r1, [pc, #360]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032e8:	4b55      	ldr	r3, [pc, #340]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	4952      	ldr	r1, [pc, #328]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003306:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	494b      	ldr	r1, [pc, #300]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	4943      	ldr	r1, [pc, #268]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	493c      	ldr	r1, [pc, #240]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	4934      	ldr	r1, [pc, #208]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	492d      	ldr	r1, [pc, #180]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800339c:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	4925      	ldr	r1, [pc, #148]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033ba:	4b21      	ldr	r3, [pc, #132]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	491e      	ldr	r1, [pc, #120]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	490f      	ldr	r1, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003432:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	4913      	ldr	r1, [pc, #76]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	490b      	ldr	r1, [pc, #44]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	4904      	ldr	r1, [pc, #16]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3748      	adds	r7, #72	; 0x48
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e049      	b.n	800353e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fd7e 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f000 fd7a 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e049      	b.n	80035ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f841 	bl	80035f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f000 fd23 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_TIM_PWM_Start+0x24>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e03c      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d109      	bne.n	8003646 <HAL_TIM_PWM_Start+0x3e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e02f      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x58>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e022      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d109      	bne.n	800367a <HAL_TIM_PWM_Start+0x72>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e015      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d109      	bne.n	8003694 <HAL_TIM_PWM_Start+0x8c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0a1      	b.n	80037f2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0xb6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e023      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xc6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e01b      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xd6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e013      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xe6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0xf6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	e003      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f9c0 	bl	8004a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_TIM_PWM_Start+0x1f4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_TIM_PWM_Start+0x148>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a37      	ldr	r2, [pc, #220]	; (8003800 <HAL_TIM_PWM_Start+0x1f8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_TIM_PWM_Start+0x148>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a35      	ldr	r2, [pc, #212]	; (8003804 <HAL_TIM_PWM_Start+0x1fc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_TIM_PWM_Start+0x148>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_TIM_PWM_Start+0x200>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_TIM_PWM_Start+0x148>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a32      	ldr	r2, [pc, #200]	; (800380c <HAL_TIM_PWM_Start+0x204>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_PWM_Start+0x148>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a31      	ldr	r2, [pc, #196]	; (8003810 <HAL_TIM_PWM_Start+0x208>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_TIM_PWM_Start+0x14c>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_TIM_PWM_Start+0x14e>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_TIM_PWM_Start+0x1f4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d01d      	beq.n	80037b0 <HAL_TIM_PWM_Start+0x1a8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d018      	beq.n	80037b0 <HAL_TIM_PWM_Start+0x1a8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_TIM_PWM_Start+0x20c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_TIM_PWM_Start+0x1a8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_TIM_PWM_Start+0x210>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_TIM_PWM_Start+0x1a8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_TIM_PWM_Start+0x1f8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_TIM_PWM_Start+0x1a8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_TIM_PWM_Start+0x1fc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_TIM_PWM_Start+0x1a8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_TIM_PWM_Start+0x208>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d115      	bne.n	80037dc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_TIM_PWM_Start+0x214>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d015      	beq.n	80037ee <HAL_TIM_PWM_Start+0x1e6>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d011      	beq.n	80037ee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e008      	b.n	80037ee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e000      	b.n	80037f0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40013400 	.word	0x40013400
 8003804:	40014000 	.word	0x40014000
 8003808:	40014400 	.word	0x40014400
 800380c:	40014800 	.word	0x40014800
 8003810:	40015000 	.word	0x40015000
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e049      	b.n	80038c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f841 	bl	80038ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fbb6 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start+0x1a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e023      	b.n	8003946 <HAL_TIM_IC_Start+0x62>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d104      	bne.n	800390e <HAL_TIM_IC_Start+0x2a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e01b      	b.n	8003946 <HAL_TIM_IC_Start+0x62>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d104      	bne.n	800391e <HAL_TIM_IC_Start+0x3a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e013      	b.n	8003946 <HAL_TIM_IC_Start+0x62>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d104      	bne.n	800392e <HAL_TIM_IC_Start+0x4a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392a:	b2db      	uxtb	r3, r3
 800392c:	e00b      	b.n	8003946 <HAL_TIM_IC_Start+0x62>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b10      	cmp	r3, #16
 8003932:	d104      	bne.n	800393e <HAL_TIM_IC_Start+0x5a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e003      	b.n	8003946 <HAL_TIM_IC_Start+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003944:	b2db      	uxtb	r3, r3
 8003946:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <HAL_TIM_IC_Start+0x74>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e013      	b.n	8003980 <HAL_TIM_IC_Start+0x9c>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b04      	cmp	r3, #4
 800395c:	d104      	bne.n	8003968 <HAL_TIM_IC_Start+0x84>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e00b      	b.n	8003980 <HAL_TIM_IC_Start+0x9c>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d104      	bne.n	8003978 <HAL_TIM_IC_Start+0x94>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e003      	b.n	8003980 <HAL_TIM_IC_Start+0x9c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800397e:	b2db      	uxtb	r3, r3
 8003980:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d102      	bne.n	800398e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003988:	7bbb      	ldrb	r3, [r7, #14]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e092      	b.n	8003ab8 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start+0xbe>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	e023      	b.n	80039ea <HAL_TIM_IC_Start+0x106>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_IC_Start+0xce>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	e01b      	b.n	80039ea <HAL_TIM_IC_Start+0x106>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_IC_Start+0xde>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	e013      	b.n	80039ea <HAL_TIM_IC_Start+0x106>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_IC_Start+0xee>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d0:	e00b      	b.n	80039ea <HAL_TIM_IC_Start+0x106>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_IC_Start+0xfe>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	e003      	b.n	80039ea <HAL_TIM_IC_Start+0x106>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_IC_Start+0x116>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f8:	e013      	b.n	8003a22 <HAL_TIM_IC_Start+0x13e>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_IC_Start+0x126>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_IC_Start+0x13e>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_IC_Start+0x136>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a18:	e003      	b.n	8003a22 <HAL_TIM_IC_Start+0x13e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 f832 	bl	8004a94 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <HAL_TIM_IC_Start+0x1dc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01d      	beq.n	8003a76 <HAL_TIM_IC_Start+0x192>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d018      	beq.n	8003a76 <HAL_TIM_IC_Start+0x192>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_TIM_IC_Start+0x1e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_TIM_IC_Start+0x192>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_TIM_IC_Start+0x1e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_TIM_IC_Start+0x192>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_TIM_IC_Start+0x1e8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_TIM_IC_Start+0x192>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_TIM_IC_Start+0x1ec>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_TIM_IC_Start+0x192>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_IC_Start+0x1f0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d115      	bne.n	8003aa2 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <HAL_TIM_IC_Start+0x1f4>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d015      	beq.n	8003ab4 <HAL_TIM_IC_Start+0x1d0>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d011      	beq.n	8003ab4 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	e008      	b.n	8003ab4 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40013400 	.word	0x40013400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40015000 	.word	0x40015000
 8003ad8:	00010007 	.word	0x00010007

08003adc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_IC_ConfigChannel+0x1e>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e088      	b.n	8003c0c <HAL_TIM_IC_ConfigChannel+0x130>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f000 fdfe 	bl	8004718 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 020c 	bic.w	r2, r2, #12
 8003b2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
 8003b3e:	e060      	b.n	8003c02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d11c      	bne.n	8003b80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f000 fe7c 	bl	8004852 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6999      	ldr	r1, [r3, #24]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	619a      	str	r2, [r3, #24]
 8003b7e:	e040      	b.n	8003c02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d11b      	bne.n	8003bbe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f000 fec9 	bl	800492c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 020c 	bic.w	r2, r2, #12
 8003ba8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69d9      	ldr	r1, [r3, #28]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	61da      	str	r2, [r3, #28]
 8003bbc:	e021      	b.n	8003c02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d11c      	bne.n	8003bfe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f000 fee6 	bl	80049a4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003be6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69d9      	ldr	r1, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	61da      	str	r2, [r3, #28]
 8003bfc:	e001      	b.n	8003c02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0ff      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b14      	cmp	r3, #20
 8003c3e:	f200 80f0 	bhi.w	8003e22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c9d 	.word	0x08003c9d
 8003c4c:	08003e23 	.word	0x08003e23
 8003c50:	08003e23 	.word	0x08003e23
 8003c54:	08003e23 	.word	0x08003e23
 8003c58:	08003cdd 	.word	0x08003cdd
 8003c5c:	08003e23 	.word	0x08003e23
 8003c60:	08003e23 	.word	0x08003e23
 8003c64:	08003e23 	.word	0x08003e23
 8003c68:	08003d1f 	.word	0x08003d1f
 8003c6c:	08003e23 	.word	0x08003e23
 8003c70:	08003e23 	.word	0x08003e23
 8003c74:	08003e23 	.word	0x08003e23
 8003c78:	08003d5f 	.word	0x08003d5f
 8003c7c:	08003e23 	.word	0x08003e23
 8003c80:	08003e23 	.word	0x08003e23
 8003c84:	08003e23 	.word	0x08003e23
 8003c88:	08003da1 	.word	0x08003da1
 8003c8c:	08003e23 	.word	0x08003e23
 8003c90:	08003e23 	.word	0x08003e23
 8003c94:	08003e23 	.word	0x08003e23
 8003c98:	08003de1 	.word	0x08003de1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fa32 	bl	800410c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
      break;
 8003cda:	e0a5      	b.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 faac 	bl	8004240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	021a      	lsls	r2, r3, #8
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	619a      	str	r2, [r3, #24]
      break;
 8003d1c:	e084      	b.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb1f 	bl	8004368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0208 	orr.w	r2, r2, #8
 8003d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0204 	bic.w	r2, r2, #4
 8003d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69d9      	ldr	r1, [r3, #28]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	61da      	str	r2, [r3, #28]
      break;
 8003d5c:	e064      	b.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fb91 	bl	800448c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	61da      	str	r2, [r3, #28]
      break;
 8003d9e:	e043      	b.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fbe0 	bl	800456c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dde:	e023      	b.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fc2a 	bl	8004640 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e20:	e002      	b.n	8003e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
      break;
 8003e26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_ConfigClockSource+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0b6      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x18a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d03e      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xd8>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	f200 8087 	bhi.w	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_TIM_ConfigClockSource+0x176>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d87f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d01a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xaa>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d87b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d050      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x11e>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d877      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d03c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xfe>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d873      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d058      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x13e>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d86f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d064      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15e>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15e>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d867      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15e>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15e>
 8003ee4:	e062      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 fdad 	bl	8004a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e04f      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f000 fd96 	bl	8004a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 fc54 	bl	80047f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	; 0x50
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fd63 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 fcb0 	bl	80048cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	; 0x60
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fd53 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 fc34 	bl	80047f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fd43 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 fd3a 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a42      	ldr	r2, [pc, #264]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d00f      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3d      	ldr	r2, [pc, #244]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a31      	ldr	r2, [pc, #196]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d01b      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d017      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2d      	ldr	r2, [pc, #180]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00f      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2c      	ldr	r2, [pc, #176]	; (8004100 <TIM_Base_SetConfig+0x130>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00b      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2b      	ldr	r2, [pc, #172]	; (8004104 <TIM_Base_SetConfig+0x134>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2a      	ldr	r2, [pc, #168]	; (8004108 <TIM_Base_SetConfig+0x138>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <TIM_Base_SetConfig+0x100>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00f      	beq.n	80040d0 <TIM_Base_SetConfig+0x100>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <TIM_Base_SetConfig+0x130>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_Base_SetConfig+0x100>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <TIM_Base_SetConfig+0x134>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0x100>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a11      	ldr	r2, [pc, #68]	; (8004108 <TIM_Base_SetConfig+0x138>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0x100>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40013400 	.word	0x40013400
 80040fc:	40015000 	.word	0x40015000
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 0302 	bic.w	r3, r3, #2
 8004158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a30      	ldr	r2, [pc, #192]	; (8004228 <TIM_OC1_SetConfig+0x11c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <TIM_OC1_SetConfig+0x88>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a2f      	ldr	r2, [pc, #188]	; (800422c <TIM_OC1_SetConfig+0x120>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00f      	beq.n	8004194 <TIM_OC1_SetConfig+0x88>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <TIM_OC1_SetConfig+0x124>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_OC1_SetConfig+0x88>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <TIM_OC1_SetConfig+0x128>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_OC1_SetConfig+0x88>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2c      	ldr	r2, [pc, #176]	; (8004238 <TIM_OC1_SetConfig+0x12c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_OC1_SetConfig+0x88>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2b      	ldr	r2, [pc, #172]	; (800423c <TIM_OC1_SetConfig+0x130>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10c      	bne.n	80041ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0308 	bic.w	r3, r3, #8
 800419a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 0304 	bic.w	r3, r3, #4
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <TIM_OC1_SetConfig+0x11c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_OC1_SetConfig+0xd2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1c      	ldr	r2, [pc, #112]	; (800422c <TIM_OC1_SetConfig+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_OC1_SetConfig+0xd2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <TIM_OC1_SetConfig+0x124>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_OC1_SetConfig+0xd2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <TIM_OC1_SetConfig+0x128>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_OC1_SetConfig+0xd2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <TIM_OC1_SetConfig+0x12c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_OC1_SetConfig+0xd2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <TIM_OC1_SetConfig+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d111      	bne.n	8004202 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40013400 	.word	0x40013400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	40015000 	.word	0x40015000

08004240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0210 	bic.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <TIM_OC2_SetConfig+0x110>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_OC2_SetConfig+0x74>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <TIM_OC2_SetConfig+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC2_SetConfig+0x74>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <TIM_OC2_SetConfig+0x118>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10d      	bne.n	80042d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <TIM_OC2_SetConfig+0x110>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <TIM_OC2_SetConfig+0xc0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <TIM_OC2_SetConfig+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_OC2_SetConfig+0xc0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a1e      	ldr	r2, [pc, #120]	; (800435c <TIM_OC2_SetConfig+0x11c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_OC2_SetConfig+0xc0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_OC2_SetConfig+0x120>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_OC2_SetConfig+0xc0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <TIM_OC2_SetConfig+0x124>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC2_SetConfig+0xc0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <TIM_OC2_SetConfig+0x118>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d113      	bne.n	8004328 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004306:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800430e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40015000 	.word	0x40015000
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <TIM_OC3_SetConfig+0x10c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_OC3_SetConfig+0x72>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2a      	ldr	r2, [pc, #168]	; (8004478 <TIM_OC3_SetConfig+0x110>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_OC3_SetConfig+0x72>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <TIM_OC3_SetConfig+0x114>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10d      	bne.n	80043f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <TIM_OC3_SetConfig+0x10c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_OC3_SetConfig+0xbe>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <TIM_OC3_SetConfig+0x110>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_OC3_SetConfig+0xbe>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <TIM_OC3_SetConfig+0x118>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_OC3_SetConfig+0xbe>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <TIM_OC3_SetConfig+0x11c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_OC3_SetConfig+0xbe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <TIM_OC3_SetConfig+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_OC3_SetConfig+0xbe>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a16      	ldr	r2, [pc, #88]	; (800447c <TIM_OC3_SetConfig+0x114>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d113      	bne.n	800444e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40013400 	.word	0x40013400
 800447c:	40015000 	.word	0x40015000
 8004480:	40014000 	.word	0x40014000
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800

0800448c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <TIM_OC4_SetConfig+0xc8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <TIM_OC4_SetConfig+0x8c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a19      	ldr	r2, [pc, #100]	; (8004558 <TIM_OC4_SetConfig+0xcc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00f      	beq.n	8004518 <TIM_OC4_SetConfig+0x8c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <TIM_OC4_SetConfig+0xd0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_OC4_SetConfig+0x8c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a17      	ldr	r2, [pc, #92]	; (8004560 <TIM_OC4_SetConfig+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_OC4_SetConfig+0x8c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a16      	ldr	r2, [pc, #88]	; (8004564 <TIM_OC4_SetConfig+0xd8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC4_SetConfig+0x8c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a15      	ldr	r2, [pc, #84]	; (8004568 <TIM_OC4_SetConfig+0xdc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d109      	bne.n	800452c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40013400 	.word	0x40013400
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800
 8004568:	40015000 	.word	0x40015000

0800456c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <TIM_OC5_SetConfig+0xbc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <TIM_OC5_SetConfig+0xc0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <TIM_OC5_SetConfig+0xc4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <TIM_OC5_SetConfig+0xc8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <TIM_OC5_SetConfig+0xcc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC5_SetConfig+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a14      	ldr	r2, [pc, #80]	; (800463c <TIM_OC5_SetConfig+0xd0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d109      	bne.n	8004602 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800
 800463c:	40015000 	.word	0x40015000

08004640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	051b      	lsls	r3, r3, #20
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <TIM_OC6_SetConfig+0xc0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a19      	ldr	r2, [pc, #100]	; (8004704 <TIM_OC6_SetConfig+0xc4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <TIM_OC6_SetConfig+0xc8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <TIM_OC6_SetConfig+0xcc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a16      	ldr	r2, [pc, #88]	; (8004710 <TIM_OC6_SetConfig+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC6_SetConfig+0x84>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a15      	ldr	r2, [pc, #84]	; (8004714 <TIM_OC6_SetConfig+0xd4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d109      	bne.n	80046d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	029b      	lsls	r3, r3, #10
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800
 8004714:	40015000 	.word	0x40015000

08004718 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a26      	ldr	r2, [pc, #152]	; (80047dc <TIM_TI1_SetConfig+0xc4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d017      	beq.n	8004776 <TIM_TI1_SetConfig+0x5e>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474c:	d013      	beq.n	8004776 <TIM_TI1_SetConfig+0x5e>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <TIM_TI1_SetConfig+0xc8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_TI1_SetConfig+0x5e>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <TIM_TI1_SetConfig+0xcc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_TI1_SetConfig+0x5e>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <TIM_TI1_SetConfig+0xd0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_TI1_SetConfig+0x5e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <TIM_TI1_SetConfig+0xd4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_TI1_SetConfig+0x5e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <TIM_TI1_SetConfig+0xd8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <TIM_TI1_SetConfig+0x62>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <TIM_TI1_SetConfig+0x64>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e003      	b.n	800479a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 030a 	bic.w	r3, r3, #10
 80047b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 030a 	and.w	r3, r3, #10
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40015000 	.word	0x40015000

080047f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 030a 	bic.w	r3, r3, #10
 8004830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004852:	b480      	push	{r7}
 8004854:	b087      	sub	sp, #28
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0210 	bic.w	r2, r3, #16
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	b29b      	uxth	r3, r3
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f023 0210 	bic.w	r2, r3, #16
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	031b      	lsls	r3, r3, #12
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004908:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	621a      	str	r2, [r3, #32]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	b2db      	uxtb	r3, r3
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800497c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	031b      	lsls	r3, r3, #12
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	031b      	lsls	r3, r3, #12
 80049fc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	021a      	lsls	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e06d      	b.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a30      	ldr	r2, [pc, #192]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2d      	ldr	r2, [pc, #180]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d018      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40015000 	.word	0x40015000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40014000 	.word	0x40014000

08004bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e040      	b.n	8004c8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fa5a 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	; 0x24
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fc5e 	bl	80054f8 <UART_SetConfig>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e022      	b.n	8004c8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fe26 	bl	80058a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fead 	bl	80059e4 <UART_CheckIdleState>
 8004c8a:	4603      	mov	r3, r0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d178      	bne.n	8004d9e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_UART_Transmit+0x24>
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e071      	b.n	8004da0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2221      	movs	r2, #33	; 0x21
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cca:	f7fc fbfb 	bl	80014c4 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	d108      	bne.n	8004cfc <HAL_UART_Transmit+0x68>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e003      	b.n	8004d04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d04:	e030      	b.n	8004d68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2180      	movs	r1, #128	; 0x80
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 ff0f 	bl	8005b34 <UART_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e03c      	b.n	8004da0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	3302      	adds	r3, #2
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e008      	b.n	8004d56 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	3301      	adds	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1c8      	bne.n	8004d06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2140      	movs	r1, #64	; 0x40
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fed8 	bl	8005b34 <UART_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e005      	b.n	8004da0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b08b      	sub	sp, #44	; 0x2c
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d147      	bne.n	8004e4e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_UART_Transmit_IT+0x22>
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e040      	b.n	8004e50 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2221      	movs	r2, #33	; 0x21
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e00:	d107      	bne.n	8004e12 <HAL_UART_Transmit_IT+0x6a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <HAL_UART_Transmit_IT+0xb4>)
 8004e0e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004e10:	e002      	b.n	8004e18 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <HAL_UART_Transmit_IT+0xb8>)
 8004e16:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	613b      	str	r3, [r7, #16]
   return(result);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	69f9      	ldr	r1, [r7, #28]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	372c      	adds	r7, #44	; 0x2c
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	08005f3d 	.word	0x08005f3d
 8004e60:	08005e85 	.word	0x08005e85

08004e64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d132      	bne.n	8004ee2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_UART_Receive_IT+0x24>
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e02b      	b.n	8004ee4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d018      	beq.n	8004ed2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fe93 	bl	8005c04 <UART_Start_Receive_IT>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	e000      	b.n	8004ee4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004ee2:	2302      	movs	r3, #2
  }
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	; 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b0ba      	sub	sp, #232	; 0xe8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f16:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d115      	bne.n	8004f54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00f      	beq.n	8004f54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 82ab 	beq.w	80054a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
      }
      return;
 8004f52:	e2a5      	b.n	80054a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8117 	beq.w	800518c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f6e:	4b85      	ldr	r3, [pc, #532]	; (8005184 <HAL_UART_IRQHandler+0x298>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 810a 	beq.w	800518c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xbc>
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2201      	movs	r2, #1
 8004f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d011      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xec>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fce:	f043 0204 	orr.w	r2, r3, #4
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d011      	beq.n	8005008 <HAL_UART_IRQHandler+0x11c>
 8004fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00b      	beq.n	8005008 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffe:	f043 0202 	orr.w	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d017      	beq.n	8005044 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005024:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2208      	movs	r2, #8
 8005032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503a:	f043 0208 	orr.w	r2, r3, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800504c:	2b00      	cmp	r3, #0
 800504e:	d012      	beq.n	8005076 <HAL_UART_IRQHandler+0x18a>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00c      	beq.n	8005076 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8211 	beq.w	80054a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800508e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d04f      	beq.n	800516e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fe5e 	bl	8005d90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d141      	bne.n	8005166 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800510e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800511a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1d9      	bne.n	80050e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005132:	2b00      	cmp	r3, #0
 8005134:	d013      	beq.n	800515e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <HAL_UART_IRQHandler+0x29c>)
 800513c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005142:	4618      	mov	r0, r3
 8005144:	f7fc fb38 	bl	80017b8 <HAL_DMA_Abort_IT>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d017      	beq.n	800517e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005158:	4610      	mov	r0, r2
 800515a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	e00f      	b.n	800517e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9b4 	bl	80054cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	e00b      	b.n	800517e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f9b0 	bl	80054cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	e007      	b.n	800517e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9ac 	bl	80054cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800517c:	e192      	b.n	80054a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517e:	bf00      	nop
    return;
 8005180:	e190      	b.n	80054a4 <HAL_UART_IRQHandler+0x5b8>
 8005182:	bf00      	nop
 8005184:	04000120 	.word	0x04000120
 8005188:	08005e59 	.word	0x08005e59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 814b 	bne.w	800542c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8144 	beq.w	800542c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 813d 	beq.w	800542c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2210      	movs	r2, #16
 80051b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	f040 80b5 	bne.w	8005334 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8164 	beq.w	80054a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ea:	429a      	cmp	r2, r3
 80051ec:	f080 815c 	bcs.w	80054a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b20      	cmp	r3, #32
 8005202:	f000 8086 	beq.w	8005312 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800521a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005234:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800523c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1da      	bne.n	8005206 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3308      	adds	r3, #8
 8005256:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005274:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005278:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800527c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e1      	bne.n	8005250 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800529c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800529e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e3      	bne.n	800528c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e4      	bne.n	80052d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530c:	4618      	mov	r0, r3
 800530e:	f7fc fa1a 	bl	8001746 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005324:	b29b      	uxth	r3, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	b29b      	uxth	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f8d7 	bl	80054e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005332:	e0b9      	b.n	80054a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80ab 	beq.w	80054ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80a6 	beq.w	80054ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005382:	647b      	str	r3, [r7, #68]	; 0x44
 8005384:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e4      	bne.n	8005360 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3308      	adds	r3, #8
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	623b      	str	r3, [r7, #32]
   return(result);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053ba:	633a      	str	r2, [r7, #48]	; 0x30
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e3      	bne.n	8005396 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0310 	bic.w	r3, r3, #16
 80053f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	69b9      	ldr	r1, [r7, #24]
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	617b      	str	r3, [r7, #20]
   return(result);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e4      	bne.n	80053e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800541e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f85b 	bl	80054e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800542a:	e03f      	b.n	80054ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800542c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <HAL_UART_IRQHandler+0x56a>
 8005438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800544c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 ffa6 	bl	80063a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005454:	e02d      	b.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00e      	beq.n	8005480 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01c      	beq.n	80054b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
    }
    return;
 800547e:	e017      	b.n	80054b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d012      	beq.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fdaf 	bl	8005ffc <UART_EndTransmit_IT>
    return;
 800549e:	e008      	b.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054a0:	bf00      	nop
 80054a2:	e006      	b.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054a4:	bf00      	nop
 80054a6:	e004      	b.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054b0:	bf00      	nop
  }

}
 80054b2:	37e8      	adds	r7, #232	; 0xe8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b92      	ldr	r3, [pc, #584]	; (800576c <UART_SetConfig+0x274>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	6979      	ldr	r1, [r7, #20]
 800552c:	430b      	orrs	r3, r1
 800552e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	430a      	orrs	r2, r1
 8005568:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a80      	ldr	r2, [pc, #512]	; (8005770 <UART_SetConfig+0x278>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d120      	bne.n	80055b6 <UART_SetConfig+0xbe>
 8005574:	4b7f      	ldr	r3, [pc, #508]	; (8005774 <UART_SetConfig+0x27c>)
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b03      	cmp	r3, #3
 800557e:	d817      	bhi.n	80055b0 <UART_SetConfig+0xb8>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x90>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	08005599 	.word	0x08005599
 800558c:	080055a5 	.word	0x080055a5
 8005590:	080055ab 	.word	0x080055ab
 8005594:	0800559f 	.word	0x0800559f
 8005598:	2301      	movs	r3, #1
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e0b5      	b.n	800570a <UART_SetConfig+0x212>
 800559e:	2302      	movs	r3, #2
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e0b2      	b.n	800570a <UART_SetConfig+0x212>
 80055a4:	2304      	movs	r3, #4
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e0af      	b.n	800570a <UART_SetConfig+0x212>
 80055aa:	2308      	movs	r3, #8
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e0ac      	b.n	800570a <UART_SetConfig+0x212>
 80055b0:	2310      	movs	r3, #16
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e0a9      	b.n	800570a <UART_SetConfig+0x212>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6f      	ldr	r2, [pc, #444]	; (8005778 <UART_SetConfig+0x280>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d124      	bne.n	800560a <UART_SetConfig+0x112>
 80055c0:	4b6c      	ldr	r3, [pc, #432]	; (8005774 <UART_SetConfig+0x27c>)
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055cc:	d011      	beq.n	80055f2 <UART_SetConfig+0xfa>
 80055ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055d2:	d817      	bhi.n	8005604 <UART_SetConfig+0x10c>
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d8:	d011      	beq.n	80055fe <UART_SetConfig+0x106>
 80055da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055de:	d811      	bhi.n	8005604 <UART_SetConfig+0x10c>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <UART_SetConfig+0xf4>
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d006      	beq.n	80055f8 <UART_SetConfig+0x100>
 80055ea:	e00b      	b.n	8005604 <UART_SetConfig+0x10c>
 80055ec:	2300      	movs	r3, #0
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e08b      	b.n	800570a <UART_SetConfig+0x212>
 80055f2:	2302      	movs	r3, #2
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e088      	b.n	800570a <UART_SetConfig+0x212>
 80055f8:	2304      	movs	r3, #4
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e085      	b.n	800570a <UART_SetConfig+0x212>
 80055fe:	2308      	movs	r3, #8
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e082      	b.n	800570a <UART_SetConfig+0x212>
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e07f      	b.n	800570a <UART_SetConfig+0x212>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5b      	ldr	r2, [pc, #364]	; (800577c <UART_SetConfig+0x284>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d124      	bne.n	800565e <UART_SetConfig+0x166>
 8005614:	4b57      	ldr	r3, [pc, #348]	; (8005774 <UART_SetConfig+0x27c>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800561c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005620:	d011      	beq.n	8005646 <UART_SetConfig+0x14e>
 8005622:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005626:	d817      	bhi.n	8005658 <UART_SetConfig+0x160>
 8005628:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800562c:	d011      	beq.n	8005652 <UART_SetConfig+0x15a>
 800562e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005632:	d811      	bhi.n	8005658 <UART_SetConfig+0x160>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <UART_SetConfig+0x148>
 8005638:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800563c:	d006      	beq.n	800564c <UART_SetConfig+0x154>
 800563e:	e00b      	b.n	8005658 <UART_SetConfig+0x160>
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e061      	b.n	800570a <UART_SetConfig+0x212>
 8005646:	2302      	movs	r3, #2
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e05e      	b.n	800570a <UART_SetConfig+0x212>
 800564c:	2304      	movs	r3, #4
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e05b      	b.n	800570a <UART_SetConfig+0x212>
 8005652:	2308      	movs	r3, #8
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e058      	b.n	800570a <UART_SetConfig+0x212>
 8005658:	2310      	movs	r3, #16
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e055      	b.n	800570a <UART_SetConfig+0x212>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a47      	ldr	r2, [pc, #284]	; (8005780 <UART_SetConfig+0x288>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d124      	bne.n	80056b2 <UART_SetConfig+0x1ba>
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <UART_SetConfig+0x27c>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005674:	d011      	beq.n	800569a <UART_SetConfig+0x1a2>
 8005676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800567a:	d817      	bhi.n	80056ac <UART_SetConfig+0x1b4>
 800567c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005680:	d011      	beq.n	80056a6 <UART_SetConfig+0x1ae>
 8005682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005686:	d811      	bhi.n	80056ac <UART_SetConfig+0x1b4>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <UART_SetConfig+0x19c>
 800568c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005690:	d006      	beq.n	80056a0 <UART_SetConfig+0x1a8>
 8005692:	e00b      	b.n	80056ac <UART_SetConfig+0x1b4>
 8005694:	2300      	movs	r3, #0
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e037      	b.n	800570a <UART_SetConfig+0x212>
 800569a:	2302      	movs	r3, #2
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e034      	b.n	800570a <UART_SetConfig+0x212>
 80056a0:	2304      	movs	r3, #4
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e031      	b.n	800570a <UART_SetConfig+0x212>
 80056a6:	2308      	movs	r3, #8
 80056a8:	77fb      	strb	r3, [r7, #31]
 80056aa:	e02e      	b.n	800570a <UART_SetConfig+0x212>
 80056ac:	2310      	movs	r3, #16
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e02b      	b.n	800570a <UART_SetConfig+0x212>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a33      	ldr	r2, [pc, #204]	; (8005784 <UART_SetConfig+0x28c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d124      	bne.n	8005706 <UART_SetConfig+0x20e>
 80056bc:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <UART_SetConfig+0x27c>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80056c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056c8:	d011      	beq.n	80056ee <UART_SetConfig+0x1f6>
 80056ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ce:	d817      	bhi.n	8005700 <UART_SetConfig+0x208>
 80056d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056d4:	d011      	beq.n	80056fa <UART_SetConfig+0x202>
 80056d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056da:	d811      	bhi.n	8005700 <UART_SetConfig+0x208>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <UART_SetConfig+0x1f0>
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e4:	d006      	beq.n	80056f4 <UART_SetConfig+0x1fc>
 80056e6:	e00b      	b.n	8005700 <UART_SetConfig+0x208>
 80056e8:	2300      	movs	r3, #0
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e00d      	b.n	800570a <UART_SetConfig+0x212>
 80056ee:	2302      	movs	r3, #2
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e00a      	b.n	800570a <UART_SetConfig+0x212>
 80056f4:	2304      	movs	r3, #4
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e007      	b.n	800570a <UART_SetConfig+0x212>
 80056fa:	2308      	movs	r3, #8
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e004      	b.n	800570a <UART_SetConfig+0x212>
 8005700:	2310      	movs	r3, #16
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e001      	b.n	800570a <UART_SetConfig+0x212>
 8005706:	2310      	movs	r3, #16
 8005708:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005712:	d16b      	bne.n	80057ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005714:	7ffb      	ldrb	r3, [r7, #31]
 8005716:	2b08      	cmp	r3, #8
 8005718:	d838      	bhi.n	800578c <UART_SetConfig+0x294>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x228>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	0800578d 	.word	0x0800578d
 8005730:	0800575b 	.word	0x0800575b
 8005734:	0800578d 	.word	0x0800578d
 8005738:	0800578d 	.word	0x0800578d
 800573c:	0800578d 	.word	0x0800578d
 8005740:	08005763 	.word	0x08005763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fd fc46 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 8005748:	61b8      	str	r0, [r7, #24]
        break;
 800574a:	e024      	b.n	8005796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fd fc64 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8005750:	61b8      	str	r0, [r7, #24]
        break;
 8005752:	e020      	b.n	8005796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <UART_SetConfig+0x290>)
 8005756:	61bb      	str	r3, [r7, #24]
        break;
 8005758:	e01d      	b.n	8005796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575a:	f7fd fbc5 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 800575e:	61b8      	str	r0, [r7, #24]
        break;
 8005760:	e019      	b.n	8005796 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005766:	61bb      	str	r3, [r7, #24]
        break;
 8005768:	e015      	b.n	8005796 <UART_SetConfig+0x29e>
 800576a:	bf00      	nop
 800576c:	efff69f3 	.word	0xefff69f3
 8005770:	40013800 	.word	0x40013800
 8005774:	40021000 	.word	0x40021000
 8005778:	40004400 	.word	0x40004400
 800577c:	40004800 	.word	0x40004800
 8005780:	40004c00 	.word	0x40004c00
 8005784:	40005000 	.word	0x40005000
 8005788:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	77bb      	strb	r3, [r7, #30]
        break;
 8005794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d073      	beq.n	8005884 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	005a      	lsls	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	441a      	add	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b0f      	cmp	r3, #15
 80057b6:	d916      	bls.n	80057e6 <UART_SetConfig+0x2ee>
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057be:	d212      	bcs.n	80057e6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f023 030f 	bic.w	r3, r3, #15
 80057c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	89fb      	ldrh	r3, [r7, #14]
 80057d8:	4313      	orrs	r3, r2
 80057da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	89fa      	ldrh	r2, [r7, #14]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e04e      	b.n	8005884 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	77bb      	strb	r3, [r7, #30]
 80057ea:	e04b      	b.n	8005884 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d827      	bhi.n	8005842 <UART_SetConfig+0x34a>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x300>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005843 	.word	0x08005843
 8005808:	08005833 	.word	0x08005833
 800580c:	08005843 	.word	0x08005843
 8005810:	08005843 	.word	0x08005843
 8005814:	08005843 	.word	0x08005843
 8005818:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7fd fbda 	bl	8002fd4 <HAL_RCC_GetPCLK1Freq>
 8005820:	61b8      	str	r0, [r7, #24]
        break;
 8005822:	e013      	b.n	800584c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fd fbf8 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8005828:	61b8      	str	r0, [r7, #24]
        break;
 800582a:	e00f      	b.n	800584c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <UART_SetConfig+0x3a4>)
 800582e:	61bb      	str	r3, [r7, #24]
        break;
 8005830:	e00c      	b.n	800584c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fd fb59 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8005836:	61b8      	str	r0, [r7, #24]
        break;
 8005838:	e008      	b.n	800584c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	61bb      	str	r3, [r7, #24]
        break;
 8005840:	e004      	b.n	800584c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	77bb      	strb	r3, [r7, #30]
        break;
 800584a:	bf00      	nop
    }

    if (pclk != 0U)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d018      	beq.n	8005884 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	085a      	lsrs	r2, r3, #1
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	441a      	add	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b0f      	cmp	r3, #15
 800586a:	d909      	bls.n	8005880 <UART_SetConfig+0x388>
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005872:	d205      	bcs.n	8005880 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e001      	b.n	8005884 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005890:	7fbb      	ldrb	r3, [r7, #30]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	007a1200 	.word	0x007a1200

080058a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01a      	beq.n	80059b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599e:	d10a      	bne.n	80059b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b098      	sub	sp, #96	; 0x60
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f4:	f7fb fd66 	bl	80014c4 <HAL_GetTick>
 80059f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d12e      	bne.n	8005a66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f88c 	bl	8005b34 <UART_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d021      	beq.n	8005a66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a36:	653b      	str	r3, [r7, #80]	; 0x50
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	647b      	str	r3, [r7, #68]	; 0x44
 8005a42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e6      	bne.n	8005a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e062      	b.n	8005b2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d149      	bne.n	8005b08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f856 	bl	8005b34 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d03c      	beq.n	8005b08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	633b      	str	r3, [r7, #48]	; 0x30
 8005aae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ae0:	61fa      	str	r2, [r7, #28]
 8005ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	617b      	str	r3, [r7, #20]
   return(result);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e5      	bne.n	8005ac0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e011      	b.n	8005b2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3758      	adds	r7, #88	; 0x58
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	4613      	mov	r3, r2
 8005b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b44:	e049      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d045      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4e:	f7fb fcb9 	bl	80014c4 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d302      	bcc.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e048      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d031      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d110      	bne.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2208      	movs	r2, #8
 8005b8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f8ff 	bl	8005d90 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2208      	movs	r2, #8
 8005b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e029      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d111      	bne.n	8005bda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f8e5 	bl	8005d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e00f      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d0a6      	beq.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b097      	sub	sp, #92	; 0x5c
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d10e      	bne.n	8005c56 <UART_Start_Receive_IT+0x52>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <UART_Start_Receive_IT+0x48>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c4a:	e02d      	b.n	8005ca8 <UART_Start_Receive_IT+0xa4>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	22ff      	movs	r2, #255	; 0xff
 8005c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c54:	e028      	b.n	8005ca8 <UART_Start_Receive_IT+0xa4>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10d      	bne.n	8005c7a <UART_Start_Receive_IT+0x76>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <UART_Start_Receive_IT+0x6c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c6e:	e01b      	b.n	8005ca8 <UART_Start_Receive_IT+0xa4>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	227f      	movs	r2, #127	; 0x7f
 8005c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c78:	e016      	b.n	8005ca8 <UART_Start_Receive_IT+0xa4>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c82:	d10d      	bne.n	8005ca0 <UART_Start_Receive_IT+0x9c>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <UART_Start_Receive_IT+0x92>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	227f      	movs	r2, #127	; 0x7f
 8005c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c94:	e008      	b.n	8005ca8 <UART_Start_Receive_IT+0xa4>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	223f      	movs	r2, #63	; 0x3f
 8005c9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c9e:	e003      	b.n	8005ca8 <UART_Start_Receive_IT+0xa4>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2222      	movs	r2, #34	; 0x22
 8005cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cd8:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	d107      	bne.n	8005d06 <UART_Start_Receive_IT+0x102>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <UART_Start_Receive_IT+0x184>)
 8005d02:	669a      	str	r2, [r3, #104]	; 0x68
 8005d04:	e002      	b.n	8005d0c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <UART_Start_Receive_IT+0x188>)
 8005d0a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d019      	beq.n	8005d48 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e6      	bne.n	8005d14 <UART_Start_Receive_IT+0x110>
 8005d46:	e018      	b.n	8005d7a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f043 0320 	orr.w	r3, r3, #32
 8005d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d66:	623b      	str	r3, [r7, #32]
 8005d68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	69f9      	ldr	r1, [r7, #28]
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e6      	bne.n	8005d48 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	375c      	adds	r7, #92	; 0x5c
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	080061f9 	.word	0x080061f9
 8005d8c:	08006051 	.word	0x08006051

08005d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b095      	sub	sp, #84	; 0x54
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db6:	643b      	str	r3, [r7, #64]	; 0x40
 8005db8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e6      	bne.n	8005d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3308      	adds	r3, #8
 8005de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e5      	bne.n	8005dca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d118      	bne.n	8005e38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f023 0310 	bic.w	r3, r3, #16
 8005e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6979      	ldr	r1, [r7, #20]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	613b      	str	r3, [r7, #16]
   return(result);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e4c:	bf00      	nop
 8005e4e:	3754      	adds	r7, #84	; 0x54
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fb28 	bl	80054cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b08f      	sub	sp, #60	; 0x3c
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e90:	2b21      	cmp	r3, #33	; 0x21
 8005e92:	d14d      	bne.n	8005f30 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d132      	bne.n	8005f06 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e6      	bne.n	8005ea0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6979      	ldr	r1, [r7, #20]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	613b      	str	r3, [r7, #16]
   return(result);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e6      	bne.n	8005ed2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005f04:	e014      	b.n	8005f30 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	b292      	uxth	r2, r2
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005f30:	bf00      	nop
 8005f32:	373c      	adds	r7, #60	; 0x3c
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b091      	sub	sp, #68	; 0x44
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f48:	2b21      	cmp	r3, #33	; 0x21
 8005f4a:	d151      	bne.n	8005ff0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d132      	bne.n	8005fbe <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	623b      	str	r3, [r7, #32]
   return(result);
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
 8005f78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e6      	bne.n	8005f58 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	69b9      	ldr	r1, [r7, #24]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005fbc:	e018      	b.n	8005ff0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005ff0:	bf00      	nop
 8005ff2:	3744      	adds	r7, #68	; 0x44
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60bb      	str	r3, [r7, #8]
   return(result);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6979      	ldr	r1, [r7, #20]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	613b      	str	r3, [r7, #16]
   return(result);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e6      	bne.n	8006004 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fa38 	bl	80054b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006048:	bf00      	nop
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b09c      	sub	sp, #112	; 0x70
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800605e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006068:	2b22      	cmp	r3, #34	; 0x22
 800606a:	f040 80b9 	bne.w	80061e0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006074:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006078:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800607c:	b2d9      	uxtb	r1, r3
 800607e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006082:	b2da      	uxtb	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	400a      	ands	r2, r1
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 809c 	bne.w	80061f0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e6      	bne.n	80060b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	667b      	str	r3, [r7, #100]	; 0x64
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800610a:	647a      	str	r2, [r7, #68]	; 0x44
 800610c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e5      	bne.n	80060ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d018      	beq.n	8006172 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	623b      	str	r3, [r7, #32]
   return(result);
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006154:	663b      	str	r3, [r7, #96]	; 0x60
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
 8006160:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e6      	bne.n	8006140 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006176:	2b01      	cmp	r3, #1
 8006178:	d12e      	bne.n	80061d8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	60fb      	str	r3, [r7, #12]
   return(result);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 0310 	bic.w	r3, r3, #16
 8006194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	617b      	str	r3, [r7, #20]
   return(result);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e6      	bne.n	8006180 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d103      	bne.n	80061c8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2210      	movs	r2, #16
 80061c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff f985 	bl	80054e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061d6:	e00b      	b.n	80061f0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fa fced 	bl	8000bb8 <HAL_UART_RxCpltCallback>
}
 80061de:	e007      	b.n	80061f0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	619a      	str	r2, [r3, #24]
}
 80061f0:	bf00      	nop
 80061f2:	3770      	adds	r7, #112	; 0x70
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b09c      	sub	sp, #112	; 0x70
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006206:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006210:	2b22      	cmp	r3, #34	; 0x22
 8006212:	f040 80b9 	bne.w	8006388 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800621c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006226:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800622a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800622e:	4013      	ands	r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006234:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	1c9a      	adds	r2, r3, #2
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 809c 	bne.w	8006398 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800626e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006274:	667b      	str	r3, [r7, #100]	; 0x64
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627e:	657b      	str	r3, [r7, #84]	; 0x54
 8006280:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800628c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e6      	bne.n	8006260 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	663b      	str	r3, [r7, #96]	; 0x60
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062b2:	643a      	str	r2, [r7, #64]	; 0x40
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d018      	beq.n	800631a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006308:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631e:	2b01      	cmp	r3, #1
 8006320:	d12e      	bne.n	8006380 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	60bb      	str	r3, [r7, #8]
   return(result);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f023 0310 	bic.w	r3, r3, #16
 800633c:	65bb      	str	r3, [r7, #88]	; 0x58
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6979      	ldr	r1, [r7, #20]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	613b      	str	r3, [r7, #16]
   return(result);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e6      	bne.n	8006328 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b10      	cmp	r3, #16
 8006366:	d103      	bne.n	8006370 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2210      	movs	r2, #16
 800636e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff f8b1 	bl	80054e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800637e:	e00b      	b.n	8006398 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7fa fc19 	bl	8000bb8 <HAL_UART_RxCpltCallback>
}
 8006386:	e007      	b.n	8006398 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0208 	orr.w	r2, r2, #8
 8006396:	619a      	str	r2, [r3, #24]
}
 8006398:	bf00      	nop
 800639a:	3770      	adds	r7, #112	; 0x70
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <__errno>:
 80063b4:	4b01      	ldr	r3, [pc, #4]	; (80063bc <__errno+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	2000000c 	.word	0x2000000c

080063c0 <__libc_init_array>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4d0d      	ldr	r5, [pc, #52]	; (80063f8 <__libc_init_array+0x38>)
 80063c4:	4c0d      	ldr	r4, [pc, #52]	; (80063fc <__libc_init_array+0x3c>)
 80063c6:	1b64      	subs	r4, r4, r5
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	2600      	movs	r6, #0
 80063cc:	42a6      	cmp	r6, r4
 80063ce:	d109      	bne.n	80063e4 <__libc_init_array+0x24>
 80063d0:	4d0b      	ldr	r5, [pc, #44]	; (8006400 <__libc_init_array+0x40>)
 80063d2:	4c0c      	ldr	r4, [pc, #48]	; (8006404 <__libc_init_array+0x44>)
 80063d4:	f002 ff04 	bl	80091e0 <_init>
 80063d8:	1b64      	subs	r4, r4, r5
 80063da:	10a4      	asrs	r4, r4, #2
 80063dc:	2600      	movs	r6, #0
 80063de:	42a6      	cmp	r6, r4
 80063e0:	d105      	bne.n	80063ee <__libc_init_array+0x2e>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e8:	4798      	blx	r3
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7ee      	b.n	80063cc <__libc_init_array+0xc>
 80063ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f2:	4798      	blx	r3
 80063f4:	3601      	adds	r6, #1
 80063f6:	e7f2      	b.n	80063de <__libc_init_array+0x1e>
 80063f8:	08009624 	.word	0x08009624
 80063fc:	08009624 	.word	0x08009624
 8006400:	08009624 	.word	0x08009624
 8006404:	08009628 	.word	0x08009628

08006408 <memset>:
 8006408:	4402      	add	r2, r0
 800640a:	4603      	mov	r3, r0
 800640c:	4293      	cmp	r3, r2
 800640e:	d100      	bne.n	8006412 <memset+0xa>
 8006410:	4770      	bx	lr
 8006412:	f803 1b01 	strb.w	r1, [r3], #1
 8006416:	e7f9      	b.n	800640c <memset+0x4>

08006418 <__cvt>:
 8006418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	ec55 4b10 	vmov	r4, r5, d0
 8006420:	2d00      	cmp	r5, #0
 8006422:	460e      	mov	r6, r1
 8006424:	4619      	mov	r1, r3
 8006426:	462b      	mov	r3, r5
 8006428:	bfbb      	ittet	lt
 800642a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800642e:	461d      	movlt	r5, r3
 8006430:	2300      	movge	r3, #0
 8006432:	232d      	movlt	r3, #45	; 0x2d
 8006434:	700b      	strb	r3, [r1, #0]
 8006436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800643c:	4691      	mov	r9, r2
 800643e:	f023 0820 	bic.w	r8, r3, #32
 8006442:	bfbc      	itt	lt
 8006444:	4622      	movlt	r2, r4
 8006446:	4614      	movlt	r4, r2
 8006448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800644c:	d005      	beq.n	800645a <__cvt+0x42>
 800644e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006452:	d100      	bne.n	8006456 <__cvt+0x3e>
 8006454:	3601      	adds	r6, #1
 8006456:	2102      	movs	r1, #2
 8006458:	e000      	b.n	800645c <__cvt+0x44>
 800645a:	2103      	movs	r1, #3
 800645c:	ab03      	add	r3, sp, #12
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	ab02      	add	r3, sp, #8
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	ec45 4b10 	vmov	d0, r4, r5
 8006468:	4653      	mov	r3, sl
 800646a:	4632      	mov	r2, r6
 800646c:	f000 fcec 	bl	8006e48 <_dtoa_r>
 8006470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006474:	4607      	mov	r7, r0
 8006476:	d102      	bne.n	800647e <__cvt+0x66>
 8006478:	f019 0f01 	tst.w	r9, #1
 800647c:	d022      	beq.n	80064c4 <__cvt+0xac>
 800647e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006482:	eb07 0906 	add.w	r9, r7, r6
 8006486:	d110      	bne.n	80064aa <__cvt+0x92>
 8006488:	783b      	ldrb	r3, [r7, #0]
 800648a:	2b30      	cmp	r3, #48	; 0x30
 800648c:	d10a      	bne.n	80064a4 <__cvt+0x8c>
 800648e:	2200      	movs	r2, #0
 8006490:	2300      	movs	r3, #0
 8006492:	4620      	mov	r0, r4
 8006494:	4629      	mov	r1, r5
 8006496:	f7fa fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800649a:	b918      	cbnz	r0, 80064a4 <__cvt+0x8c>
 800649c:	f1c6 0601 	rsb	r6, r6, #1
 80064a0:	f8ca 6000 	str.w	r6, [sl]
 80064a4:	f8da 3000 	ldr.w	r3, [sl]
 80064a8:	4499      	add	r9, r3
 80064aa:	2200      	movs	r2, #0
 80064ac:	2300      	movs	r3, #0
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7fa fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80064b6:	b108      	cbz	r0, 80064bc <__cvt+0xa4>
 80064b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80064bc:	2230      	movs	r2, #48	; 0x30
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	454b      	cmp	r3, r9
 80064c2:	d307      	bcc.n	80064d4 <__cvt+0xbc>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c8:	1bdb      	subs	r3, r3, r7
 80064ca:	4638      	mov	r0, r7
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	b004      	add	sp, #16
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	1c59      	adds	r1, r3, #1
 80064d6:	9103      	str	r1, [sp, #12]
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e7f0      	b.n	80064be <__cvt+0xa6>

080064dc <__exponent>:
 80064dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064de:	4603      	mov	r3, r0
 80064e0:	2900      	cmp	r1, #0
 80064e2:	bfb8      	it	lt
 80064e4:	4249      	neglt	r1, r1
 80064e6:	f803 2b02 	strb.w	r2, [r3], #2
 80064ea:	bfb4      	ite	lt
 80064ec:	222d      	movlt	r2, #45	; 0x2d
 80064ee:	222b      	movge	r2, #43	; 0x2b
 80064f0:	2909      	cmp	r1, #9
 80064f2:	7042      	strb	r2, [r0, #1]
 80064f4:	dd2a      	ble.n	800654c <__exponent+0x70>
 80064f6:	f10d 0407 	add.w	r4, sp, #7
 80064fa:	46a4      	mov	ip, r4
 80064fc:	270a      	movs	r7, #10
 80064fe:	46a6      	mov	lr, r4
 8006500:	460a      	mov	r2, r1
 8006502:	fb91 f6f7 	sdiv	r6, r1, r7
 8006506:	fb07 1516 	mls	r5, r7, r6, r1
 800650a:	3530      	adds	r5, #48	; 0x30
 800650c:	2a63      	cmp	r2, #99	; 0x63
 800650e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006512:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006516:	4631      	mov	r1, r6
 8006518:	dcf1      	bgt.n	80064fe <__exponent+0x22>
 800651a:	3130      	adds	r1, #48	; 0x30
 800651c:	f1ae 0502 	sub.w	r5, lr, #2
 8006520:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006524:	1c44      	adds	r4, r0, #1
 8006526:	4629      	mov	r1, r5
 8006528:	4561      	cmp	r1, ip
 800652a:	d30a      	bcc.n	8006542 <__exponent+0x66>
 800652c:	f10d 0209 	add.w	r2, sp, #9
 8006530:	eba2 020e 	sub.w	r2, r2, lr
 8006534:	4565      	cmp	r5, ip
 8006536:	bf88      	it	hi
 8006538:	2200      	movhi	r2, #0
 800653a:	4413      	add	r3, r2
 800653c:	1a18      	subs	r0, r3, r0
 800653e:	b003      	add	sp, #12
 8006540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006546:	f804 2f01 	strb.w	r2, [r4, #1]!
 800654a:	e7ed      	b.n	8006528 <__exponent+0x4c>
 800654c:	2330      	movs	r3, #48	; 0x30
 800654e:	3130      	adds	r1, #48	; 0x30
 8006550:	7083      	strb	r3, [r0, #2]
 8006552:	70c1      	strb	r1, [r0, #3]
 8006554:	1d03      	adds	r3, r0, #4
 8006556:	e7f1      	b.n	800653c <__exponent+0x60>

08006558 <_printf_float>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	ed2d 8b02 	vpush	{d8}
 8006560:	b08d      	sub	sp, #52	; 0x34
 8006562:	460c      	mov	r4, r1
 8006564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006568:	4616      	mov	r6, r2
 800656a:	461f      	mov	r7, r3
 800656c:	4605      	mov	r5, r0
 800656e:	f001 fa59 	bl	8007a24 <_localeconv_r>
 8006572:	f8d0 a000 	ldr.w	sl, [r0]
 8006576:	4650      	mov	r0, sl
 8006578:	f7f9 fe32 	bl	80001e0 <strlen>
 800657c:	2300      	movs	r3, #0
 800657e:	930a      	str	r3, [sp, #40]	; 0x28
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	f8d8 3000 	ldr.w	r3, [r8]
 8006588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800658c:	3307      	adds	r3, #7
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	f103 0208 	add.w	r2, r3, #8
 8006596:	f8c8 2000 	str.w	r2, [r8]
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065aa:	9307      	str	r3, [sp, #28]
 80065ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80065b0:	ee08 0a10 	vmov	s16, r0
 80065b4:	4b9f      	ldr	r3, [pc, #636]	; (8006834 <_printf_float+0x2dc>)
 80065b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	f7fa fabd 	bl	8000b3c <__aeabi_dcmpun>
 80065c2:	bb88      	cbnz	r0, 8006628 <_printf_float+0xd0>
 80065c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c8:	4b9a      	ldr	r3, [pc, #616]	; (8006834 <_printf_float+0x2dc>)
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	f7fa fa97 	bl	8000b00 <__aeabi_dcmple>
 80065d2:	bb48      	cbnz	r0, 8006628 <_printf_float+0xd0>
 80065d4:	2200      	movs	r2, #0
 80065d6:	2300      	movs	r3, #0
 80065d8:	4640      	mov	r0, r8
 80065da:	4649      	mov	r1, r9
 80065dc:	f7fa fa86 	bl	8000aec <__aeabi_dcmplt>
 80065e0:	b110      	cbz	r0, 80065e8 <_printf_float+0x90>
 80065e2:	232d      	movs	r3, #45	; 0x2d
 80065e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e8:	4b93      	ldr	r3, [pc, #588]	; (8006838 <_printf_float+0x2e0>)
 80065ea:	4894      	ldr	r0, [pc, #592]	; (800683c <_printf_float+0x2e4>)
 80065ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065f0:	bf94      	ite	ls
 80065f2:	4698      	movls	r8, r3
 80065f4:	4680      	movhi	r8, r0
 80065f6:	2303      	movs	r3, #3
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	9b05      	ldr	r3, [sp, #20]
 80065fc:	f023 0204 	bic.w	r2, r3, #4
 8006600:	6022      	str	r2, [r4, #0]
 8006602:	f04f 0900 	mov.w	r9, #0
 8006606:	9700      	str	r7, [sp, #0]
 8006608:	4633      	mov	r3, r6
 800660a:	aa0b      	add	r2, sp, #44	; 0x2c
 800660c:	4621      	mov	r1, r4
 800660e:	4628      	mov	r0, r5
 8006610:	f000 f9d8 	bl	80069c4 <_printf_common>
 8006614:	3001      	adds	r0, #1
 8006616:	f040 8090 	bne.w	800673a <_printf_float+0x1e2>
 800661a:	f04f 30ff 	mov.w	r0, #4294967295
 800661e:	b00d      	add	sp, #52	; 0x34
 8006620:	ecbd 8b02 	vpop	{d8}
 8006624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	4642      	mov	r2, r8
 800662a:	464b      	mov	r3, r9
 800662c:	4640      	mov	r0, r8
 800662e:	4649      	mov	r1, r9
 8006630:	f7fa fa84 	bl	8000b3c <__aeabi_dcmpun>
 8006634:	b140      	cbz	r0, 8006648 <_printf_float+0xf0>
 8006636:	464b      	mov	r3, r9
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfbc      	itt	lt
 800663c:	232d      	movlt	r3, #45	; 0x2d
 800663e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006642:	487f      	ldr	r0, [pc, #508]	; (8006840 <_printf_float+0x2e8>)
 8006644:	4b7f      	ldr	r3, [pc, #508]	; (8006844 <_printf_float+0x2ec>)
 8006646:	e7d1      	b.n	80065ec <_printf_float+0x94>
 8006648:	6863      	ldr	r3, [r4, #4]
 800664a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800664e:	9206      	str	r2, [sp, #24]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	d13f      	bne.n	80066d4 <_printf_float+0x17c>
 8006654:	2306      	movs	r3, #6
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	9b05      	ldr	r3, [sp, #20]
 800665a:	6861      	ldr	r1, [r4, #4]
 800665c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006660:	2300      	movs	r3, #0
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	ab0a      	add	r3, sp, #40	; 0x28
 8006666:	e9cd b301 	strd	fp, r3, [sp, #4]
 800666a:	ab09      	add	r3, sp, #36	; 0x24
 800666c:	ec49 8b10 	vmov	d0, r8, r9
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006678:	4628      	mov	r0, r5
 800667a:	f7ff fecd 	bl	8006418 <__cvt>
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006682:	2b47      	cmp	r3, #71	; 0x47
 8006684:	4680      	mov	r8, r0
 8006686:	d108      	bne.n	800669a <_printf_float+0x142>
 8006688:	1cc8      	adds	r0, r1, #3
 800668a:	db02      	blt.n	8006692 <_printf_float+0x13a>
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	4299      	cmp	r1, r3
 8006690:	dd41      	ble.n	8006716 <_printf_float+0x1be>
 8006692:	f1ab 0b02 	sub.w	fp, fp, #2
 8006696:	fa5f fb8b 	uxtb.w	fp, fp
 800669a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800669e:	d820      	bhi.n	80066e2 <_printf_float+0x18a>
 80066a0:	3901      	subs	r1, #1
 80066a2:	465a      	mov	r2, fp
 80066a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066a8:	9109      	str	r1, [sp, #36]	; 0x24
 80066aa:	f7ff ff17 	bl	80064dc <__exponent>
 80066ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066b0:	1813      	adds	r3, r2, r0
 80066b2:	2a01      	cmp	r2, #1
 80066b4:	4681      	mov	r9, r0
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	dc02      	bgt.n	80066c0 <_printf_float+0x168>
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	07d2      	lsls	r2, r2, #31
 80066be:	d501      	bpl.n	80066c4 <_printf_float+0x16c>
 80066c0:	3301      	adds	r3, #1
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d09c      	beq.n	8006606 <_printf_float+0xae>
 80066cc:	232d      	movs	r3, #45	; 0x2d
 80066ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d2:	e798      	b.n	8006606 <_printf_float+0xae>
 80066d4:	9a06      	ldr	r2, [sp, #24]
 80066d6:	2a47      	cmp	r2, #71	; 0x47
 80066d8:	d1be      	bne.n	8006658 <_printf_float+0x100>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1bc      	bne.n	8006658 <_printf_float+0x100>
 80066de:	2301      	movs	r3, #1
 80066e0:	e7b9      	b.n	8006656 <_printf_float+0xfe>
 80066e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066e6:	d118      	bne.n	800671a <_printf_float+0x1c2>
 80066e8:	2900      	cmp	r1, #0
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	dd0b      	ble.n	8006706 <_printf_float+0x1ae>
 80066ee:	6121      	str	r1, [r4, #16]
 80066f0:	b913      	cbnz	r3, 80066f8 <_printf_float+0x1a0>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d502      	bpl.n	80066fe <_printf_float+0x1a6>
 80066f8:	3301      	adds	r3, #1
 80066fa:	440b      	add	r3, r1
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006700:	f04f 0900 	mov.w	r9, #0
 8006704:	e7de      	b.n	80066c4 <_printf_float+0x16c>
 8006706:	b913      	cbnz	r3, 800670e <_printf_float+0x1b6>
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	07d2      	lsls	r2, r2, #31
 800670c:	d501      	bpl.n	8006712 <_printf_float+0x1ba>
 800670e:	3302      	adds	r3, #2
 8006710:	e7f4      	b.n	80066fc <_printf_float+0x1a4>
 8006712:	2301      	movs	r3, #1
 8006714:	e7f2      	b.n	80066fc <_printf_float+0x1a4>
 8006716:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800671a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671c:	4299      	cmp	r1, r3
 800671e:	db05      	blt.n	800672c <_printf_float+0x1d4>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	6121      	str	r1, [r4, #16]
 8006724:	07d8      	lsls	r0, r3, #31
 8006726:	d5ea      	bpl.n	80066fe <_printf_float+0x1a6>
 8006728:	1c4b      	adds	r3, r1, #1
 800672a:	e7e7      	b.n	80066fc <_printf_float+0x1a4>
 800672c:	2900      	cmp	r1, #0
 800672e:	bfd4      	ite	le
 8006730:	f1c1 0202 	rsble	r2, r1, #2
 8006734:	2201      	movgt	r2, #1
 8006736:	4413      	add	r3, r2
 8006738:	e7e0      	b.n	80066fc <_printf_float+0x1a4>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	055a      	lsls	r2, r3, #21
 800673e:	d407      	bmi.n	8006750 <_printf_float+0x1f8>
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	4642      	mov	r2, r8
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	d12c      	bne.n	80067a8 <_printf_float+0x250>
 800674e:	e764      	b.n	800661a <_printf_float+0xc2>
 8006750:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006754:	f240 80e0 	bls.w	8006918 <_printf_float+0x3c0>
 8006758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	f7fa f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006764:	2800      	cmp	r0, #0
 8006766:	d034      	beq.n	80067d2 <_printf_float+0x27a>
 8006768:	4a37      	ldr	r2, [pc, #220]	; (8006848 <_printf_float+0x2f0>)
 800676a:	2301      	movs	r3, #1
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f af51 	beq.w	800661a <_printf_float+0xc2>
 8006778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800677c:	429a      	cmp	r2, r3
 800677e:	db02      	blt.n	8006786 <_printf_float+0x22e>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	07d8      	lsls	r0, r3, #31
 8006784:	d510      	bpl.n	80067a8 <_printf_float+0x250>
 8006786:	ee18 3a10 	vmov	r3, s16
 800678a:	4652      	mov	r2, sl
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af41 	beq.w	800661a <_printf_float+0xc2>
 8006798:	f04f 0800 	mov.w	r8, #0
 800679c:	f104 091a 	add.w	r9, r4, #26
 80067a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a2:	3b01      	subs	r3, #1
 80067a4:	4543      	cmp	r3, r8
 80067a6:	dc09      	bgt.n	80067bc <_printf_float+0x264>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	079b      	lsls	r3, r3, #30
 80067ac:	f100 8105 	bmi.w	80069ba <_printf_float+0x462>
 80067b0:	68e0      	ldr	r0, [r4, #12]
 80067b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b4:	4298      	cmp	r0, r3
 80067b6:	bfb8      	it	lt
 80067b8:	4618      	movlt	r0, r3
 80067ba:	e730      	b.n	800661e <_printf_float+0xc6>
 80067bc:	2301      	movs	r3, #1
 80067be:	464a      	mov	r2, r9
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	f43f af27 	beq.w	800661a <_printf_float+0xc2>
 80067cc:	f108 0801 	add.w	r8, r8, #1
 80067d0:	e7e6      	b.n	80067a0 <_printf_float+0x248>
 80067d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dc39      	bgt.n	800684c <_printf_float+0x2f4>
 80067d8:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <_printf_float+0x2f0>)
 80067da:	2301      	movs	r3, #1
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	f43f af19 	beq.w	800661a <_printf_float+0xc2>
 80067e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d102      	bne.n	80067f6 <_printf_float+0x29e>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	07d9      	lsls	r1, r3, #31
 80067f4:	d5d8      	bpl.n	80067a8 <_printf_float+0x250>
 80067f6:	ee18 3a10 	vmov	r3, s16
 80067fa:	4652      	mov	r2, sl
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f af09 	beq.w	800661a <_printf_float+0xc2>
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	f104 0a1a 	add.w	sl, r4, #26
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	425b      	negs	r3, r3
 8006814:	454b      	cmp	r3, r9
 8006816:	dc01      	bgt.n	800681c <_printf_float+0x2c4>
 8006818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681a:	e792      	b.n	8006742 <_printf_float+0x1ea>
 800681c:	2301      	movs	r3, #1
 800681e:	4652      	mov	r2, sl
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f aef7 	beq.w	800661a <_printf_float+0xc2>
 800682c:	f109 0901 	add.w	r9, r9, #1
 8006830:	e7ee      	b.n	8006810 <_printf_float+0x2b8>
 8006832:	bf00      	nop
 8006834:	7fefffff 	.word	0x7fefffff
 8006838:	08009250 	.word	0x08009250
 800683c:	08009254 	.word	0x08009254
 8006840:	0800925c 	.word	0x0800925c
 8006844:	08009258 	.word	0x08009258
 8006848:	08009260 	.word	0x08009260
 800684c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006850:	429a      	cmp	r2, r3
 8006852:	bfa8      	it	ge
 8006854:	461a      	movge	r2, r3
 8006856:	2a00      	cmp	r2, #0
 8006858:	4691      	mov	r9, r2
 800685a:	dc37      	bgt.n	80068cc <_printf_float+0x374>
 800685c:	f04f 0b00 	mov.w	fp, #0
 8006860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006864:	f104 021a 	add.w	r2, r4, #26
 8006868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800686a:	9305      	str	r3, [sp, #20]
 800686c:	eba3 0309 	sub.w	r3, r3, r9
 8006870:	455b      	cmp	r3, fp
 8006872:	dc33      	bgt.n	80068dc <_printf_float+0x384>
 8006874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006878:	429a      	cmp	r2, r3
 800687a:	db3b      	blt.n	80068f4 <_printf_float+0x39c>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	07da      	lsls	r2, r3, #31
 8006880:	d438      	bmi.n	80068f4 <_printf_float+0x39c>
 8006882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006884:	9a05      	ldr	r2, [sp, #20]
 8006886:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006888:	1a9a      	subs	r2, r3, r2
 800688a:	eba3 0901 	sub.w	r9, r3, r1
 800688e:	4591      	cmp	r9, r2
 8006890:	bfa8      	it	ge
 8006892:	4691      	movge	r9, r2
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	dc35      	bgt.n	8006906 <_printf_float+0x3ae>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068a2:	f104 0a1a 	add.w	sl, r4, #26
 80068a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	eba3 0309 	sub.w	r3, r3, r9
 80068b0:	4543      	cmp	r3, r8
 80068b2:	f77f af79 	ble.w	80067a8 <_printf_float+0x250>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f aeaa 	beq.w	800661a <_printf_float+0xc2>
 80068c6:	f108 0801 	add.w	r8, r8, #1
 80068ca:	e7ec      	b.n	80068a6 <_printf_float+0x34e>
 80068cc:	4613      	mov	r3, r2
 80068ce:	4631      	mov	r1, r6
 80068d0:	4642      	mov	r2, r8
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	d1c0      	bne.n	800685c <_printf_float+0x304>
 80068da:	e69e      	b.n	800661a <_printf_float+0xc2>
 80068dc:	2301      	movs	r3, #1
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	9205      	str	r2, [sp, #20]
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f ae97 	beq.w	800661a <_printf_float+0xc2>
 80068ec:	9a05      	ldr	r2, [sp, #20]
 80068ee:	f10b 0b01 	add.w	fp, fp, #1
 80068f2:	e7b9      	b.n	8006868 <_printf_float+0x310>
 80068f4:	ee18 3a10 	vmov	r3, s16
 80068f8:	4652      	mov	r2, sl
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	d1be      	bne.n	8006882 <_printf_float+0x32a>
 8006904:	e689      	b.n	800661a <_printf_float+0xc2>
 8006906:	9a05      	ldr	r2, [sp, #20]
 8006908:	464b      	mov	r3, r9
 800690a:	4442      	add	r2, r8
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	47b8      	blx	r7
 8006912:	3001      	adds	r0, #1
 8006914:	d1c1      	bne.n	800689a <_printf_float+0x342>
 8006916:	e680      	b.n	800661a <_printf_float+0xc2>
 8006918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800691a:	2a01      	cmp	r2, #1
 800691c:	dc01      	bgt.n	8006922 <_printf_float+0x3ca>
 800691e:	07db      	lsls	r3, r3, #31
 8006920:	d538      	bpl.n	8006994 <_printf_float+0x43c>
 8006922:	2301      	movs	r3, #1
 8006924:	4642      	mov	r2, r8
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f ae74 	beq.w	800661a <_printf_float+0xc2>
 8006932:	ee18 3a10 	vmov	r3, s16
 8006936:	4652      	mov	r2, sl
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f ae6b 	beq.w	800661a <_printf_float+0xc2>
 8006944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	f7fa f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006950:	b9d8      	cbnz	r0, 800698a <_printf_float+0x432>
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	f108 0201 	add.w	r2, r8, #1
 8006958:	3b01      	subs	r3, #1
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d10e      	bne.n	8006982 <_printf_float+0x42a>
 8006964:	e659      	b.n	800661a <_printf_float+0xc2>
 8006966:	2301      	movs	r3, #1
 8006968:	4652      	mov	r2, sl
 800696a:	4631      	mov	r1, r6
 800696c:	4628      	mov	r0, r5
 800696e:	47b8      	blx	r7
 8006970:	3001      	adds	r0, #1
 8006972:	f43f ae52 	beq.w	800661a <_printf_float+0xc2>
 8006976:	f108 0801 	add.w	r8, r8, #1
 800697a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697c:	3b01      	subs	r3, #1
 800697e:	4543      	cmp	r3, r8
 8006980:	dcf1      	bgt.n	8006966 <_printf_float+0x40e>
 8006982:	464b      	mov	r3, r9
 8006984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006988:	e6dc      	b.n	8006744 <_printf_float+0x1ec>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	f104 0a1a 	add.w	sl, r4, #26
 8006992:	e7f2      	b.n	800697a <_printf_float+0x422>
 8006994:	2301      	movs	r3, #1
 8006996:	4642      	mov	r2, r8
 8006998:	e7df      	b.n	800695a <_printf_float+0x402>
 800699a:	2301      	movs	r3, #1
 800699c:	464a      	mov	r2, r9
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f ae38 	beq.w	800661a <_printf_float+0xc2>
 80069aa:	f108 0801 	add.w	r8, r8, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	4543      	cmp	r3, r8
 80069b6:	dcf0      	bgt.n	800699a <_printf_float+0x442>
 80069b8:	e6fa      	b.n	80067b0 <_printf_float+0x258>
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	f104 0919 	add.w	r9, r4, #25
 80069c2:	e7f4      	b.n	80069ae <_printf_float+0x456>

080069c4 <_printf_common>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	4616      	mov	r6, r2
 80069ca:	4699      	mov	r9, r3
 80069cc:	688a      	ldr	r2, [r1, #8]
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	bfb8      	it	lt
 80069d8:	4613      	movlt	r3, r2
 80069da:	6033      	str	r3, [r6, #0]
 80069dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069e0:	4607      	mov	r7, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	b10a      	cbz	r2, 80069ea <_printf_common+0x26>
 80069e6:	3301      	adds	r3, #1
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	0699      	lsls	r1, r3, #26
 80069ee:	bf42      	ittt	mi
 80069f0:	6833      	ldrmi	r3, [r6, #0]
 80069f2:	3302      	addmi	r3, #2
 80069f4:	6033      	strmi	r3, [r6, #0]
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	f015 0506 	ands.w	r5, r5, #6
 80069fc:	d106      	bne.n	8006a0c <_printf_common+0x48>
 80069fe:	f104 0a19 	add.w	sl, r4, #25
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	6832      	ldr	r2, [r6, #0]
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dc26      	bgt.n	8006a5a <_printf_common+0x96>
 8006a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a10:	1e13      	subs	r3, r2, #0
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	0692      	lsls	r2, r2, #26
 8006a1a:	d42b      	bmi.n	8006a74 <_printf_common+0xb0>
 8006a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a20:	4649      	mov	r1, r9
 8006a22:	4638      	mov	r0, r7
 8006a24:	47c0      	blx	r8
 8006a26:	3001      	adds	r0, #1
 8006a28:	d01e      	beq.n	8006a68 <_printf_common+0xa4>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	68e5      	ldr	r5, [r4, #12]
 8006a2e:	6832      	ldr	r2, [r6, #0]
 8006a30:	f003 0306 	and.w	r3, r3, #6
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	bf08      	it	eq
 8006a38:	1aad      	subeq	r5, r5, r2
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	6922      	ldr	r2, [r4, #16]
 8006a3e:	bf0c      	ite	eq
 8006a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a44:	2500      	movne	r5, #0
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bfc4      	itt	gt
 8006a4a:	1a9b      	subgt	r3, r3, r2
 8006a4c:	18ed      	addgt	r5, r5, r3
 8006a4e:	2600      	movs	r6, #0
 8006a50:	341a      	adds	r4, #26
 8006a52:	42b5      	cmp	r5, r6
 8006a54:	d11a      	bne.n	8006a8c <_printf_common+0xc8>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e008      	b.n	8006a6c <_printf_common+0xa8>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4638      	mov	r0, r7
 8006a62:	47c0      	blx	r8
 8006a64:	3001      	adds	r0, #1
 8006a66:	d103      	bne.n	8006a70 <_printf_common+0xac>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	3501      	adds	r5, #1
 8006a72:	e7c6      	b.n	8006a02 <_printf_common+0x3e>
 8006a74:	18e1      	adds	r1, r4, r3
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	2030      	movs	r0, #48	; 0x30
 8006a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a7e:	4422      	add	r2, r4
 8006a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a88:	3302      	adds	r3, #2
 8006a8a:	e7c7      	b.n	8006a1c <_printf_common+0x58>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d0e6      	beq.n	8006a68 <_printf_common+0xa4>
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	e7d9      	b.n	8006a52 <_printf_common+0x8e>
	...

08006aa0 <_printf_i>:
 8006aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	7e0f      	ldrb	r7, [r1, #24]
 8006aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aa8:	2f78      	cmp	r7, #120	; 0x78
 8006aaa:	4691      	mov	r9, r2
 8006aac:	4680      	mov	r8, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	469a      	mov	sl, r3
 8006ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ab6:	d807      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ab8:	2f62      	cmp	r7, #98	; 0x62
 8006aba:	d80a      	bhi.n	8006ad2 <_printf_i+0x32>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	f000 80d8 	beq.w	8006c72 <_printf_i+0x1d2>
 8006ac2:	2f58      	cmp	r7, #88	; 0x58
 8006ac4:	f000 80a3 	beq.w	8006c0e <_printf_i+0x16e>
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad0:	e03a      	b.n	8006b48 <_printf_i+0xa8>
 8006ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ad6:	2b15      	cmp	r3, #21
 8006ad8:	d8f6      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ada:	a101      	add	r1, pc, #4	; (adr r1, 8006ae0 <_printf_i+0x40>)
 8006adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006ac9 	.word	0x08006ac9
 8006aec:	08006ac9 	.word	0x08006ac9
 8006af0:	08006ac9 	.word	0x08006ac9
 8006af4:	08006ac9 	.word	0x08006ac9
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006ac9 	.word	0x08006ac9
 8006b00:	08006ac9 	.word	0x08006ac9
 8006b04:	08006ac9 	.word	0x08006ac9
 8006b08:	08006ac9 	.word	0x08006ac9
 8006b0c:	08006c59 	.word	0x08006c59
 8006b10:	08006b7d 	.word	0x08006b7d
 8006b14:	08006c3b 	.word	0x08006c3b
 8006b18:	08006ac9 	.word	0x08006ac9
 8006b1c:	08006ac9 	.word	0x08006ac9
 8006b20:	08006c7b 	.word	0x08006c7b
 8006b24:	08006ac9 	.word	0x08006ac9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006ac9 	.word	0x08006ac9
 8006b30:	08006ac9 	.word	0x08006ac9
 8006b34:	08006c43 	.word	0x08006c43
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	602a      	str	r2, [r5, #0]
 8006b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0a3      	b.n	8006c94 <_printf_i+0x1f4>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	6829      	ldr	r1, [r5, #0]
 8006b50:	0606      	lsls	r6, r0, #24
 8006b52:	f101 0304 	add.w	r3, r1, #4
 8006b56:	d50a      	bpl.n	8006b6e <_printf_i+0xce>
 8006b58:	680e      	ldr	r6, [r1, #0]
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	da03      	bge.n	8006b68 <_printf_i+0xc8>
 8006b60:	232d      	movs	r3, #45	; 0x2d
 8006b62:	4276      	negs	r6, r6
 8006b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b68:	485e      	ldr	r0, [pc, #376]	; (8006ce4 <_printf_i+0x244>)
 8006b6a:	230a      	movs	r3, #10
 8006b6c:	e019      	b.n	8006ba2 <_printf_i+0x102>
 8006b6e:	680e      	ldr	r6, [r1, #0]
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b76:	bf18      	it	ne
 8006b78:	b236      	sxthne	r6, r6
 8006b7a:	e7ef      	b.n	8006b5c <_printf_i+0xbc>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1d19      	adds	r1, r3, #4
 8006b82:	6029      	str	r1, [r5, #0]
 8006b84:	0601      	lsls	r1, r0, #24
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0xec>
 8006b88:	681e      	ldr	r6, [r3, #0]
 8006b8a:	e002      	b.n	8006b92 <_printf_i+0xf2>
 8006b8c:	0646      	lsls	r6, r0, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0xe8>
 8006b90:	881e      	ldrh	r6, [r3, #0]
 8006b92:	4854      	ldr	r0, [pc, #336]	; (8006ce4 <_printf_i+0x244>)
 8006b94:	2f6f      	cmp	r7, #111	; 0x6f
 8006b96:	bf0c      	ite	eq
 8006b98:	2308      	moveq	r3, #8
 8006b9a:	230a      	movne	r3, #10
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ba2:	6865      	ldr	r5, [r4, #4]
 8006ba4:	60a5      	str	r5, [r4, #8]
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	bfa2      	ittt	ge
 8006baa:	6821      	ldrge	r1, [r4, #0]
 8006bac:	f021 0104 	bicge.w	r1, r1, #4
 8006bb0:	6021      	strge	r1, [r4, #0]
 8006bb2:	b90e      	cbnz	r6, 8006bb8 <_printf_i+0x118>
 8006bb4:	2d00      	cmp	r5, #0
 8006bb6:	d04d      	beq.n	8006c54 <_printf_i+0x1b4>
 8006bb8:	4615      	mov	r5, r2
 8006bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8006bc2:	5dc7      	ldrb	r7, [r0, r7]
 8006bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bc8:	4637      	mov	r7, r6
 8006bca:	42bb      	cmp	r3, r7
 8006bcc:	460e      	mov	r6, r1
 8006bce:	d9f4      	bls.n	8006bba <_printf_i+0x11a>
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d10b      	bne.n	8006bec <_printf_i+0x14c>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	07de      	lsls	r6, r3, #31
 8006bd8:	d508      	bpl.n	8006bec <_printf_i+0x14c>
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	6861      	ldr	r1, [r4, #4]
 8006bde:	4299      	cmp	r1, r3
 8006be0:	bfde      	ittt	le
 8006be2:	2330      	movle	r3, #48	; 0x30
 8006be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bec:	1b52      	subs	r2, r2, r5
 8006bee:	6122      	str	r2, [r4, #16]
 8006bf0:	f8cd a000 	str.w	sl, [sp]
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	aa03      	add	r2, sp, #12
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	f7ff fee2 	bl	80069c4 <_printf_common>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d14c      	bne.n	8006c9e <_printf_i+0x1fe>
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	b004      	add	sp, #16
 8006c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0e:	4835      	ldr	r0, [pc, #212]	; (8006ce4 <_printf_i+0x244>)
 8006c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c14:	6829      	ldr	r1, [r5, #0]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c1c:	6029      	str	r1, [r5, #0]
 8006c1e:	061d      	lsls	r5, r3, #24
 8006c20:	d514      	bpl.n	8006c4c <_printf_i+0x1ac>
 8006c22:	07df      	lsls	r7, r3, #31
 8006c24:	bf44      	itt	mi
 8006c26:	f043 0320 	orrmi.w	r3, r3, #32
 8006c2a:	6023      	strmi	r3, [r4, #0]
 8006c2c:	b91e      	cbnz	r6, 8006c36 <_printf_i+0x196>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f023 0320 	bic.w	r3, r3, #32
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	2310      	movs	r3, #16
 8006c38:	e7b0      	b.n	8006b9c <_printf_i+0xfc>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	2378      	movs	r3, #120	; 0x78
 8006c44:	4828      	ldr	r0, [pc, #160]	; (8006ce8 <_printf_i+0x248>)
 8006c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c4a:	e7e3      	b.n	8006c14 <_printf_i+0x174>
 8006c4c:	0659      	lsls	r1, r3, #25
 8006c4e:	bf48      	it	mi
 8006c50:	b2b6      	uxthmi	r6, r6
 8006c52:	e7e6      	b.n	8006c22 <_printf_i+0x182>
 8006c54:	4615      	mov	r5, r2
 8006c56:	e7bb      	b.n	8006bd0 <_printf_i+0x130>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	6826      	ldr	r6, [r4, #0]
 8006c5c:	6961      	ldr	r1, [r4, #20]
 8006c5e:	1d18      	adds	r0, r3, #4
 8006c60:	6028      	str	r0, [r5, #0]
 8006c62:	0635      	lsls	r5, r6, #24
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	d501      	bpl.n	8006c6c <_printf_i+0x1cc>
 8006c68:	6019      	str	r1, [r3, #0]
 8006c6a:	e002      	b.n	8006c72 <_printf_i+0x1d2>
 8006c6c:	0670      	lsls	r0, r6, #25
 8006c6e:	d5fb      	bpl.n	8006c68 <_printf_i+0x1c8>
 8006c70:	8019      	strh	r1, [r3, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	4615      	mov	r5, r2
 8006c78:	e7ba      	b.n	8006bf0 <_printf_i+0x150>
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	1d1a      	adds	r2, r3, #4
 8006c7e:	602a      	str	r2, [r5, #0]
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	6862      	ldr	r2, [r4, #4]
 8006c84:	2100      	movs	r1, #0
 8006c86:	4628      	mov	r0, r5
 8006c88:	f7f9 fab2 	bl	80001f0 <memchr>
 8006c8c:	b108      	cbz	r0, 8006c92 <_printf_i+0x1f2>
 8006c8e:	1b40      	subs	r0, r0, r5
 8006c90:	6060      	str	r0, [r4, #4]
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	2300      	movs	r3, #0
 8006c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c9c:	e7a8      	b.n	8006bf0 <_printf_i+0x150>
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	462a      	mov	r2, r5
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	47d0      	blx	sl
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d0ab      	beq.n	8006c04 <_printf_i+0x164>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	079b      	lsls	r3, r3, #30
 8006cb0:	d413      	bmi.n	8006cda <_printf_i+0x23a>
 8006cb2:	68e0      	ldr	r0, [r4, #12]
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	4298      	cmp	r0, r3
 8006cb8:	bfb8      	it	lt
 8006cba:	4618      	movlt	r0, r3
 8006cbc:	e7a4      	b.n	8006c08 <_printf_i+0x168>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d09b      	beq.n	8006c04 <_printf_i+0x164>
 8006ccc:	3501      	adds	r5, #1
 8006cce:	68e3      	ldr	r3, [r4, #12]
 8006cd0:	9903      	ldr	r1, [sp, #12]
 8006cd2:	1a5b      	subs	r3, r3, r1
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dcf2      	bgt.n	8006cbe <_printf_i+0x21e>
 8006cd8:	e7eb      	b.n	8006cb2 <_printf_i+0x212>
 8006cda:	2500      	movs	r5, #0
 8006cdc:	f104 0619 	add.w	r6, r4, #25
 8006ce0:	e7f5      	b.n	8006cce <_printf_i+0x22e>
 8006ce2:	bf00      	nop
 8006ce4:	08009262 	.word	0x08009262
 8006ce8:	08009273 	.word	0x08009273

08006cec <siprintf>:
 8006cec:	b40e      	push	{r1, r2, r3}
 8006cee:	b500      	push	{lr}
 8006cf0:	b09c      	sub	sp, #112	; 0x70
 8006cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf4:	9002      	str	r0, [sp, #8]
 8006cf6:	9006      	str	r0, [sp, #24]
 8006cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cfc:	4809      	ldr	r0, [pc, #36]	; (8006d24 <siprintf+0x38>)
 8006cfe:	9107      	str	r1, [sp, #28]
 8006d00:	9104      	str	r1, [sp, #16]
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <siprintf+0x3c>)
 8006d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d08:	9105      	str	r1, [sp, #20]
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	a902      	add	r1, sp, #8
 8006d10:	f001 fb78 	bl	8008404 <_svfiprintf_r>
 8006d14:	9b02      	ldr	r3, [sp, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	b01c      	add	sp, #112	; 0x70
 8006d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d20:	b003      	add	sp, #12
 8006d22:	4770      	bx	lr
 8006d24:	2000000c 	.word	0x2000000c
 8006d28:	ffff0208 	.word	0xffff0208

08006d2c <quorem>:
 8006d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	6903      	ldr	r3, [r0, #16]
 8006d32:	690c      	ldr	r4, [r1, #16]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	4607      	mov	r7, r0
 8006d38:	f2c0 8081 	blt.w	8006e3e <quorem+0x112>
 8006d3c:	3c01      	subs	r4, #1
 8006d3e:	f101 0814 	add.w	r8, r1, #20
 8006d42:	f100 0514 	add.w	r5, r0, #20
 8006d46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d54:	3301      	adds	r3, #1
 8006d56:	429a      	cmp	r2, r3
 8006d58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d64:	d331      	bcc.n	8006dca <quorem+0x9e>
 8006d66:	f04f 0e00 	mov.w	lr, #0
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	46ac      	mov	ip, r5
 8006d6e:	46f2      	mov	sl, lr
 8006d70:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d74:	b293      	uxth	r3, r2
 8006d76:	fb06 e303 	mla	r3, r6, r3, lr
 8006d7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ebaa 0303 	sub.w	r3, sl, r3
 8006d84:	f8dc a000 	ldr.w	sl, [ip]
 8006d88:	0c12      	lsrs	r2, r2, #16
 8006d8a:	fa13 f38a 	uxtah	r3, r3, sl
 8006d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	9b00      	ldr	r3, [sp, #0]
 8006d96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d9a:	b292      	uxth	r2, r2
 8006d9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006da4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006da8:	4581      	cmp	r9, r0
 8006daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dae:	f84c 3b04 	str.w	r3, [ip], #4
 8006db2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006db6:	d2db      	bcs.n	8006d70 <quorem+0x44>
 8006db8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dbc:	b92b      	cbnz	r3, 8006dca <quorem+0x9e>
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	d32e      	bcc.n	8006e26 <quorem+0xfa>
 8006dc8:	613c      	str	r4, [r7, #16]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f001 f8c6 	bl	8007f5c <__mcmp>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	db24      	blt.n	8006e1e <quorem+0xf2>
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f04f 0c00 	mov.w	ip, #0
 8006ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006de0:	f8d0 e000 	ldr.w	lr, [r0]
 8006de4:	b293      	uxth	r3, r2
 8006de6:	ebac 0303 	sub.w	r3, ip, r3
 8006dea:	0c12      	lsrs	r2, r2, #16
 8006dec:	fa13 f38e 	uxtah	r3, r3, lr
 8006df0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006df4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dfe:	45c1      	cmp	r9, r8
 8006e00:	f840 3b04 	str.w	r3, [r0], #4
 8006e04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e08:	d2e8      	bcs.n	8006ddc <quorem+0xb0>
 8006e0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e12:	b922      	cbnz	r2, 8006e1e <quorem+0xf2>
 8006e14:	3b04      	subs	r3, #4
 8006e16:	429d      	cmp	r5, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	d30a      	bcc.n	8006e32 <quorem+0x106>
 8006e1c:	613c      	str	r4, [r7, #16]
 8006e1e:	4630      	mov	r0, r6
 8006e20:	b003      	add	sp, #12
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	3b04      	subs	r3, #4
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d1cc      	bne.n	8006dc8 <quorem+0x9c>
 8006e2e:	3c01      	subs	r4, #1
 8006e30:	e7c7      	b.n	8006dc2 <quorem+0x96>
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	3b04      	subs	r3, #4
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	d1f0      	bne.n	8006e1c <quorem+0xf0>
 8006e3a:	3c01      	subs	r4, #1
 8006e3c:	e7eb      	b.n	8006e16 <quorem+0xea>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e7ee      	b.n	8006e20 <quorem+0xf4>
 8006e42:	0000      	movs	r0, r0
 8006e44:	0000      	movs	r0, r0
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	ed2d 8b04 	vpush	{d8-d9}
 8006e50:	ec57 6b10 	vmov	r6, r7, d0
 8006e54:	b093      	sub	sp, #76	; 0x4c
 8006e56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e5c:	9106      	str	r1, [sp, #24]
 8006e5e:	ee10 aa10 	vmov	sl, s0
 8006e62:	4604      	mov	r4, r0
 8006e64:	9209      	str	r2, [sp, #36]	; 0x24
 8006e66:	930c      	str	r3, [sp, #48]	; 0x30
 8006e68:	46bb      	mov	fp, r7
 8006e6a:	b975      	cbnz	r5, 8006e8a <_dtoa_r+0x42>
 8006e6c:	2010      	movs	r0, #16
 8006e6e:	f000 fddd 	bl	8007a2c <malloc>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6260      	str	r0, [r4, #36]	; 0x24
 8006e76:	b920      	cbnz	r0, 8006e82 <_dtoa_r+0x3a>
 8006e78:	4ba7      	ldr	r3, [pc, #668]	; (8007118 <_dtoa_r+0x2d0>)
 8006e7a:	21ea      	movs	r1, #234	; 0xea
 8006e7c:	48a7      	ldr	r0, [pc, #668]	; (800711c <_dtoa_r+0x2d4>)
 8006e7e:	f001 fbd1 	bl	8008624 <__assert_func>
 8006e82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e86:	6005      	str	r5, [r0, #0]
 8006e88:	60c5      	str	r5, [r0, #12]
 8006e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	b151      	cbz	r1, 8006ea6 <_dtoa_r+0x5e>
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	604a      	str	r2, [r1, #4]
 8006e94:	2301      	movs	r3, #1
 8006e96:	4093      	lsls	r3, r2
 8006e98:	608b      	str	r3, [r1, #8]
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 fe1c 	bl	8007ad8 <_Bfree>
 8006ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	1e3b      	subs	r3, r7, #0
 8006ea8:	bfaa      	itet	ge
 8006eaa:	2300      	movge	r3, #0
 8006eac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006eb0:	f8c8 3000 	strge.w	r3, [r8]
 8006eb4:	4b9a      	ldr	r3, [pc, #616]	; (8007120 <_dtoa_r+0x2d8>)
 8006eb6:	bfbc      	itt	lt
 8006eb8:	2201      	movlt	r2, #1
 8006eba:	f8c8 2000 	strlt.w	r2, [r8]
 8006ebe:	ea33 030b 	bics.w	r3, r3, fp
 8006ec2:	d11b      	bne.n	8006efc <_dtoa_r+0xb4>
 8006ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ed0:	4333      	orrs	r3, r6
 8006ed2:	f000 8592 	beq.w	80079fa <_dtoa_r+0xbb2>
 8006ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ed8:	b963      	cbnz	r3, 8006ef4 <_dtoa_r+0xac>
 8006eda:	4b92      	ldr	r3, [pc, #584]	; (8007124 <_dtoa_r+0x2dc>)
 8006edc:	e022      	b.n	8006f24 <_dtoa_r+0xdc>
 8006ede:	4b92      	ldr	r3, [pc, #584]	; (8007128 <_dtoa_r+0x2e0>)
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	9801      	ldr	r0, [sp, #4]
 8006eea:	b013      	add	sp, #76	; 0x4c
 8006eec:	ecbd 8b04 	vpop	{d8-d9}
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	4b8b      	ldr	r3, [pc, #556]	; (8007124 <_dtoa_r+0x2dc>)
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	3303      	adds	r3, #3
 8006efa:	e7f3      	b.n	8006ee4 <_dtoa_r+0x9c>
 8006efc:	2200      	movs	r2, #0
 8006efe:	2300      	movs	r3, #0
 8006f00:	4650      	mov	r0, sl
 8006f02:	4659      	mov	r1, fp
 8006f04:	f7f9 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f08:	ec4b ab19 	vmov	d9, sl, fp
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	b158      	cbz	r0, 8006f28 <_dtoa_r+0xe0>
 8006f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f12:	2301      	movs	r3, #1
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 856b 	beq.w	80079f4 <_dtoa_r+0xbac>
 8006f1e:	4883      	ldr	r0, [pc, #524]	; (800712c <_dtoa_r+0x2e4>)
 8006f20:	6018      	str	r0, [r3, #0]
 8006f22:	1e43      	subs	r3, r0, #1
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	e7df      	b.n	8006ee8 <_dtoa_r+0xa0>
 8006f28:	ec4b ab10 	vmov	d0, sl, fp
 8006f2c:	aa10      	add	r2, sp, #64	; 0x40
 8006f2e:	a911      	add	r1, sp, #68	; 0x44
 8006f30:	4620      	mov	r0, r4
 8006f32:	f001 f8b9 	bl	80080a8 <__d2b>
 8006f36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006f3a:	ee08 0a10 	vmov	s16, r0
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	f000 8084 	beq.w	800704c <_dtoa_r+0x204>
 8006f44:	ee19 3a90 	vmov	r3, s19
 8006f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f50:	4656      	mov	r6, sl
 8006f52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006f5e:	4b74      	ldr	r3, [pc, #464]	; (8007130 <_dtoa_r+0x2e8>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	4630      	mov	r0, r6
 8006f64:	4639      	mov	r1, r7
 8006f66:	f7f9 f997 	bl	8000298 <__aeabi_dsub>
 8006f6a:	a365      	add	r3, pc, #404	; (adr r3, 8007100 <_dtoa_r+0x2b8>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 fb4a 	bl	8000608 <__aeabi_dmul>
 8006f74:	a364      	add	r3, pc, #400	; (adr r3, 8007108 <_dtoa_r+0x2c0>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 f98f 	bl	800029c <__adddf3>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	4628      	mov	r0, r5
 8006f82:	460f      	mov	r7, r1
 8006f84:	f7f9 fad6 	bl	8000534 <__aeabi_i2d>
 8006f88:	a361      	add	r3, pc, #388	; (adr r3, 8007110 <_dtoa_r+0x2c8>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f7f9 fb3b 	bl	8000608 <__aeabi_dmul>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4630      	mov	r0, r6
 8006f98:	4639      	mov	r1, r7
 8006f9a:	f7f9 f97f 	bl	800029c <__adddf3>
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	f7f9 fde1 	bl	8000b68 <__aeabi_d2iz>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	9000      	str	r0, [sp, #0]
 8006faa:	2300      	movs	r3, #0
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 fd9c 	bl	8000aec <__aeabi_dcmplt>
 8006fb4:	b150      	cbz	r0, 8006fcc <_dtoa_r+0x184>
 8006fb6:	9800      	ldr	r0, [sp, #0]
 8006fb8:	f7f9 fabc 	bl	8000534 <__aeabi_i2d>
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	f7f9 fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fc4:	b910      	cbnz	r0, 8006fcc <_dtoa_r+0x184>
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	2b16      	cmp	r3, #22
 8006fd0:	d85a      	bhi.n	8007088 <_dtoa_r+0x240>
 8006fd2:	9a00      	ldr	r2, [sp, #0]
 8006fd4:	4b57      	ldr	r3, [pc, #348]	; (8007134 <_dtoa_r+0x2ec>)
 8006fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	ec51 0b19 	vmov	r0, r1, d9
 8006fe2:	f7f9 fd83 	bl	8000aec <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d050      	beq.n	800708c <_dtoa_r+0x244>
 8006fea:	9b00      	ldr	r3, [sp, #0]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ff6:	1b5d      	subs	r5, r3, r5
 8006ff8:	1e6b      	subs	r3, r5, #1
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	bf45      	ittet	mi
 8006ffe:	f1c5 0301 	rsbmi	r3, r5, #1
 8007002:	9304      	strmi	r3, [sp, #16]
 8007004:	2300      	movpl	r3, #0
 8007006:	2300      	movmi	r3, #0
 8007008:	bf4c      	ite	mi
 800700a:	9305      	strmi	r3, [sp, #20]
 800700c:	9304      	strpl	r3, [sp, #16]
 800700e:	9b00      	ldr	r3, [sp, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	db3d      	blt.n	8007090 <_dtoa_r+0x248>
 8007014:	9b05      	ldr	r3, [sp, #20]
 8007016:	9a00      	ldr	r2, [sp, #0]
 8007018:	920a      	str	r2, [sp, #40]	; 0x28
 800701a:	4413      	add	r3, r2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	2300      	movs	r3, #0
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	9b06      	ldr	r3, [sp, #24]
 8007024:	2b09      	cmp	r3, #9
 8007026:	f200 8089 	bhi.w	800713c <_dtoa_r+0x2f4>
 800702a:	2b05      	cmp	r3, #5
 800702c:	bfc4      	itt	gt
 800702e:	3b04      	subgt	r3, #4
 8007030:	9306      	strgt	r3, [sp, #24]
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	f1a3 0302 	sub.w	r3, r3, #2
 8007038:	bfcc      	ite	gt
 800703a:	2500      	movgt	r5, #0
 800703c:	2501      	movle	r5, #1
 800703e:	2b03      	cmp	r3, #3
 8007040:	f200 8087 	bhi.w	8007152 <_dtoa_r+0x30a>
 8007044:	e8df f003 	tbb	[pc, r3]
 8007048:	59383a2d 	.word	0x59383a2d
 800704c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007050:	441d      	add	r5, r3
 8007052:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007056:	2b20      	cmp	r3, #32
 8007058:	bfc1      	itttt	gt
 800705a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800705e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007062:	fa0b f303 	lslgt.w	r3, fp, r3
 8007066:	fa26 f000 	lsrgt.w	r0, r6, r0
 800706a:	bfda      	itte	le
 800706c:	f1c3 0320 	rsble	r3, r3, #32
 8007070:	fa06 f003 	lslle.w	r0, r6, r3
 8007074:	4318      	orrgt	r0, r3
 8007076:	f7f9 fa4d 	bl	8000514 <__aeabi_ui2d>
 800707a:	2301      	movs	r3, #1
 800707c:	4606      	mov	r6, r0
 800707e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007082:	3d01      	subs	r5, #1
 8007084:	930e      	str	r3, [sp, #56]	; 0x38
 8007086:	e76a      	b.n	8006f5e <_dtoa_r+0x116>
 8007088:	2301      	movs	r3, #1
 800708a:	e7b2      	b.n	8006ff2 <_dtoa_r+0x1aa>
 800708c:	900b      	str	r0, [sp, #44]	; 0x2c
 800708e:	e7b1      	b.n	8006ff4 <_dtoa_r+0x1ac>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	9a00      	ldr	r2, [sp, #0]
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	4253      	negs	r3, r2
 800709a:	9307      	str	r3, [sp, #28]
 800709c:	2300      	movs	r3, #0
 800709e:	930a      	str	r3, [sp, #40]	; 0x28
 80070a0:	e7bf      	b.n	8007022 <_dtoa_r+0x1da>
 80070a2:	2300      	movs	r3, #0
 80070a4:	9308      	str	r3, [sp, #32]
 80070a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dc55      	bgt.n	8007158 <_dtoa_r+0x310>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070b2:	461a      	mov	r2, r3
 80070b4:	9209      	str	r2, [sp, #36]	; 0x24
 80070b6:	e00c      	b.n	80070d2 <_dtoa_r+0x28a>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e7f3      	b.n	80070a4 <_dtoa_r+0x25c>
 80070bc:	2300      	movs	r3, #0
 80070be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c0:	9308      	str	r3, [sp, #32]
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	4413      	add	r3, r2
 80070c6:	9302      	str	r3, [sp, #8]
 80070c8:	3301      	adds	r3, #1
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	9303      	str	r3, [sp, #12]
 80070ce:	bfb8      	it	lt
 80070d0:	2301      	movlt	r3, #1
 80070d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070d4:	2200      	movs	r2, #0
 80070d6:	6042      	str	r2, [r0, #4]
 80070d8:	2204      	movs	r2, #4
 80070da:	f102 0614 	add.w	r6, r2, #20
 80070de:	429e      	cmp	r6, r3
 80070e0:	6841      	ldr	r1, [r0, #4]
 80070e2:	d93d      	bls.n	8007160 <_dtoa_r+0x318>
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fcb7 	bl	8007a58 <_Balloc>
 80070ea:	9001      	str	r0, [sp, #4]
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d13b      	bne.n	8007168 <_dtoa_r+0x320>
 80070f0:	4b11      	ldr	r3, [pc, #68]	; (8007138 <_dtoa_r+0x2f0>)
 80070f2:	4602      	mov	r2, r0
 80070f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070f8:	e6c0      	b.n	8006e7c <_dtoa_r+0x34>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e7df      	b.n	80070be <_dtoa_r+0x276>
 80070fe:	bf00      	nop
 8007100:	636f4361 	.word	0x636f4361
 8007104:	3fd287a7 	.word	0x3fd287a7
 8007108:	8b60c8b3 	.word	0x8b60c8b3
 800710c:	3fc68a28 	.word	0x3fc68a28
 8007110:	509f79fb 	.word	0x509f79fb
 8007114:	3fd34413 	.word	0x3fd34413
 8007118:	08009291 	.word	0x08009291
 800711c:	080092a8 	.word	0x080092a8
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	0800928d 	.word	0x0800928d
 8007128:	08009284 	.word	0x08009284
 800712c:	08009261 	.word	0x08009261
 8007130:	3ff80000 	.word	0x3ff80000
 8007134:	08009398 	.word	0x08009398
 8007138:	08009303 	.word	0x08009303
 800713c:	2501      	movs	r5, #1
 800713e:	2300      	movs	r3, #0
 8007140:	9306      	str	r3, [sp, #24]
 8007142:	9508      	str	r5, [sp, #32]
 8007144:	f04f 33ff 	mov.w	r3, #4294967295
 8007148:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800714c:	2200      	movs	r2, #0
 800714e:	2312      	movs	r3, #18
 8007150:	e7b0      	b.n	80070b4 <_dtoa_r+0x26c>
 8007152:	2301      	movs	r3, #1
 8007154:	9308      	str	r3, [sp, #32]
 8007156:	e7f5      	b.n	8007144 <_dtoa_r+0x2fc>
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800715e:	e7b8      	b.n	80070d2 <_dtoa_r+0x28a>
 8007160:	3101      	adds	r1, #1
 8007162:	6041      	str	r1, [r0, #4]
 8007164:	0052      	lsls	r2, r2, #1
 8007166:	e7b8      	b.n	80070da <_dtoa_r+0x292>
 8007168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800716a:	9a01      	ldr	r2, [sp, #4]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	2b0e      	cmp	r3, #14
 8007172:	f200 809d 	bhi.w	80072b0 <_dtoa_r+0x468>
 8007176:	2d00      	cmp	r5, #0
 8007178:	f000 809a 	beq.w	80072b0 <_dtoa_r+0x468>
 800717c:	9b00      	ldr	r3, [sp, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	dd32      	ble.n	80071e8 <_dtoa_r+0x3a0>
 8007182:	4ab7      	ldr	r2, [pc, #732]	; (8007460 <_dtoa_r+0x618>)
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800718c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007190:	9b00      	ldr	r3, [sp, #0]
 8007192:	05d8      	lsls	r0, r3, #23
 8007194:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007198:	d516      	bpl.n	80071c8 <_dtoa_r+0x380>
 800719a:	4bb2      	ldr	r3, [pc, #712]	; (8007464 <_dtoa_r+0x61c>)
 800719c:	ec51 0b19 	vmov	r0, r1, d9
 80071a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071a4:	f7f9 fb5a 	bl	800085c <__aeabi_ddiv>
 80071a8:	f007 070f 	and.w	r7, r7, #15
 80071ac:	4682      	mov	sl, r0
 80071ae:	468b      	mov	fp, r1
 80071b0:	2503      	movs	r5, #3
 80071b2:	4eac      	ldr	r6, [pc, #688]	; (8007464 <_dtoa_r+0x61c>)
 80071b4:	b957      	cbnz	r7, 80071cc <_dtoa_r+0x384>
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	4650      	mov	r0, sl
 80071bc:	4659      	mov	r1, fp
 80071be:	f7f9 fb4d 	bl	800085c <__aeabi_ddiv>
 80071c2:	4682      	mov	sl, r0
 80071c4:	468b      	mov	fp, r1
 80071c6:	e028      	b.n	800721a <_dtoa_r+0x3d2>
 80071c8:	2502      	movs	r5, #2
 80071ca:	e7f2      	b.n	80071b2 <_dtoa_r+0x36a>
 80071cc:	07f9      	lsls	r1, r7, #31
 80071ce:	d508      	bpl.n	80071e2 <_dtoa_r+0x39a>
 80071d0:	4640      	mov	r0, r8
 80071d2:	4649      	mov	r1, r9
 80071d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071d8:	f7f9 fa16 	bl	8000608 <__aeabi_dmul>
 80071dc:	3501      	adds	r5, #1
 80071de:	4680      	mov	r8, r0
 80071e0:	4689      	mov	r9, r1
 80071e2:	107f      	asrs	r7, r7, #1
 80071e4:	3608      	adds	r6, #8
 80071e6:	e7e5      	b.n	80071b4 <_dtoa_r+0x36c>
 80071e8:	f000 809b 	beq.w	8007322 <_dtoa_r+0x4da>
 80071ec:	9b00      	ldr	r3, [sp, #0]
 80071ee:	4f9d      	ldr	r7, [pc, #628]	; (8007464 <_dtoa_r+0x61c>)
 80071f0:	425e      	negs	r6, r3
 80071f2:	4b9b      	ldr	r3, [pc, #620]	; (8007460 <_dtoa_r+0x618>)
 80071f4:	f006 020f 	and.w	r2, r6, #15
 80071f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	ec51 0b19 	vmov	r0, r1, d9
 8007204:	f7f9 fa00 	bl	8000608 <__aeabi_dmul>
 8007208:	1136      	asrs	r6, r6, #4
 800720a:	4682      	mov	sl, r0
 800720c:	468b      	mov	fp, r1
 800720e:	2300      	movs	r3, #0
 8007210:	2502      	movs	r5, #2
 8007212:	2e00      	cmp	r6, #0
 8007214:	d17a      	bne.n	800730c <_dtoa_r+0x4c4>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1d3      	bne.n	80071c2 <_dtoa_r+0x37a>
 800721a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8082 	beq.w	8007326 <_dtoa_r+0x4de>
 8007222:	4b91      	ldr	r3, [pc, #580]	; (8007468 <_dtoa_r+0x620>)
 8007224:	2200      	movs	r2, #0
 8007226:	4650      	mov	r0, sl
 8007228:	4659      	mov	r1, fp
 800722a:	f7f9 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	d079      	beq.n	8007326 <_dtoa_r+0x4de>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d076      	beq.n	8007326 <_dtoa_r+0x4de>
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	dd36      	ble.n	80072ac <_dtoa_r+0x464>
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	4650      	mov	r0, sl
 8007242:	4659      	mov	r1, fp
 8007244:	1e5f      	subs	r7, r3, #1
 8007246:	2200      	movs	r2, #0
 8007248:	4b88      	ldr	r3, [pc, #544]	; (800746c <_dtoa_r+0x624>)
 800724a:	f7f9 f9dd 	bl	8000608 <__aeabi_dmul>
 800724e:	9e02      	ldr	r6, [sp, #8]
 8007250:	4682      	mov	sl, r0
 8007252:	468b      	mov	fp, r1
 8007254:	3501      	adds	r5, #1
 8007256:	4628      	mov	r0, r5
 8007258:	f7f9 f96c 	bl	8000534 <__aeabi_i2d>
 800725c:	4652      	mov	r2, sl
 800725e:	465b      	mov	r3, fp
 8007260:	f7f9 f9d2 	bl	8000608 <__aeabi_dmul>
 8007264:	4b82      	ldr	r3, [pc, #520]	; (8007470 <_dtoa_r+0x628>)
 8007266:	2200      	movs	r2, #0
 8007268:	f7f9 f818 	bl	800029c <__adddf3>
 800726c:	46d0      	mov	r8, sl
 800726e:	46d9      	mov	r9, fp
 8007270:	4682      	mov	sl, r0
 8007272:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007276:	2e00      	cmp	r6, #0
 8007278:	d158      	bne.n	800732c <_dtoa_r+0x4e4>
 800727a:	4b7e      	ldr	r3, [pc, #504]	; (8007474 <_dtoa_r+0x62c>)
 800727c:	2200      	movs	r2, #0
 800727e:	4640      	mov	r0, r8
 8007280:	4649      	mov	r1, r9
 8007282:	f7f9 f809 	bl	8000298 <__aeabi_dsub>
 8007286:	4652      	mov	r2, sl
 8007288:	465b      	mov	r3, fp
 800728a:	4680      	mov	r8, r0
 800728c:	4689      	mov	r9, r1
 800728e:	f7f9 fc4b 	bl	8000b28 <__aeabi_dcmpgt>
 8007292:	2800      	cmp	r0, #0
 8007294:	f040 8295 	bne.w	80077c2 <_dtoa_r+0x97a>
 8007298:	4652      	mov	r2, sl
 800729a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800729e:	4640      	mov	r0, r8
 80072a0:	4649      	mov	r1, r9
 80072a2:	f7f9 fc23 	bl	8000aec <__aeabi_dcmplt>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f040 8289 	bne.w	80077be <_dtoa_r+0x976>
 80072ac:	ec5b ab19 	vmov	sl, fp, d9
 80072b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f2c0 8148 	blt.w	8007548 <_dtoa_r+0x700>
 80072b8:	9a00      	ldr	r2, [sp, #0]
 80072ba:	2a0e      	cmp	r2, #14
 80072bc:	f300 8144 	bgt.w	8007548 <_dtoa_r+0x700>
 80072c0:	4b67      	ldr	r3, [pc, #412]	; (8007460 <_dtoa_r+0x618>)
 80072c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f280 80d5 	bge.w	800747c <_dtoa_r+0x634>
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f300 80d1 	bgt.w	800747c <_dtoa_r+0x634>
 80072da:	f040 826f 	bne.w	80077bc <_dtoa_r+0x974>
 80072de:	4b65      	ldr	r3, [pc, #404]	; (8007474 <_dtoa_r+0x62c>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	4640      	mov	r0, r8
 80072e4:	4649      	mov	r1, r9
 80072e6:	f7f9 f98f 	bl	8000608 <__aeabi_dmul>
 80072ea:	4652      	mov	r2, sl
 80072ec:	465b      	mov	r3, fp
 80072ee:	f7f9 fc11 	bl	8000b14 <__aeabi_dcmpge>
 80072f2:	9e03      	ldr	r6, [sp, #12]
 80072f4:	4637      	mov	r7, r6
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f040 8245 	bne.w	8007786 <_dtoa_r+0x93e>
 80072fc:	9d01      	ldr	r5, [sp, #4]
 80072fe:	2331      	movs	r3, #49	; 0x31
 8007300:	f805 3b01 	strb.w	r3, [r5], #1
 8007304:	9b00      	ldr	r3, [sp, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	e240      	b.n	800778e <_dtoa_r+0x946>
 800730c:	07f2      	lsls	r2, r6, #31
 800730e:	d505      	bpl.n	800731c <_dtoa_r+0x4d4>
 8007310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007314:	f7f9 f978 	bl	8000608 <__aeabi_dmul>
 8007318:	3501      	adds	r5, #1
 800731a:	2301      	movs	r3, #1
 800731c:	1076      	asrs	r6, r6, #1
 800731e:	3708      	adds	r7, #8
 8007320:	e777      	b.n	8007212 <_dtoa_r+0x3ca>
 8007322:	2502      	movs	r5, #2
 8007324:	e779      	b.n	800721a <_dtoa_r+0x3d2>
 8007326:	9f00      	ldr	r7, [sp, #0]
 8007328:	9e03      	ldr	r6, [sp, #12]
 800732a:	e794      	b.n	8007256 <_dtoa_r+0x40e>
 800732c:	9901      	ldr	r1, [sp, #4]
 800732e:	4b4c      	ldr	r3, [pc, #304]	; (8007460 <_dtoa_r+0x618>)
 8007330:	4431      	add	r1, r6
 8007332:	910d      	str	r1, [sp, #52]	; 0x34
 8007334:	9908      	ldr	r1, [sp, #32]
 8007336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800733a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800733e:	2900      	cmp	r1, #0
 8007340:	d043      	beq.n	80073ca <_dtoa_r+0x582>
 8007342:	494d      	ldr	r1, [pc, #308]	; (8007478 <_dtoa_r+0x630>)
 8007344:	2000      	movs	r0, #0
 8007346:	f7f9 fa89 	bl	800085c <__aeabi_ddiv>
 800734a:	4652      	mov	r2, sl
 800734c:	465b      	mov	r3, fp
 800734e:	f7f8 ffa3 	bl	8000298 <__aeabi_dsub>
 8007352:	9d01      	ldr	r5, [sp, #4]
 8007354:	4682      	mov	sl, r0
 8007356:	468b      	mov	fp, r1
 8007358:	4649      	mov	r1, r9
 800735a:	4640      	mov	r0, r8
 800735c:	f7f9 fc04 	bl	8000b68 <__aeabi_d2iz>
 8007360:	4606      	mov	r6, r0
 8007362:	f7f9 f8e7 	bl	8000534 <__aeabi_i2d>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f8 ff93 	bl	8000298 <__aeabi_dsub>
 8007372:	3630      	adds	r6, #48	; 0x30
 8007374:	f805 6b01 	strb.w	r6, [r5], #1
 8007378:	4652      	mov	r2, sl
 800737a:	465b      	mov	r3, fp
 800737c:	4680      	mov	r8, r0
 800737e:	4689      	mov	r9, r1
 8007380:	f7f9 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	d163      	bne.n	8007450 <_dtoa_r+0x608>
 8007388:	4642      	mov	r2, r8
 800738a:	464b      	mov	r3, r9
 800738c:	4936      	ldr	r1, [pc, #216]	; (8007468 <_dtoa_r+0x620>)
 800738e:	2000      	movs	r0, #0
 8007390:	f7f8 ff82 	bl	8000298 <__aeabi_dsub>
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	f7f9 fba8 	bl	8000aec <__aeabi_dcmplt>
 800739c:	2800      	cmp	r0, #0
 800739e:	f040 80b5 	bne.w	800750c <_dtoa_r+0x6c4>
 80073a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a4:	429d      	cmp	r5, r3
 80073a6:	d081      	beq.n	80072ac <_dtoa_r+0x464>
 80073a8:	4b30      	ldr	r3, [pc, #192]	; (800746c <_dtoa_r+0x624>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	4650      	mov	r0, sl
 80073ae:	4659      	mov	r1, fp
 80073b0:	f7f9 f92a 	bl	8000608 <__aeabi_dmul>
 80073b4:	4b2d      	ldr	r3, [pc, #180]	; (800746c <_dtoa_r+0x624>)
 80073b6:	4682      	mov	sl, r0
 80073b8:	468b      	mov	fp, r1
 80073ba:	4640      	mov	r0, r8
 80073bc:	4649      	mov	r1, r9
 80073be:	2200      	movs	r2, #0
 80073c0:	f7f9 f922 	bl	8000608 <__aeabi_dmul>
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	e7c6      	b.n	8007358 <_dtoa_r+0x510>
 80073ca:	4650      	mov	r0, sl
 80073cc:	4659      	mov	r1, fp
 80073ce:	f7f9 f91b 	bl	8000608 <__aeabi_dmul>
 80073d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d4:	9d01      	ldr	r5, [sp, #4]
 80073d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073d8:	4682      	mov	sl, r0
 80073da:	468b      	mov	fp, r1
 80073dc:	4649      	mov	r1, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	f7f9 fbc2 	bl	8000b68 <__aeabi_d2iz>
 80073e4:	4606      	mov	r6, r0
 80073e6:	f7f9 f8a5 	bl	8000534 <__aeabi_i2d>
 80073ea:	3630      	adds	r6, #48	; 0x30
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f8 ff50 	bl	8000298 <__aeabi_dsub>
 80073f8:	f805 6b01 	strb.w	r6, [r5], #1
 80073fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073fe:	429d      	cmp	r5, r3
 8007400:	4680      	mov	r8, r0
 8007402:	4689      	mov	r9, r1
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	d124      	bne.n	8007454 <_dtoa_r+0x60c>
 800740a:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <_dtoa_r+0x630>)
 800740c:	4650      	mov	r0, sl
 800740e:	4659      	mov	r1, fp
 8007410:	f7f8 ff44 	bl	800029c <__adddf3>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4640      	mov	r0, r8
 800741a:	4649      	mov	r1, r9
 800741c:	f7f9 fb84 	bl	8000b28 <__aeabi_dcmpgt>
 8007420:	2800      	cmp	r0, #0
 8007422:	d173      	bne.n	800750c <_dtoa_r+0x6c4>
 8007424:	4652      	mov	r2, sl
 8007426:	465b      	mov	r3, fp
 8007428:	4913      	ldr	r1, [pc, #76]	; (8007478 <_dtoa_r+0x630>)
 800742a:	2000      	movs	r0, #0
 800742c:	f7f8 ff34 	bl	8000298 <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4640      	mov	r0, r8
 8007436:	4649      	mov	r1, r9
 8007438:	f7f9 fb58 	bl	8000aec <__aeabi_dcmplt>
 800743c:	2800      	cmp	r0, #0
 800743e:	f43f af35 	beq.w	80072ac <_dtoa_r+0x464>
 8007442:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007444:	1e6b      	subs	r3, r5, #1
 8007446:	930f      	str	r3, [sp, #60]	; 0x3c
 8007448:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d0f8      	beq.n	8007442 <_dtoa_r+0x5fa>
 8007450:	9700      	str	r7, [sp, #0]
 8007452:	e049      	b.n	80074e8 <_dtoa_r+0x6a0>
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_dtoa_r+0x624>)
 8007456:	f7f9 f8d7 	bl	8000608 <__aeabi_dmul>
 800745a:	4680      	mov	r8, r0
 800745c:	4689      	mov	r9, r1
 800745e:	e7bd      	b.n	80073dc <_dtoa_r+0x594>
 8007460:	08009398 	.word	0x08009398
 8007464:	08009370 	.word	0x08009370
 8007468:	3ff00000 	.word	0x3ff00000
 800746c:	40240000 	.word	0x40240000
 8007470:	401c0000 	.word	0x401c0000
 8007474:	40140000 	.word	0x40140000
 8007478:	3fe00000 	.word	0x3fe00000
 800747c:	9d01      	ldr	r5, [sp, #4]
 800747e:	4656      	mov	r6, sl
 8007480:	465f      	mov	r7, fp
 8007482:	4642      	mov	r2, r8
 8007484:	464b      	mov	r3, r9
 8007486:	4630      	mov	r0, r6
 8007488:	4639      	mov	r1, r7
 800748a:	f7f9 f9e7 	bl	800085c <__aeabi_ddiv>
 800748e:	f7f9 fb6b 	bl	8000b68 <__aeabi_d2iz>
 8007492:	4682      	mov	sl, r0
 8007494:	f7f9 f84e 	bl	8000534 <__aeabi_i2d>
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	f7f9 f8b4 	bl	8000608 <__aeabi_dmul>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4630      	mov	r0, r6
 80074a6:	4639      	mov	r1, r7
 80074a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80074ac:	f7f8 fef4 	bl	8000298 <__aeabi_dsub>
 80074b0:	f805 6b01 	strb.w	r6, [r5], #1
 80074b4:	9e01      	ldr	r6, [sp, #4]
 80074b6:	9f03      	ldr	r7, [sp, #12]
 80074b8:	1bae      	subs	r6, r5, r6
 80074ba:	42b7      	cmp	r7, r6
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	d135      	bne.n	800752e <_dtoa_r+0x6e6>
 80074c2:	f7f8 feeb 	bl	800029c <__adddf3>
 80074c6:	4642      	mov	r2, r8
 80074c8:	464b      	mov	r3, r9
 80074ca:	4606      	mov	r6, r0
 80074cc:	460f      	mov	r7, r1
 80074ce:	f7f9 fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80074d2:	b9d0      	cbnz	r0, 800750a <_dtoa_r+0x6c2>
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	4630      	mov	r0, r6
 80074da:	4639      	mov	r1, r7
 80074dc:	f7f9 fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80074e0:	b110      	cbz	r0, 80074e8 <_dtoa_r+0x6a0>
 80074e2:	f01a 0f01 	tst.w	sl, #1
 80074e6:	d110      	bne.n	800750a <_dtoa_r+0x6c2>
 80074e8:	4620      	mov	r0, r4
 80074ea:	ee18 1a10 	vmov	r1, s16
 80074ee:	f000 faf3 	bl	8007ad8 <_Bfree>
 80074f2:	2300      	movs	r3, #0
 80074f4:	9800      	ldr	r0, [sp, #0]
 80074f6:	702b      	strb	r3, [r5, #0]
 80074f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074fa:	3001      	adds	r0, #1
 80074fc:	6018      	str	r0, [r3, #0]
 80074fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007500:	2b00      	cmp	r3, #0
 8007502:	f43f acf1 	beq.w	8006ee8 <_dtoa_r+0xa0>
 8007506:	601d      	str	r5, [r3, #0]
 8007508:	e4ee      	b.n	8006ee8 <_dtoa_r+0xa0>
 800750a:	9f00      	ldr	r7, [sp, #0]
 800750c:	462b      	mov	r3, r5
 800750e:	461d      	mov	r5, r3
 8007510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007514:	2a39      	cmp	r2, #57	; 0x39
 8007516:	d106      	bne.n	8007526 <_dtoa_r+0x6de>
 8007518:	9a01      	ldr	r2, [sp, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d1f7      	bne.n	800750e <_dtoa_r+0x6c6>
 800751e:	9901      	ldr	r1, [sp, #4]
 8007520:	2230      	movs	r2, #48	; 0x30
 8007522:	3701      	adds	r7, #1
 8007524:	700a      	strb	r2, [r1, #0]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	3201      	adds	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e790      	b.n	8007450 <_dtoa_r+0x608>
 800752e:	4ba6      	ldr	r3, [pc, #664]	; (80077c8 <_dtoa_r+0x980>)
 8007530:	2200      	movs	r2, #0
 8007532:	f7f9 f869 	bl	8000608 <__aeabi_dmul>
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	f7f9 facb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007542:	2800      	cmp	r0, #0
 8007544:	d09d      	beq.n	8007482 <_dtoa_r+0x63a>
 8007546:	e7cf      	b.n	80074e8 <_dtoa_r+0x6a0>
 8007548:	9a08      	ldr	r2, [sp, #32]
 800754a:	2a00      	cmp	r2, #0
 800754c:	f000 80d7 	beq.w	80076fe <_dtoa_r+0x8b6>
 8007550:	9a06      	ldr	r2, [sp, #24]
 8007552:	2a01      	cmp	r2, #1
 8007554:	f300 80ba 	bgt.w	80076cc <_dtoa_r+0x884>
 8007558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800755a:	2a00      	cmp	r2, #0
 800755c:	f000 80b2 	beq.w	80076c4 <_dtoa_r+0x87c>
 8007560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007564:	9e07      	ldr	r6, [sp, #28]
 8007566:	9d04      	ldr	r5, [sp, #16]
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	441a      	add	r2, r3
 800756c:	9204      	str	r2, [sp, #16]
 800756e:	9a05      	ldr	r2, [sp, #20]
 8007570:	2101      	movs	r1, #1
 8007572:	441a      	add	r2, r3
 8007574:	4620      	mov	r0, r4
 8007576:	9205      	str	r2, [sp, #20]
 8007578:	f000 fb66 	bl	8007c48 <__i2b>
 800757c:	4607      	mov	r7, r0
 800757e:	2d00      	cmp	r5, #0
 8007580:	dd0c      	ble.n	800759c <_dtoa_r+0x754>
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd09      	ble.n	800759c <_dtoa_r+0x754>
 8007588:	42ab      	cmp	r3, r5
 800758a:	9a04      	ldr	r2, [sp, #16]
 800758c:	bfa8      	it	ge
 800758e:	462b      	movge	r3, r5
 8007590:	1ad2      	subs	r2, r2, r3
 8007592:	9204      	str	r2, [sp, #16]
 8007594:	9a05      	ldr	r2, [sp, #20]
 8007596:	1aed      	subs	r5, r5, r3
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	9b07      	ldr	r3, [sp, #28]
 800759e:	b31b      	cbz	r3, 80075e8 <_dtoa_r+0x7a0>
 80075a0:	9b08      	ldr	r3, [sp, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80af 	beq.w	8007706 <_dtoa_r+0x8be>
 80075a8:	2e00      	cmp	r6, #0
 80075aa:	dd13      	ble.n	80075d4 <_dtoa_r+0x78c>
 80075ac:	4639      	mov	r1, r7
 80075ae:	4632      	mov	r2, r6
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fc09 	bl	8007dc8 <__pow5mult>
 80075b6:	ee18 2a10 	vmov	r2, s16
 80075ba:	4601      	mov	r1, r0
 80075bc:	4607      	mov	r7, r0
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 fb58 	bl	8007c74 <__multiply>
 80075c4:	ee18 1a10 	vmov	r1, s16
 80075c8:	4680      	mov	r8, r0
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fa84 	bl	8007ad8 <_Bfree>
 80075d0:	ee08 8a10 	vmov	s16, r8
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	1b9a      	subs	r2, r3, r6
 80075d8:	d006      	beq.n	80075e8 <_dtoa_r+0x7a0>
 80075da:	ee18 1a10 	vmov	r1, s16
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 fbf2 	bl	8007dc8 <__pow5mult>
 80075e4:	ee08 0a10 	vmov	s16, r0
 80075e8:	2101      	movs	r1, #1
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fb2c 	bl	8007c48 <__i2b>
 80075f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	4606      	mov	r6, r0
 80075f6:	f340 8088 	ble.w	800770a <_dtoa_r+0x8c2>
 80075fa:	461a      	mov	r2, r3
 80075fc:	4601      	mov	r1, r0
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fbe2 	bl	8007dc8 <__pow5mult>
 8007604:	9b06      	ldr	r3, [sp, #24]
 8007606:	2b01      	cmp	r3, #1
 8007608:	4606      	mov	r6, r0
 800760a:	f340 8081 	ble.w	8007710 <_dtoa_r+0x8c8>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	6933      	ldr	r3, [r6, #16]
 8007614:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007618:	6918      	ldr	r0, [r3, #16]
 800761a:	f000 fac5 	bl	8007ba8 <__hi0bits>
 800761e:	f1c0 0020 	rsb	r0, r0, #32
 8007622:	9b05      	ldr	r3, [sp, #20]
 8007624:	4418      	add	r0, r3
 8007626:	f010 001f 	ands.w	r0, r0, #31
 800762a:	f000 8092 	beq.w	8007752 <_dtoa_r+0x90a>
 800762e:	f1c0 0320 	rsb	r3, r0, #32
 8007632:	2b04      	cmp	r3, #4
 8007634:	f340 808a 	ble.w	800774c <_dtoa_r+0x904>
 8007638:	f1c0 001c 	rsb	r0, r0, #28
 800763c:	9b04      	ldr	r3, [sp, #16]
 800763e:	4403      	add	r3, r0
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	9b05      	ldr	r3, [sp, #20]
 8007644:	4403      	add	r3, r0
 8007646:	4405      	add	r5, r0
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dd07      	ble.n	8007660 <_dtoa_r+0x818>
 8007650:	ee18 1a10 	vmov	r1, s16
 8007654:	461a      	mov	r2, r3
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fc10 	bl	8007e7c <__lshift>
 800765c:	ee08 0a10 	vmov	s16, r0
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	dd05      	ble.n	8007672 <_dtoa_r+0x82a>
 8007666:	4631      	mov	r1, r6
 8007668:	461a      	mov	r2, r3
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fc06 	bl	8007e7c <__lshift>
 8007670:	4606      	mov	r6, r0
 8007672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d06e      	beq.n	8007756 <_dtoa_r+0x90e>
 8007678:	ee18 0a10 	vmov	r0, s16
 800767c:	4631      	mov	r1, r6
 800767e:	f000 fc6d 	bl	8007f5c <__mcmp>
 8007682:	2800      	cmp	r0, #0
 8007684:	da67      	bge.n	8007756 <_dtoa_r+0x90e>
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	ee18 1a10 	vmov	r1, s16
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	220a      	movs	r2, #10
 8007692:	2300      	movs	r3, #0
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fa41 	bl	8007b1c <__multadd>
 800769a:	9b08      	ldr	r3, [sp, #32]
 800769c:	ee08 0a10 	vmov	s16, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 81b1 	beq.w	8007a08 <_dtoa_r+0xbc0>
 80076a6:	2300      	movs	r3, #0
 80076a8:	4639      	mov	r1, r7
 80076aa:	220a      	movs	r2, #10
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fa35 	bl	8007b1c <__multadd>
 80076b2:	9b02      	ldr	r3, [sp, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	4607      	mov	r7, r0
 80076b8:	f300 808e 	bgt.w	80077d8 <_dtoa_r+0x990>
 80076bc:	9b06      	ldr	r3, [sp, #24]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	dc51      	bgt.n	8007766 <_dtoa_r+0x91e>
 80076c2:	e089      	b.n	80077d8 <_dtoa_r+0x990>
 80076c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076ca:	e74b      	b.n	8007564 <_dtoa_r+0x71c>
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	1e5e      	subs	r6, r3, #1
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	42b3      	cmp	r3, r6
 80076d4:	bfbf      	itttt	lt
 80076d6:	9b07      	ldrlt	r3, [sp, #28]
 80076d8:	9607      	strlt	r6, [sp, #28]
 80076da:	1af2      	sublt	r2, r6, r3
 80076dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076de:	bfb6      	itet	lt
 80076e0:	189b      	addlt	r3, r3, r2
 80076e2:	1b9e      	subge	r6, r3, r6
 80076e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	bfb8      	it	lt
 80076ea:	2600      	movlt	r6, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bfb7      	itett	lt
 80076f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80076f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80076f8:	1a9d      	sublt	r5, r3, r2
 80076fa:	2300      	movlt	r3, #0
 80076fc:	e734      	b.n	8007568 <_dtoa_r+0x720>
 80076fe:	9e07      	ldr	r6, [sp, #28]
 8007700:	9d04      	ldr	r5, [sp, #16]
 8007702:	9f08      	ldr	r7, [sp, #32]
 8007704:	e73b      	b.n	800757e <_dtoa_r+0x736>
 8007706:	9a07      	ldr	r2, [sp, #28]
 8007708:	e767      	b.n	80075da <_dtoa_r+0x792>
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	2b01      	cmp	r3, #1
 800770e:	dc18      	bgt.n	8007742 <_dtoa_r+0x8fa>
 8007710:	f1ba 0f00 	cmp.w	sl, #0
 8007714:	d115      	bne.n	8007742 <_dtoa_r+0x8fa>
 8007716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800771a:	b993      	cbnz	r3, 8007742 <_dtoa_r+0x8fa>
 800771c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007720:	0d1b      	lsrs	r3, r3, #20
 8007722:	051b      	lsls	r3, r3, #20
 8007724:	b183      	cbz	r3, 8007748 <_dtoa_r+0x900>
 8007726:	9b04      	ldr	r3, [sp, #16]
 8007728:	3301      	adds	r3, #1
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	3301      	adds	r3, #1
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	f04f 0801 	mov.w	r8, #1
 8007736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007738:	2b00      	cmp	r3, #0
 800773a:	f47f af6a 	bne.w	8007612 <_dtoa_r+0x7ca>
 800773e:	2001      	movs	r0, #1
 8007740:	e76f      	b.n	8007622 <_dtoa_r+0x7da>
 8007742:	f04f 0800 	mov.w	r8, #0
 8007746:	e7f6      	b.n	8007736 <_dtoa_r+0x8ee>
 8007748:	4698      	mov	r8, r3
 800774a:	e7f4      	b.n	8007736 <_dtoa_r+0x8ee>
 800774c:	f43f af7d 	beq.w	800764a <_dtoa_r+0x802>
 8007750:	4618      	mov	r0, r3
 8007752:	301c      	adds	r0, #28
 8007754:	e772      	b.n	800763c <_dtoa_r+0x7f4>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc37      	bgt.n	80077cc <_dtoa_r+0x984>
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	2b02      	cmp	r3, #2
 8007760:	dd34      	ble.n	80077cc <_dtoa_r+0x984>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	9302      	str	r3, [sp, #8]
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	b96b      	cbnz	r3, 8007786 <_dtoa_r+0x93e>
 800776a:	4631      	mov	r1, r6
 800776c:	2205      	movs	r2, #5
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f9d4 	bl	8007b1c <__multadd>
 8007774:	4601      	mov	r1, r0
 8007776:	4606      	mov	r6, r0
 8007778:	ee18 0a10 	vmov	r0, s16
 800777c:	f000 fbee 	bl	8007f5c <__mcmp>
 8007780:	2800      	cmp	r0, #0
 8007782:	f73f adbb 	bgt.w	80072fc <_dtoa_r+0x4b4>
 8007786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007788:	9d01      	ldr	r5, [sp, #4]
 800778a:	43db      	mvns	r3, r3
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f04f 0800 	mov.w	r8, #0
 8007792:	4631      	mov	r1, r6
 8007794:	4620      	mov	r0, r4
 8007796:	f000 f99f 	bl	8007ad8 <_Bfree>
 800779a:	2f00      	cmp	r7, #0
 800779c:	f43f aea4 	beq.w	80074e8 <_dtoa_r+0x6a0>
 80077a0:	f1b8 0f00 	cmp.w	r8, #0
 80077a4:	d005      	beq.n	80077b2 <_dtoa_r+0x96a>
 80077a6:	45b8      	cmp	r8, r7
 80077a8:	d003      	beq.n	80077b2 <_dtoa_r+0x96a>
 80077aa:	4641      	mov	r1, r8
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 f993 	bl	8007ad8 <_Bfree>
 80077b2:	4639      	mov	r1, r7
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 f98f 	bl	8007ad8 <_Bfree>
 80077ba:	e695      	b.n	80074e8 <_dtoa_r+0x6a0>
 80077bc:	2600      	movs	r6, #0
 80077be:	4637      	mov	r7, r6
 80077c0:	e7e1      	b.n	8007786 <_dtoa_r+0x93e>
 80077c2:	9700      	str	r7, [sp, #0]
 80077c4:	4637      	mov	r7, r6
 80077c6:	e599      	b.n	80072fc <_dtoa_r+0x4b4>
 80077c8:	40240000 	.word	0x40240000
 80077cc:	9b08      	ldr	r3, [sp, #32]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80ca 	beq.w	8007968 <_dtoa_r+0xb20>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	2d00      	cmp	r5, #0
 80077da:	dd05      	ble.n	80077e8 <_dtoa_r+0x9a0>
 80077dc:	4639      	mov	r1, r7
 80077de:	462a      	mov	r2, r5
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fb4b 	bl	8007e7c <__lshift>
 80077e6:	4607      	mov	r7, r0
 80077e8:	f1b8 0f00 	cmp.w	r8, #0
 80077ec:	d05b      	beq.n	80078a6 <_dtoa_r+0xa5e>
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 f931 	bl	8007a58 <_Balloc>
 80077f6:	4605      	mov	r5, r0
 80077f8:	b928      	cbnz	r0, 8007806 <_dtoa_r+0x9be>
 80077fa:	4b87      	ldr	r3, [pc, #540]	; (8007a18 <_dtoa_r+0xbd0>)
 80077fc:	4602      	mov	r2, r0
 80077fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007802:	f7ff bb3b 	b.w	8006e7c <_dtoa_r+0x34>
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	3202      	adds	r2, #2
 800780a:	0092      	lsls	r2, r2, #2
 800780c:	f107 010c 	add.w	r1, r7, #12
 8007810:	300c      	adds	r0, #12
 8007812:	f000 f913 	bl	8007a3c <memcpy>
 8007816:	2201      	movs	r2, #1
 8007818:	4629      	mov	r1, r5
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fb2e 	bl	8007e7c <__lshift>
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	f103 0901 	add.w	r9, r3, #1
 8007826:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800782a:	4413      	add	r3, r2
 800782c:	9305      	str	r3, [sp, #20]
 800782e:	f00a 0301 	and.w	r3, sl, #1
 8007832:	46b8      	mov	r8, r7
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	4607      	mov	r7, r0
 8007838:	4631      	mov	r1, r6
 800783a:	ee18 0a10 	vmov	r0, s16
 800783e:	f7ff fa75 	bl	8006d2c <quorem>
 8007842:	4641      	mov	r1, r8
 8007844:	9002      	str	r0, [sp, #8]
 8007846:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800784a:	ee18 0a10 	vmov	r0, s16
 800784e:	f000 fb85 	bl	8007f5c <__mcmp>
 8007852:	463a      	mov	r2, r7
 8007854:	9003      	str	r0, [sp, #12]
 8007856:	4631      	mov	r1, r6
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fb9b 	bl	8007f94 <__mdiff>
 800785e:	68c2      	ldr	r2, [r0, #12]
 8007860:	f109 3bff 	add.w	fp, r9, #4294967295
 8007864:	4605      	mov	r5, r0
 8007866:	bb02      	cbnz	r2, 80078aa <_dtoa_r+0xa62>
 8007868:	4601      	mov	r1, r0
 800786a:	ee18 0a10 	vmov	r0, s16
 800786e:	f000 fb75 	bl	8007f5c <__mcmp>
 8007872:	4602      	mov	r2, r0
 8007874:	4629      	mov	r1, r5
 8007876:	4620      	mov	r0, r4
 8007878:	9207      	str	r2, [sp, #28]
 800787a:	f000 f92d 	bl	8007ad8 <_Bfree>
 800787e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007882:	ea43 0102 	orr.w	r1, r3, r2
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	430b      	orrs	r3, r1
 800788a:	464d      	mov	r5, r9
 800788c:	d10f      	bne.n	80078ae <_dtoa_r+0xa66>
 800788e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007892:	d02a      	beq.n	80078ea <_dtoa_r+0xaa2>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	dd02      	ble.n	80078a0 <_dtoa_r+0xa58>
 800789a:	9b02      	ldr	r3, [sp, #8]
 800789c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80078a0:	f88b a000 	strb.w	sl, [fp]
 80078a4:	e775      	b.n	8007792 <_dtoa_r+0x94a>
 80078a6:	4638      	mov	r0, r7
 80078a8:	e7ba      	b.n	8007820 <_dtoa_r+0x9d8>
 80078aa:	2201      	movs	r2, #1
 80078ac:	e7e2      	b.n	8007874 <_dtoa_r+0xa2c>
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	db04      	blt.n	80078be <_dtoa_r+0xa76>
 80078b4:	9906      	ldr	r1, [sp, #24]
 80078b6:	430b      	orrs	r3, r1
 80078b8:	9904      	ldr	r1, [sp, #16]
 80078ba:	430b      	orrs	r3, r1
 80078bc:	d122      	bne.n	8007904 <_dtoa_r+0xabc>
 80078be:	2a00      	cmp	r2, #0
 80078c0:	ddee      	ble.n	80078a0 <_dtoa_r+0xa58>
 80078c2:	ee18 1a10 	vmov	r1, s16
 80078c6:	2201      	movs	r2, #1
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fad7 	bl	8007e7c <__lshift>
 80078ce:	4631      	mov	r1, r6
 80078d0:	ee08 0a10 	vmov	s16, r0
 80078d4:	f000 fb42 	bl	8007f5c <__mcmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dc03      	bgt.n	80078e4 <_dtoa_r+0xa9c>
 80078dc:	d1e0      	bne.n	80078a0 <_dtoa_r+0xa58>
 80078de:	f01a 0f01 	tst.w	sl, #1
 80078e2:	d0dd      	beq.n	80078a0 <_dtoa_r+0xa58>
 80078e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078e8:	d1d7      	bne.n	800789a <_dtoa_r+0xa52>
 80078ea:	2339      	movs	r3, #57	; 0x39
 80078ec:	f88b 3000 	strb.w	r3, [fp]
 80078f0:	462b      	mov	r3, r5
 80078f2:	461d      	mov	r5, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078fa:	2a39      	cmp	r2, #57	; 0x39
 80078fc:	d071      	beq.n	80079e2 <_dtoa_r+0xb9a>
 80078fe:	3201      	adds	r2, #1
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	e746      	b.n	8007792 <_dtoa_r+0x94a>
 8007904:	2a00      	cmp	r2, #0
 8007906:	dd07      	ble.n	8007918 <_dtoa_r+0xad0>
 8007908:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800790c:	d0ed      	beq.n	80078ea <_dtoa_r+0xaa2>
 800790e:	f10a 0301 	add.w	r3, sl, #1
 8007912:	f88b 3000 	strb.w	r3, [fp]
 8007916:	e73c      	b.n	8007792 <_dtoa_r+0x94a>
 8007918:	9b05      	ldr	r3, [sp, #20]
 800791a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800791e:	4599      	cmp	r9, r3
 8007920:	d047      	beq.n	80079b2 <_dtoa_r+0xb6a>
 8007922:	ee18 1a10 	vmov	r1, s16
 8007926:	2300      	movs	r3, #0
 8007928:	220a      	movs	r2, #10
 800792a:	4620      	mov	r0, r4
 800792c:	f000 f8f6 	bl	8007b1c <__multadd>
 8007930:	45b8      	cmp	r8, r7
 8007932:	ee08 0a10 	vmov	s16, r0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	f04f 020a 	mov.w	r2, #10
 800793e:	4641      	mov	r1, r8
 8007940:	4620      	mov	r0, r4
 8007942:	d106      	bne.n	8007952 <_dtoa_r+0xb0a>
 8007944:	f000 f8ea 	bl	8007b1c <__multadd>
 8007948:	4680      	mov	r8, r0
 800794a:	4607      	mov	r7, r0
 800794c:	f109 0901 	add.w	r9, r9, #1
 8007950:	e772      	b.n	8007838 <_dtoa_r+0x9f0>
 8007952:	f000 f8e3 	bl	8007b1c <__multadd>
 8007956:	4639      	mov	r1, r7
 8007958:	4680      	mov	r8, r0
 800795a:	2300      	movs	r3, #0
 800795c:	220a      	movs	r2, #10
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f8dc 	bl	8007b1c <__multadd>
 8007964:	4607      	mov	r7, r0
 8007966:	e7f1      	b.n	800794c <_dtoa_r+0xb04>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	9d01      	ldr	r5, [sp, #4]
 800796e:	ee18 0a10 	vmov	r0, s16
 8007972:	4631      	mov	r1, r6
 8007974:	f7ff f9da 	bl	8006d2c <quorem>
 8007978:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	f805 ab01 	strb.w	sl, [r5], #1
 8007982:	1aea      	subs	r2, r5, r3
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	4293      	cmp	r3, r2
 8007988:	dd09      	ble.n	800799e <_dtoa_r+0xb56>
 800798a:	ee18 1a10 	vmov	r1, s16
 800798e:	2300      	movs	r3, #0
 8007990:	220a      	movs	r2, #10
 8007992:	4620      	mov	r0, r4
 8007994:	f000 f8c2 	bl	8007b1c <__multadd>
 8007998:	ee08 0a10 	vmov	s16, r0
 800799c:	e7e7      	b.n	800796e <_dtoa_r+0xb26>
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bfc8      	it	gt
 80079a4:	461d      	movgt	r5, r3
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	bfd8      	it	le
 80079aa:	2501      	movle	r5, #1
 80079ac:	441d      	add	r5, r3
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	ee18 1a10 	vmov	r1, s16
 80079b6:	2201      	movs	r2, #1
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 fa5f 	bl	8007e7c <__lshift>
 80079be:	4631      	mov	r1, r6
 80079c0:	ee08 0a10 	vmov	s16, r0
 80079c4:	f000 faca 	bl	8007f5c <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	dc91      	bgt.n	80078f0 <_dtoa_r+0xaa8>
 80079cc:	d102      	bne.n	80079d4 <_dtoa_r+0xb8c>
 80079ce:	f01a 0f01 	tst.w	sl, #1
 80079d2:	d18d      	bne.n	80078f0 <_dtoa_r+0xaa8>
 80079d4:	462b      	mov	r3, r5
 80079d6:	461d      	mov	r5, r3
 80079d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079dc:	2a30      	cmp	r2, #48	; 0x30
 80079de:	d0fa      	beq.n	80079d6 <_dtoa_r+0xb8e>
 80079e0:	e6d7      	b.n	8007792 <_dtoa_r+0x94a>
 80079e2:	9a01      	ldr	r2, [sp, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d184      	bne.n	80078f2 <_dtoa_r+0xaaa>
 80079e8:	9b00      	ldr	r3, [sp, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	2331      	movs	r3, #49	; 0x31
 80079f0:	7013      	strb	r3, [r2, #0]
 80079f2:	e6ce      	b.n	8007792 <_dtoa_r+0x94a>
 80079f4:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <_dtoa_r+0xbd4>)
 80079f6:	f7ff ba95 	b.w	8006f24 <_dtoa_r+0xdc>
 80079fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f aa6e 	bne.w	8006ede <_dtoa_r+0x96>
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <_dtoa_r+0xbd8>)
 8007a04:	f7ff ba8e 	b.w	8006f24 <_dtoa_r+0xdc>
 8007a08:	9b02      	ldr	r3, [sp, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dcae      	bgt.n	800796c <_dtoa_r+0xb24>
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	f73f aea8 	bgt.w	8007766 <_dtoa_r+0x91e>
 8007a16:	e7a9      	b.n	800796c <_dtoa_r+0xb24>
 8007a18:	08009303 	.word	0x08009303
 8007a1c:	08009260 	.word	0x08009260
 8007a20:	08009284 	.word	0x08009284

08007a24 <_localeconv_r>:
 8007a24:	4800      	ldr	r0, [pc, #0]	; (8007a28 <_localeconv_r+0x4>)
 8007a26:	4770      	bx	lr
 8007a28:	20000160 	.word	0x20000160

08007a2c <malloc>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <malloc+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f000 bc17 	b.w	8008264 <_malloc_r>
 8007a36:	bf00      	nop
 8007a38:	2000000c 	.word	0x2000000c

08007a3c <memcpy>:
 8007a3c:	440a      	add	r2, r1
 8007a3e:	4291      	cmp	r1, r2
 8007a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a44:	d100      	bne.n	8007a48 <memcpy+0xc>
 8007a46:	4770      	bx	lr
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a52:	4291      	cmp	r1, r2
 8007a54:	d1f9      	bne.n	8007a4a <memcpy+0xe>
 8007a56:	bd10      	pop	{r4, pc}

08007a58 <_Balloc>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	460d      	mov	r5, r1
 8007a60:	b976      	cbnz	r6, 8007a80 <_Balloc+0x28>
 8007a62:	2010      	movs	r0, #16
 8007a64:	f7ff ffe2 	bl	8007a2c <malloc>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a6c:	b920      	cbnz	r0, 8007a78 <_Balloc+0x20>
 8007a6e:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <_Balloc+0x78>)
 8007a70:	4818      	ldr	r0, [pc, #96]	; (8007ad4 <_Balloc+0x7c>)
 8007a72:	2166      	movs	r1, #102	; 0x66
 8007a74:	f000 fdd6 	bl	8008624 <__assert_func>
 8007a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a7c:	6006      	str	r6, [r0, #0]
 8007a7e:	60c6      	str	r6, [r0, #12]
 8007a80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a82:	68f3      	ldr	r3, [r6, #12]
 8007a84:	b183      	cbz	r3, 8007aa8 <_Balloc+0x50>
 8007a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a8e:	b9b8      	cbnz	r0, 8007ac0 <_Balloc+0x68>
 8007a90:	2101      	movs	r1, #1
 8007a92:	fa01 f605 	lsl.w	r6, r1, r5
 8007a96:	1d72      	adds	r2, r6, #5
 8007a98:	0092      	lsls	r2, r2, #2
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fb60 	bl	8008160 <_calloc_r>
 8007aa0:	b160      	cbz	r0, 8007abc <_Balloc+0x64>
 8007aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aa6:	e00e      	b.n	8007ac6 <_Balloc+0x6e>
 8007aa8:	2221      	movs	r2, #33	; 0x21
 8007aaa:	2104      	movs	r1, #4
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fb57 	bl	8008160 <_calloc_r>
 8007ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab4:	60f0      	str	r0, [r6, #12]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e4      	bne.n	8007a86 <_Balloc+0x2e>
 8007abc:	2000      	movs	r0, #0
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	6802      	ldr	r2, [r0, #0]
 8007ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007acc:	e7f7      	b.n	8007abe <_Balloc+0x66>
 8007ace:	bf00      	nop
 8007ad0:	08009291 	.word	0x08009291
 8007ad4:	08009314 	.word	0x08009314

08007ad8 <_Bfree>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007adc:	4605      	mov	r5, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	b976      	cbnz	r6, 8007b00 <_Bfree+0x28>
 8007ae2:	2010      	movs	r0, #16
 8007ae4:	f7ff ffa2 	bl	8007a2c <malloc>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6268      	str	r0, [r5, #36]	; 0x24
 8007aec:	b920      	cbnz	r0, 8007af8 <_Bfree+0x20>
 8007aee:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <_Bfree+0x3c>)
 8007af0:	4809      	ldr	r0, [pc, #36]	; (8007b18 <_Bfree+0x40>)
 8007af2:	218a      	movs	r1, #138	; 0x8a
 8007af4:	f000 fd96 	bl	8008624 <__assert_func>
 8007af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007afc:	6006      	str	r6, [r0, #0]
 8007afe:	60c6      	str	r6, [r0, #12]
 8007b00:	b13c      	cbz	r4, 8007b12 <_Bfree+0x3a>
 8007b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b04:	6862      	ldr	r2, [r4, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b0c:	6021      	str	r1, [r4, #0]
 8007b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	08009291 	.word	0x08009291
 8007b18:	08009314 	.word	0x08009314

08007b1c <__multadd>:
 8007b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b20:	690d      	ldr	r5, [r1, #16]
 8007b22:	4607      	mov	r7, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	461e      	mov	r6, r3
 8007b28:	f101 0c14 	add.w	ip, r1, #20
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b32:	b299      	uxth	r1, r3
 8007b34:	fb02 6101 	mla	r1, r2, r1, r6
 8007b38:	0c1e      	lsrs	r6, r3, #16
 8007b3a:	0c0b      	lsrs	r3, r1, #16
 8007b3c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b40:	b289      	uxth	r1, r1
 8007b42:	3001      	adds	r0, #1
 8007b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b48:	4285      	cmp	r5, r0
 8007b4a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b52:	dcec      	bgt.n	8007b2e <__multadd+0x12>
 8007b54:	b30e      	cbz	r6, 8007b9a <__multadd+0x7e>
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	dc19      	bgt.n	8007b90 <__multadd+0x74>
 8007b5c:	6861      	ldr	r1, [r4, #4]
 8007b5e:	4638      	mov	r0, r7
 8007b60:	3101      	adds	r1, #1
 8007b62:	f7ff ff79 	bl	8007a58 <_Balloc>
 8007b66:	4680      	mov	r8, r0
 8007b68:	b928      	cbnz	r0, 8007b76 <__multadd+0x5a>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <__multadd+0x84>)
 8007b6e:	480d      	ldr	r0, [pc, #52]	; (8007ba4 <__multadd+0x88>)
 8007b70:	21b5      	movs	r1, #181	; 0xb5
 8007b72:	f000 fd57 	bl	8008624 <__assert_func>
 8007b76:	6922      	ldr	r2, [r4, #16]
 8007b78:	3202      	adds	r2, #2
 8007b7a:	f104 010c 	add.w	r1, r4, #12
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	300c      	adds	r0, #12
 8007b82:	f7ff ff5b 	bl	8007a3c <memcpy>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff ffa5 	bl	8007ad8 <_Bfree>
 8007b8e:	4644      	mov	r4, r8
 8007b90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b94:	3501      	adds	r5, #1
 8007b96:	615e      	str	r6, [r3, #20]
 8007b98:	6125      	str	r5, [r4, #16]
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba0:	08009303 	.word	0x08009303
 8007ba4:	08009314 	.word	0x08009314

08007ba8 <__hi0bits>:
 8007ba8:	0c03      	lsrs	r3, r0, #16
 8007baa:	041b      	lsls	r3, r3, #16
 8007bac:	b9d3      	cbnz	r3, 8007be4 <__hi0bits+0x3c>
 8007bae:	0400      	lsls	r0, r0, #16
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007bb6:	bf04      	itt	eq
 8007bb8:	0200      	lsleq	r0, r0, #8
 8007bba:	3308      	addeq	r3, #8
 8007bbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bc0:	bf04      	itt	eq
 8007bc2:	0100      	lsleq	r0, r0, #4
 8007bc4:	3304      	addeq	r3, #4
 8007bc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bca:	bf04      	itt	eq
 8007bcc:	0080      	lsleq	r0, r0, #2
 8007bce:	3302      	addeq	r3, #2
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	db05      	blt.n	8007be0 <__hi0bits+0x38>
 8007bd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bd8:	f103 0301 	add.w	r3, r3, #1
 8007bdc:	bf08      	it	eq
 8007bde:	2320      	moveq	r3, #32
 8007be0:	4618      	mov	r0, r3
 8007be2:	4770      	bx	lr
 8007be4:	2300      	movs	r3, #0
 8007be6:	e7e4      	b.n	8007bb2 <__hi0bits+0xa>

08007be8 <__lo0bits>:
 8007be8:	6803      	ldr	r3, [r0, #0]
 8007bea:	f013 0207 	ands.w	r2, r3, #7
 8007bee:	4601      	mov	r1, r0
 8007bf0:	d00b      	beq.n	8007c0a <__lo0bits+0x22>
 8007bf2:	07da      	lsls	r2, r3, #31
 8007bf4:	d423      	bmi.n	8007c3e <__lo0bits+0x56>
 8007bf6:	0798      	lsls	r0, r3, #30
 8007bf8:	bf49      	itett	mi
 8007bfa:	085b      	lsrmi	r3, r3, #1
 8007bfc:	089b      	lsrpl	r3, r3, #2
 8007bfe:	2001      	movmi	r0, #1
 8007c00:	600b      	strmi	r3, [r1, #0]
 8007c02:	bf5c      	itt	pl
 8007c04:	600b      	strpl	r3, [r1, #0]
 8007c06:	2002      	movpl	r0, #2
 8007c08:	4770      	bx	lr
 8007c0a:	b298      	uxth	r0, r3
 8007c0c:	b9a8      	cbnz	r0, 8007c3a <__lo0bits+0x52>
 8007c0e:	0c1b      	lsrs	r3, r3, #16
 8007c10:	2010      	movs	r0, #16
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	b90a      	cbnz	r2, 8007c1a <__lo0bits+0x32>
 8007c16:	3008      	adds	r0, #8
 8007c18:	0a1b      	lsrs	r3, r3, #8
 8007c1a:	071a      	lsls	r2, r3, #28
 8007c1c:	bf04      	itt	eq
 8007c1e:	091b      	lsreq	r3, r3, #4
 8007c20:	3004      	addeq	r0, #4
 8007c22:	079a      	lsls	r2, r3, #30
 8007c24:	bf04      	itt	eq
 8007c26:	089b      	lsreq	r3, r3, #2
 8007c28:	3002      	addeq	r0, #2
 8007c2a:	07da      	lsls	r2, r3, #31
 8007c2c:	d403      	bmi.n	8007c36 <__lo0bits+0x4e>
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	f100 0001 	add.w	r0, r0, #1
 8007c34:	d005      	beq.n	8007c42 <__lo0bits+0x5a>
 8007c36:	600b      	str	r3, [r1, #0]
 8007c38:	4770      	bx	lr
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	e7e9      	b.n	8007c12 <__lo0bits+0x2a>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	4770      	bx	lr
 8007c42:	2020      	movs	r0, #32
 8007c44:	4770      	bx	lr
	...

08007c48 <__i2b>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	f7ff ff03 	bl	8007a58 <_Balloc>
 8007c52:	4602      	mov	r2, r0
 8007c54:	b928      	cbnz	r0, 8007c62 <__i2b+0x1a>
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <__i2b+0x24>)
 8007c58:	4805      	ldr	r0, [pc, #20]	; (8007c70 <__i2b+0x28>)
 8007c5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c5e:	f000 fce1 	bl	8008624 <__assert_func>
 8007c62:	2301      	movs	r3, #1
 8007c64:	6144      	str	r4, [r0, #20]
 8007c66:	6103      	str	r3, [r0, #16]
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08009303 	.word	0x08009303
 8007c70:	08009314 	.word	0x08009314

08007c74 <__multiply>:
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	4691      	mov	r9, r2
 8007c7a:	690a      	ldr	r2, [r1, #16]
 8007c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	bfb8      	it	lt
 8007c84:	460b      	movlt	r3, r1
 8007c86:	460c      	mov	r4, r1
 8007c88:	bfbc      	itt	lt
 8007c8a:	464c      	movlt	r4, r9
 8007c8c:	4699      	movlt	r9, r3
 8007c8e:	6927      	ldr	r7, [r4, #16]
 8007c90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c94:	68a3      	ldr	r3, [r4, #8]
 8007c96:	6861      	ldr	r1, [r4, #4]
 8007c98:	eb07 060a 	add.w	r6, r7, sl
 8007c9c:	42b3      	cmp	r3, r6
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	bfb8      	it	lt
 8007ca2:	3101      	addlt	r1, #1
 8007ca4:	f7ff fed8 	bl	8007a58 <_Balloc>
 8007ca8:	b930      	cbnz	r0, 8007cb8 <__multiply+0x44>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4b44      	ldr	r3, [pc, #272]	; (8007dc0 <__multiply+0x14c>)
 8007cae:	4845      	ldr	r0, [pc, #276]	; (8007dc4 <__multiply+0x150>)
 8007cb0:	f240 115d 	movw	r1, #349	; 0x15d
 8007cb4:	f000 fcb6 	bl	8008624 <__assert_func>
 8007cb8:	f100 0514 	add.w	r5, r0, #20
 8007cbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4543      	cmp	r3, r8
 8007cc6:	d321      	bcc.n	8007d0c <__multiply+0x98>
 8007cc8:	f104 0314 	add.w	r3, r4, #20
 8007ccc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cd0:	f109 0314 	add.w	r3, r9, #20
 8007cd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cd8:	9202      	str	r2, [sp, #8]
 8007cda:	1b3a      	subs	r2, r7, r4
 8007cdc:	3a15      	subs	r2, #21
 8007cde:	f022 0203 	bic.w	r2, r2, #3
 8007ce2:	3204      	adds	r2, #4
 8007ce4:	f104 0115 	add.w	r1, r4, #21
 8007ce8:	428f      	cmp	r7, r1
 8007cea:	bf38      	it	cc
 8007cec:	2204      	movcc	r2, #4
 8007cee:	9201      	str	r2, [sp, #4]
 8007cf0:	9a02      	ldr	r2, [sp, #8]
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d80c      	bhi.n	8007d12 <__multiply+0x9e>
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	dd03      	ble.n	8007d04 <__multiply+0x90>
 8007cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d05a      	beq.n	8007dba <__multiply+0x146>
 8007d04:	6106      	str	r6, [r0, #16]
 8007d06:	b005      	add	sp, #20
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	f843 2b04 	str.w	r2, [r3], #4
 8007d10:	e7d8      	b.n	8007cc4 <__multiply+0x50>
 8007d12:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d16:	f1ba 0f00 	cmp.w	sl, #0
 8007d1a:	d024      	beq.n	8007d66 <__multiply+0xf2>
 8007d1c:	f104 0e14 	add.w	lr, r4, #20
 8007d20:	46a9      	mov	r9, r5
 8007d22:	f04f 0c00 	mov.w	ip, #0
 8007d26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d2a:	f8d9 1000 	ldr.w	r1, [r9]
 8007d2e:	fa1f fb82 	uxth.w	fp, r2
 8007d32:	b289      	uxth	r1, r1
 8007d34:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d40:	4461      	add	r1, ip
 8007d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d46:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d4e:	b289      	uxth	r1, r1
 8007d50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d54:	4577      	cmp	r7, lr
 8007d56:	f849 1b04 	str.w	r1, [r9], #4
 8007d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d5e:	d8e2      	bhi.n	8007d26 <__multiply+0xb2>
 8007d60:	9a01      	ldr	r2, [sp, #4]
 8007d62:	f845 c002 	str.w	ip, [r5, r2]
 8007d66:	9a03      	ldr	r2, [sp, #12]
 8007d68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	f1b9 0f00 	cmp.w	r9, #0
 8007d72:	d020      	beq.n	8007db6 <__multiply+0x142>
 8007d74:	6829      	ldr	r1, [r5, #0]
 8007d76:	f104 0c14 	add.w	ip, r4, #20
 8007d7a:	46ae      	mov	lr, r5
 8007d7c:	f04f 0a00 	mov.w	sl, #0
 8007d80:	f8bc b000 	ldrh.w	fp, [ip]
 8007d84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d88:	fb09 220b 	mla	r2, r9, fp, r2
 8007d8c:	4492      	add	sl, r2
 8007d8e:	b289      	uxth	r1, r1
 8007d90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d94:	f84e 1b04 	str.w	r1, [lr], #4
 8007d98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d9c:	f8be 1000 	ldrh.w	r1, [lr]
 8007da0:	0c12      	lsrs	r2, r2, #16
 8007da2:	fb09 1102 	mla	r1, r9, r2, r1
 8007da6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007daa:	4567      	cmp	r7, ip
 8007dac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007db0:	d8e6      	bhi.n	8007d80 <__multiply+0x10c>
 8007db2:	9a01      	ldr	r2, [sp, #4]
 8007db4:	50a9      	str	r1, [r5, r2]
 8007db6:	3504      	adds	r5, #4
 8007db8:	e79a      	b.n	8007cf0 <__multiply+0x7c>
 8007dba:	3e01      	subs	r6, #1
 8007dbc:	e79c      	b.n	8007cf8 <__multiply+0x84>
 8007dbe:	bf00      	nop
 8007dc0:	08009303 	.word	0x08009303
 8007dc4:	08009314 	.word	0x08009314

08007dc8 <__pow5mult>:
 8007dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4615      	mov	r5, r2
 8007dce:	f012 0203 	ands.w	r2, r2, #3
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	d007      	beq.n	8007de8 <__pow5mult+0x20>
 8007dd8:	4c25      	ldr	r4, [pc, #148]	; (8007e70 <__pow5mult+0xa8>)
 8007dda:	3a01      	subs	r2, #1
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007de2:	f7ff fe9b 	bl	8007b1c <__multadd>
 8007de6:	4607      	mov	r7, r0
 8007de8:	10ad      	asrs	r5, r5, #2
 8007dea:	d03d      	beq.n	8007e68 <__pow5mult+0xa0>
 8007dec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dee:	b97c      	cbnz	r4, 8007e10 <__pow5mult+0x48>
 8007df0:	2010      	movs	r0, #16
 8007df2:	f7ff fe1b 	bl	8007a2c <malloc>
 8007df6:	4602      	mov	r2, r0
 8007df8:	6270      	str	r0, [r6, #36]	; 0x24
 8007dfa:	b928      	cbnz	r0, 8007e08 <__pow5mult+0x40>
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <__pow5mult+0xac>)
 8007dfe:	481e      	ldr	r0, [pc, #120]	; (8007e78 <__pow5mult+0xb0>)
 8007e00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e04:	f000 fc0e 	bl	8008624 <__assert_func>
 8007e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e0c:	6004      	str	r4, [r0, #0]
 8007e0e:	60c4      	str	r4, [r0, #12]
 8007e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e18:	b94c      	cbnz	r4, 8007e2e <__pow5mult+0x66>
 8007e1a:	f240 2171 	movw	r1, #625	; 0x271
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff ff12 	bl	8007c48 <__i2b>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	f04f 0900 	mov.w	r9, #0
 8007e32:	07eb      	lsls	r3, r5, #31
 8007e34:	d50a      	bpl.n	8007e4c <__pow5mult+0x84>
 8007e36:	4639      	mov	r1, r7
 8007e38:	4622      	mov	r2, r4
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7ff ff1a 	bl	8007c74 <__multiply>
 8007e40:	4639      	mov	r1, r7
 8007e42:	4680      	mov	r8, r0
 8007e44:	4630      	mov	r0, r6
 8007e46:	f7ff fe47 	bl	8007ad8 <_Bfree>
 8007e4a:	4647      	mov	r7, r8
 8007e4c:	106d      	asrs	r5, r5, #1
 8007e4e:	d00b      	beq.n	8007e68 <__pow5mult+0xa0>
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	b938      	cbnz	r0, 8007e64 <__pow5mult+0x9c>
 8007e54:	4622      	mov	r2, r4
 8007e56:	4621      	mov	r1, r4
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff ff0b 	bl	8007c74 <__multiply>
 8007e5e:	6020      	str	r0, [r4, #0]
 8007e60:	f8c0 9000 	str.w	r9, [r0]
 8007e64:	4604      	mov	r4, r0
 8007e66:	e7e4      	b.n	8007e32 <__pow5mult+0x6a>
 8007e68:	4638      	mov	r0, r7
 8007e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6e:	bf00      	nop
 8007e70:	08009460 	.word	0x08009460
 8007e74:	08009291 	.word	0x08009291
 8007e78:	08009314 	.word	0x08009314

08007e7c <__lshift>:
 8007e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	460c      	mov	r4, r1
 8007e82:	6849      	ldr	r1, [r1, #4]
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	4691      	mov	r9, r2
 8007e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e94:	f108 0601 	add.w	r6, r8, #1
 8007e98:	42b3      	cmp	r3, r6
 8007e9a:	db0b      	blt.n	8007eb4 <__lshift+0x38>
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7ff fddb 	bl	8007a58 <_Balloc>
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	b948      	cbnz	r0, 8007eba <__lshift+0x3e>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	4b2a      	ldr	r3, [pc, #168]	; (8007f54 <__lshift+0xd8>)
 8007eaa:	482b      	ldr	r0, [pc, #172]	; (8007f58 <__lshift+0xdc>)
 8007eac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007eb0:	f000 fbb8 	bl	8008624 <__assert_func>
 8007eb4:	3101      	adds	r1, #1
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	e7ee      	b.n	8007e98 <__lshift+0x1c>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f100 0114 	add.w	r1, r0, #20
 8007ec0:	f100 0210 	add.w	r2, r0, #16
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4553      	cmp	r3, sl
 8007ec8:	db37      	blt.n	8007f3a <__lshift+0xbe>
 8007eca:	6920      	ldr	r0, [r4, #16]
 8007ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ed0:	f104 0314 	add.w	r3, r4, #20
 8007ed4:	f019 091f 	ands.w	r9, r9, #31
 8007ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007edc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ee0:	d02f      	beq.n	8007f42 <__lshift+0xc6>
 8007ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ee6:	468a      	mov	sl, r1
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	fa02 f209 	lsl.w	r2, r2, r9
 8007ef2:	ea42 020c 	orr.w	r2, r2, ip
 8007ef6:	f84a 2b04 	str.w	r2, [sl], #4
 8007efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efe:	4298      	cmp	r0, r3
 8007f00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f04:	d8f2      	bhi.n	8007eec <__lshift+0x70>
 8007f06:	1b03      	subs	r3, r0, r4
 8007f08:	3b15      	subs	r3, #21
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	3304      	adds	r3, #4
 8007f10:	f104 0215 	add.w	r2, r4, #21
 8007f14:	4290      	cmp	r0, r2
 8007f16:	bf38      	it	cc
 8007f18:	2304      	movcc	r3, #4
 8007f1a:	f841 c003 	str.w	ip, [r1, r3]
 8007f1e:	f1bc 0f00 	cmp.w	ip, #0
 8007f22:	d001      	beq.n	8007f28 <__lshift+0xac>
 8007f24:	f108 0602 	add.w	r6, r8, #2
 8007f28:	3e01      	subs	r6, #1
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	612e      	str	r6, [r5, #16]
 8007f2e:	4621      	mov	r1, r4
 8007f30:	f7ff fdd2 	bl	8007ad8 <_Bfree>
 8007f34:	4628      	mov	r0, r5
 8007f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f3e:	3301      	adds	r3, #1
 8007f40:	e7c1      	b.n	8007ec6 <__lshift+0x4a>
 8007f42:	3904      	subs	r1, #4
 8007f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f4c:	4298      	cmp	r0, r3
 8007f4e:	d8f9      	bhi.n	8007f44 <__lshift+0xc8>
 8007f50:	e7ea      	b.n	8007f28 <__lshift+0xac>
 8007f52:	bf00      	nop
 8007f54:	08009303 	.word	0x08009303
 8007f58:	08009314 	.word	0x08009314

08007f5c <__mcmp>:
 8007f5c:	b530      	push	{r4, r5, lr}
 8007f5e:	6902      	ldr	r2, [r0, #16]
 8007f60:	690c      	ldr	r4, [r1, #16]
 8007f62:	1b12      	subs	r2, r2, r4
 8007f64:	d10e      	bne.n	8007f84 <__mcmp+0x28>
 8007f66:	f100 0314 	add.w	r3, r0, #20
 8007f6a:	3114      	adds	r1, #20
 8007f6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f7c:	42a5      	cmp	r5, r4
 8007f7e:	d003      	beq.n	8007f88 <__mcmp+0x2c>
 8007f80:	d305      	bcc.n	8007f8e <__mcmp+0x32>
 8007f82:	2201      	movs	r2, #1
 8007f84:	4610      	mov	r0, r2
 8007f86:	bd30      	pop	{r4, r5, pc}
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d3f3      	bcc.n	8007f74 <__mcmp+0x18>
 8007f8c:	e7fa      	b.n	8007f84 <__mcmp+0x28>
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f92:	e7f7      	b.n	8007f84 <__mcmp+0x28>

08007f94 <__mdiff>:
 8007f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	460c      	mov	r4, r1
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4690      	mov	r8, r2
 8007fa2:	f7ff ffdb 	bl	8007f5c <__mcmp>
 8007fa6:	1e05      	subs	r5, r0, #0
 8007fa8:	d110      	bne.n	8007fcc <__mdiff+0x38>
 8007faa:	4629      	mov	r1, r5
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff fd53 	bl	8007a58 <_Balloc>
 8007fb2:	b930      	cbnz	r0, 8007fc2 <__mdiff+0x2e>
 8007fb4:	4b3a      	ldr	r3, [pc, #232]	; (80080a0 <__mdiff+0x10c>)
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	f240 2132 	movw	r1, #562	; 0x232
 8007fbc:	4839      	ldr	r0, [pc, #228]	; (80080a4 <__mdiff+0x110>)
 8007fbe:	f000 fb31 	bl	8008624 <__assert_func>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fcc:	bfa4      	itt	ge
 8007fce:	4643      	movge	r3, r8
 8007fd0:	46a0      	movge	r8, r4
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fd8:	bfa6      	itte	ge
 8007fda:	461c      	movge	r4, r3
 8007fdc:	2500      	movge	r5, #0
 8007fde:	2501      	movlt	r5, #1
 8007fe0:	f7ff fd3a 	bl	8007a58 <_Balloc>
 8007fe4:	b920      	cbnz	r0, 8007ff0 <__mdiff+0x5c>
 8007fe6:	4b2e      	ldr	r3, [pc, #184]	; (80080a0 <__mdiff+0x10c>)
 8007fe8:	4602      	mov	r2, r0
 8007fea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fee:	e7e5      	b.n	8007fbc <__mdiff+0x28>
 8007ff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ff4:	6926      	ldr	r6, [r4, #16]
 8007ff6:	60c5      	str	r5, [r0, #12]
 8007ff8:	f104 0914 	add.w	r9, r4, #20
 8007ffc:	f108 0514 	add.w	r5, r8, #20
 8008000:	f100 0e14 	add.w	lr, r0, #20
 8008004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800800c:	f108 0210 	add.w	r2, r8, #16
 8008010:	46f2      	mov	sl, lr
 8008012:	2100      	movs	r1, #0
 8008014:	f859 3b04 	ldr.w	r3, [r9], #4
 8008018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800801c:	fa1f f883 	uxth.w	r8, r3
 8008020:	fa11 f18b 	uxtah	r1, r1, fp
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	eba1 0808 	sub.w	r8, r1, r8
 800802a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800802e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008032:	fa1f f888 	uxth.w	r8, r8
 8008036:	1419      	asrs	r1, r3, #16
 8008038:	454e      	cmp	r6, r9
 800803a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800803e:	f84a 3b04 	str.w	r3, [sl], #4
 8008042:	d8e7      	bhi.n	8008014 <__mdiff+0x80>
 8008044:	1b33      	subs	r3, r6, r4
 8008046:	3b15      	subs	r3, #21
 8008048:	f023 0303 	bic.w	r3, r3, #3
 800804c:	3304      	adds	r3, #4
 800804e:	3415      	adds	r4, #21
 8008050:	42a6      	cmp	r6, r4
 8008052:	bf38      	it	cc
 8008054:	2304      	movcc	r3, #4
 8008056:	441d      	add	r5, r3
 8008058:	4473      	add	r3, lr
 800805a:	469e      	mov	lr, r3
 800805c:	462e      	mov	r6, r5
 800805e:	4566      	cmp	r6, ip
 8008060:	d30e      	bcc.n	8008080 <__mdiff+0xec>
 8008062:	f10c 0203 	add.w	r2, ip, #3
 8008066:	1b52      	subs	r2, r2, r5
 8008068:	f022 0203 	bic.w	r2, r2, #3
 800806c:	3d03      	subs	r5, #3
 800806e:	45ac      	cmp	ip, r5
 8008070:	bf38      	it	cc
 8008072:	2200      	movcc	r2, #0
 8008074:	441a      	add	r2, r3
 8008076:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800807a:	b17b      	cbz	r3, 800809c <__mdiff+0x108>
 800807c:	6107      	str	r7, [r0, #16]
 800807e:	e7a3      	b.n	8007fc8 <__mdiff+0x34>
 8008080:	f856 8b04 	ldr.w	r8, [r6], #4
 8008084:	fa11 f288 	uxtah	r2, r1, r8
 8008088:	1414      	asrs	r4, r2, #16
 800808a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800808e:	b292      	uxth	r2, r2
 8008090:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008094:	f84e 2b04 	str.w	r2, [lr], #4
 8008098:	1421      	asrs	r1, r4, #16
 800809a:	e7e0      	b.n	800805e <__mdiff+0xca>
 800809c:	3f01      	subs	r7, #1
 800809e:	e7ea      	b.n	8008076 <__mdiff+0xe2>
 80080a0:	08009303 	.word	0x08009303
 80080a4:	08009314 	.word	0x08009314

080080a8 <__d2b>:
 80080a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	4689      	mov	r9, r1
 80080ae:	2101      	movs	r1, #1
 80080b0:	ec57 6b10 	vmov	r6, r7, d0
 80080b4:	4690      	mov	r8, r2
 80080b6:	f7ff fccf 	bl	8007a58 <_Balloc>
 80080ba:	4604      	mov	r4, r0
 80080bc:	b930      	cbnz	r0, 80080cc <__d2b+0x24>
 80080be:	4602      	mov	r2, r0
 80080c0:	4b25      	ldr	r3, [pc, #148]	; (8008158 <__d2b+0xb0>)
 80080c2:	4826      	ldr	r0, [pc, #152]	; (800815c <__d2b+0xb4>)
 80080c4:	f240 310a 	movw	r1, #778	; 0x30a
 80080c8:	f000 faac 	bl	8008624 <__assert_func>
 80080cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080d4:	bb35      	cbnz	r5, 8008124 <__d2b+0x7c>
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	d028      	beq.n	800812e <__d2b+0x86>
 80080dc:	4668      	mov	r0, sp
 80080de:	9600      	str	r6, [sp, #0]
 80080e0:	f7ff fd82 	bl	8007be8 <__lo0bits>
 80080e4:	9900      	ldr	r1, [sp, #0]
 80080e6:	b300      	cbz	r0, 800812a <__d2b+0x82>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	f1c0 0320 	rsb	r3, r0, #32
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	430b      	orrs	r3, r1
 80080f4:	40c2      	lsrs	r2, r0
 80080f6:	6163      	str	r3, [r4, #20]
 80080f8:	9201      	str	r2, [sp, #4]
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	61a3      	str	r3, [r4, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bf14      	ite	ne
 8008102:	2202      	movne	r2, #2
 8008104:	2201      	moveq	r2, #1
 8008106:	6122      	str	r2, [r4, #16]
 8008108:	b1d5      	cbz	r5, 8008140 <__d2b+0x98>
 800810a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800810e:	4405      	add	r5, r0
 8008110:	f8c9 5000 	str.w	r5, [r9]
 8008114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008118:	f8c8 0000 	str.w	r0, [r8]
 800811c:	4620      	mov	r0, r4
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008128:	e7d5      	b.n	80080d6 <__d2b+0x2e>
 800812a:	6161      	str	r1, [r4, #20]
 800812c:	e7e5      	b.n	80080fa <__d2b+0x52>
 800812e:	a801      	add	r0, sp, #4
 8008130:	f7ff fd5a 	bl	8007be8 <__lo0bits>
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	6163      	str	r3, [r4, #20]
 8008138:	2201      	movs	r2, #1
 800813a:	6122      	str	r2, [r4, #16]
 800813c:	3020      	adds	r0, #32
 800813e:	e7e3      	b.n	8008108 <__d2b+0x60>
 8008140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008148:	f8c9 0000 	str.w	r0, [r9]
 800814c:	6918      	ldr	r0, [r3, #16]
 800814e:	f7ff fd2b 	bl	8007ba8 <__hi0bits>
 8008152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008156:	e7df      	b.n	8008118 <__d2b+0x70>
 8008158:	08009303 	.word	0x08009303
 800815c:	08009314 	.word	0x08009314

08008160 <_calloc_r>:
 8008160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008162:	fba1 2402 	umull	r2, r4, r1, r2
 8008166:	b94c      	cbnz	r4, 800817c <_calloc_r+0x1c>
 8008168:	4611      	mov	r1, r2
 800816a:	9201      	str	r2, [sp, #4]
 800816c:	f000 f87a 	bl	8008264 <_malloc_r>
 8008170:	9a01      	ldr	r2, [sp, #4]
 8008172:	4605      	mov	r5, r0
 8008174:	b930      	cbnz	r0, 8008184 <_calloc_r+0x24>
 8008176:	4628      	mov	r0, r5
 8008178:	b003      	add	sp, #12
 800817a:	bd30      	pop	{r4, r5, pc}
 800817c:	220c      	movs	r2, #12
 800817e:	6002      	str	r2, [r0, #0]
 8008180:	2500      	movs	r5, #0
 8008182:	e7f8      	b.n	8008176 <_calloc_r+0x16>
 8008184:	4621      	mov	r1, r4
 8008186:	f7fe f93f 	bl	8006408 <memset>
 800818a:	e7f4      	b.n	8008176 <_calloc_r+0x16>

0800818c <_free_r>:
 800818c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800818e:	2900      	cmp	r1, #0
 8008190:	d044      	beq.n	800821c <_free_r+0x90>
 8008192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f1a1 0404 	sub.w	r4, r1, #4
 800819e:	bfb8      	it	lt
 80081a0:	18e4      	addlt	r4, r4, r3
 80081a2:	f000 fa9b 	bl	80086dc <__malloc_lock>
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <_free_r+0x94>)
 80081a8:	9801      	ldr	r0, [sp, #4]
 80081aa:	6813      	ldr	r3, [r2, #0]
 80081ac:	b933      	cbnz	r3, 80081bc <_free_r+0x30>
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	6014      	str	r4, [r2, #0]
 80081b2:	b003      	add	sp, #12
 80081b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081b8:	f000 ba96 	b.w	80086e8 <__malloc_unlock>
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d908      	bls.n	80081d2 <_free_r+0x46>
 80081c0:	6825      	ldr	r5, [r4, #0]
 80081c2:	1961      	adds	r1, r4, r5
 80081c4:	428b      	cmp	r3, r1
 80081c6:	bf01      	itttt	eq
 80081c8:	6819      	ldreq	r1, [r3, #0]
 80081ca:	685b      	ldreq	r3, [r3, #4]
 80081cc:	1949      	addeq	r1, r1, r5
 80081ce:	6021      	streq	r1, [r4, #0]
 80081d0:	e7ed      	b.n	80081ae <_free_r+0x22>
 80081d2:	461a      	mov	r2, r3
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	b10b      	cbz	r3, 80081dc <_free_r+0x50>
 80081d8:	42a3      	cmp	r3, r4
 80081da:	d9fa      	bls.n	80081d2 <_free_r+0x46>
 80081dc:	6811      	ldr	r1, [r2, #0]
 80081de:	1855      	adds	r5, r2, r1
 80081e0:	42a5      	cmp	r5, r4
 80081e2:	d10b      	bne.n	80081fc <_free_r+0x70>
 80081e4:	6824      	ldr	r4, [r4, #0]
 80081e6:	4421      	add	r1, r4
 80081e8:	1854      	adds	r4, r2, r1
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	6011      	str	r1, [r2, #0]
 80081ee:	d1e0      	bne.n	80081b2 <_free_r+0x26>
 80081f0:	681c      	ldr	r4, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	6053      	str	r3, [r2, #4]
 80081f6:	4421      	add	r1, r4
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	e7da      	b.n	80081b2 <_free_r+0x26>
 80081fc:	d902      	bls.n	8008204 <_free_r+0x78>
 80081fe:	230c      	movs	r3, #12
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	e7d6      	b.n	80081b2 <_free_r+0x26>
 8008204:	6825      	ldr	r5, [r4, #0]
 8008206:	1961      	adds	r1, r4, r5
 8008208:	428b      	cmp	r3, r1
 800820a:	bf04      	itt	eq
 800820c:	6819      	ldreq	r1, [r3, #0]
 800820e:	685b      	ldreq	r3, [r3, #4]
 8008210:	6063      	str	r3, [r4, #4]
 8008212:	bf04      	itt	eq
 8008214:	1949      	addeq	r1, r1, r5
 8008216:	6021      	streq	r1, [r4, #0]
 8008218:	6054      	str	r4, [r2, #4]
 800821a:	e7ca      	b.n	80081b2 <_free_r+0x26>
 800821c:	b003      	add	sp, #12
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	20000328 	.word	0x20000328

08008224 <sbrk_aligned>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	4e0e      	ldr	r6, [pc, #56]	; (8008260 <sbrk_aligned+0x3c>)
 8008228:	460c      	mov	r4, r1
 800822a:	6831      	ldr	r1, [r6, #0]
 800822c:	4605      	mov	r5, r0
 800822e:	b911      	cbnz	r1, 8008236 <sbrk_aligned+0x12>
 8008230:	f000 f9e8 	bl	8008604 <_sbrk_r>
 8008234:	6030      	str	r0, [r6, #0]
 8008236:	4621      	mov	r1, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f000 f9e3 	bl	8008604 <_sbrk_r>
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	d00a      	beq.n	8008258 <sbrk_aligned+0x34>
 8008242:	1cc4      	adds	r4, r0, #3
 8008244:	f024 0403 	bic.w	r4, r4, #3
 8008248:	42a0      	cmp	r0, r4
 800824a:	d007      	beq.n	800825c <sbrk_aligned+0x38>
 800824c:	1a21      	subs	r1, r4, r0
 800824e:	4628      	mov	r0, r5
 8008250:	f000 f9d8 	bl	8008604 <_sbrk_r>
 8008254:	3001      	adds	r0, #1
 8008256:	d101      	bne.n	800825c <sbrk_aligned+0x38>
 8008258:	f04f 34ff 	mov.w	r4, #4294967295
 800825c:	4620      	mov	r0, r4
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	2000032c 	.word	0x2000032c

08008264 <_malloc_r>:
 8008264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008268:	1ccd      	adds	r5, r1, #3
 800826a:	f025 0503 	bic.w	r5, r5, #3
 800826e:	3508      	adds	r5, #8
 8008270:	2d0c      	cmp	r5, #12
 8008272:	bf38      	it	cc
 8008274:	250c      	movcc	r5, #12
 8008276:	2d00      	cmp	r5, #0
 8008278:	4607      	mov	r7, r0
 800827a:	db01      	blt.n	8008280 <_malloc_r+0x1c>
 800827c:	42a9      	cmp	r1, r5
 800827e:	d905      	bls.n	800828c <_malloc_r+0x28>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	2600      	movs	r6, #0
 8008286:	4630      	mov	r0, r6
 8008288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828c:	4e2e      	ldr	r6, [pc, #184]	; (8008348 <_malloc_r+0xe4>)
 800828e:	f000 fa25 	bl	80086dc <__malloc_lock>
 8008292:	6833      	ldr	r3, [r6, #0]
 8008294:	461c      	mov	r4, r3
 8008296:	bb34      	cbnz	r4, 80082e6 <_malloc_r+0x82>
 8008298:	4629      	mov	r1, r5
 800829a:	4638      	mov	r0, r7
 800829c:	f7ff ffc2 	bl	8008224 <sbrk_aligned>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	4604      	mov	r4, r0
 80082a4:	d14d      	bne.n	8008342 <_malloc_r+0xde>
 80082a6:	6834      	ldr	r4, [r6, #0]
 80082a8:	4626      	mov	r6, r4
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	d140      	bne.n	8008330 <_malloc_r+0xcc>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	4631      	mov	r1, r6
 80082b2:	4638      	mov	r0, r7
 80082b4:	eb04 0803 	add.w	r8, r4, r3
 80082b8:	f000 f9a4 	bl	8008604 <_sbrk_r>
 80082bc:	4580      	cmp	r8, r0
 80082be:	d13a      	bne.n	8008336 <_malloc_r+0xd2>
 80082c0:	6821      	ldr	r1, [r4, #0]
 80082c2:	3503      	adds	r5, #3
 80082c4:	1a6d      	subs	r5, r5, r1
 80082c6:	f025 0503 	bic.w	r5, r5, #3
 80082ca:	3508      	adds	r5, #8
 80082cc:	2d0c      	cmp	r5, #12
 80082ce:	bf38      	it	cc
 80082d0:	250c      	movcc	r5, #12
 80082d2:	4629      	mov	r1, r5
 80082d4:	4638      	mov	r0, r7
 80082d6:	f7ff ffa5 	bl	8008224 <sbrk_aligned>
 80082da:	3001      	adds	r0, #1
 80082dc:	d02b      	beq.n	8008336 <_malloc_r+0xd2>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	442b      	add	r3, r5
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	e00e      	b.n	8008304 <_malloc_r+0xa0>
 80082e6:	6822      	ldr	r2, [r4, #0]
 80082e8:	1b52      	subs	r2, r2, r5
 80082ea:	d41e      	bmi.n	800832a <_malloc_r+0xc6>
 80082ec:	2a0b      	cmp	r2, #11
 80082ee:	d916      	bls.n	800831e <_malloc_r+0xba>
 80082f0:	1961      	adds	r1, r4, r5
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	6025      	str	r5, [r4, #0]
 80082f6:	bf18      	it	ne
 80082f8:	6059      	strne	r1, [r3, #4]
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	bf08      	it	eq
 80082fe:	6031      	streq	r1, [r6, #0]
 8008300:	5162      	str	r2, [r4, r5]
 8008302:	604b      	str	r3, [r1, #4]
 8008304:	4638      	mov	r0, r7
 8008306:	f104 060b 	add.w	r6, r4, #11
 800830a:	f000 f9ed 	bl	80086e8 <__malloc_unlock>
 800830e:	f026 0607 	bic.w	r6, r6, #7
 8008312:	1d23      	adds	r3, r4, #4
 8008314:	1af2      	subs	r2, r6, r3
 8008316:	d0b6      	beq.n	8008286 <_malloc_r+0x22>
 8008318:	1b9b      	subs	r3, r3, r6
 800831a:	50a3      	str	r3, [r4, r2]
 800831c:	e7b3      	b.n	8008286 <_malloc_r+0x22>
 800831e:	6862      	ldr	r2, [r4, #4]
 8008320:	42a3      	cmp	r3, r4
 8008322:	bf0c      	ite	eq
 8008324:	6032      	streq	r2, [r6, #0]
 8008326:	605a      	strne	r2, [r3, #4]
 8008328:	e7ec      	b.n	8008304 <_malloc_r+0xa0>
 800832a:	4623      	mov	r3, r4
 800832c:	6864      	ldr	r4, [r4, #4]
 800832e:	e7b2      	b.n	8008296 <_malloc_r+0x32>
 8008330:	4634      	mov	r4, r6
 8008332:	6876      	ldr	r6, [r6, #4]
 8008334:	e7b9      	b.n	80082aa <_malloc_r+0x46>
 8008336:	230c      	movs	r3, #12
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	4638      	mov	r0, r7
 800833c:	f000 f9d4 	bl	80086e8 <__malloc_unlock>
 8008340:	e7a1      	b.n	8008286 <_malloc_r+0x22>
 8008342:	6025      	str	r5, [r4, #0]
 8008344:	e7de      	b.n	8008304 <_malloc_r+0xa0>
 8008346:	bf00      	nop
 8008348:	20000328 	.word	0x20000328

0800834c <__ssputs_r>:
 800834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008350:	688e      	ldr	r6, [r1, #8]
 8008352:	429e      	cmp	r6, r3
 8008354:	4682      	mov	sl, r0
 8008356:	460c      	mov	r4, r1
 8008358:	4690      	mov	r8, r2
 800835a:	461f      	mov	r7, r3
 800835c:	d838      	bhi.n	80083d0 <__ssputs_r+0x84>
 800835e:	898a      	ldrh	r2, [r1, #12]
 8008360:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008364:	d032      	beq.n	80083cc <__ssputs_r+0x80>
 8008366:	6825      	ldr	r5, [r4, #0]
 8008368:	6909      	ldr	r1, [r1, #16]
 800836a:	eba5 0901 	sub.w	r9, r5, r1
 800836e:	6965      	ldr	r5, [r4, #20]
 8008370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008374:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008378:	3301      	adds	r3, #1
 800837a:	444b      	add	r3, r9
 800837c:	106d      	asrs	r5, r5, #1
 800837e:	429d      	cmp	r5, r3
 8008380:	bf38      	it	cc
 8008382:	461d      	movcc	r5, r3
 8008384:	0553      	lsls	r3, r2, #21
 8008386:	d531      	bpl.n	80083ec <__ssputs_r+0xa0>
 8008388:	4629      	mov	r1, r5
 800838a:	f7ff ff6b 	bl	8008264 <_malloc_r>
 800838e:	4606      	mov	r6, r0
 8008390:	b950      	cbnz	r0, 80083a8 <__ssputs_r+0x5c>
 8008392:	230c      	movs	r3, #12
 8008394:	f8ca 3000 	str.w	r3, [sl]
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	6921      	ldr	r1, [r4, #16]
 80083aa:	464a      	mov	r2, r9
 80083ac:	f7ff fb46 	bl	8007a3c <memcpy>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	6126      	str	r6, [r4, #16]
 80083be:	6165      	str	r5, [r4, #20]
 80083c0:	444e      	add	r6, r9
 80083c2:	eba5 0509 	sub.w	r5, r5, r9
 80083c6:	6026      	str	r6, [r4, #0]
 80083c8:	60a5      	str	r5, [r4, #8]
 80083ca:	463e      	mov	r6, r7
 80083cc:	42be      	cmp	r6, r7
 80083ce:	d900      	bls.n	80083d2 <__ssputs_r+0x86>
 80083d0:	463e      	mov	r6, r7
 80083d2:	6820      	ldr	r0, [r4, #0]
 80083d4:	4632      	mov	r2, r6
 80083d6:	4641      	mov	r1, r8
 80083d8:	f000 f966 	bl	80086a8 <memmove>
 80083dc:	68a3      	ldr	r3, [r4, #8]
 80083de:	1b9b      	subs	r3, r3, r6
 80083e0:	60a3      	str	r3, [r4, #8]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	4433      	add	r3, r6
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	2000      	movs	r0, #0
 80083ea:	e7db      	b.n	80083a4 <__ssputs_r+0x58>
 80083ec:	462a      	mov	r2, r5
 80083ee:	f000 f981 	bl	80086f4 <_realloc_r>
 80083f2:	4606      	mov	r6, r0
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d1e1      	bne.n	80083bc <__ssputs_r+0x70>
 80083f8:	6921      	ldr	r1, [r4, #16]
 80083fa:	4650      	mov	r0, sl
 80083fc:	f7ff fec6 	bl	800818c <_free_r>
 8008400:	e7c7      	b.n	8008392 <__ssputs_r+0x46>
	...

08008404 <_svfiprintf_r>:
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	4698      	mov	r8, r3
 800840a:	898b      	ldrh	r3, [r1, #12]
 800840c:	061b      	lsls	r3, r3, #24
 800840e:	b09d      	sub	sp, #116	; 0x74
 8008410:	4607      	mov	r7, r0
 8008412:	460d      	mov	r5, r1
 8008414:	4614      	mov	r4, r2
 8008416:	d50e      	bpl.n	8008436 <_svfiprintf_r+0x32>
 8008418:	690b      	ldr	r3, [r1, #16]
 800841a:	b963      	cbnz	r3, 8008436 <_svfiprintf_r+0x32>
 800841c:	2140      	movs	r1, #64	; 0x40
 800841e:	f7ff ff21 	bl	8008264 <_malloc_r>
 8008422:	6028      	str	r0, [r5, #0]
 8008424:	6128      	str	r0, [r5, #16]
 8008426:	b920      	cbnz	r0, 8008432 <_svfiprintf_r+0x2e>
 8008428:	230c      	movs	r3, #12
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	e0d1      	b.n	80085d6 <_svfiprintf_r+0x1d2>
 8008432:	2340      	movs	r3, #64	; 0x40
 8008434:	616b      	str	r3, [r5, #20]
 8008436:	2300      	movs	r3, #0
 8008438:	9309      	str	r3, [sp, #36]	; 0x24
 800843a:	2320      	movs	r3, #32
 800843c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008440:	f8cd 800c 	str.w	r8, [sp, #12]
 8008444:	2330      	movs	r3, #48	; 0x30
 8008446:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085f0 <_svfiprintf_r+0x1ec>
 800844a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800844e:	f04f 0901 	mov.w	r9, #1
 8008452:	4623      	mov	r3, r4
 8008454:	469a      	mov	sl, r3
 8008456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800845a:	b10a      	cbz	r2, 8008460 <_svfiprintf_r+0x5c>
 800845c:	2a25      	cmp	r2, #37	; 0x25
 800845e:	d1f9      	bne.n	8008454 <_svfiprintf_r+0x50>
 8008460:	ebba 0b04 	subs.w	fp, sl, r4
 8008464:	d00b      	beq.n	800847e <_svfiprintf_r+0x7a>
 8008466:	465b      	mov	r3, fp
 8008468:	4622      	mov	r2, r4
 800846a:	4629      	mov	r1, r5
 800846c:	4638      	mov	r0, r7
 800846e:	f7ff ff6d 	bl	800834c <__ssputs_r>
 8008472:	3001      	adds	r0, #1
 8008474:	f000 80aa 	beq.w	80085cc <_svfiprintf_r+0x1c8>
 8008478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800847a:	445a      	add	r2, fp
 800847c:	9209      	str	r2, [sp, #36]	; 0x24
 800847e:	f89a 3000 	ldrb.w	r3, [sl]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80a2 	beq.w	80085cc <_svfiprintf_r+0x1c8>
 8008488:	2300      	movs	r3, #0
 800848a:	f04f 32ff 	mov.w	r2, #4294967295
 800848e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008492:	f10a 0a01 	add.w	sl, sl, #1
 8008496:	9304      	str	r3, [sp, #16]
 8008498:	9307      	str	r3, [sp, #28]
 800849a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800849e:	931a      	str	r3, [sp, #104]	; 0x68
 80084a0:	4654      	mov	r4, sl
 80084a2:	2205      	movs	r2, #5
 80084a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a8:	4851      	ldr	r0, [pc, #324]	; (80085f0 <_svfiprintf_r+0x1ec>)
 80084aa:	f7f7 fea1 	bl	80001f0 <memchr>
 80084ae:	9a04      	ldr	r2, [sp, #16]
 80084b0:	b9d8      	cbnz	r0, 80084ea <_svfiprintf_r+0xe6>
 80084b2:	06d0      	lsls	r0, r2, #27
 80084b4:	bf44      	itt	mi
 80084b6:	2320      	movmi	r3, #32
 80084b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084bc:	0711      	lsls	r1, r2, #28
 80084be:	bf44      	itt	mi
 80084c0:	232b      	movmi	r3, #43	; 0x2b
 80084c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ca:	2b2a      	cmp	r3, #42	; 0x2a
 80084cc:	d015      	beq.n	80084fa <_svfiprintf_r+0xf6>
 80084ce:	9a07      	ldr	r2, [sp, #28]
 80084d0:	4654      	mov	r4, sl
 80084d2:	2000      	movs	r0, #0
 80084d4:	f04f 0c0a 	mov.w	ip, #10
 80084d8:	4621      	mov	r1, r4
 80084da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084de:	3b30      	subs	r3, #48	; 0x30
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	d94e      	bls.n	8008582 <_svfiprintf_r+0x17e>
 80084e4:	b1b0      	cbz	r0, 8008514 <_svfiprintf_r+0x110>
 80084e6:	9207      	str	r2, [sp, #28]
 80084e8:	e014      	b.n	8008514 <_svfiprintf_r+0x110>
 80084ea:	eba0 0308 	sub.w	r3, r0, r8
 80084ee:	fa09 f303 	lsl.w	r3, r9, r3
 80084f2:	4313      	orrs	r3, r2
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	46a2      	mov	sl, r4
 80084f8:	e7d2      	b.n	80084a0 <_svfiprintf_r+0x9c>
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	1d19      	adds	r1, r3, #4
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	9103      	str	r1, [sp, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	bfbb      	ittet	lt
 8008506:	425b      	neglt	r3, r3
 8008508:	f042 0202 	orrlt.w	r2, r2, #2
 800850c:	9307      	strge	r3, [sp, #28]
 800850e:	9307      	strlt	r3, [sp, #28]
 8008510:	bfb8      	it	lt
 8008512:	9204      	strlt	r2, [sp, #16]
 8008514:	7823      	ldrb	r3, [r4, #0]
 8008516:	2b2e      	cmp	r3, #46	; 0x2e
 8008518:	d10c      	bne.n	8008534 <_svfiprintf_r+0x130>
 800851a:	7863      	ldrb	r3, [r4, #1]
 800851c:	2b2a      	cmp	r3, #42	; 0x2a
 800851e:	d135      	bne.n	800858c <_svfiprintf_r+0x188>
 8008520:	9b03      	ldr	r3, [sp, #12]
 8008522:	1d1a      	adds	r2, r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	9203      	str	r2, [sp, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfb8      	it	lt
 800852c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008530:	3402      	adds	r4, #2
 8008532:	9305      	str	r3, [sp, #20]
 8008534:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008600 <_svfiprintf_r+0x1fc>
 8008538:	7821      	ldrb	r1, [r4, #0]
 800853a:	2203      	movs	r2, #3
 800853c:	4650      	mov	r0, sl
 800853e:	f7f7 fe57 	bl	80001f0 <memchr>
 8008542:	b140      	cbz	r0, 8008556 <_svfiprintf_r+0x152>
 8008544:	2340      	movs	r3, #64	; 0x40
 8008546:	eba0 000a 	sub.w	r0, r0, sl
 800854a:	fa03 f000 	lsl.w	r0, r3, r0
 800854e:	9b04      	ldr	r3, [sp, #16]
 8008550:	4303      	orrs	r3, r0
 8008552:	3401      	adds	r4, #1
 8008554:	9304      	str	r3, [sp, #16]
 8008556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855a:	4826      	ldr	r0, [pc, #152]	; (80085f4 <_svfiprintf_r+0x1f0>)
 800855c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008560:	2206      	movs	r2, #6
 8008562:	f7f7 fe45 	bl	80001f0 <memchr>
 8008566:	2800      	cmp	r0, #0
 8008568:	d038      	beq.n	80085dc <_svfiprintf_r+0x1d8>
 800856a:	4b23      	ldr	r3, [pc, #140]	; (80085f8 <_svfiprintf_r+0x1f4>)
 800856c:	bb1b      	cbnz	r3, 80085b6 <_svfiprintf_r+0x1b2>
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	3307      	adds	r3, #7
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	3308      	adds	r3, #8
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	4433      	add	r3, r6
 800857e:	9309      	str	r3, [sp, #36]	; 0x24
 8008580:	e767      	b.n	8008452 <_svfiprintf_r+0x4e>
 8008582:	fb0c 3202 	mla	r2, ip, r2, r3
 8008586:	460c      	mov	r4, r1
 8008588:	2001      	movs	r0, #1
 800858a:	e7a5      	b.n	80084d8 <_svfiprintf_r+0xd4>
 800858c:	2300      	movs	r3, #0
 800858e:	3401      	adds	r4, #1
 8008590:	9305      	str	r3, [sp, #20]
 8008592:	4619      	mov	r1, r3
 8008594:	f04f 0c0a 	mov.w	ip, #10
 8008598:	4620      	mov	r0, r4
 800859a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800859e:	3a30      	subs	r2, #48	; 0x30
 80085a0:	2a09      	cmp	r2, #9
 80085a2:	d903      	bls.n	80085ac <_svfiprintf_r+0x1a8>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0c5      	beq.n	8008534 <_svfiprintf_r+0x130>
 80085a8:	9105      	str	r1, [sp, #20]
 80085aa:	e7c3      	b.n	8008534 <_svfiprintf_r+0x130>
 80085ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80085b0:	4604      	mov	r4, r0
 80085b2:	2301      	movs	r3, #1
 80085b4:	e7f0      	b.n	8008598 <_svfiprintf_r+0x194>
 80085b6:	ab03      	add	r3, sp, #12
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	462a      	mov	r2, r5
 80085bc:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <_svfiprintf_r+0x1f8>)
 80085be:	a904      	add	r1, sp, #16
 80085c0:	4638      	mov	r0, r7
 80085c2:	f7fd ffc9 	bl	8006558 <_printf_float>
 80085c6:	1c42      	adds	r2, r0, #1
 80085c8:	4606      	mov	r6, r0
 80085ca:	d1d6      	bne.n	800857a <_svfiprintf_r+0x176>
 80085cc:	89ab      	ldrh	r3, [r5, #12]
 80085ce:	065b      	lsls	r3, r3, #25
 80085d0:	f53f af2c 	bmi.w	800842c <_svfiprintf_r+0x28>
 80085d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d6:	b01d      	add	sp, #116	; 0x74
 80085d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	ab03      	add	r3, sp, #12
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	462a      	mov	r2, r5
 80085e2:	4b06      	ldr	r3, [pc, #24]	; (80085fc <_svfiprintf_r+0x1f8>)
 80085e4:	a904      	add	r1, sp, #16
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7fe fa5a 	bl	8006aa0 <_printf_i>
 80085ec:	e7eb      	b.n	80085c6 <_svfiprintf_r+0x1c2>
 80085ee:	bf00      	nop
 80085f0:	0800946c 	.word	0x0800946c
 80085f4:	08009476 	.word	0x08009476
 80085f8:	08006559 	.word	0x08006559
 80085fc:	0800834d 	.word	0x0800834d
 8008600:	08009472 	.word	0x08009472

08008604 <_sbrk_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d06      	ldr	r5, [pc, #24]	; (8008620 <_sbrk_r+0x1c>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7f8 fe8c 	bl	800132c <_sbrk>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_sbrk_r+0x1a>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_sbrk_r+0x1a>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20000330 	.word	0x20000330

08008624 <__assert_func>:
 8008624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008626:	4614      	mov	r4, r2
 8008628:	461a      	mov	r2, r3
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <__assert_func+0x2c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4605      	mov	r5, r0
 8008630:	68d8      	ldr	r0, [r3, #12]
 8008632:	b14c      	cbz	r4, 8008648 <__assert_func+0x24>
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <__assert_func+0x30>)
 8008636:	9100      	str	r1, [sp, #0]
 8008638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800863c:	4906      	ldr	r1, [pc, #24]	; (8008658 <__assert_func+0x34>)
 800863e:	462b      	mov	r3, r5
 8008640:	f000 f80e 	bl	8008660 <fiprintf>
 8008644:	f000 faac 	bl	8008ba0 <abort>
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <__assert_func+0x38>)
 800864a:	461c      	mov	r4, r3
 800864c:	e7f3      	b.n	8008636 <__assert_func+0x12>
 800864e:	bf00      	nop
 8008650:	2000000c 	.word	0x2000000c
 8008654:	0800947d 	.word	0x0800947d
 8008658:	0800948a 	.word	0x0800948a
 800865c:	080094b8 	.word	0x080094b8

08008660 <fiprintf>:
 8008660:	b40e      	push	{r1, r2, r3}
 8008662:	b503      	push	{r0, r1, lr}
 8008664:	4601      	mov	r1, r0
 8008666:	ab03      	add	r3, sp, #12
 8008668:	4805      	ldr	r0, [pc, #20]	; (8008680 <fiprintf+0x20>)
 800866a:	f853 2b04 	ldr.w	r2, [r3], #4
 800866e:	6800      	ldr	r0, [r0, #0]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	f000 f897 	bl	80087a4 <_vfiprintf_r>
 8008676:	b002      	add	sp, #8
 8008678:	f85d eb04 	ldr.w	lr, [sp], #4
 800867c:	b003      	add	sp, #12
 800867e:	4770      	bx	lr
 8008680:	2000000c 	.word	0x2000000c

08008684 <__ascii_mbtowc>:
 8008684:	b082      	sub	sp, #8
 8008686:	b901      	cbnz	r1, 800868a <__ascii_mbtowc+0x6>
 8008688:	a901      	add	r1, sp, #4
 800868a:	b142      	cbz	r2, 800869e <__ascii_mbtowc+0x1a>
 800868c:	b14b      	cbz	r3, 80086a2 <__ascii_mbtowc+0x1e>
 800868e:	7813      	ldrb	r3, [r2, #0]
 8008690:	600b      	str	r3, [r1, #0]
 8008692:	7812      	ldrb	r2, [r2, #0]
 8008694:	1e10      	subs	r0, r2, #0
 8008696:	bf18      	it	ne
 8008698:	2001      	movne	r0, #1
 800869a:	b002      	add	sp, #8
 800869c:	4770      	bx	lr
 800869e:	4610      	mov	r0, r2
 80086a0:	e7fb      	b.n	800869a <__ascii_mbtowc+0x16>
 80086a2:	f06f 0001 	mvn.w	r0, #1
 80086a6:	e7f8      	b.n	800869a <__ascii_mbtowc+0x16>

080086a8 <memmove>:
 80086a8:	4288      	cmp	r0, r1
 80086aa:	b510      	push	{r4, lr}
 80086ac:	eb01 0402 	add.w	r4, r1, r2
 80086b0:	d902      	bls.n	80086b8 <memmove+0x10>
 80086b2:	4284      	cmp	r4, r0
 80086b4:	4623      	mov	r3, r4
 80086b6:	d807      	bhi.n	80086c8 <memmove+0x20>
 80086b8:	1e43      	subs	r3, r0, #1
 80086ba:	42a1      	cmp	r1, r4
 80086bc:	d008      	beq.n	80086d0 <memmove+0x28>
 80086be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086c6:	e7f8      	b.n	80086ba <memmove+0x12>
 80086c8:	4402      	add	r2, r0
 80086ca:	4601      	mov	r1, r0
 80086cc:	428a      	cmp	r2, r1
 80086ce:	d100      	bne.n	80086d2 <memmove+0x2a>
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086da:	e7f7      	b.n	80086cc <memmove+0x24>

080086dc <__malloc_lock>:
 80086dc:	4801      	ldr	r0, [pc, #4]	; (80086e4 <__malloc_lock+0x8>)
 80086de:	f000 bc1f 	b.w	8008f20 <__retarget_lock_acquire_recursive>
 80086e2:	bf00      	nop
 80086e4:	20000334 	.word	0x20000334

080086e8 <__malloc_unlock>:
 80086e8:	4801      	ldr	r0, [pc, #4]	; (80086f0 <__malloc_unlock+0x8>)
 80086ea:	f000 bc1a 	b.w	8008f22 <__retarget_lock_release_recursive>
 80086ee:	bf00      	nop
 80086f0:	20000334 	.word	0x20000334

080086f4 <_realloc_r>:
 80086f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f8:	4680      	mov	r8, r0
 80086fa:	4614      	mov	r4, r2
 80086fc:	460e      	mov	r6, r1
 80086fe:	b921      	cbnz	r1, 800870a <_realloc_r+0x16>
 8008700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008704:	4611      	mov	r1, r2
 8008706:	f7ff bdad 	b.w	8008264 <_malloc_r>
 800870a:	b92a      	cbnz	r2, 8008718 <_realloc_r+0x24>
 800870c:	f7ff fd3e 	bl	800818c <_free_r>
 8008710:	4625      	mov	r5, r4
 8008712:	4628      	mov	r0, r5
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008718:	f000 fc6a 	bl	8008ff0 <_malloc_usable_size_r>
 800871c:	4284      	cmp	r4, r0
 800871e:	4607      	mov	r7, r0
 8008720:	d802      	bhi.n	8008728 <_realloc_r+0x34>
 8008722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008726:	d812      	bhi.n	800874e <_realloc_r+0x5a>
 8008728:	4621      	mov	r1, r4
 800872a:	4640      	mov	r0, r8
 800872c:	f7ff fd9a 	bl	8008264 <_malloc_r>
 8008730:	4605      	mov	r5, r0
 8008732:	2800      	cmp	r0, #0
 8008734:	d0ed      	beq.n	8008712 <_realloc_r+0x1e>
 8008736:	42bc      	cmp	r4, r7
 8008738:	4622      	mov	r2, r4
 800873a:	4631      	mov	r1, r6
 800873c:	bf28      	it	cs
 800873e:	463a      	movcs	r2, r7
 8008740:	f7ff f97c 	bl	8007a3c <memcpy>
 8008744:	4631      	mov	r1, r6
 8008746:	4640      	mov	r0, r8
 8008748:	f7ff fd20 	bl	800818c <_free_r>
 800874c:	e7e1      	b.n	8008712 <_realloc_r+0x1e>
 800874e:	4635      	mov	r5, r6
 8008750:	e7df      	b.n	8008712 <_realloc_r+0x1e>

08008752 <__sfputc_r>:
 8008752:	6893      	ldr	r3, [r2, #8]
 8008754:	3b01      	subs	r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	b410      	push	{r4}
 800875a:	6093      	str	r3, [r2, #8]
 800875c:	da08      	bge.n	8008770 <__sfputc_r+0x1e>
 800875e:	6994      	ldr	r4, [r2, #24]
 8008760:	42a3      	cmp	r3, r4
 8008762:	db01      	blt.n	8008768 <__sfputc_r+0x16>
 8008764:	290a      	cmp	r1, #10
 8008766:	d103      	bne.n	8008770 <__sfputc_r+0x1e>
 8008768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876c:	f000 b94a 	b.w	8008a04 <__swbuf_r>
 8008770:	6813      	ldr	r3, [r2, #0]
 8008772:	1c58      	adds	r0, r3, #1
 8008774:	6010      	str	r0, [r2, #0]
 8008776:	7019      	strb	r1, [r3, #0]
 8008778:	4608      	mov	r0, r1
 800877a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877e:	4770      	bx	lr

08008780 <__sfputs_r>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	4614      	mov	r4, r2
 8008788:	18d5      	adds	r5, r2, r3
 800878a:	42ac      	cmp	r4, r5
 800878c:	d101      	bne.n	8008792 <__sfputs_r+0x12>
 800878e:	2000      	movs	r0, #0
 8008790:	e007      	b.n	80087a2 <__sfputs_r+0x22>
 8008792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008796:	463a      	mov	r2, r7
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ffda 	bl	8008752 <__sfputc_r>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d1f3      	bne.n	800878a <__sfputs_r+0xa>
 80087a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087a4 <_vfiprintf_r>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	460d      	mov	r5, r1
 80087aa:	b09d      	sub	sp, #116	; 0x74
 80087ac:	4614      	mov	r4, r2
 80087ae:	4698      	mov	r8, r3
 80087b0:	4606      	mov	r6, r0
 80087b2:	b118      	cbz	r0, 80087bc <_vfiprintf_r+0x18>
 80087b4:	6983      	ldr	r3, [r0, #24]
 80087b6:	b90b      	cbnz	r3, 80087bc <_vfiprintf_r+0x18>
 80087b8:	f000 fb14 	bl	8008de4 <__sinit>
 80087bc:	4b89      	ldr	r3, [pc, #548]	; (80089e4 <_vfiprintf_r+0x240>)
 80087be:	429d      	cmp	r5, r3
 80087c0:	d11b      	bne.n	80087fa <_vfiprintf_r+0x56>
 80087c2:	6875      	ldr	r5, [r6, #4]
 80087c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d405      	bmi.n	80087d6 <_vfiprintf_r+0x32>
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	059a      	lsls	r2, r3, #22
 80087ce:	d402      	bmi.n	80087d6 <_vfiprintf_r+0x32>
 80087d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d2:	f000 fba5 	bl	8008f20 <__retarget_lock_acquire_recursive>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	071b      	lsls	r3, r3, #28
 80087da:	d501      	bpl.n	80087e0 <_vfiprintf_r+0x3c>
 80087dc:	692b      	ldr	r3, [r5, #16]
 80087de:	b9eb      	cbnz	r3, 800881c <_vfiprintf_r+0x78>
 80087e0:	4629      	mov	r1, r5
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 f96e 	bl	8008ac4 <__swsetup_r>
 80087e8:	b1c0      	cbz	r0, 800881c <_vfiprintf_r+0x78>
 80087ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ec:	07dc      	lsls	r4, r3, #31
 80087ee:	d50e      	bpl.n	800880e <_vfiprintf_r+0x6a>
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	b01d      	add	sp, #116	; 0x74
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	4b7b      	ldr	r3, [pc, #492]	; (80089e8 <_vfiprintf_r+0x244>)
 80087fc:	429d      	cmp	r5, r3
 80087fe:	d101      	bne.n	8008804 <_vfiprintf_r+0x60>
 8008800:	68b5      	ldr	r5, [r6, #8]
 8008802:	e7df      	b.n	80087c4 <_vfiprintf_r+0x20>
 8008804:	4b79      	ldr	r3, [pc, #484]	; (80089ec <_vfiprintf_r+0x248>)
 8008806:	429d      	cmp	r5, r3
 8008808:	bf08      	it	eq
 800880a:	68f5      	ldreq	r5, [r6, #12]
 800880c:	e7da      	b.n	80087c4 <_vfiprintf_r+0x20>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	0598      	lsls	r0, r3, #22
 8008812:	d4ed      	bmi.n	80087f0 <_vfiprintf_r+0x4c>
 8008814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008816:	f000 fb84 	bl	8008f22 <__retarget_lock_release_recursive>
 800881a:	e7e9      	b.n	80087f0 <_vfiprintf_r+0x4c>
 800881c:	2300      	movs	r3, #0
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	2320      	movs	r3, #32
 8008822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008826:	f8cd 800c 	str.w	r8, [sp, #12]
 800882a:	2330      	movs	r3, #48	; 0x30
 800882c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089f0 <_vfiprintf_r+0x24c>
 8008830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008834:	f04f 0901 	mov.w	r9, #1
 8008838:	4623      	mov	r3, r4
 800883a:	469a      	mov	sl, r3
 800883c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008840:	b10a      	cbz	r2, 8008846 <_vfiprintf_r+0xa2>
 8008842:	2a25      	cmp	r2, #37	; 0x25
 8008844:	d1f9      	bne.n	800883a <_vfiprintf_r+0x96>
 8008846:	ebba 0b04 	subs.w	fp, sl, r4
 800884a:	d00b      	beq.n	8008864 <_vfiprintf_r+0xc0>
 800884c:	465b      	mov	r3, fp
 800884e:	4622      	mov	r2, r4
 8008850:	4629      	mov	r1, r5
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ff94 	bl	8008780 <__sfputs_r>
 8008858:	3001      	adds	r0, #1
 800885a:	f000 80aa 	beq.w	80089b2 <_vfiprintf_r+0x20e>
 800885e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008860:	445a      	add	r2, fp
 8008862:	9209      	str	r2, [sp, #36]	; 0x24
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80a2 	beq.w	80089b2 <_vfiprintf_r+0x20e>
 800886e:	2300      	movs	r3, #0
 8008870:	f04f 32ff 	mov.w	r2, #4294967295
 8008874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008878:	f10a 0a01 	add.w	sl, sl, #1
 800887c:	9304      	str	r3, [sp, #16]
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008884:	931a      	str	r3, [sp, #104]	; 0x68
 8008886:	4654      	mov	r4, sl
 8008888:	2205      	movs	r2, #5
 800888a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888e:	4858      	ldr	r0, [pc, #352]	; (80089f0 <_vfiprintf_r+0x24c>)
 8008890:	f7f7 fcae 	bl	80001f0 <memchr>
 8008894:	9a04      	ldr	r2, [sp, #16]
 8008896:	b9d8      	cbnz	r0, 80088d0 <_vfiprintf_r+0x12c>
 8008898:	06d1      	lsls	r1, r2, #27
 800889a:	bf44      	itt	mi
 800889c:	2320      	movmi	r3, #32
 800889e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088a2:	0713      	lsls	r3, r2, #28
 80088a4:	bf44      	itt	mi
 80088a6:	232b      	movmi	r3, #43	; 0x2b
 80088a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ac:	f89a 3000 	ldrb.w	r3, [sl]
 80088b0:	2b2a      	cmp	r3, #42	; 0x2a
 80088b2:	d015      	beq.n	80088e0 <_vfiprintf_r+0x13c>
 80088b4:	9a07      	ldr	r2, [sp, #28]
 80088b6:	4654      	mov	r4, sl
 80088b8:	2000      	movs	r0, #0
 80088ba:	f04f 0c0a 	mov.w	ip, #10
 80088be:	4621      	mov	r1, r4
 80088c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c4:	3b30      	subs	r3, #48	; 0x30
 80088c6:	2b09      	cmp	r3, #9
 80088c8:	d94e      	bls.n	8008968 <_vfiprintf_r+0x1c4>
 80088ca:	b1b0      	cbz	r0, 80088fa <_vfiprintf_r+0x156>
 80088cc:	9207      	str	r2, [sp, #28]
 80088ce:	e014      	b.n	80088fa <_vfiprintf_r+0x156>
 80088d0:	eba0 0308 	sub.w	r3, r0, r8
 80088d4:	fa09 f303 	lsl.w	r3, r9, r3
 80088d8:	4313      	orrs	r3, r2
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	46a2      	mov	sl, r4
 80088de:	e7d2      	b.n	8008886 <_vfiprintf_r+0xe2>
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	1d19      	adds	r1, r3, #4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	9103      	str	r1, [sp, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfbb      	ittet	lt
 80088ec:	425b      	neglt	r3, r3
 80088ee:	f042 0202 	orrlt.w	r2, r2, #2
 80088f2:	9307      	strge	r3, [sp, #28]
 80088f4:	9307      	strlt	r3, [sp, #28]
 80088f6:	bfb8      	it	lt
 80088f8:	9204      	strlt	r2, [sp, #16]
 80088fa:	7823      	ldrb	r3, [r4, #0]
 80088fc:	2b2e      	cmp	r3, #46	; 0x2e
 80088fe:	d10c      	bne.n	800891a <_vfiprintf_r+0x176>
 8008900:	7863      	ldrb	r3, [r4, #1]
 8008902:	2b2a      	cmp	r3, #42	; 0x2a
 8008904:	d135      	bne.n	8008972 <_vfiprintf_r+0x1ce>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	1d1a      	adds	r2, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	9203      	str	r2, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfb8      	it	lt
 8008912:	f04f 33ff 	movlt.w	r3, #4294967295
 8008916:	3402      	adds	r4, #2
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a00 <_vfiprintf_r+0x25c>
 800891e:	7821      	ldrb	r1, [r4, #0]
 8008920:	2203      	movs	r2, #3
 8008922:	4650      	mov	r0, sl
 8008924:	f7f7 fc64 	bl	80001f0 <memchr>
 8008928:	b140      	cbz	r0, 800893c <_vfiprintf_r+0x198>
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	eba0 000a 	sub.w	r0, r0, sl
 8008930:	fa03 f000 	lsl.w	r0, r3, r0
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	4303      	orrs	r3, r0
 8008938:	3401      	adds	r4, #1
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008940:	482c      	ldr	r0, [pc, #176]	; (80089f4 <_vfiprintf_r+0x250>)
 8008942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008946:	2206      	movs	r2, #6
 8008948:	f7f7 fc52 	bl	80001f0 <memchr>
 800894c:	2800      	cmp	r0, #0
 800894e:	d03f      	beq.n	80089d0 <_vfiprintf_r+0x22c>
 8008950:	4b29      	ldr	r3, [pc, #164]	; (80089f8 <_vfiprintf_r+0x254>)
 8008952:	bb1b      	cbnz	r3, 800899c <_vfiprintf_r+0x1f8>
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	3307      	adds	r3, #7
 8008958:	f023 0307 	bic.w	r3, r3, #7
 800895c:	3308      	adds	r3, #8
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	443b      	add	r3, r7
 8008964:	9309      	str	r3, [sp, #36]	; 0x24
 8008966:	e767      	b.n	8008838 <_vfiprintf_r+0x94>
 8008968:	fb0c 3202 	mla	r2, ip, r2, r3
 800896c:	460c      	mov	r4, r1
 800896e:	2001      	movs	r0, #1
 8008970:	e7a5      	b.n	80088be <_vfiprintf_r+0x11a>
 8008972:	2300      	movs	r3, #0
 8008974:	3401      	adds	r4, #1
 8008976:	9305      	str	r3, [sp, #20]
 8008978:	4619      	mov	r1, r3
 800897a:	f04f 0c0a 	mov.w	ip, #10
 800897e:	4620      	mov	r0, r4
 8008980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008984:	3a30      	subs	r2, #48	; 0x30
 8008986:	2a09      	cmp	r2, #9
 8008988:	d903      	bls.n	8008992 <_vfiprintf_r+0x1ee>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0c5      	beq.n	800891a <_vfiprintf_r+0x176>
 800898e:	9105      	str	r1, [sp, #20]
 8008990:	e7c3      	b.n	800891a <_vfiprintf_r+0x176>
 8008992:	fb0c 2101 	mla	r1, ip, r1, r2
 8008996:	4604      	mov	r4, r0
 8008998:	2301      	movs	r3, #1
 800899a:	e7f0      	b.n	800897e <_vfiprintf_r+0x1da>
 800899c:	ab03      	add	r3, sp, #12
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	462a      	mov	r2, r5
 80089a2:	4b16      	ldr	r3, [pc, #88]	; (80089fc <_vfiprintf_r+0x258>)
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	4630      	mov	r0, r6
 80089a8:	f7fd fdd6 	bl	8006558 <_printf_float>
 80089ac:	4607      	mov	r7, r0
 80089ae:	1c78      	adds	r0, r7, #1
 80089b0:	d1d6      	bne.n	8008960 <_vfiprintf_r+0x1bc>
 80089b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b4:	07d9      	lsls	r1, r3, #31
 80089b6:	d405      	bmi.n	80089c4 <_vfiprintf_r+0x220>
 80089b8:	89ab      	ldrh	r3, [r5, #12]
 80089ba:	059a      	lsls	r2, r3, #22
 80089bc:	d402      	bmi.n	80089c4 <_vfiprintf_r+0x220>
 80089be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c0:	f000 faaf 	bl	8008f22 <__retarget_lock_release_recursive>
 80089c4:	89ab      	ldrh	r3, [r5, #12]
 80089c6:	065b      	lsls	r3, r3, #25
 80089c8:	f53f af12 	bmi.w	80087f0 <_vfiprintf_r+0x4c>
 80089cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ce:	e711      	b.n	80087f4 <_vfiprintf_r+0x50>
 80089d0:	ab03      	add	r3, sp, #12
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	462a      	mov	r2, r5
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <_vfiprintf_r+0x258>)
 80089d8:	a904      	add	r1, sp, #16
 80089da:	4630      	mov	r0, r6
 80089dc:	f7fe f860 	bl	8006aa0 <_printf_i>
 80089e0:	e7e4      	b.n	80089ac <_vfiprintf_r+0x208>
 80089e2:	bf00      	nop
 80089e4:	080095e4 	.word	0x080095e4
 80089e8:	08009604 	.word	0x08009604
 80089ec:	080095c4 	.word	0x080095c4
 80089f0:	0800946c 	.word	0x0800946c
 80089f4:	08009476 	.word	0x08009476
 80089f8:	08006559 	.word	0x08006559
 80089fc:	08008781 	.word	0x08008781
 8008a00:	08009472 	.word	0x08009472

08008a04 <__swbuf_r>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	460e      	mov	r6, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	b118      	cbz	r0, 8008a16 <__swbuf_r+0x12>
 8008a0e:	6983      	ldr	r3, [r0, #24]
 8008a10:	b90b      	cbnz	r3, 8008a16 <__swbuf_r+0x12>
 8008a12:	f000 f9e7 	bl	8008de4 <__sinit>
 8008a16:	4b21      	ldr	r3, [pc, #132]	; (8008a9c <__swbuf_r+0x98>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d12b      	bne.n	8008a74 <__swbuf_r+0x70>
 8008a1c:	686c      	ldr	r4, [r5, #4]
 8008a1e:	69a3      	ldr	r3, [r4, #24]
 8008a20:	60a3      	str	r3, [r4, #8]
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	071a      	lsls	r2, r3, #28
 8008a26:	d52f      	bpl.n	8008a88 <__swbuf_r+0x84>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	b36b      	cbz	r3, 8008a88 <__swbuf_r+0x84>
 8008a2c:	6923      	ldr	r3, [r4, #16]
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	1ac0      	subs	r0, r0, r3
 8008a32:	6963      	ldr	r3, [r4, #20]
 8008a34:	b2f6      	uxtb	r6, r6
 8008a36:	4283      	cmp	r3, r0
 8008a38:	4637      	mov	r7, r6
 8008a3a:	dc04      	bgt.n	8008a46 <__swbuf_r+0x42>
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 f93c 	bl	8008cbc <_fflush_r>
 8008a44:	bb30      	cbnz	r0, 8008a94 <__swbuf_r+0x90>
 8008a46:	68a3      	ldr	r3, [r4, #8]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	60a3      	str	r3, [r4, #8]
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	6022      	str	r2, [r4, #0]
 8008a52:	701e      	strb	r6, [r3, #0]
 8008a54:	6963      	ldr	r3, [r4, #20]
 8008a56:	3001      	adds	r0, #1
 8008a58:	4283      	cmp	r3, r0
 8008a5a:	d004      	beq.n	8008a66 <__swbuf_r+0x62>
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	07db      	lsls	r3, r3, #31
 8008a60:	d506      	bpl.n	8008a70 <__swbuf_r+0x6c>
 8008a62:	2e0a      	cmp	r6, #10
 8008a64:	d104      	bne.n	8008a70 <__swbuf_r+0x6c>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 f927 	bl	8008cbc <_fflush_r>
 8008a6e:	b988      	cbnz	r0, 8008a94 <__swbuf_r+0x90>
 8008a70:	4638      	mov	r0, r7
 8008a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <__swbuf_r+0x9c>)
 8008a76:	429c      	cmp	r4, r3
 8008a78:	d101      	bne.n	8008a7e <__swbuf_r+0x7a>
 8008a7a:	68ac      	ldr	r4, [r5, #8]
 8008a7c:	e7cf      	b.n	8008a1e <__swbuf_r+0x1a>
 8008a7e:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <__swbuf_r+0xa0>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	bf08      	it	eq
 8008a84:	68ec      	ldreq	r4, [r5, #12]
 8008a86:	e7ca      	b.n	8008a1e <__swbuf_r+0x1a>
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f81a 	bl	8008ac4 <__swsetup_r>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0cb      	beq.n	8008a2c <__swbuf_r+0x28>
 8008a94:	f04f 37ff 	mov.w	r7, #4294967295
 8008a98:	e7ea      	b.n	8008a70 <__swbuf_r+0x6c>
 8008a9a:	bf00      	nop
 8008a9c:	080095e4 	.word	0x080095e4
 8008aa0:	08009604 	.word	0x08009604
 8008aa4:	080095c4 	.word	0x080095c4

08008aa8 <__ascii_wctomb>:
 8008aa8:	b149      	cbz	r1, 8008abe <__ascii_wctomb+0x16>
 8008aaa:	2aff      	cmp	r2, #255	; 0xff
 8008aac:	bf85      	ittet	hi
 8008aae:	238a      	movhi	r3, #138	; 0x8a
 8008ab0:	6003      	strhi	r3, [r0, #0]
 8008ab2:	700a      	strbls	r2, [r1, #0]
 8008ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ab8:	bf98      	it	ls
 8008aba:	2001      	movls	r0, #1
 8008abc:	4770      	bx	lr
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4770      	bx	lr
	...

08008ac4 <__swsetup_r>:
 8008ac4:	4b32      	ldr	r3, [pc, #200]	; (8008b90 <__swsetup_r+0xcc>)
 8008ac6:	b570      	push	{r4, r5, r6, lr}
 8008ac8:	681d      	ldr	r5, [r3, #0]
 8008aca:	4606      	mov	r6, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	b125      	cbz	r5, 8008ada <__swsetup_r+0x16>
 8008ad0:	69ab      	ldr	r3, [r5, #24]
 8008ad2:	b913      	cbnz	r3, 8008ada <__swsetup_r+0x16>
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f000 f985 	bl	8008de4 <__sinit>
 8008ada:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <__swsetup_r+0xd0>)
 8008adc:	429c      	cmp	r4, r3
 8008ade:	d10f      	bne.n	8008b00 <__swsetup_r+0x3c>
 8008ae0:	686c      	ldr	r4, [r5, #4]
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae8:	0719      	lsls	r1, r3, #28
 8008aea:	d42c      	bmi.n	8008b46 <__swsetup_r+0x82>
 8008aec:	06dd      	lsls	r5, r3, #27
 8008aee:	d411      	bmi.n	8008b14 <__swsetup_r+0x50>
 8008af0:	2309      	movs	r3, #9
 8008af2:	6033      	str	r3, [r6, #0]
 8008af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	f04f 30ff 	mov.w	r0, #4294967295
 8008afe:	e03e      	b.n	8008b7e <__swsetup_r+0xba>
 8008b00:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <__swsetup_r+0xd4>)
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d101      	bne.n	8008b0a <__swsetup_r+0x46>
 8008b06:	68ac      	ldr	r4, [r5, #8]
 8008b08:	e7eb      	b.n	8008ae2 <__swsetup_r+0x1e>
 8008b0a:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <__swsetup_r+0xd8>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	bf08      	it	eq
 8008b10:	68ec      	ldreq	r4, [r5, #12]
 8008b12:	e7e6      	b.n	8008ae2 <__swsetup_r+0x1e>
 8008b14:	0758      	lsls	r0, r3, #29
 8008b16:	d512      	bpl.n	8008b3e <__swsetup_r+0x7a>
 8008b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b1a:	b141      	cbz	r1, 8008b2e <__swsetup_r+0x6a>
 8008b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d002      	beq.n	8008b2a <__swsetup_r+0x66>
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff fb31 	bl	800818c <_free_r>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	2300      	movs	r3, #0
 8008b38:	6063      	str	r3, [r4, #4]
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f043 0308 	orr.w	r3, r3, #8
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	b94b      	cbnz	r3, 8008b5e <__swsetup_r+0x9a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b54:	d003      	beq.n	8008b5e <__swsetup_r+0x9a>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f000 fa09 	bl	8008f70 <__smakebuf_r>
 8008b5e:	89a0      	ldrh	r0, [r4, #12]
 8008b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b64:	f010 0301 	ands.w	r3, r0, #1
 8008b68:	d00a      	beq.n	8008b80 <__swsetup_r+0xbc>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60a3      	str	r3, [r4, #8]
 8008b6e:	6963      	ldr	r3, [r4, #20]
 8008b70:	425b      	negs	r3, r3
 8008b72:	61a3      	str	r3, [r4, #24]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	b943      	cbnz	r3, 8008b8a <__swsetup_r+0xc6>
 8008b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b7c:	d1ba      	bne.n	8008af4 <__swsetup_r+0x30>
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	0781      	lsls	r1, r0, #30
 8008b82:	bf58      	it	pl
 8008b84:	6963      	ldrpl	r3, [r4, #20]
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	e7f4      	b.n	8008b74 <__swsetup_r+0xb0>
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	e7f7      	b.n	8008b7e <__swsetup_r+0xba>
 8008b8e:	bf00      	nop
 8008b90:	2000000c 	.word	0x2000000c
 8008b94:	080095e4 	.word	0x080095e4
 8008b98:	08009604 	.word	0x08009604
 8008b9c:	080095c4 	.word	0x080095c4

08008ba0 <abort>:
 8008ba0:	b508      	push	{r3, lr}
 8008ba2:	2006      	movs	r0, #6
 8008ba4:	f000 fa54 	bl	8009050 <raise>
 8008ba8:	2001      	movs	r0, #1
 8008baa:	f7f8 fb47 	bl	800123c <_exit>
	...

08008bb0 <__sflush_r>:
 8008bb0:	898a      	ldrh	r2, [r1, #12]
 8008bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	0710      	lsls	r0, r2, #28
 8008bba:	460c      	mov	r4, r1
 8008bbc:	d458      	bmi.n	8008c70 <__sflush_r+0xc0>
 8008bbe:	684b      	ldr	r3, [r1, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	dc05      	bgt.n	8008bd0 <__sflush_r+0x20>
 8008bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dc02      	bgt.n	8008bd0 <__sflush_r+0x20>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	d0f9      	beq.n	8008bca <__sflush_r+0x1a>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bdc:	682f      	ldr	r7, [r5, #0]
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	d032      	beq.n	8008c48 <__sflush_r+0x98>
 8008be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	075a      	lsls	r2, r3, #29
 8008be8:	d505      	bpl.n	8008bf6 <__sflush_r+0x46>
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	1ac0      	subs	r0, r0, r3
 8008bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf0:	b10b      	cbz	r3, 8008bf6 <__sflush_r+0x46>
 8008bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bf4:	1ac0      	subs	r0, r0, r3
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bfc:	6a21      	ldr	r1, [r4, #32]
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b0      	blx	r6
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	d106      	bne.n	8008c16 <__sflush_r+0x66>
 8008c08:	6829      	ldr	r1, [r5, #0]
 8008c0a:	291d      	cmp	r1, #29
 8008c0c:	d82c      	bhi.n	8008c68 <__sflush_r+0xb8>
 8008c0e:	4a2a      	ldr	r2, [pc, #168]	; (8008cb8 <__sflush_r+0x108>)
 8008c10:	40ca      	lsrs	r2, r1
 8008c12:	07d6      	lsls	r6, r2, #31
 8008c14:	d528      	bpl.n	8008c68 <__sflush_r+0xb8>
 8008c16:	2200      	movs	r2, #0
 8008c18:	6062      	str	r2, [r4, #4]
 8008c1a:	04d9      	lsls	r1, r3, #19
 8008c1c:	6922      	ldr	r2, [r4, #16]
 8008c1e:	6022      	str	r2, [r4, #0]
 8008c20:	d504      	bpl.n	8008c2c <__sflush_r+0x7c>
 8008c22:	1c42      	adds	r2, r0, #1
 8008c24:	d101      	bne.n	8008c2a <__sflush_r+0x7a>
 8008c26:	682b      	ldr	r3, [r5, #0]
 8008c28:	b903      	cbnz	r3, 8008c2c <__sflush_r+0x7c>
 8008c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c2e:	602f      	str	r7, [r5, #0]
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d0ca      	beq.n	8008bca <__sflush_r+0x1a>
 8008c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d002      	beq.n	8008c42 <__sflush_r+0x92>
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f7ff faa5 	bl	800818c <_free_r>
 8008c42:	2000      	movs	r0, #0
 8008c44:	6360      	str	r0, [r4, #52]	; 0x34
 8008c46:	e7c1      	b.n	8008bcc <__sflush_r+0x1c>
 8008c48:	6a21      	ldr	r1, [r4, #32]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b0      	blx	r6
 8008c50:	1c41      	adds	r1, r0, #1
 8008c52:	d1c7      	bne.n	8008be4 <__sflush_r+0x34>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0c4      	beq.n	8008be4 <__sflush_r+0x34>
 8008c5a:	2b1d      	cmp	r3, #29
 8008c5c:	d001      	beq.n	8008c62 <__sflush_r+0xb2>
 8008c5e:	2b16      	cmp	r3, #22
 8008c60:	d101      	bne.n	8008c66 <__sflush_r+0xb6>
 8008c62:	602f      	str	r7, [r5, #0]
 8008c64:	e7b1      	b.n	8008bca <__sflush_r+0x1a>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	e7ad      	b.n	8008bcc <__sflush_r+0x1c>
 8008c70:	690f      	ldr	r7, [r1, #16]
 8008c72:	2f00      	cmp	r7, #0
 8008c74:	d0a9      	beq.n	8008bca <__sflush_r+0x1a>
 8008c76:	0793      	lsls	r3, r2, #30
 8008c78:	680e      	ldr	r6, [r1, #0]
 8008c7a:	bf08      	it	eq
 8008c7c:	694b      	ldreq	r3, [r1, #20]
 8008c7e:	600f      	str	r7, [r1, #0]
 8008c80:	bf18      	it	ne
 8008c82:	2300      	movne	r3, #0
 8008c84:	eba6 0807 	sub.w	r8, r6, r7
 8008c88:	608b      	str	r3, [r1, #8]
 8008c8a:	f1b8 0f00 	cmp.w	r8, #0
 8008c8e:	dd9c      	ble.n	8008bca <__sflush_r+0x1a>
 8008c90:	6a21      	ldr	r1, [r4, #32]
 8008c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c94:	4643      	mov	r3, r8
 8008c96:	463a      	mov	r2, r7
 8008c98:	4628      	mov	r0, r5
 8008c9a:	47b0      	blx	r6
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	dc06      	bgt.n	8008cae <__sflush_r+0xfe>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e78e      	b.n	8008bcc <__sflush_r+0x1c>
 8008cae:	4407      	add	r7, r0
 8008cb0:	eba8 0800 	sub.w	r8, r8, r0
 8008cb4:	e7e9      	b.n	8008c8a <__sflush_r+0xda>
 8008cb6:	bf00      	nop
 8008cb8:	20400001 	.word	0x20400001

08008cbc <_fflush_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b913      	cbnz	r3, 8008ccc <_fflush_r+0x10>
 8008cc6:	2500      	movs	r5, #0
 8008cc8:	4628      	mov	r0, r5
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	b118      	cbz	r0, 8008cd6 <_fflush_r+0x1a>
 8008cce:	6983      	ldr	r3, [r0, #24]
 8008cd0:	b90b      	cbnz	r3, 8008cd6 <_fflush_r+0x1a>
 8008cd2:	f000 f887 	bl	8008de4 <__sinit>
 8008cd6:	4b14      	ldr	r3, [pc, #80]	; (8008d28 <_fflush_r+0x6c>)
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	d11b      	bne.n	8008d14 <_fflush_r+0x58>
 8008cdc:	686c      	ldr	r4, [r5, #4]
 8008cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0ef      	beq.n	8008cc6 <_fflush_r+0xa>
 8008ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ce8:	07d0      	lsls	r0, r2, #31
 8008cea:	d404      	bmi.n	8008cf6 <_fflush_r+0x3a>
 8008cec:	0599      	lsls	r1, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_fflush_r+0x3a>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf2:	f000 f915 	bl	8008f20 <__retarget_lock_acquire_recursive>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7ff ff59 	bl	8008bb0 <__sflush_r>
 8008cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d00:	07da      	lsls	r2, r3, #31
 8008d02:	4605      	mov	r5, r0
 8008d04:	d4e0      	bmi.n	8008cc8 <_fflush_r+0xc>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	059b      	lsls	r3, r3, #22
 8008d0a:	d4dd      	bmi.n	8008cc8 <_fflush_r+0xc>
 8008d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d0e:	f000 f908 	bl	8008f22 <__retarget_lock_release_recursive>
 8008d12:	e7d9      	b.n	8008cc8 <_fflush_r+0xc>
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <_fflush_r+0x70>)
 8008d16:	429c      	cmp	r4, r3
 8008d18:	d101      	bne.n	8008d1e <_fflush_r+0x62>
 8008d1a:	68ac      	ldr	r4, [r5, #8]
 8008d1c:	e7df      	b.n	8008cde <_fflush_r+0x22>
 8008d1e:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <_fflush_r+0x74>)
 8008d20:	429c      	cmp	r4, r3
 8008d22:	bf08      	it	eq
 8008d24:	68ec      	ldreq	r4, [r5, #12]
 8008d26:	e7da      	b.n	8008cde <_fflush_r+0x22>
 8008d28:	080095e4 	.word	0x080095e4
 8008d2c:	08009604 	.word	0x08009604
 8008d30:	080095c4 	.word	0x080095c4

08008d34 <std>:
 8008d34:	2300      	movs	r3, #0
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d42:	6083      	str	r3, [r0, #8]
 8008d44:	8181      	strh	r1, [r0, #12]
 8008d46:	6643      	str	r3, [r0, #100]	; 0x64
 8008d48:	81c2      	strh	r2, [r0, #14]
 8008d4a:	6183      	str	r3, [r0, #24]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	2208      	movs	r2, #8
 8008d50:	305c      	adds	r0, #92	; 0x5c
 8008d52:	f7fd fb59 	bl	8006408 <memset>
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <std+0x38>)
 8008d58:	6263      	str	r3, [r4, #36]	; 0x24
 8008d5a:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <std+0x3c>)
 8008d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <std+0x40>)
 8008d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <std+0x44>)
 8008d64:	6224      	str	r4, [r4, #32]
 8008d66:	6323      	str	r3, [r4, #48]	; 0x30
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	bf00      	nop
 8008d6c:	08009089 	.word	0x08009089
 8008d70:	080090ab 	.word	0x080090ab
 8008d74:	080090e3 	.word	0x080090e3
 8008d78:	08009107 	.word	0x08009107

08008d7c <_cleanup_r>:
 8008d7c:	4901      	ldr	r1, [pc, #4]	; (8008d84 <_cleanup_r+0x8>)
 8008d7e:	f000 b8af 	b.w	8008ee0 <_fwalk_reent>
 8008d82:	bf00      	nop
 8008d84:	08008cbd 	.word	0x08008cbd

08008d88 <__sfmoreglue>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	2268      	movs	r2, #104	; 0x68
 8008d8c:	1e4d      	subs	r5, r1, #1
 8008d8e:	4355      	muls	r5, r2
 8008d90:	460e      	mov	r6, r1
 8008d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d96:	f7ff fa65 	bl	8008264 <_malloc_r>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	b140      	cbz	r0, 8008db0 <__sfmoreglue+0x28>
 8008d9e:	2100      	movs	r1, #0
 8008da0:	e9c0 1600 	strd	r1, r6, [r0]
 8008da4:	300c      	adds	r0, #12
 8008da6:	60a0      	str	r0, [r4, #8]
 8008da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dac:	f7fd fb2c 	bl	8006408 <memset>
 8008db0:	4620      	mov	r0, r4
 8008db2:	bd70      	pop	{r4, r5, r6, pc}

08008db4 <__sfp_lock_acquire>:
 8008db4:	4801      	ldr	r0, [pc, #4]	; (8008dbc <__sfp_lock_acquire+0x8>)
 8008db6:	f000 b8b3 	b.w	8008f20 <__retarget_lock_acquire_recursive>
 8008dba:	bf00      	nop
 8008dbc:	20000335 	.word	0x20000335

08008dc0 <__sfp_lock_release>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__sfp_lock_release+0x8>)
 8008dc2:	f000 b8ae 	b.w	8008f22 <__retarget_lock_release_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	20000335 	.word	0x20000335

08008dcc <__sinit_lock_acquire>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__sinit_lock_acquire+0x8>)
 8008dce:	f000 b8a7 	b.w	8008f20 <__retarget_lock_acquire_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	20000336 	.word	0x20000336

08008dd8 <__sinit_lock_release>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__sinit_lock_release+0x8>)
 8008dda:	f000 b8a2 	b.w	8008f22 <__retarget_lock_release_recursive>
 8008dde:	bf00      	nop
 8008de0:	20000336 	.word	0x20000336

08008de4 <__sinit>:
 8008de4:	b510      	push	{r4, lr}
 8008de6:	4604      	mov	r4, r0
 8008de8:	f7ff fff0 	bl	8008dcc <__sinit_lock_acquire>
 8008dec:	69a3      	ldr	r3, [r4, #24]
 8008dee:	b11b      	cbz	r3, 8008df8 <__sinit+0x14>
 8008df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df4:	f7ff bff0 	b.w	8008dd8 <__sinit_lock_release>
 8008df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <__sinit+0x68>)
 8008e00:	4a13      	ldr	r2, [pc, #76]	; (8008e50 <__sinit+0x6c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	bf04      	itt	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	61a3      	streq	r3, [r4, #24]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f820 	bl	8008e54 <__sfp>
 8008e14:	6060      	str	r0, [r4, #4]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f81c 	bl	8008e54 <__sfp>
 8008e1c:	60a0      	str	r0, [r4, #8]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f818 	bl	8008e54 <__sfp>
 8008e24:	2200      	movs	r2, #0
 8008e26:	60e0      	str	r0, [r4, #12]
 8008e28:	2104      	movs	r1, #4
 8008e2a:	6860      	ldr	r0, [r4, #4]
 8008e2c:	f7ff ff82 	bl	8008d34 <std>
 8008e30:	68a0      	ldr	r0, [r4, #8]
 8008e32:	2201      	movs	r2, #1
 8008e34:	2109      	movs	r1, #9
 8008e36:	f7ff ff7d 	bl	8008d34 <std>
 8008e3a:	68e0      	ldr	r0, [r4, #12]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	2112      	movs	r1, #18
 8008e40:	f7ff ff78 	bl	8008d34 <std>
 8008e44:	2301      	movs	r3, #1
 8008e46:	61a3      	str	r3, [r4, #24]
 8008e48:	e7d2      	b.n	8008df0 <__sinit+0xc>
 8008e4a:	bf00      	nop
 8008e4c:	0800924c 	.word	0x0800924c
 8008e50:	08008d7d 	.word	0x08008d7d

08008e54 <__sfp>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	4607      	mov	r7, r0
 8008e58:	f7ff ffac 	bl	8008db4 <__sfp_lock_acquire>
 8008e5c:	4b1e      	ldr	r3, [pc, #120]	; (8008ed8 <__sfp+0x84>)
 8008e5e:	681e      	ldr	r6, [r3, #0]
 8008e60:	69b3      	ldr	r3, [r6, #24]
 8008e62:	b913      	cbnz	r3, 8008e6a <__sfp+0x16>
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff ffbd 	bl	8008de4 <__sinit>
 8008e6a:	3648      	adds	r6, #72	; 0x48
 8008e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	d503      	bpl.n	8008e7c <__sfp+0x28>
 8008e74:	6833      	ldr	r3, [r6, #0]
 8008e76:	b30b      	cbz	r3, 8008ebc <__sfp+0x68>
 8008e78:	6836      	ldr	r6, [r6, #0]
 8008e7a:	e7f7      	b.n	8008e6c <__sfp+0x18>
 8008e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e80:	b9d5      	cbnz	r5, 8008eb8 <__sfp+0x64>
 8008e82:	4b16      	ldr	r3, [pc, #88]	; (8008edc <__sfp+0x88>)
 8008e84:	60e3      	str	r3, [r4, #12]
 8008e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e8c:	f000 f847 	bl	8008f1e <__retarget_lock_init_recursive>
 8008e90:	f7ff ff96 	bl	8008dc0 <__sfp_lock_release>
 8008e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e9c:	6025      	str	r5, [r4, #0]
 8008e9e:	61a5      	str	r5, [r4, #24]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ea8:	f7fd faae 	bl	8006408 <memset>
 8008eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb8:	3468      	adds	r4, #104	; 0x68
 8008eba:	e7d9      	b.n	8008e70 <__sfp+0x1c>
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7ff ff62 	bl	8008d88 <__sfmoreglue>
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	6030      	str	r0, [r6, #0]
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d1d5      	bne.n	8008e78 <__sfp+0x24>
 8008ecc:	f7ff ff78 	bl	8008dc0 <__sfp_lock_release>
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	e7ee      	b.n	8008eb4 <__sfp+0x60>
 8008ed6:	bf00      	nop
 8008ed8:	0800924c 	.word	0x0800924c
 8008edc:	ffff0001 	.word	0xffff0001

08008ee0 <_fwalk_reent>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	4688      	mov	r8, r1
 8008ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eec:	2700      	movs	r7, #0
 8008eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ef6:	d505      	bpl.n	8008f04 <_fwalk_reent+0x24>
 8008ef8:	6824      	ldr	r4, [r4, #0]
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	d1f7      	bne.n	8008eee <_fwalk_reent+0xe>
 8008efe:	4638      	mov	r0, r7
 8008f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f04:	89ab      	ldrh	r3, [r5, #12]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d907      	bls.n	8008f1a <_fwalk_reent+0x3a>
 8008f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	d003      	beq.n	8008f1a <_fwalk_reent+0x3a>
 8008f12:	4629      	mov	r1, r5
 8008f14:	4630      	mov	r0, r6
 8008f16:	47c0      	blx	r8
 8008f18:	4307      	orrs	r7, r0
 8008f1a:	3568      	adds	r5, #104	; 0x68
 8008f1c:	e7e9      	b.n	8008ef2 <_fwalk_reent+0x12>

08008f1e <__retarget_lock_init_recursive>:
 8008f1e:	4770      	bx	lr

08008f20 <__retarget_lock_acquire_recursive>:
 8008f20:	4770      	bx	lr

08008f22 <__retarget_lock_release_recursive>:
 8008f22:	4770      	bx	lr

08008f24 <__swhatbuf_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	460e      	mov	r6, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	b096      	sub	sp, #88	; 0x58
 8008f30:	4614      	mov	r4, r2
 8008f32:	461d      	mov	r5, r3
 8008f34:	da08      	bge.n	8008f48 <__swhatbuf_r+0x24>
 8008f36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	061a      	lsls	r2, r3, #24
 8008f40:	d410      	bmi.n	8008f64 <__swhatbuf_r+0x40>
 8008f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f46:	e00e      	b.n	8008f66 <__swhatbuf_r+0x42>
 8008f48:	466a      	mov	r2, sp
 8008f4a:	f000 f903 	bl	8009154 <_fstat_r>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	dbf1      	blt.n	8008f36 <__swhatbuf_r+0x12>
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f5c:	425a      	negs	r2, r3
 8008f5e:	415a      	adcs	r2, r3
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	e7ee      	b.n	8008f42 <__swhatbuf_r+0x1e>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	2000      	movs	r0, #0
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	b016      	add	sp, #88	; 0x58
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f70 <__smakebuf_r>:
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f74:	079d      	lsls	r5, r3, #30
 8008f76:	4606      	mov	r6, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d507      	bpl.n	8008f8c <__smakebuf_r+0x1c>
 8008f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	ab01      	add	r3, sp, #4
 8008f8e:	466a      	mov	r2, sp
 8008f90:	f7ff ffc8 	bl	8008f24 <__swhatbuf_r>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff f963 	bl	8008264 <_malloc_r>
 8008f9e:	b948      	cbnz	r0, 8008fb4 <__smakebuf_r+0x44>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d4ef      	bmi.n	8008f88 <__smakebuf_r+0x18>
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7e3      	b.n	8008f7c <__smakebuf_r+0xc>
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <__smakebuf_r+0x7c>)
 8008fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	6163      	str	r3, [r4, #20]
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	6120      	str	r0, [r4, #16]
 8008fca:	b15b      	cbz	r3, 8008fe4 <__smakebuf_r+0x74>
 8008fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f000 f8d1 	bl	8009178 <_isatty_r>
 8008fd6:	b128      	cbz	r0, 8008fe4 <__smakebuf_r+0x74>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	89a0      	ldrh	r0, [r4, #12]
 8008fe6:	4305      	orrs	r5, r0
 8008fe8:	81a5      	strh	r5, [r4, #12]
 8008fea:	e7cd      	b.n	8008f88 <__smakebuf_r+0x18>
 8008fec:	08008d7d 	.word	0x08008d7d

08008ff0 <_malloc_usable_size_r>:
 8008ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff4:	1f18      	subs	r0, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfbc      	itt	lt
 8008ffa:	580b      	ldrlt	r3, [r1, r0]
 8008ffc:	18c0      	addlt	r0, r0, r3
 8008ffe:	4770      	bx	lr

08009000 <_raise_r>:
 8009000:	291f      	cmp	r1, #31
 8009002:	b538      	push	{r3, r4, r5, lr}
 8009004:	4604      	mov	r4, r0
 8009006:	460d      	mov	r5, r1
 8009008:	d904      	bls.n	8009014 <_raise_r+0x14>
 800900a:	2316      	movs	r3, #22
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009016:	b112      	cbz	r2, 800901e <_raise_r+0x1e>
 8009018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800901c:	b94b      	cbnz	r3, 8009032 <_raise_r+0x32>
 800901e:	4620      	mov	r0, r4
 8009020:	f000 f830 	bl	8009084 <_getpid_r>
 8009024:	462a      	mov	r2, r5
 8009026:	4601      	mov	r1, r0
 8009028:	4620      	mov	r0, r4
 800902a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800902e:	f000 b817 	b.w	8009060 <_kill_r>
 8009032:	2b01      	cmp	r3, #1
 8009034:	d00a      	beq.n	800904c <_raise_r+0x4c>
 8009036:	1c59      	adds	r1, r3, #1
 8009038:	d103      	bne.n	8009042 <_raise_r+0x42>
 800903a:	2316      	movs	r3, #22
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	2001      	movs	r0, #1
 8009040:	e7e7      	b.n	8009012 <_raise_r+0x12>
 8009042:	2400      	movs	r4, #0
 8009044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009048:	4628      	mov	r0, r5
 800904a:	4798      	blx	r3
 800904c:	2000      	movs	r0, #0
 800904e:	e7e0      	b.n	8009012 <_raise_r+0x12>

08009050 <raise>:
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <raise+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f7ff bfd3 	b.w	8009000 <_raise_r>
 800905a:	bf00      	nop
 800905c:	2000000c 	.word	0x2000000c

08009060 <_kill_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	; (8009080 <_kill_r+0x20>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f7f8 f8d5 	bl	800121c <_kill>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d102      	bne.n	800907c <_kill_r+0x1c>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b103      	cbz	r3, 800907c <_kill_r+0x1c>
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	20000330 	.word	0x20000330

08009084 <_getpid_r>:
 8009084:	f7f8 b8c2 	b.w	800120c <_getpid>

08009088 <__sread>:
 8009088:	b510      	push	{r4, lr}
 800908a:	460c      	mov	r4, r1
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	f000 f894 	bl	80091bc <_read_r>
 8009094:	2800      	cmp	r0, #0
 8009096:	bfab      	itete	ge
 8009098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800909a:	89a3      	ldrhlt	r3, [r4, #12]
 800909c:	181b      	addge	r3, r3, r0
 800909e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090a2:	bfac      	ite	ge
 80090a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090a6:	81a3      	strhlt	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__swrite>:
 80090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	461f      	mov	r7, r3
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	05db      	lsls	r3, r3, #23
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4616      	mov	r6, r2
 80090ba:	d505      	bpl.n	80090c8 <__swrite+0x1e>
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	2302      	movs	r3, #2
 80090c2:	2200      	movs	r2, #0
 80090c4:	f000 f868 	bl	8009198 <_lseek_r>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	4632      	mov	r2, r6
 80090d6:	463b      	mov	r3, r7
 80090d8:	4628      	mov	r0, r5
 80090da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	f000 b817 	b.w	8009110 <_write_r>

080090e2 <__sseek>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	460c      	mov	r4, r1
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 f855 	bl	8009198 <_lseek_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	bf15      	itete	ne
 80090f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strheq	r3, [r4, #12]
 8009100:	bf18      	it	ne
 8009102:	81a3      	strhne	r3, [r4, #12]
 8009104:	bd10      	pop	{r4, pc}

08009106 <__sclose>:
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 b813 	b.w	8009134 <_close_r>
	...

08009110 <_write_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d07      	ldr	r5, [pc, #28]	; (8009130 <_write_r+0x20>)
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	4611      	mov	r1, r2
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f8 f8b3 	bl	800128a <_write>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_write_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_write_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000330 	.word	0x20000330

08009134 <_close_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d06      	ldr	r5, [pc, #24]	; (8009150 <_close_r+0x1c>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f8 f8bf 	bl	80012c2 <_close>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_close_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_close_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20000330 	.word	0x20000330

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	; (8009174 <_fstat_r+0x20>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f8 f8ba 	bl	80012da <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000330 	.word	0x20000330

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	; (8009194 <_isatty_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 f8b9 	bl	80012fa <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000330 	.word	0x20000330

08009198 <_lseek_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d07      	ldr	r5, [pc, #28]	; (80091b8 <_lseek_r+0x20>)
 800919c:	4604      	mov	r4, r0
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	2200      	movs	r2, #0
 80091a4:	602a      	str	r2, [r5, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7f8 f8b2 	bl	8001310 <_lseek>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_lseek_r+0x1e>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_lseek_r+0x1e>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	20000330 	.word	0x20000330

080091bc <_read_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d07      	ldr	r5, [pc, #28]	; (80091dc <_read_r+0x20>)
 80091c0:	4604      	mov	r4, r0
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	602a      	str	r2, [r5, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f7f8 f840 	bl	8001250 <_read>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_read_r+0x1e>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_read_r+0x1e>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000330 	.word	0x20000330

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr
