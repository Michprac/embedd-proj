
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008f28  08008f28  00018f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800936c  0800936c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800936c  0800936c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800936c  0800936c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000258  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001027a  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002014  00000000  00000000  000304a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  000324b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00033258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021947  00000000  00000000  00033f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c2f  00000000  00000000  00055877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd2b  00000000  00000000  000664a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001321d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048ec  00000000  00000000  00132224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f10 	.word	0x08008f10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08008f10 	.word	0x08008f10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f004 ffdd 	bl	8005b94 <HAL_UART_Transmit>

  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000390 	.word	0x20000390

08000be8 <readSonicSensor>:
	sprintf((char *)message, "%.1f cm.\n", fSonicRead_Value);
	printf((char *)message);

}

void readSonicSensor(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	ulSonicRead_Start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000bec:	2100      	movs	r1, #0
 8000bee:	480f      	ldr	r0, [pc, #60]	; (8000c2c <readSonicSensor+0x44>)
 8000bf0:	f004 f8e4 	bl	8004dbc <HAL_TIM_ReadCapturedValue>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <readSonicSensor+0x48>)
 8000bf8:	6013      	str	r3, [r2, #0]
	ulSonicRead_Stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <readSonicSensor+0x44>)
 8000bfe:	f004 f8dd 	bl	8004dbc <HAL_TIM_ReadCapturedValue>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <readSonicSensor+0x4c>)
 8000c06:	6013      	str	r3, [r2, #0]
	fSonicRead_Value = (float)((ulSonicRead_Stop - ulSonicRead_Start))/ 58.0;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <readSonicSensor+0x4c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <readSonicSensor+0x48>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c1a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000c38 <readSonicSensor+0x50>
 8000c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <readSonicSensor+0x54>)
 8000c24:	edc3 7a00 	vstr	s15, [r3]
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000214 	.word	0x20000214
 8000c30:	20000418 	.word	0x20000418
 8000c34:	2000041c 	.word	0x2000041c
 8000c38:	42680000 	.word	0x42680000
 8000c3c:	20000420 	.word	0x20000420

08000c40 <vSignalDistanceValue>:

uint8_t vSignalDistanceValue(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0

	unsigned long int array_size = sizeof(LED_array) / sizeof(LED_array[0]);
 8000c46:	2306      	movs	r3, #6
 8000c48:	607b      	str	r3, [r7, #4]
	bool flag = false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	uint8_t close_obstacle = 0u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]

	for (int i = 0; i < array_size; i++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	e03c      	b.n	8000cd2 <vSignalDistanceValue+0x92>
		if (fSonicRead_Value < valueArray[i]){
 8000c58:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <vSignalDistanceValue+0xe8>)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	ed93 7a00 	vldr	s14, [r3]
 8000c64:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <vSignalDistanceValue+0xec>)
 8000c66:	edd3 7a00 	vldr	s15, [r3]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	dd1e      	ble.n	8000cb2 <vSignalDistanceValue+0x72>
			flag = true; // HELP flag for buzzer control. IF car is in parking mode (at least one led is on), then flag will have been activated
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]

			HAL_GPIO_WritePin(LED_array[i].port, LED_array[i].pin, GPIO_PIN_SET);
 8000c78:	4a2d      	ldr	r2, [pc, #180]	; (8000d30 <vSignalDistanceValue+0xf0>)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000c80:	4a2b      	ldr	r2, [pc, #172]	; (8000d30 <vSignalDistanceValue+0xf0>)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	889b      	ldrh	r3, [r3, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f001 fc89 	bl	80025a4 <HAL_GPIO_WritePin>
			frequency_coeff = i+1;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <vSignalDistanceValue+0xf4>)
 8000c9c:	701a      	strb	r2, [r3, #0]
			if(LED_array[i].port == YELLOW_5_GPIO_Port){
 8000c9e:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <vSignalDistanceValue+0xf0>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000caa:	d10f      	bne.n	8000ccc <vSignalDistanceValue+0x8c>
				close_obstacle=1u;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73bb      	strb	r3, [r7, #14]
 8000cb0:	e00c      	b.n	8000ccc <vSignalDistanceValue+0x8c>
			}
		}
		else {
			HAL_GPIO_WritePin(LED_array[i].port, LED_array[i].pin, GPIO_PIN_RESET);
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <vSignalDistanceValue+0xf0>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000cba:	4a1d      	ldr	r2, [pc, #116]	; (8000d30 <vSignalDistanceValue+0xf0>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	889b      	ldrh	r3, [r3, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f001 fc6c 	bl	80025a4 <HAL_GPIO_WritePin>
	for (int i = 0; i < array_size; i++){
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d8be      	bhi.n	8000c58 <vSignalDistanceValue+0x18>
		}
	}

	if (flag){ // If flag is on (parking mode), then the sound can be heard in different frequency
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d018      	beq.n	8000d12 <vSignalDistanceValue+0xd2>
		if (HAL_GetTick() - tick_start_2 > (int) 1000/frequency_coeff){
 8000ce0:	f001 f9b8 	bl	8002054 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <vSignalDistanceValue+0xf8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <vSignalDistanceValue+0xf4>)
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf6:	fb92 f2f1 	sdiv	r2, r2, r1
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d90e      	bls.n	8000d1c <vSignalDistanceValue+0xdc>
			HAL_GPIO_TogglePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin);
 8000cfe:	2110      	movs	r1, #16
 8000d00:	480e      	ldr	r0, [pc, #56]	; (8000d3c <vSignalDistanceValue+0xfc>)
 8000d02:	f001 fc67 	bl	80025d4 <HAL_GPIO_TogglePin>
			tick_start_2 = HAL_GetTick();
 8000d06:	f001 f9a5 	bl	8002054 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <vSignalDistanceValue+0xf8>)
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	e004      	b.n	8000d1c <vSignalDistanceValue+0xdc>
		}
	}else {
		HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <vSignalDistanceValue+0xfc>)
 8000d18:	f001 fc44 	bl	80025a4 <HAL_GPIO_WritePin>
	}
	return close_obstacle;
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000420 	.word	0x20000420
 8000d30:	08008f28 	.word	0x08008f28
 8000d34:	20000428 	.word	0x20000428
 8000d38:	20000424 	.word	0x20000424
 8000d3c:	48000400 	.word	0x48000400

08000d40 <vDriveForward>:


void vDriveForward(){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <vDriveForward+0x30>)
 8000d4a:	f001 fc2b 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <vDriveForward+0x30>)
 8000d54:	f001 fc26 	bl	80025a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <vDriveForward+0x34>)
 8000d5e:	f001 fc21 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2102      	movs	r1, #2
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <vDriveForward+0x34>)
 8000d68:	f001 fc1c 	bl	80025a4 <HAL_GPIO_WritePin>

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000400 	.word	0x48000400

08000d78 <vDriveBackward>:
void vDriveBackward(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <vDriveBackward+0x30>)
 8000d82:	f001 fc0f 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <vDriveBackward+0x30>)
 8000d8c:	f001 fc0a 	bl	80025a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <vDriveBackward+0x34>)
 8000d96:	f001 fc05 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <vDriveBackward+0x34>)
 8000da0:	f001 fc00 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000400 	.word	0x48000400

08000db0 <vStopAcceleration>:

void vStopAcceleration(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2110      	movs	r1, #16
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <vStopAcceleration+0x30>)
 8000dba:	f001 fbf3 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <vStopAcceleration+0x30>)
 8000dc4:	f001 fbee 	bl	80025a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <vStopAcceleration+0x34>)
 8000dce:	f001 fbe9 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <vStopAcceleration+0x34>)
 8000dd8:	f001 fbe4 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	48000800 	.word	0x48000800
 8000de4:	48000400 	.word	0x48000400

08000de8 <vTurnLeft>:

void vTurnLeft(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <vTurnLeft+0x30>)
 8000df2:	f001 fbd7 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <vTurnLeft+0x30>)
 8000dfc:	f001 fbd2 	bl	80025a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <vTurnLeft+0x34>)
 8000e06:	f001 fbcd 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <vTurnLeft+0x34>)
 8000e10:	f001 fbc8 	bl	80025a4 <HAL_GPIO_WritePin>

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000400 	.word	0x48000400

08000e20 <vTurnRight>:

void vTurnRight(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <vTurnRight+0x30>)
 8000e2a:	f001 fbbb 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <vTurnRight+0x30>)
 8000e34:	f001 fbb6 	bl	80025a4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <vTurnRight+0x34>)
 8000e3e:	f001 fbb1 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2102      	movs	r1, #2
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <vTurnRight+0x34>)
 8000e48:	f001 fbac 	bl	80025a4 <HAL_GPIO_WritePin>

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000400 	.word	0x48000400

08000e58 <vDriveProc>:


void vDriveProc(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	if(activeDriveProcess != previousDriveProcess){
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <vDriveProc+0x68>)
 8000e5e:	781a      	ldrb	r2, [r3, #0]
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <vDriveProc+0x6c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d027      	beq.n	8000eb8 <vDriveProc+0x60>
		previousDriveProcess = activeDriveProcess;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <vDriveProc+0x68>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <vDriveProc+0x6c>)
 8000e6e:	701a      	strb	r2, [r3, #0]
		switch (activeDriveProcess) {
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <vDriveProc+0x68>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d81c      	bhi.n	8000eb2 <vDriveProc+0x5a>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <vDriveProc+0x28>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000ead 	.word	0x08000ead
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000e9b 	.word	0x08000e9b
 8000e8c:	08000ea1 	.word	0x08000ea1
 8000e90:	08000ea7 	.word	0x08000ea7
			case FORWARD:
				vDriveForward();
 8000e94:	f7ff ff54 	bl	8000d40 <vDriveForward>
				break;
 8000e98:	e00f      	b.n	8000eba <vDriveProc+0x62>
			case BACKWARD:
				vDriveBackward();
 8000e9a:	f7ff ff6d 	bl	8000d78 <vDriveBackward>
				break;
 8000e9e:	e00c      	b.n	8000eba <vDriveProc+0x62>
			case TURN_RIGHT:
				vTurnRight();
 8000ea0:	f7ff ffbe 	bl	8000e20 <vTurnRight>
				break;
 8000ea4:	e009      	b.n	8000eba <vDriveProc+0x62>
			case TURN_LEFT:
				vTurnLeft();
 8000ea6:	f7ff ff9f 	bl	8000de8 <vTurnLeft>
				break;
 8000eaa:	e006      	b.n	8000eba <vDriveProc+0x62>
			case STOP:
				vStopAcceleration();
 8000eac:	f7ff ff80 	bl	8000db0 <vStopAcceleration>
				break;
 8000eb0:	e003      	b.n	8000eba <vDriveProc+0x62>
			default:
				vStopAcceleration();
 8000eb2:	f7ff ff7d 	bl	8000db0 <vStopAcceleration>
				break;
 8000eb6:	e000      	b.n	8000eba <vDriveProc+0x62>
		}
	}
 8000eb8:	bf00      	nop
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000042a 	.word	0x2000042a
 8000ec4:	2000042b 	.word	0x2000042b

08000ec8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_BUTTON_Pin){
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d102      	bne.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x18>
        boardProcess = SAFE_DRIVE;
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_GPIO_EXTI_Callback+0x24>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	701a      	strb	r2, [r3, #0]
    }

}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	20000429 	.word	0x20000429

08000ef0 <vSetScannerPosition>:


void vSetScannerPosition(const uint8_t SET_POS){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	servo_set_angle(SET_POS);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fd0d 	bl	800191c <servo_set_angle>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <usScanWithSensor>:

uint8_t usScanWithSensor(const uint8_t POSITION){
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
	vSetScannerPosition(POSITION);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffea 	bl	8000ef0 <vSetScannerPosition>
	readSonicSensor();
 8000f1c:	f7ff fe64 	bl	8000be8 <readSonicSensor>
	if(vSignalDistanceValue()){
 8000f20:	f7ff fe8e 	bl	8000c40 <vSignalDistanceValue>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <usScanWithSensor+0x24>
		return 1u;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <usScanWithSensor+0x26>

	} else {
		return 0u;
 8000f2e:	2300      	movs	r3, #0

	}
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <usScanForTurn>:



uint8_t usScanForTurn(uint8_t turn_flag){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]


	switch (turn_flag) {
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <usScanForTurn+0x16>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d012      	beq.n	8000f72 <usScanForTurn+0x3a>
 8000f4c:	e01b      	b.n	8000f86 <usScanForTurn+0x4e>
		case GET_BOTH_STATUS:
			if(!usScanWithSensor(RIGHT_MAX_SENSOR_POS)){
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffdb 	bl	8000f0a <usScanWithSensor>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <usScanForTurn+0x26>
				return 3u;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e014      	b.n	8000f88 <usScanForTurn+0x50>

			} else if(!usScanWithSensor(LEFT_MAX_SENSOR_POS)){
 8000f5e:	20b4      	movs	r0, #180	; 0xb4
 8000f60:	f7ff ffd3 	bl	8000f0a <usScanWithSensor>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <usScanForTurn+0x36>
				return 4u;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e00c      	b.n	8000f88 <usScanForTurn+0x50>

			} else{
				return 0u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e00a      	b.n	8000f88 <usScanForTurn+0x50>

			}
			break;

		case GET_LEFT_STATUS:
			if(!usScanWithSensor(LEFT_MAX_SENSOR_POS)){
 8000f72:	20b4      	movs	r0, #180	; 0xb4
 8000f74:	f7ff ffc9 	bl	8000f0a <usScanWithSensor>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <usScanForTurn+0x4a>
				return 4u;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e002      	b.n	8000f88 <usScanForTurn+0x50>

			} else{
				return 0u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <usScanForTurn+0x50>

			}
			break;
		default:
			return 0u;
 8000f86:	2300      	movs	r3, #0
			break;
	}

}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <usScanForward>:

uint8_t usScanForward(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

	if(usScanWithSensor(FRONT_SENSOR_POS)){
 8000f94:	2041      	movs	r0, #65	; 0x41
 8000f96:	f7ff ffb8 	bl	8000f0a <usScanWithSensor>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <usScanForward+0x14>
		return 1u;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <usScanForward+0x16>
	} else{
		return 0u;
 8000fa4:	2300      	movs	r3, #0

	}
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <vCar_Main>:

void vCar_Main(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	switch (boardProcess) {
 8000fb0:	4b74      	ldr	r3, [pc, #464]	; (8001184 <vCar_Main+0x1d8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	f200 80e2 	bhi.w	800117e <vCar_Main+0x1d2>
 8000fba:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <vCar_Main+0x14>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08001003 	.word	0x08001003
 8000fc8:	0800100f 	.word	0x0800100f
 8000fcc:	0800103f 	.word	0x0800103f
 8000fd0:	08001063 	.word	0x08001063
		case INIT:
			if(activeDriveProcess >= 5){
 8000fd4:	4b6c      	ldr	r3, [pc, #432]	; (8001188 <vCar_Main+0x1dc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d909      	bls.n	8000ff0 <vCar_Main+0x44>
				activeDriveProcess = 0;
 8000fdc:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <vCar_Main+0x1dc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
				vSetScannerPosition(FRONT_SENSOR_POS);
 8000fe2:	2041      	movs	r0, #65	; 0x41
 8000fe4:	f7ff ff84 	bl	8000ef0 <vSetScannerPosition>
				boardProcess = IDLE;
 8000fe8:	4b66      	ldr	r3, [pc, #408]	; (8001184 <vCar_Main+0x1d8>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e005      	b.n	8000ffc <vCar_Main+0x50>
			} else {
				activeDriveProcess++;
 8000ff0:	4b65      	ldr	r3, [pc, #404]	; (8001188 <vCar_Main+0x1dc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b63      	ldr	r3, [pc, #396]	; (8001188 <vCar_Main+0x1dc>)
 8000ffa:	701a      	strb	r2, [r3, #0]
			}
			vDriveProc();
 8000ffc:	f7ff ff2c 	bl	8000e58 <vDriveProc>
			break;
 8001000:	e0be      	b.n	8001180 <vCar_Main+0x1d4>

		case IDLE:
			activeDriveProcess = STOP;
 8001002:	4b61      	ldr	r3, [pc, #388]	; (8001188 <vCar_Main+0x1dc>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8001008:	f7ff ff26 	bl	8000e58 <vDriveProc>
			break;
 800100c:	e0b8      	b.n	8001180 <vCar_Main+0x1d4>

		case SAFE_DRIVE:
			test_cnt++;
 800100e:	4b5f      	ldr	r3, [pc, #380]	; (800118c <vCar_Main+0x1e0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <vCar_Main+0x1e0>)
 8001018:	701a      	strb	r2, [r3, #0]
			if(usScanForward())
 800101a:	f7ff ffb9 	bl	8000f90 <usScanForward>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <vCar_Main+0x86>
			{
				boardProcess = OBSTACLE_DETECTED;
 8001024:	4b57      	ldr	r3, [pc, #348]	; (8001184 <vCar_Main+0x1d8>)
 8001026:	2203      	movs	r2, #3
 8001028:	701a      	strb	r2, [r3, #0]
				activeDriveProcess = STOP;
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <vCar_Main+0x1dc>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e002      	b.n	8001038 <vCar_Main+0x8c>

			} else{
				activeDriveProcess = FORWARD;
 8001032:	4b55      	ldr	r3, [pc, #340]	; (8001188 <vCar_Main+0x1dc>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]

			}
			vDriveProc();
 8001038:	f7ff ff0e 	bl	8000e58 <vDriveProc>
			break;
 800103c:	e0a0      	b.n	8001180 <vCar_Main+0x1d4>

		case OBSTACLE_DETECTED:
			activeDriveProcess = STOP;
 800103e:	4b52      	ldr	r3, [pc, #328]	; (8001188 <vCar_Main+0x1dc>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8001044:	f7ff ff08 	bl	8000e58 <vDriveProc>
			activeDriveProcess = usScanForTurn(GET_BOTH_STATUS);
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff ff75 	bl	8000f38 <usScanForTurn>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <vCar_Main+0x1dc>)
 8001054:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8001056:	f7ff feff 	bl	8000e58 <vDriveProc>
			boardProcess = TURN_EVENT;
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <vCar_Main+0x1d8>)
 800105c:	2204      	movs	r2, #4
 800105e:	701a      	strb	r2, [r3, #0]
			break;
 8001060:	e08e      	b.n	8001180 <vCar_Main+0x1d4>
		case TURN_EVENT:
			if(turn_event_handler ==4){
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <vCar_Main+0x1e4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d10b      	bne.n	8001082 <vCar_Main+0xd6>
				activeDriveProcess = STOP;
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <vCar_Main+0x1dc>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 8001070:	f7ff fef2 	bl	8000e58 <vDriveProc>
				turn_event_handler++;
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <vCar_Main+0x1e4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b44      	ldr	r3, [pc, #272]	; (8001190 <vCar_Main+0x1e4>)
 800107e:	701a      	strb	r2, [r3, #0]

			}
			else{
			turn_event_handler++;
			}
			break;
 8001080:	e07e      	b.n	8001180 <vCar_Main+0x1d4>
			} else if(turn_event_handler >= 5 && turn_event_handler < 8){
 8001082:	4b43      	ldr	r3, [pc, #268]	; (8001190 <vCar_Main+0x1e4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d90f      	bls.n	80010aa <vCar_Main+0xfe>
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <vCar_Main+0x1e4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d80b      	bhi.n	80010aa <vCar_Main+0xfe>
				activeDriveProcess = FORWARD;
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <vCar_Main+0x1dc>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 8001098:	f7ff fede 	bl	8000e58 <vDriveProc>
				turn_event_handler++;
 800109c:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <vCar_Main+0x1e4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <vCar_Main+0x1e4>)
 80010a6:	701a      	strb	r2, [r3, #0]
			break;
 80010a8:	e06a      	b.n	8001180 <vCar_Main+0x1d4>
			} else if(turn_event_handler == 8){
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <vCar_Main+0x1e4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d11c      	bne.n	80010ec <vCar_Main+0x140>
				activeDriveProcess = STOP;
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <vCar_Main+0x1dc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 80010b8:	f7ff fece 	bl	8000e58 <vDriveProc>
				activeDriveProcess = usScanForTurn(GET_LEFT_STATUS);
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff ff3b 	bl	8000f38 <usScanForTurn>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <vCar_Main+0x1dc>)
 80010c8:	701a      	strb	r2, [r3, #0]
				if(activeDriveProcess != TURN_LEFT){
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <vCar_Main+0x1dc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d003      	beq.n	80010da <vCar_Main+0x12e>
					activeDriveProcess = FORWARD;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <vCar_Main+0x1dc>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e005      	b.n	80010e6 <vCar_Main+0x13a>
					turn_event_handler++;
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <vCar_Main+0x1e4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <vCar_Main+0x1e4>)
 80010e4:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 80010e6:	f7ff feb7 	bl	8000e58 <vDriveProc>
			break;
 80010ea:	e049      	b.n	8001180 <vCar_Main+0x1d4>
			} else if(turn_event_handler == 12){
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <vCar_Main+0x1e4>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d11c      	bne.n	800112e <vCar_Main+0x182>
				activeDriveProcess = STOP;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <vCar_Main+0x1dc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 80010fa:	f7ff fead 	bl	8000e58 <vDriveProc>
				activeDriveProcess = usScanForTurn(GET_LEFT_STATUS);
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff1a 	bl	8000f38 <usScanForTurn>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <vCar_Main+0x1dc>)
 800110a:	701a      	strb	r2, [r3, #0]
				if(activeDriveProcess != TURN_LEFT){
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <vCar_Main+0x1dc>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d003      	beq.n	800111c <vCar_Main+0x170>
					activeDriveProcess = FORWARD;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <vCar_Main+0x1dc>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e005      	b.n	8001128 <vCar_Main+0x17c>
					turn_event_handler++;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <vCar_Main+0x1e4>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <vCar_Main+0x1e4>)
 8001126:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 8001128:	f7ff fe96 	bl	8000e58 <vDriveProc>
			break;
 800112c:	e028      	b.n	8001180 <vCar_Main+0x1d4>
			}else if(turn_event_handler == 16){
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <vCar_Main+0x1e4>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d11c      	bne.n	8001170 <vCar_Main+0x1c4>
				activeDriveProcess = STOP;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <vCar_Main+0x1dc>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 800113c:	f7ff fe8c 	bl	8000e58 <vDriveProc>
				activeDriveProcess = usScanForTurn(GET_BOTH_STATUS);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fef9 	bl	8000f38 <usScanForTurn>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <vCar_Main+0x1dc>)
 800114c:	701a      	strb	r2, [r3, #0]
				if(activeDriveProcess != TURN_RIGHT){
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <vCar_Main+0x1dc>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d003      	beq.n	800115e <vCar_Main+0x1b2>
					activeDriveProcess = FORWARD;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <vCar_Main+0x1dc>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e005      	b.n	800116a <vCar_Main+0x1be>
					boardProcess = SAFE_DRIVE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <vCar_Main+0x1d8>)
 8001160:	2202      	movs	r2, #2
 8001162:	701a      	strb	r2, [r3, #0]
					turn_event_handler = 0;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <vCar_Main+0x1e4>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
				vDriveProc();
 800116a:	f7ff fe75 	bl	8000e58 <vDriveProc>
			break;
 800116e:	e007      	b.n	8001180 <vCar_Main+0x1d4>
			turn_event_handler++;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <vCar_Main+0x1e4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <vCar_Main+0x1e4>)
 800117a:	701a      	strb	r2, [r3, #0]
			break;
 800117c:	e000      	b.n	8001180 <vCar_Main+0x1d4>
		default:
			break;
 800117e:	bf00      	nop
	}

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000429 	.word	0x20000429
 8001188:	2000042a 	.word	0x2000042a
 800118c:	2000042c 	.word	0x2000042c
 8001190:	2000042d 	.word	0x2000042d

08001194 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	static uint8_t callbackHandler = 0;
	static   int speedValue = 312;

	if (htim == &htim15) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d11b      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x48>


		if(callbackHandler % 20u == 0u){
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011aa:	fba3 1302 	umull	r1, r3, r3, r2
 80011ae:	0919      	lsrs	r1, r3, #4
 80011b0:	460b      	mov	r3, r1
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x3a>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, speedValue);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38
			vCar_Main();
 80011ca:	f7ff feef 	bl	8000fac <vCar_Main>
		}
		if(callbackHandler >= 40){
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b27      	cmp	r3, #39	; 0x27
 80011d4:	d902      	bls.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x48>
			callbackHandler = 0;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200002f8 	.word	0x200002f8
 80011e8:	2000042e 	.word	0x2000042e
 80011ec:	cccccccd 	.word	0xcccccccd
 80011f0:	20000018 	.word	0x20000018
 80011f4:	200002ac 	.word	0x200002ac

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fed0 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f82e 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 faa0 	bl	8001748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001208:	f000 fa6e 	bl	80016e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800120c:	f000 f890 	bl	8001330 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001210:	f000 f91c 	bl	800144c <MX_TIM3_Init>
  MX_TIM16_Init();
 8001214:	f000 fa40 	bl	8001698 <MX_TIM16_Init>
  MX_TIM4_Init();
 8001218:	f000 f990 	bl	800153c <MX_TIM4_Init>
  MX_TIM15_Init();
 800121c:	f000 f9ea 	bl	80015f4 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  servo_init(&htim3, TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <main+0x58>)
 8001224:	f000 fb22 	bl	800186c <servo_init>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001228:	2100      	movs	r1, #0
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <main+0x5c>)
 800122c:	f003 f930 	bl	8004490 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001230:	2104      	movs	r1, #4
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <main+0x5c>)
 8001234:	f003 f92c 	bl	8004490 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001238:	2108      	movs	r1, #8
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <main+0x5c>)
 800123c:	f002 ffc4 	bl	80041c8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001240:	2104      	movs	r1, #4
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <main+0x60>)
 8001244:	f002 ffc0 	bl	80041c8 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <main+0x64>)
 800124a:	f002 fef5 	bl	8004038 <HAL_TIM_Base_Start_IT>



  while (1)
 800124e:	e7fe      	b.n	800124e <main+0x56>
 8001250:	20000260 	.word	0x20000260
 8001254:	20000214 	.word	0x20000214
 8001258:	200002ac 	.word	0x200002ac
 800125c:	200002f8 	.word	0x200002f8

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0a6      	sub	sp, #152	; 0x98
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 f92e 	bl	80064d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2258      	movs	r2, #88	; 0x58
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f005 f920 	bl	80064d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 f9ba 	bl	8002638 <HAL_RCC_OscConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ca:	f000 fac9 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f9f8 	bl	80036e0 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012f6:	f000 fab3 	bl	8001860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <SystemClock_Config+0xcc>)
 80012fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001302:	2300      	movs	r3, #0
 8001304:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001306:	2300      	movs	r3, #0
 8001308:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800130a:	2300      	movs	r3, #0
 800130c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800130e:	2300      	movs	r3, #0
 8001310:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fc19 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001320:	f000 fa9e 	bl	8001860 <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3798      	adds	r7, #152	; 0x98
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	00f00002 	.word	0x00f00002

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <MX_TIM2_Init+0x114>)
 8001364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001368:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <MX_TIM2_Init+0x114>)
 800136c:	2248      	movs	r2, #72	; 0x48
 800136e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <MX_TIM2_Init+0x114>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <MX_TIM2_Init+0x114>)
 8001378:	4a33      	ldr	r2, [pc, #204]	; (8001448 <MX_TIM2_Init+0x118>)
 800137a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_TIM2_Init+0x114>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <MX_TIM2_Init+0x114>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001388:	482e      	ldr	r0, [pc, #184]	; (8001444 <MX_TIM2_Init+0x114>)
 800138a:	f003 f829 	bl	80043e0 <HAL_TIM_IC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001394:	f000 fa64 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001398:	482a      	ldr	r0, [pc, #168]	; (8001444 <MX_TIM2_Init+0x114>)
 800139a:	f002 febd 	bl	8004118 <HAL_TIM_PWM_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013a4:	f000 fa5c 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b4:	4619      	mov	r1, r3
 80013b6:	4823      	ldr	r0, [pc, #140]	; (8001444 <MX_TIM2_Init+0x114>)
 80013b8:	f004 faf4 	bl	80059a4 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013c2:	f000 fa4d 	bl	8001860 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	4819      	ldr	r0, [pc, #100]	; (8001444 <MX_TIM2_Init+0x114>)
 80013e0:	f003 fa71 	bl	80048c6 <HAL_TIM_IC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80013ea:	f000 fa39 	bl	8001860 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2204      	movs	r2, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_TIM2_Init+0x114>)
 8001400:	f003 fa61 	bl	80048c6 <HAL_TIM_IC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800140a:	f000 fa29 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001412:	230a      	movs	r3, #10
 8001414:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	2208      	movs	r2, #8
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0x114>)
 8001426:	f003 faeb 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001430:	f000 fa16 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0x114>)
 8001436:	f000 fba7 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	; 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000214 	.word	0x20000214
 8001448:	000f4240 	.word	0x000f4240

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <MX_TIM3_Init+0xec>)
 8001482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001486:	2247      	movs	r2, #71	; 0x47
 8001488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_TIM3_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001492:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MX_TIM3_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a4:	4823      	ldr	r0, [pc, #140]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014a6:	f002 fd6f 	bl	8003f88 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014b0:	f000 f9d6 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014be:	4619      	mov	r1, r3
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014c2:	f003 fbb1 	bl	8004c28 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014cc:	f000 f9c8 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014d0:	4818      	ldr	r0, [pc, #96]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014d2:	f002 fe21 	bl	8004118 <HAL_TIM_PWM_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014dc:	f000 f9c0 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_TIM3_Init+0xe8>)
 80014f0:	f004 fa58 	bl	80059a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014fa:	f000 f9b1 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fe:	2360      	movs	r3, #96	; 0x60
 8001500:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001518:	f003 fa72 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001522:	f000 f99d 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001528:	f000 fb2e 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 800152c:	bf00      	nop
 800152e:	3738      	adds	r7, #56	; 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000260 	.word	0x20000260
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <MX_TIM4_Init+0xb0>)
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <MX_TIM4_Init+0xb4>)
 8001564:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1151-1;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_TIM4_Init+0xb0>)
 8001568:	f240 427e 	movw	r2, #1150	; 0x47e
 800156c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <MX_TIM4_Init+0xb0>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_TIM4_Init+0xb0>)
 8001576:	f44f 721c 	mov.w	r2, #624	; 0x270
 800157a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_TIM4_Init+0xb0>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM4_Init+0xb0>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_TIM4_Init+0xb0>)
 800158a:	f002 fdc5 	bl	8004118 <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001594:	f000 f964 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4811      	ldr	r0, [pc, #68]	; (80015ec <MX_TIM4_Init+0xb0>)
 80015a8:	f004 f9fc 	bl	80059a4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80015b2:	f000 f955 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b6:	2360      	movs	r3, #96	; 0x60
 80015b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	2204      	movs	r2, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM4_Init+0xb0>)
 80015ce:	f003 fa17 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80015d8:	f000 f942 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM4_Init+0xb0>)
 80015de:	f000 fad3 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002ac 	.word	0x200002ac
 80015f0:	40000800 	.word	0x40000800

080015f4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_TIM15_Init+0x9c>)
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <MX_TIM15_Init+0xa0>)
 8001616:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3000-1;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM15_Init+0x9c>)
 800161a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800161e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM15_Init+0x9c>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 6000-1;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM15_Init+0x9c>)
 8001628:	f241 726f 	movw	r2, #5999	; 0x176f
 800162c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM15_Init+0x9c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM15_Init+0x9c>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM15_Init+0x9c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <MX_TIM15_Init+0x9c>)
 8001642:	f002 fca1 	bl	8003f88 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800164c:	f000 f908 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_TIM15_Init+0x9c>)
 800165e:	f003 fae3 	bl	8004c28 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001668:	f000 f8fa 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_TIM15_Init+0x9c>)
 800167a:	f004 f993 	bl	80059a4 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001684:	f000 f8ec 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200002f8 	.word	0x200002f8
 8001694:	40014000 	.word	0x40014000

08001698 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_TIM16_Init+0x48>)
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <MX_TIM16_Init+0x4c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200-1;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016a4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2500-1;
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016b2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80016b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_TIM16_Init+0x48>)
 80016cc:	f002 fc5c 	bl	8003f88 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80016d6:	f000 f8c3 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000344 	.word	0x20000344
 80016e4:	40014400 	.word	0x40014400

080016e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_USART2_UART_Init+0x58>)
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <MX_USART2_UART_Init+0x5c>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <MX_USART2_UART_Init+0x58>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART2_UART_Init+0x58>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART2_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART2_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART2_UART_Init+0x58>)
 800172c:	f004 f9e4 	bl	8005af8 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001736:	f000 f893 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000390 	.word	0x20000390
 8001744:	40004400 	.word	0x40004400

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <MX_GPIO_Init+0x10c>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4a36      	ldr	r2, [pc, #216]	; (8001854 <MX_GPIO_Init+0x10c>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6153      	str	r3, [r2, #20]
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a30      	ldr	r2, [pc, #192]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <MX_GPIO_Init+0x10c>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f000 fef8 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_WHEEL_PC4_Pin|RIGHT_WHEEL_PC5_Pin|RED_7_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	21b0      	movs	r1, #176	; 0xb0
 80017b8:	4827      	ldr	r0, [pc, #156]	; (8001858 <MX_GPIO_Init+0x110>)
 80017ba:	f000 fef3 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_WHEEL_PB0_Pin|LEFT_WHEEL_PB1_Pin|Buzzer_pin_Pin|YELLOW_6_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2153      	movs	r1, #83	; 0x53
 80017c2:	4826      	ldr	r0, [pc, #152]	; (800185c <MX_GPIO_Init+0x114>)
 80017c4:	f000 feee 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80017c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	481e      	ldr	r0, [pc, #120]	; (8001858 <MX_GPIO_Init+0x110>)
 80017e0:	f000 fd56 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_3_Pin GREEN_4_Pin YELLOW_5_Pin RED_8_Pin */
  GPIO_InitStruct.Pin = GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin;
 80017e4:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f000 fd46 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_WHEEL_PC4_Pin RIGHT_WHEEL_PC5_Pin RED_7_Pin */
  GPIO_InitStruct.Pin = RIGHT_WHEEL_PC4_Pin|RIGHT_WHEEL_PC5_Pin|RED_7_Pin;
 8001804:	23b0      	movs	r3, #176	; 0xb0
 8001806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	480f      	ldr	r0, [pc, #60]	; (8001858 <MX_GPIO_Init+0x110>)
 800181c:	f000 fd38 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_WHEEL_PB0_Pin LEFT_WHEEL_PB1_Pin Buzzer_pin_Pin YELLOW_6_Pin */
  GPIO_InitStruct.Pin = LEFT_WHEEL_PB0_Pin|LEFT_WHEEL_PB1_Pin|Buzzer_pin_Pin|YELLOW_6_Pin;
 8001820:	2353      	movs	r3, #83	; 0x53
 8001822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4619      	mov	r1, r3
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <MX_GPIO_Init+0x114>)
 8001838:	f000 fd2a 	bl	8002290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2028      	movs	r0, #40	; 0x28
 8001842:	f000 fcee 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001846:	2028      	movs	r0, #40	; 0x28
 8001848:	f000 fd07 	bl	800225a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	48000800 	.word	0x48000800
 800185c:	48000400 	.word	0x48000400

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <servo_init>:

TIM_HandleTypeDef *pwm_tim;
uint32_t pwm_channel;

void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	pwm_tim = tim;
 8001876:	4a27      	ldr	r2, [pc, #156]	; (8001914 <servo_init+0xa8>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6013      	str	r3, [r2, #0]
	pwm_channel = channel;
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <servo_init+0xac>)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <servo_init+0xac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <servo_init+0x2c>
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <servo_init+0xa8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
 8001896:	e031      	b.n	80018fc <servo_init+0x90>
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <servo_init+0xac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d106      	bne.n	80018ae <servo_init+0x42>
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <servo_init+0xa8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	6393      	str	r3, [r2, #56]	; 0x38
 80018ac:	e026      	b.n	80018fc <servo_init+0x90>
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <servo_init+0xac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d106      	bne.n	80018c4 <servo_init+0x58>
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <servo_init+0xa8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018c2:	e01b      	b.n	80018fc <servo_init+0x90>
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <servo_init+0xac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d106      	bne.n	80018da <servo_init+0x6e>
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <servo_init+0xa8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	e010      	b.n	80018fc <servo_init+0x90>
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <servo_init+0xac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d106      	bne.n	80018f0 <servo_init+0x84>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <servo_init+0xa8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	6593      	str	r3, [r2, #88]	; 0x58
 80018ee:	e005      	b.n	80018fc <servo_init+0x90>
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <servo_init+0xa8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <servo_init+0xa8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <servo_init+0xac>)
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fc5e 	bl	80041c8 <HAL_TIM_PWM_Start>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000430 	.word	0x20000430
 8001918:	20000434 	.word	0x20000434

0800191c <servo_set_angle>:


void servo_set_angle(uint8_t angle)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	if(angle < SERVO_MIN_ANGLE)
		angle = SERVO_MIN_ANGLE;
	else if(angle > SERVO_MAX_ANGLE)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2bb4      	cmp	r3, #180	; 0xb4
 800192a:	d901      	bls.n	8001930 <servo_set_angle+0x14>
		angle = SERVO_MAX_ANGLE;
 800192c:	23b4      	movs	r3, #180	; 0xb4
 800192e:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_duty_us;

	pwm_duty_us = SERVO_MIN_US +
			(angle * (SERVO_MAX_US - SERVO_MIN_US)) / SERVO_MAX_ANGLE;
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <servo_set_angle+0xac>)
 800193c:	fb82 1203 	smull	r1, r2, r2, r3
 8001940:	441a      	add	r2, r3
 8001942:	11d2      	asrs	r2, r2, #7
 8001944:	17db      	asrs	r3, r3, #31
 8001946:	1ad3      	subs	r3, r2, r3
	pwm_duty_us = SERVO_MIN_US +
 8001948:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800194c:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <servo_set_angle+0xb0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <servo_set_angle+0x46>
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <servo_set_angle+0xb4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001960:	e02c      	b.n	80019bc <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <servo_set_angle+0xb0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b04      	cmp	r3, #4
 8001968:	d105      	bne.n	8001976 <servo_set_angle+0x5a>
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <servo_set_angle+0xb4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001974:	e022      	b.n	80019bc <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <servo_set_angle+0xb0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d105      	bne.n	800198a <servo_set_angle+0x6e>
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <servo_set_angle+0xb4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001988:	e018      	b.n	80019bc <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <servo_set_angle+0xb0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d105      	bne.n	800199e <servo_set_angle+0x82>
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <servo_set_angle+0xb4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800199c:	e00e      	b.n	80019bc <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <servo_set_angle+0xb0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d105      	bne.n	80019b2 <servo_set_angle+0x96>
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <servo_set_angle+0xb4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6593      	str	r3, [r2, #88]	; 0x58
}
 80019b0:	e004      	b.n	80019bc <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <servo_set_angle+0xb4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	b60b60b7 	.word	0xb60b60b7
 80019cc:	20000434 	.word	0x20000434
 80019d0:	20000430 	.word	0x20000430

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_MspInit+0x44>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_MspInit+0x44>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6193      	str	r3, [r2, #24]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_MspInit+0x44>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x44>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x44>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x44>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d128      	bne.n	8001a90 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_TIM_IC_MspInit+0x7c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_TIM_IC_MspInit+0x7c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_TIM_IC_MspInit+0x7c>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_TIM_IC_MspInit+0x7c>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_TIM_IC_MspInit+0x7c>)
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_TIM_IC_MspInit+0x7c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8c:	f000 fc00 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <HAL_TIM_Base_MspInit+0x9c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10c      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ac6:	e032      	b.n	8001b2e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_TIM_Base_MspInit+0xa4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d114      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6193      	str	r3, [r2, #24]
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2018      	movs	r0, #24
 8001af0:	f000 fb97 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001af4:	2018      	movs	r0, #24
 8001af6:	f000 fbb0 	bl	800225a <HAL_NVIC_EnableIRQ>
}
 8001afa:	e018      	b.n	8001b2e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_TIM_Base_MspInit+0xa8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d113      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_TIM_Base_MspInit+0xa0>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2019      	movs	r0, #25
 8001b24:	f000 fb7d 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b28:	2019      	movs	r0, #25
 8001b2a:	f000 fb96 	bl	800225a <HAL_NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40014000 	.word	0x40014000
 8001b44:	40014400 	.word	0x40014400

08001b48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_TIM_PWM_MspInit+0x38>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d11d      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6153      	str	r3, [r2, #20]
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4827      	ldr	r0, [pc, #156]	; (8001c7c <HAL_TIM_MspPostInit+0xf4>)
 8001be0:	f000 fb56 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001be4:	e044      	b.n	8001c70 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_TIM_MspPostInit+0xf8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d11c      	bne.n	8001c2a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bfa:	6153      	str	r3, [r2, #20]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001c08:	2340      	movs	r3, #64	; 0x40
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4818      	ldr	r0, [pc, #96]	; (8001c84 <HAL_TIM_MspPostInit+0xfc>)
 8001c24:	f000 fb34 	bl	8002290 <HAL_GPIO_Init>
}
 8001c28:	e022      	b.n	8001c70 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <HAL_TIM_MspPostInit+0x100>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d11d      	bne.n	8001c70 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3e:	6153      	str	r3, [r2, #20]
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_TIM_MspPostInit+0xf0>)
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f000 fb10 	bl	8002290 <HAL_GPIO_Init>
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	48000400 	.word	0x48000400
 8001c80:	40000400 	.word	0x40000400
 8001c84:	48000800 	.word	0x48000800
 8001c88:	40000800 	.word	0x40000800

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_UART_MspInit+0x7c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d128      	bne.n	8001d00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_UART_MspInit+0x80>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_UART_MspInit+0x80>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_UART_MspInit+0x80>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_UART_MspInit+0x80>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_UART_MspInit+0x80>)
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	6153      	str	r3, [r2, #20]
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_UART_MspInit+0x80>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cde:	230c      	movs	r3, #12
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfc:	f000 fac8 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40021000 	.word	0x40021000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5c:	f000 f966 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001d6a:	f002 fc8d 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002f8 	.word	0x200002f8

08001d78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d7e:	f002 fc83 	bl	8004688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000344 	.word	0x20000344

08001d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001d90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d94:	f000 fc38 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_getpid>:
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	2301      	movs	r3, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_kill>:
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	f004 fb61 	bl	800647c <__errno>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2216      	movs	r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_exit>:
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ffe7 	bl	8001dac <_kill>
 8001dde:	e7fe      	b.n	8001dde <_exit+0x12>

08001de0 <_read>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e00a      	b.n	8001e08 <_read+0x28>
 8001df2:	f3af 8000 	nop.w
 8001df6:	4601      	mov	r1, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	b2ca      	uxtb	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbf0      	blt.n	8001df2 <_read+0x12>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_write>:
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e009      	b.n	8001e40 <_write+0x26>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe febf 	bl	8000bb8 <__io_putchar>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf1      	blt.n	8001e2c <_write+0x12>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_close>:
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_fstat>:
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_isatty>:
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	2301      	movs	r3, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_lseek>:
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <_sbrk>:
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
 8001eec:	f004 fac6 	bl	800647c <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20010000 	.word	0x20010000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	20000438 	.word	0x20000438
 8001f24:	20000450 	.word	0x20000450

08001f28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <SystemInit+0x20>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <SystemInit+0x20>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f84 <LoopForever+0x2>
 8001f50:	f7ff ffea 	bl	8001f28 <SystemInit>
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <LoopForever+0x6>)
 8001f56:	490d      	ldr	r1, [pc, #52]	; (8001f8c <LoopForever+0xa>)
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <LoopForever+0xe>)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:
 8001f5e:	58d4      	ldr	r4, [r2, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:
 8001f64:	18c4      	adds	r4, r0, r3
 8001f66:	428c      	cmp	r4, r1
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <LoopForever+0x12>)
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	; (8001f98 <LoopForever+0x16>)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:
 8001f76:	42a2      	cmp	r2, r4
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>
 8001f7a:	f004 fa85 	bl	8006488 <__libc_init_array>
 8001f7e:	f7ff f93b 	bl	80011f8 <main>

08001f82 <LoopForever>:
 8001f82:	e7fe      	b.n	8001f82 <LoopForever>
 8001f84:	20010000 	.word	0x20010000
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	200001f8 	.word	0x200001f8
 8001f90:	08009374 	.word	0x08009374
 8001f94:	200001f8 	.word	0x200001f8
 8001f98:	20000450 	.word	0x20000450

08001f9c <ADC1_2_IRQHandler>:
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_2_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_Init+0x28>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_Init+0x28>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f92b 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f000 f808 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbc:	f7ff fd0a 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_InitTick+0x54>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_InitTick+0x58>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f943 	bl	8002276 <HAL_SYSTICK_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00e      	b.n	8002018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d80a      	bhi.n	8002016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002000:	2200      	movs	r2, #0
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002008:	f000 f90b 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800200c:	4a06      	ldr	r2, [pc, #24]	; (8002028 <HAL_InitTick+0x5c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000001c 	.word	0x2000001c
 8002024:	20000024 	.word	0x20000024
 8002028:	20000020 	.word	0x20000020

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x20>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_IncTick+0x24>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000024 	.word	0x20000024
 8002050:	2000043c 	.word	0x2000043c

08002054 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;  
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000043c 	.word	0x2000043c

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e160      	b.n	8002562 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8152 	beq.w	800255c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d005      	beq.n	80022d0 <HAL_GPIO_Init+0x40>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d130      	bne.n	8002332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002306:	2201      	movs	r2, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b03      	cmp	r3, #3
 800233c:	d017      	beq.n	800236e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d123      	bne.n	80023c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80ac 	beq.w	800255c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800241c:	4a59      	ldr	r2, [pc, #356]	; (8002584 <HAL_GPIO_Init+0x2f4>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002446:	d025      	beq.n	8002494 <HAL_GPIO_Init+0x204>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4f      	ldr	r2, [pc, #316]	; (8002588 <HAL_GPIO_Init+0x2f8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d01f      	beq.n	8002490 <HAL_GPIO_Init+0x200>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4e      	ldr	r2, [pc, #312]	; (800258c <HAL_GPIO_Init+0x2fc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d019      	beq.n	800248c <HAL_GPIO_Init+0x1fc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4d      	ldr	r2, [pc, #308]	; (8002590 <HAL_GPIO_Init+0x300>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_GPIO_Init+0x1f8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_Init+0x1f4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_GPIO_Init+0x308>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_Init+0x1f0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4a      	ldr	r2, [pc, #296]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_Init+0x1ec>
 8002478:	2306      	movs	r3, #6
 800247a:	e00c      	b.n	8002496 <HAL_GPIO_Init+0x206>
 800247c:	2307      	movs	r3, #7
 800247e:	e00a      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002480:	2305      	movs	r3, #5
 8002482:	e008      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002484:	2304      	movs	r3, #4
 8002486:	e006      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002488:	2303      	movs	r3, #3
 800248a:	e004      	b.n	8002496 <HAL_GPIO_Init+0x206>
 800248c:	2302      	movs	r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_GPIO_Init+0x206>
 8002494:	2300      	movs	r3, #0
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	f002 0203 	and.w	r2, r2, #3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4093      	lsls	r3, r2
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a6:	4937      	ldr	r1, [pc, #220]	; (8002584 <HAL_GPIO_Init+0x2f4>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002502:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_GPIO_Init+0x310>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_GPIO_Init+0x310>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f ae97 	bne.w	80022a0 <HAL_GPIO_Init+0x10>
  }
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40021000 	.word	0x40021000
 8002584:	40010000 	.word	0x40010000
 8002588:	48000400 	.word	0x48000400
 800258c:	48000800 	.word	0x48000800
 8002590:	48000c00 	.word	0x48000c00
 8002594:	48001000 	.word	0x48001000
 8002598:	48001400 	.word	0x48001400
 800259c:	48001800 	.word	0x48001800
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43d9      	mvns	r1, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	400b      	ands	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fc4e 	bl	8000ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800263e:	af00      	add	r7, sp, #0
 8002640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002648:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f001 b83a 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 816f 	beq.w	8002952 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002674:	4bb5      	ldr	r3, [pc, #724]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00c      	beq.n	800269a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002680:	4bb2      	ldr	r3, [pc, #712]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d15c      	bne.n	8002746 <HAL_RCC_OscConfig+0x10e>
 800268c:	4baf      	ldr	r3, [pc, #700]	; (800294c <HAL_RCC_OscConfig+0x314>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d155      	bne.n	8002746 <HAL_RCC_OscConfig+0x10e>
 800269a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x94>
 80026c6:	4ba1      	ldr	r3, [pc, #644]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0xc0>
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80026e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026f4:	4b95      	ldr	r3, [pc, #596]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002700:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800270c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f042 0220 	orr.w	r2, r2, #32
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f002 021f 	and.w	r2, r2, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8111 	beq.w	8002950 <HAL_RCC_OscConfig+0x318>
 800272e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 8108 	bne.w	8002950 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	f000 bfc6 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x12e>
 8002758:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x314>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a7b      	ldr	r2, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x314>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e036      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
 8002766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x158>
 8002776:	4b75      	ldr	r3, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a74      	ldr	r2, [pc, #464]	; (800294c <HAL_RCC_OscConfig+0x314>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e021      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
 8002790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002794:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x184>
 80027a2:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a69      	ldr	r2, [pc, #420]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a66      	ldr	r2, [pc, #408]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
 80027bc:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a62      	ldr	r2, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b60      	ldr	r3, [pc, #384]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5f      	ldr	r2, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d059      	beq.n	8002898 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fc36 	bl	8002054 <HAL_GetTick>
 80027e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ee:	f7ff fc31 	bl	8002054 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d902      	bls.n	8002804 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	f000 bf67 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
 8002804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002808:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002818:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d102      	bne.n	8002836 <HAL_RCC_OscConfig+0x1fe>
 8002830:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x22a>
 8002836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800284a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002852:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002866:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800286a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800286e:	fa92 f2a2 	rbit	r2, r2
 8002872:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002876:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ab      	beq.n	80027ee <HAL_RCC_OscConfig+0x1b6>
 8002896:	e05c      	b.n	8002952 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff fbdc 	bl	8002054 <HAL_GetTick>
 800289c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a2:	f7ff fbd7 	bl	8002054 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d902      	bls.n	80028b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	f000 bf0d 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
 80028b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80028cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_RCC_OscConfig+0x2b2>
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_OscConfig+0x314>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	e015      	b.n	8002916 <HAL_RCC_OscConfig+0x2de>
 80028ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80028fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002902:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002906:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_RCC_OscConfig+0x314>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800291a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800291e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800292a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f042 0220 	orr.w	r2, r2, #32
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f002 021f 	and.w	r2, r2, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ab      	bne.n	80028a2 <HAL_RCC_OscConfig+0x26a>
 800294a:	e002      	b.n	8002952 <HAL_RCC_OscConfig+0x31a>
 800294c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 817f 	beq.w	8002c66 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002968:	4ba7      	ldr	r3, [pc, #668]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002974:	4ba4      	ldr	r3, [pc, #656]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d173      	bne.n	8002a68 <HAL_RCC_OscConfig+0x430>
 8002980:	4ba1      	ldr	r3, [pc, #644]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298c:	d16c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x430>
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80029a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_RCC_OscConfig+0x386>
 80029b8:	4b93      	ldr	r3, [pc, #588]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e013      	b.n	80029e6 <HAL_RCC_OscConfig+0x3ae>
 80029be:	2302      	movs	r3, #2
 80029c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029e2:	4b89      	ldr	r3, [pc, #548]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2202      	movs	r2, #2
 80029e8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80029ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80029f0:	fa92 f2a2 	rbit	r2, r2
 80029f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80029f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f002 021f 	and.w	r2, r2, #31
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCC_OscConfig+0x3f6>
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d002      	beq.n	8002a2e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 be52 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	21f8      	movs	r1, #248	; 0xf8
 8002a44:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002a4c:	fa91 f1a1 	rbit	r1, r1
 8002a50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002a54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a58:	fab1 f181 	clz	r1, r1
 8002a5c:	b2c9      	uxtb	r1, r1
 8002a5e:	408b      	lsls	r3, r1
 8002a60:	4969      	ldr	r1, [pc, #420]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	e0fe      	b.n	8002c66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8088 	beq.w	8002b8a <HAL_RCC_OscConfig+0x552>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002a8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7ff fad5 	bl	8002054 <HAL_GetTick>
 8002aaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7ff fad0 	bl	8002054 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d902      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f000 be06 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002ad8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4be>
 8002af0:	4b45      	ldr	r3, [pc, #276]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	e013      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e6>
 8002af6:	2302      	movs	r3, #2
 8002af8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002b28:	fa92 f2a2 	rbit	r2, r2
 8002b2c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002b30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0af      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	21f8      	movs	r1, #248	; 0xf8
 8002b66:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002b6e:	fa91 f1a1 	rbit	r1, r1
 8002b72:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002b76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b7a:	fab1 f181 	clz	r1, r1
 8002b7e:	b2c9      	uxtb	r1, r1
 8002b80:	408b      	lsls	r3, r1
 8002b82:	4921      	ldr	r1, [pc, #132]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	e06d      	b.n	8002c66 <HAL_RCC_OscConfig+0x62e>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002b9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002baa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff fa4d 	bl	8002054 <HAL_GetTick>
 8002bba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7ff fa48 	bl	8002054 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f000 bd7e 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002be8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5d4>
 8002c00:	4b01      	ldr	r3, [pc, #4]	; (8002c08 <HAL_RCC_OscConfig+0x5d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e016      	b.n	8002c34 <HAL_RCC_OscConfig+0x5fc>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c1e:	2302      	movs	r3, #2
 8002c20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c30:	4bbf      	ldr	r3, [pc, #764]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2202      	movs	r2, #2
 8002c36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002c3e:	fa92 f2a2 	rbit	r2, r2
 8002c42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002c46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ac      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8113 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d07c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x74e>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4ba2      	ldr	r3, [pc, #648]	; (8002f34 <HAL_RCC_OscConfig+0x8fc>)
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff f9cd 	bl	8002054 <HAL_GetTick>
 8002cba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7ff f9c8 	bl	8002054 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d902      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f000 bcfe 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d42:	2102      	movs	r1, #2
 8002d44:	6019      	str	r1, [r3, #0]
 8002d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f1a3 	rbit	r1, r3
 8002d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d5c:	6019      	str	r1, [r3, #0]
  return result;
 8002d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2101      	movs	r1, #1
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d09d      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x688>
 8002d84:	e08d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x86a>
 8002d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002da8:	601a      	str	r2, [r3, #0]
  return result;
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002db2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x8fc>)
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7ff f944 	bl	8002054 <HAL_GetTick>
 8002dcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7ff f93f 	bl	8002054 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	f000 bc75 	b.w	80036d2 <HAL_RCC_OscConfig+0x109a>
 8002de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002df0:	2202      	movs	r2, #2
 8002df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fa93 f2a3 	rbit	r2, r3
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e60:	2102      	movs	r1, #2
 8002e62:	6019      	str	r1, [r3, #0]
 8002e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f1a3 	rbit	r1, r3
 8002e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e7a:	6019      	str	r1, [r3, #0]
  return result;
 8002e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d197      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 81a5 	beq.w	8003202 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	61d3      	str	r3, [r2, #28]
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_RCC_OscConfig+0x8f8>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x900>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x900>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x900>)
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f10:	f7ff f8a0 	bl	8002054 <HAL_GetTick>
 8002f14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	e010      	b.n	8002f3c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7ff f89b 	bl	8002054 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d908      	bls.n	8002f3c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e3d1      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	10908120 	.word	0x10908120
 8002f38:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b8d      	ldr	r3, [pc, #564]	; (8003174 <HAL_RCC_OscConfig+0xb3c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0e8      	beq.n	8002f1a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x92e>
 8002f58:	4b87      	ldr	r3, [pc, #540]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a86      	ldr	r2, [pc, #536]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	e035      	b.n	8002fd2 <HAL_RCC_OscConfig+0x99a>
 8002f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x958>
 8002f76:	4b80      	ldr	r3, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a7f      	ldr	r2, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	e020      	b.n	8002fd2 <HAL_RCC_OscConfig+0x99a>
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCC_OscConfig+0x982>
 8002fa0:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a74      	ldr	r2, [pc, #464]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4a71      	ldr	r2, [pc, #452]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6213      	str	r3, [r2, #32]
 8002fb8:	e00b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x99a>
 8002fba:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8081 	beq.w	80030e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7ff f836 	bl	8002054 <HAL_GetTick>
 8002fe8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	e00b      	b.n	8003006 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7ff f831 	bl	8002054 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e365      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
 8003006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800300e:	2202      	movs	r2, #2
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003024:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800303a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003048:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800304c:	601a      	str	r2, [r3, #0]
  return result;
 800304e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003052:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003056:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0302 	orr.w	r3, r3, #2
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d102      	bne.n	8003072 <HAL_RCC_OscConfig+0xa3a>
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	e013      	b.n	800309a <HAL_RCC_OscConfig+0xa62>
 8003072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003076:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800307a:	2202      	movs	r2, #2
 800307c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003082:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800309e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030a2:	2102      	movs	r1, #2
 80030a4:	6011      	str	r1, [r2, #0]
 80030a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	fa92 f1a2 	rbit	r1, r2
 80030b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030b8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80030bc:	6011      	str	r1, [r2, #0]
  return result;
 80030be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030c2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f002 021f 	and.w	r2, r2, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d084      	beq.n	8002fee <HAL_RCC_OscConfig+0x9b6>
 80030e4:	e083      	b.n	80031ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe ffb5 	bl	8002054 <HAL_GetTick>
 80030ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe ffb0 	bl	8002054 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e2e4      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
 8003108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003110:	2202      	movs	r2, #2
 8003112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003118:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003126:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003130:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003134:	2202      	movs	r2, #2
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003154:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003158:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0xb44>
 800316e:	4b02      	ldr	r3, [pc, #8]	; (8003178 <HAL_RCC_OscConfig+0xb40>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	e017      	b.n	80031a4 <HAL_RCC_OscConfig+0xb6c>
 8003174:	40007000 	.word	0x40007000
 8003178:	40021000 	.word	0x40021000
 800317c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003180:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031ac:	2102      	movs	r1, #2
 80031ae:	6011      	str	r1, [r2, #0]
 80031b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	fa92 f1a2 	rbit	r1, r2
 80031be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031c2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80031c6:	6011      	str	r1, [r2, #0]
  return result;
 80031c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031cc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f002 021f 	and.w	r2, r2, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d180      	bne.n	80030f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b9e      	ldr	r3, [pc, #632]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a9d      	ldr	r2, [pc, #628]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 825e 	beq.w	80036d0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003214:	4b96      	ldr	r3, [pc, #600]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	f000 821f 	beq.w	8003660 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	f040 8170 	bne.w	8003514 <HAL_RCC_OscConfig+0xedc>
 8003234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003238:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800323c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003246:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003262:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800326e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	461a      	mov	r2, r3
 8003276:	2300      	movs	r3, #0
 8003278:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe feeb 	bl	8002054 <HAL_GetTick>
 800327e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e009      	b.n	8003298 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fee6 	bl	8002054 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e21c      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032bc:	601a      	str	r2, [r3, #0]
  return result;
 80032be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0xcaa>
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e027      	b.n	8003332 <HAL_RCC_OscConfig+0xcfa>
 80032e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003302:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003328:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003336:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800333a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800333e:	6011      	str	r1, [r2, #0]
 8003340:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003344:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	fa92 f1a2 	rbit	r1, r2
 800334e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003352:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003356:	6011      	str	r1, [r2, #0]
  return result;
 8003358:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800335c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f042 0220 	orr.w	r2, r2, #32
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f002 021f 	and.w	r2, r2, #31
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d182      	bne.n	8003284 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f023 020f 	bic.w	r2, r3, #15
 8003386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 8003394:	4313      	orrs	r3, r2
 8003396:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003398:	4b35      	ldr	r3, [pc, #212]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80033a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a19      	ldr	r1, [r3, #32]
 80033ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	492d      	ldr	r1, [pc, #180]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033e4:	601a      	str	r2, [r3, #0]
  return result;
 80033e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	461a      	mov	r2, r3
 8003402:	2301      	movs	r3, #1
 8003404:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe fe25 	bl	8002054 <HAL_GetTick>
 800340a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340e:	e009      	b.n	8003424 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fe20 	bl	8002054 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e156      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
 8003424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003428:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800342c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003436:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003444:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003448:	601a      	str	r2, [r3, #0]
  return result;
 800344a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800344e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003452:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0xe3c>
 8003468:	4b01      	ldr	r3, [pc, #4]	; (8003470 <HAL_RCC_OscConfig+0xe38>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e02a      	b.n	80034c4 <HAL_RCC_OscConfig+0xe8c>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003478:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800347c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003486:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003494:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	4b86      	ldr	r3, [pc, #536]	; (80036dc <HAL_RCC_OscConfig+0x10a4>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034d0:	6011      	str	r1, [r2, #0]
 80034d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	fa92 f1a2 	rbit	r1, r2
 80034e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034e4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80034e8:	6011      	str	r1, [r2, #0]
  return result;
 80034ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034ee:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	fab2 f282 	clz	r2, r2
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f042 0220 	orr.w	r2, r2, #32
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f002 021f 	and.w	r2, r2, #31
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	f43f af7f 	beq.w	8003410 <HAL_RCC_OscConfig+0xdd8>
 8003512:	e0dd      	b.n	80036d0 <HAL_RCC_OscConfig+0x1098>
 8003514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003518:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800351c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003534:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003538:	601a      	str	r2, [r3, #0]
  return result;
 800353a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800353e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003542:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800354e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	461a      	mov	r2, r3
 8003556:	2300      	movs	r3, #0
 8003558:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe fd7b 	bl	8002054 <HAL_GetTick>
 800355e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003562:	e009      	b.n	8003578 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fd76 	bl	8002054 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0ac      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003598:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800359c:	601a      	str	r2, [r3, #0]
  return result;
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d102      	bne.n	80035c2 <HAL_RCC_OscConfig+0xf8a>
 80035bc:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_RCC_OscConfig+0x10a4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	e027      	b.n	8003612 <HAL_RCC_OscConfig+0xfda>
 80035c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	fa93 f2a3 	rbit	r2, r3
 80035de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_RCC_OscConfig+0x10a4>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003616:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800361a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800361e:	6011      	str	r1, [r2, #0]
 8003620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003624:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	fa92 f1a2 	rbit	r1, r2
 800362e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003632:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003636:	6011      	str	r1, [r2, #0]
  return result;
 8003638:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800363c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	fab2 f282 	clz	r2, r2
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	f042 0220 	orr.w	r2, r2, #32
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f002 021f 	and.w	r2, r2, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d182      	bne.n	8003564 <HAL_RCC_OscConfig+0xf2c>
 800365e:	e037      	b.n	80036d0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e02e      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003674:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_RCC_OscConfig+0x10a4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_RCC_OscConfig+0x10a4>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003684:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003688:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800368c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	429a      	cmp	r2, r3
 800369a:	d117      	bne.n	80036cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800369c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d10b      	bne.n	80036cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80036b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000

080036e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b09e      	sub	sp, #120	; 0x78
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e162      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b90      	ldr	r3, [pc, #576]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d910      	bls.n	8003728 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b8d      	ldr	r3, [pc, #564]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	498b      	ldr	r1, [pc, #556]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e14a      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b82      	ldr	r3, [pc, #520]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	497f      	ldr	r1, [pc, #508]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80dc 	beq.w	800390c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d13c      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xf6>
 800375c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003760:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800376a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_RCC_ClockConfig+0xa6>
 8003780:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	e00f      	b.n	80037a6 <HAL_RCC_ClockConfig+0xc6>
 8003786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	667b      	str	r3, [r7, #100]	; 0x64
 8003794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003798:	663b      	str	r3, [r7, #96]	; 0x60
 800379a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80037ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037ae:	fa92 f2a2 	rbit	r2, r2
 80037b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037b6:	fab2 f282 	clz	r2, r2
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f042 0220 	orr.w	r2, r2, #32
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f002 021f 	and.w	r2, r2, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d17b      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0f3      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d13c      	bne.n	8003858 <HAL_RCC_ClockConfig+0x178>
 80037de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d102      	bne.n	8003808 <HAL_RCC_ClockConfig+0x128>
 8003802:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	e00f      	b.n	8003828 <HAL_RCC_ClockConfig+0x148>
 8003808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
 8003816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800381a:	643b      	str	r3, [r7, #64]	; 0x40
 800381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003824:	4b46      	ldr	r3, [pc, #280]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800382c:	63ba      	str	r2, [r7, #56]	; 0x38
 800382e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003830:	fa92 f2a2 	rbit	r2, r2
 8003834:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	f042 0220 	orr.w	r2, r2, #32
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f002 021f 	and.w	r2, r2, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d13a      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b2      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
 8003858:	2302      	movs	r3, #2
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <HAL_RCC_ClockConfig+0x1a0>
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	e00d      	b.n	800389c <HAL_RCC_ClockConfig+0x1bc>
 8003880:	2302      	movs	r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	4b29      	ldr	r3, [pc, #164]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2202      	movs	r2, #2
 800389e:	61ba      	str	r2, [r7, #24]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	617a      	str	r2, [r7, #20]
  return result;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f002 021f 	and.w	r2, r2, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e079      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	491a      	ldr	r1, [pc, #104]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe fbba 	bl	8002054 <HAL_GetTick>
 80038e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fe fbb6 	bl	8002054 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e061      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d214      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 0207 	bic.w	r2, r3, #7
 8003922:	4906      	ldr	r1, [pc, #24]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <HAL_RCC_ClockConfig+0x25c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e040      	b.n	80039be <HAL_RCC_ClockConfig+0x2de>
 800393c:	40022000 	.word	0x40022000
 8003940:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	491a      	ldr	r1, [pc, #104]	; (80039c8 <HAL_RCC_ClockConfig+0x2e8>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4912      	ldr	r1, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x2e8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003982:	f000 f829 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8003986:	4601      	mov	r1, r0
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_RCC_ClockConfig+0x2e8>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003990:	22f0      	movs	r2, #240	; 0xf0
 8003992:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	fa92 f2a2 	rbit	r2, r2
 800399a:	60fa      	str	r2, [r7, #12]
  return result;
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	fab2 f282 	clz	r2, r2
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	40d3      	lsrs	r3, r2
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x2ec>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	fa21 f303 	lsr.w	r3, r1, r3
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <HAL_RCC_ClockConfig+0x2f0>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCC_ClockConfig+0x2f4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fb08 	bl	8001fcc <HAL_InitTick>
  
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3778      	adds	r7, #120	; 0x78
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	08008f58 	.word	0x08008f58
 80039d0:	2000001c 	.word	0x2000001c
 80039d4:	20000020 	.word	0x20000020

080039d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b08b      	sub	sp, #44	; 0x2c
 80039dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x30>
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x36>
 8003a06:	e03f      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a0a:	623b      	str	r3, [r7, #32]
      break;
 8003a0c:	e03f      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	fa92 f2a2 	rbit	r2, r2
 8003a20:	607a      	str	r2, [r7, #4]
  return result;
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	fab2 f282 	clz	r2, r2
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	40d3      	lsrs	r3, r2
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	60fa      	str	r2, [r7, #12]
  return result;
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	40d3      	lsrs	r3, r2
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e007      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a72:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	623b      	str	r3, [r7, #32]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a8a:	623b      	str	r3, [r7, #32]
      break;
 8003a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	372c      	adds	r7, #44	; 0x2c
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	007a1200 	.word	0x007a1200
 8003aa4:	08008f70 	.word	0x08008f70
 8003aa8:	08008f80 	.word	0x08008f80

08003aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2000001c 	.word	0x2000001c

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003aca:	f7ff ffef 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003adc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	603a      	str	r2, [r7, #0]
  return result;
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	40d3      	lsrs	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08008f68 	.word	0x08008f68

08003b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b0e:	f7ff ffcd 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003b12:	4601      	mov	r1, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	fa92 f2a2 	rbit	r2, r2
 8003b28:	603a      	str	r2, [r7, #0]
  return result;
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	fab2 f282 	clz	r2, r2
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	40d3      	lsrs	r3, r2
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	08008f68 	.word	0x08008f68

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b092      	sub	sp, #72	; 0x48
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80d4 	beq.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b70:	4b4e      	ldr	r3, [pc, #312]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10e      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4a4a      	ldr	r2, [pc, #296]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	61d3      	str	r3, [r2, #28]
 8003b88:	4b48      	ldr	r3, [pc, #288]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d118      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fa4f 	bl	8002054 <HAL_GetTick>
 8003bb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	e008      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bba:	f7fe fa4b 	bl	8002054 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b64      	cmp	r3, #100	; 0x64
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1d6      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8084 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d07c      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf8:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	461a      	mov	r2, r3
 8003c22:	2301      	movs	r3, #1
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	461a      	mov	r2, r3
 8003c46:	2300      	movs	r3, #0
 8003c48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d04b      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5a:	f7fe f9fb 	bl	8002054 <HAL_GetTick>
 8003c5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fe f9f7 	bl	8002054 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e180      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
 8003c84:	2302      	movs	r3, #2
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d108      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ca6:	4b01      	ldr	r3, [pc, #4]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	e00d      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	10908100 	.word	0x10908100
 8003cb8:	2302      	movs	r3, #2
 8003cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	4b9a      	ldr	r3, [pc, #616]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2202      	movs	r2, #2
 8003cca:	613a      	str	r2, [r7, #16]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	fa92 f2a2 	rbit	r2, r2
 8003cd2:	60fa      	str	r2, [r7, #12]
  return result;
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0b7      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	498c      	ldr	r1, [pc, #560]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4a87      	ldr	r2, [pc, #540]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d24:	4b82      	ldr	r3, [pc, #520]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f023 0203 	bic.w	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	497f      	ldr	r1, [pc, #508]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d42:	4b7b      	ldr	r3, [pc, #492]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4978      	ldr	r1, [pc, #480]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d60:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	4970      	ldr	r1, [pc, #448]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7e:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f023 0210 	bic.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4969      	ldr	r1, [pc, #420]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d9c:	4b64      	ldr	r3, [pc, #400]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	4961      	ldr	r1, [pc, #388]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f023 0220 	bic.w	r2, r3, #32
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	495a      	ldr	r1, [pc, #360]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd8:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	4952      	ldr	r1, [pc, #328]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	494b      	ldr	r1, [pc, #300]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e14:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	4943      	ldr	r1, [pc, #268]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	493c      	ldr	r1, [pc, #240]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	4934      	ldr	r1, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	492d      	ldr	r1, [pc, #180]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	4925      	ldr	r1, [pc, #148]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	491e      	ldr	r1, [pc, #120]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	4916      	ldr	r1, [pc, #88]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	490f      	ldr	r1, [pc, #60]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f22:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	4913      	ldr	r1, [pc, #76]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f54:	490b      	ldr	r1, [pc, #44]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	4904      	ldr	r1, [pc, #16]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3748      	adds	r7, #72	; 0x48
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e049      	b.n	800402e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fd74 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 ff64 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d001      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e04f      	b.n	80040f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <HAL_TIM_Base_Start_IT+0xc4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01d      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x76>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d018      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x76>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <HAL_TIM_Base_Start_IT+0xc8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x76>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <HAL_TIM_Base_Start_IT+0xcc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x76>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <HAL_TIM_Base_Start_IT+0xd0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x76>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1b      	ldr	r2, [pc, #108]	; (800410c <HAL_TIM_Base_Start_IT+0xd4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x76>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_TIM_Base_Start_IT+0xd8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d115      	bne.n	80040da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_TIM_Base_Start_IT+0xdc>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d015      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0xb4>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c6:	d011      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	e008      	b.n	80040ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e000      	b.n	80040ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40013400 	.word	0x40013400
 800410c:	40014000 	.word	0x40014000
 8004110:	40015000 	.word	0x40015000
 8004114:	00010007 	.word	0x00010007

08004118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e049      	b.n	80041be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fd02 	bl	8001b48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fe9c 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_PWM_Start+0x24>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e03c      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_PWM_Start+0x3e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e02f      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start+0x58>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e022      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d109      	bne.n	800423a <HAL_TIM_PWM_Start+0x72>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e015      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d109      	bne.n	8004254 <HAL_TIM_PWM_Start+0x8c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e008      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0a1      	b.n	80043b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0xb6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427c:	e023      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xc6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	e01b      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xd6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	e013      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xe6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xf6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 fb42 	bl	8005958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a38      	ldr	r2, [pc, #224]	; (80043bc <HAL_TIM_PWM_Start+0x1f4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_TIM_PWM_Start+0x148>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a37      	ldr	r2, [pc, #220]	; (80043c0 <HAL_TIM_PWM_Start+0x1f8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_TIM_PWM_Start+0x148>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a35      	ldr	r2, [pc, #212]	; (80043c4 <HAL_TIM_PWM_Start+0x1fc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_TIM_PWM_Start+0x148>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <HAL_TIM_PWM_Start+0x200>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_PWM_Start+0x148>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a32      	ldr	r2, [pc, #200]	; (80043cc <HAL_TIM_PWM_Start+0x204>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_PWM_Start+0x148>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a31      	ldr	r2, [pc, #196]	; (80043d0 <HAL_TIM_PWM_Start+0x208>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_TIM_PWM_Start+0x14c>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_TIM_PWM_Start+0x14e>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a23      	ldr	r2, [pc, #140]	; (80043bc <HAL_TIM_PWM_Start+0x1f4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d01d      	beq.n	8004370 <HAL_TIM_PWM_Start+0x1a8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d018      	beq.n	8004370 <HAL_TIM_PWM_Start+0x1a8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <HAL_TIM_PWM_Start+0x20c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <HAL_TIM_PWM_Start+0x1a8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_TIM_PWM_Start+0x210>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_PWM_Start+0x1a8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1a      	ldr	r2, [pc, #104]	; (80043c0 <HAL_TIM_PWM_Start+0x1f8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_TIM_PWM_Start+0x1a8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_PWM_Start+0x1a8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <HAL_TIM_PWM_Start+0x208>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d115      	bne.n	800439c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_TIM_PWM_Start+0x214>)
 8004378:	4013      	ands	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d015      	beq.n	80043ae <HAL_TIM_PWM_Start+0x1e6>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d011      	beq.n	80043ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	e008      	b.n	80043ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e000      	b.n	80043b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40013400 	.word	0x40013400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800
 80043d0:	40015000 	.word	0x40015000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	00010007 	.word	0x00010007

080043e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e049      	b.n	8004486 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fb08 	bl	8001a1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fd38 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_TIM_IC_Start+0x1a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e023      	b.n	80044f2 <HAL_TIM_IC_Start+0x62>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_IC_Start+0x2a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e01b      	b.n	80044f2 <HAL_TIM_IC_Start+0x62>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d104      	bne.n	80044ca <HAL_TIM_IC_Start+0x3a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e013      	b.n	80044f2 <HAL_TIM_IC_Start+0x62>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d104      	bne.n	80044da <HAL_TIM_IC_Start+0x4a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e00b      	b.n	80044f2 <HAL_TIM_IC_Start+0x62>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d104      	bne.n	80044ea <HAL_TIM_IC_Start+0x5a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e003      	b.n	80044f2 <HAL_TIM_IC_Start+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_TIM_IC_Start+0x74>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e013      	b.n	800452c <HAL_TIM_IC_Start+0x9c>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d104      	bne.n	8004514 <HAL_TIM_IC_Start+0x84>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e00b      	b.n	800452c <HAL_TIM_IC_Start+0x9c>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d104      	bne.n	8004524 <HAL_TIM_IC_Start+0x94>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e003      	b.n	800452c <HAL_TIM_IC_Start+0x9c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800452a:	b2db      	uxtb	r3, r3
 800452c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d102      	bne.n	800453a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e092      	b.n	8004664 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_TIM_IC_Start+0xbe>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454c:	e023      	b.n	8004596 <HAL_TIM_IC_Start+0x106>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d104      	bne.n	800455e <HAL_TIM_IC_Start+0xce>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	e01b      	b.n	8004596 <HAL_TIM_IC_Start+0x106>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d104      	bne.n	800456e <HAL_TIM_IC_Start+0xde>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	e013      	b.n	8004596 <HAL_TIM_IC_Start+0x106>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d104      	bne.n	800457e <HAL_TIM_IC_Start+0xee>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800457c:	e00b      	b.n	8004596 <HAL_TIM_IC_Start+0x106>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b10      	cmp	r3, #16
 8004582:	d104      	bne.n	800458e <HAL_TIM_IC_Start+0xfe>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458c:	e003      	b.n	8004596 <HAL_TIM_IC_Start+0x106>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_IC_Start+0x116>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a4:	e013      	b.n	80045ce <HAL_TIM_IC_Start+0x13e>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_IC_Start+0x126>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b4:	e00b      	b.n	80045ce <HAL_TIM_IC_Start+0x13e>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start+0x136>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c4:	e003      	b.n	80045ce <HAL_TIM_IC_Start+0x13e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2201      	movs	r2, #1
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f9be 	bl	8005958 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a22      	ldr	r2, [pc, #136]	; (800466c <HAL_TIM_IC_Start+0x1dc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_TIM_IC_Start+0x192>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d018      	beq.n	8004622 <HAL_TIM_IC_Start+0x192>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_TIM_IC_Start+0x1e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_TIM_IC_Start+0x192>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_TIM_IC_Start+0x1e4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_TIM_IC_Start+0x192>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_TIM_IC_Start+0x1e8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_TIM_IC_Start+0x192>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	; (800467c <HAL_TIM_IC_Start+0x1ec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_TIM_IC_Start+0x192>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_TIM_IC_Start+0x1f0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d115      	bne.n	800464e <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_TIM_IC_Start+0x1f4>)
 800462a:	4013      	ands	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b06      	cmp	r3, #6
 8004632:	d015      	beq.n	8004660 <HAL_TIM_IC_Start+0x1d0>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463a:	d011      	beq.n	8004660 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	e008      	b.n	8004660 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e000      	b.n	8004662 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40015000 	.word	0x40015000
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0202 	mvn.w	r2, #2
 80046b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fbc4 	bl	8004e58 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fbb6 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fbc7 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d122      	bne.n	8004738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11b      	bne.n	8004738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0204 	mvn.w	r2, #4
 8004708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fb9a 	bl	8004e58 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb8c 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb9d 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b08      	cmp	r3, #8
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b08      	cmp	r3, #8
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0208 	mvn.w	r2, #8
 800475c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2204      	movs	r2, #4
 8004762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fb70 	bl	8004e58 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb62 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb73 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0210 	mvn.w	r2, #16
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2208      	movs	r2, #8
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fb46 	bl	8004e58 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb38 	bl	8004e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb49 	bl	8004e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10e      	bne.n	800480c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0201 	mvn.w	r2, #1
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc fcc4 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 f94c 	bl	8005ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004846:	d10e      	bne.n	8004866 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d107      	bne.n	8004866 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 f93f 	bl	8005ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 faf7 	bl	8004e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0220 	mvn.w	r2, #32
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f001 f8ff 	bl	8005abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e088      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d11b      	bne.n	800492a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f000 fe6b 	bl	80055dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 020c 	bic.w	r2, r2, #12
 8004914:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6999      	ldr	r1, [r3, #24]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]
 8004928:	e060      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d11c      	bne.n	800496a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f000 fee9 	bl	8005716 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004952:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
 8004968:	e040      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6819      	ldr	r1, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f000 ff36 	bl	80057f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 020c 	bic.w	r2, r2, #12
 8004992:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69d9      	ldr	r1, [r3, #28]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	61da      	str	r2, [r3, #28]
 80049a6:	e021      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d11c      	bne.n	80049e8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f000 ff53 	bl	8005868 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	021a      	lsls	r2, r3, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e001      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e0ff      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b14      	cmp	r3, #20
 8004a2a:	f200 80f0 	bhi.w	8004c0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004c0f 	.word	0x08004c0f
 8004a3c:	08004c0f 	.word	0x08004c0f
 8004a40:	08004c0f 	.word	0x08004c0f
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004c0f 	.word	0x08004c0f
 8004a4c:	08004c0f 	.word	0x08004c0f
 8004a50:	08004c0f 	.word	0x08004c0f
 8004a54:	08004b0b 	.word	0x08004b0b
 8004a58:	08004c0f 	.word	0x08004c0f
 8004a5c:	08004c0f 	.word	0x08004c0f
 8004a60:	08004c0f 	.word	0x08004c0f
 8004a64:	08004b4b 	.word	0x08004b4b
 8004a68:	08004c0f 	.word	0x08004c0f
 8004a6c:	08004c0f 	.word	0x08004c0f
 8004a70:	08004c0f 	.word	0x08004c0f
 8004a74:	08004b8d 	.word	0x08004b8d
 8004a78:	08004c0f 	.word	0x08004c0f
 8004a7c:	08004c0f 	.word	0x08004c0f
 8004a80:	08004c0f 	.word	0x08004c0f
 8004a84:	08004bcd 	.word	0x08004bcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fa9e 	bl	8004fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e0a5      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb18 	bl	8005104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e084      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fb8b 	bl	800522c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e064      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fbfd 	bl	8005350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e043      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fc4c 	bl	8005430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bca:	e023      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fc96 	bl	8005504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	021a      	lsls	r2, r3, #8
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c0c:	e002      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_ConfigClockSource+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0b6      	b.n	8004db2 <HAL_TIM_ConfigClockSource+0x18a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c80:	d03e      	beq.n	8004d00 <HAL_TIM_ConfigClockSource+0xd8>
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c86:	f200 8087 	bhi.w	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x176>
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c96:	d87f      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d01a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xaa>
 8004c9c:	2b70      	cmp	r3, #112	; 0x70
 8004c9e:	d87b      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d050      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x11e>
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d877      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004ca8:	2b50      	cmp	r3, #80	; 0x50
 8004caa:	d03c      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0xfe>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d873      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d058      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x13e>
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d86f      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004cb8:	2b30      	cmp	r3, #48	; 0x30
 8004cba:	d064      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15e>
 8004cbc:	2b30      	cmp	r3, #48	; 0x30
 8004cbe:	d86b      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d060      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15e>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d867      	bhi.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05c      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15e>
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d05a      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x15e>
 8004cd0:	e062      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6899      	ldr	r1, [r3, #8]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f000 fe19 	bl	8005918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
      break;
 8004cfe:	e04f      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6899      	ldr	r1, [r3, #8]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f000 fe02 	bl	8005918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d22:	609a      	str	r2, [r3, #8]
      break;
 8004d24:	e03c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 fcc0 	bl	80056b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2150      	movs	r1, #80	; 0x50
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fdcf 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e02c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 fd1c 	bl	8005790 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2160      	movs	r1, #96	; 0x60
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fdbf 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e01c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 fca0 	bl	80056b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2140      	movs	r1, #64	; 0x40
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fdaf 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e00c      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f000 fda6 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 8004d96:	e003      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9c:	e000      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d831      	bhi.n	8004e34 <HAL_TIM_ReadCapturedValue+0x78>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004e0d 	.word	0x08004e0d
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e35 	.word	0x08004e35
 8004de4:	08004e35 	.word	0x08004e35
 8004de8:	08004e17 	.word	0x08004e17
 8004dec:	08004e35 	.word	0x08004e35
 8004df0:	08004e35 	.word	0x08004e35
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e35 	.word	0x08004e35
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004e2b 	.word	0x08004e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	60fb      	str	r3, [r7, #12]

      break;
 8004e14:	e00f      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	60fb      	str	r3, [r7, #12]

      break;
 8004e1e:	e00a      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	60fb      	str	r3, [r7, #12]

      break;
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	60fb      	str	r3, [r7, #12]

      break;
 8004e32:	e000      	b.n	8004e36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e34:	bf00      	nop
  }

  return tmpreg;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a42      	ldr	r2, [pc, #264]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3f      	ldr	r2, [pc, #252]	; (8004fb4 <TIM_Base_SetConfig+0x120>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a3d      	ldr	r2, [pc, #244]	; (8004fbc <TIM_Base_SetConfig+0x128>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d108      	bne.n	8004ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a31      	ldr	r2, [pc, #196]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01f      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d01b      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <TIM_Base_SetConfig+0x120>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d017      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2d      	ldr	r2, [pc, #180]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <TIM_Base_SetConfig+0x128>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00f      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <TIM_Base_SetConfig+0x130>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <TIM_Base_SetConfig+0x134>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <TIM_Base_SetConfig+0x138>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_Base_SetConfig+0x9a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d108      	bne.n	8004f40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x100>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <TIM_Base_SetConfig+0x128>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x100>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <TIM_Base_SetConfig+0x130>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x100>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <TIM_Base_SetConfig+0x134>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x100>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <TIM_Base_SetConfig+0x138>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x100>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d103      	bne.n	8004f9c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	615a      	str	r2, [r3, #20]
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40013400 	.word	0x40013400
 8004fc0:	40015000 	.word	0x40015000
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0302 	bic.w	r3, r3, #2
 800501c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a30      	ldr	r2, [pc, #192]	; (80050ec <TIM_OC1_SetConfig+0x11c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <TIM_OC1_SetConfig+0x88>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <TIM_OC1_SetConfig+0x120>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_OC1_SetConfig+0x88>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <TIM_OC1_SetConfig+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_OC1_SetConfig+0x88>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <TIM_OC1_SetConfig+0x128>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC1_SetConfig+0x88>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <TIM_OC1_SetConfig+0x12c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC1_SetConfig+0x88>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <TIM_OC1_SetConfig+0x130>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10c      	bne.n	8005072 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0308 	bic.w	r3, r3, #8
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <TIM_OC1_SetConfig+0x11c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <TIM_OC1_SetConfig+0xd2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <TIM_OC1_SetConfig+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00f      	beq.n	80050a2 <TIM_OC1_SetConfig+0xd2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <TIM_OC1_SetConfig+0x124>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00b      	beq.n	80050a2 <TIM_OC1_SetConfig+0xd2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <TIM_OC1_SetConfig+0x128>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <TIM_OC1_SetConfig+0xd2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <TIM_OC1_SetConfig+0x12c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d003      	beq.n	80050a2 <TIM_OC1_SetConfig+0xd2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a18      	ldr	r2, [pc, #96]	; (8005100 <TIM_OC1_SetConfig+0x130>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d111      	bne.n	80050c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	621a      	str	r2, [r3, #32]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40013400 	.word	0x40013400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40014400 	.word	0x40014400
 80050fc:	40014800 	.word	0x40014800
 8005100:	40015000 	.word	0x40015000

08005104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0210 	bic.w	r2, r3, #16
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <TIM_OC2_SetConfig+0x110>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_OC2_SetConfig+0x74>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <TIM_OC2_SetConfig+0x114>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_OC2_SetConfig+0x74>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <TIM_OC2_SetConfig+0x118>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d10d      	bne.n	8005194 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <TIM_OC2_SetConfig+0x110>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <TIM_OC2_SetConfig+0xc0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <TIM_OC2_SetConfig+0x114>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00f      	beq.n	80051c4 <TIM_OC2_SetConfig+0xc0>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <TIM_OC2_SetConfig+0x11c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_OC2_SetConfig+0xc0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <TIM_OC2_SetConfig+0x120>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <TIM_OC2_SetConfig+0xc0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <TIM_OC2_SetConfig+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_OC2_SetConfig+0xc0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a17      	ldr	r2, [pc, #92]	; (800521c <TIM_OC2_SetConfig+0x118>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d113      	bne.n	80051ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40013400 	.word	0x40013400
 800521c:	40015000 	.word	0x40015000
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2b      	ldr	r2, [pc, #172]	; (8005338 <TIM_OC3_SetConfig+0x10c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <TIM_OC3_SetConfig+0x72>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2a      	ldr	r2, [pc, #168]	; (800533c <TIM_OC3_SetConfig+0x110>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_OC3_SetConfig+0x72>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <TIM_OC3_SetConfig+0x114>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10d      	bne.n	80052ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <TIM_OC3_SetConfig+0x10c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <TIM_OC3_SetConfig+0xbe>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1d      	ldr	r2, [pc, #116]	; (800533c <TIM_OC3_SetConfig+0x110>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00f      	beq.n	80052ea <TIM_OC3_SetConfig+0xbe>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <TIM_OC3_SetConfig+0x118>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00b      	beq.n	80052ea <TIM_OC3_SetConfig+0xbe>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <TIM_OC3_SetConfig+0x11c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <TIM_OC3_SetConfig+0xbe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <TIM_OC3_SetConfig+0x120>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_OC3_SetConfig+0xbe>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a16      	ldr	r2, [pc, #88]	; (8005340 <TIM_OC3_SetConfig+0x114>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d113      	bne.n	8005312 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	621a      	str	r2, [r3, #32]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40013400 	.word	0x40013400
 8005340:	40015000 	.word	0x40015000
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400
 800534c:	40014800 	.word	0x40014800

08005350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800539e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <TIM_OC4_SetConfig+0xc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <TIM_OC4_SetConfig+0x8c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a19      	ldr	r2, [pc, #100]	; (800541c <TIM_OC4_SetConfig+0xcc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00f      	beq.n	80053dc <TIM_OC4_SetConfig+0x8c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <TIM_OC4_SetConfig+0xd0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00b      	beq.n	80053dc <TIM_OC4_SetConfig+0x8c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a17      	ldr	r2, [pc, #92]	; (8005424 <TIM_OC4_SetConfig+0xd4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_OC4_SetConfig+0x8c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a16      	ldr	r2, [pc, #88]	; (8005428 <TIM_OC4_SetConfig+0xd8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_OC4_SetConfig+0x8c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <TIM_OC4_SetConfig+0xdc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40013400 	.word	0x40013400
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400
 8005428:	40014800 	.word	0x40014800
 800542c:	40015000 	.word	0x40015000

08005430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005474:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <TIM_OC5_SetConfig+0xbc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <TIM_OC5_SetConfig+0x82>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <TIM_OC5_SetConfig+0xc0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00f      	beq.n	80054b2 <TIM_OC5_SetConfig+0x82>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <TIM_OC5_SetConfig+0xc4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_OC5_SetConfig+0x82>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <TIM_OC5_SetConfig+0xc8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_OC5_SetConfig+0x82>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a15      	ldr	r2, [pc, #84]	; (80054fc <TIM_OC5_SetConfig+0xcc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_OC5_SetConfig+0x82>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a14      	ldr	r2, [pc, #80]	; (8005500 <TIM_OC5_SetConfig+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d109      	bne.n	80054c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	621a      	str	r2, [r3, #32]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800
 8005500:	40015000 	.word	0x40015000

08005504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800554a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	051b      	lsls	r3, r3, #20
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1a      	ldr	r2, [pc, #104]	; (80055c4 <TIM_OC6_SetConfig+0xc0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <TIM_OC6_SetConfig+0x84>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a19      	ldr	r2, [pc, #100]	; (80055c8 <TIM_OC6_SetConfig+0xc4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00f      	beq.n	8005588 <TIM_OC6_SetConfig+0x84>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <TIM_OC6_SetConfig+0xc8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_OC6_SetConfig+0x84>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <TIM_OC6_SetConfig+0xcc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_OC6_SetConfig+0x84>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <TIM_OC6_SetConfig+0xd0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC6_SetConfig+0x84>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <TIM_OC6_SetConfig+0xd4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d109      	bne.n	800559c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	029b      	lsls	r3, r3, #10
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40013400 	.word	0x40013400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400
 80055d4:	40014800 	.word	0x40014800
 80055d8:	40015000 	.word	0x40015000

080055dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_TI1_SetConfig+0xc4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d017      	beq.n	800563a <TIM_TI1_SetConfig+0x5e>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005610:	d013      	beq.n	800563a <TIM_TI1_SetConfig+0x5e>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a23      	ldr	r2, [pc, #140]	; (80056a4 <TIM_TI1_SetConfig+0xc8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_TI1_SetConfig+0x5e>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <TIM_TI1_SetConfig+0xcc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_TI1_SetConfig+0x5e>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a21      	ldr	r2, [pc, #132]	; (80056ac <TIM_TI1_SetConfig+0xd0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_TI1_SetConfig+0x5e>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <TIM_TI1_SetConfig+0xd4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_TI1_SetConfig+0x5e>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <TIM_TI1_SetConfig+0xd8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d101      	bne.n	800563e <TIM_TI1_SetConfig+0x62>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <TIM_TI1_SetConfig+0x64>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e003      	b.n	800565e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	b2db      	uxtb	r3, r3
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f023 030a 	bic.w	r3, r3, #10
 8005678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f003 030a 	and.w	r3, r3, #10
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40015000 	.word	0x40015000

080056b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 030a 	bic.w	r3, r3, #10
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f023 0210 	bic.w	r2, r3, #16
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	031b      	lsls	r3, r3, #12
 800575a:	b29b      	uxth	r3, r3
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005768:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f023 0210 	bic.w	r2, r3, #16
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	031b      	lsls	r3, r3, #12
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800582c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	b2db      	uxtb	r3, r3
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005840:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	031b      	lsls	r3, r3, #12
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80058ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	031b      	lsls	r3, r3, #12
 80058c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	f043 0307 	orr.w	r3, r3, #7
 8005904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	431a      	orrs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	2201      	movs	r2, #1
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	43db      	mvns	r3, r3
 800597a:	401a      	ands	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	fa01 f303 	lsl.w	r3, r1, r3
 8005990:	431a      	orrs	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e06d      	b.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a30      	ldr	r2, [pc, #192]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2f      	ldr	r2, [pc, #188]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d108      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d018      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a11      	ldr	r2, [pc, #68]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d10c      	bne.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40013400 	.word	0x40013400
 8005aac:	40015000 	.word	0x40015000
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40014000 	.word	0x40014000

08005abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e040      	b.n	8005b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc f8b6 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	; 0x24
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8b6 	bl	8005ca8 <UART_SetConfig>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e022      	b.n	8005b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa7e 	bl	8006050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb05 	bl	8006194 <UART_CheckIdleState>
 8005b8a:	4603      	mov	r3, r0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d178      	bne.n	8005c9e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Transmit+0x24>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e071      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2221      	movs	r2, #33	; 0x21
 8005bc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bca:	f7fc fa43 	bl	8002054 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0x68>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e003      	b.n	8005c04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c04:	e030      	b.n	8005c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	; 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fb67 	bl	80062e4 <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e03c      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	881a      	ldrh	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	3302      	adds	r3, #2
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e008      	b.n	8005c56 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	b292      	uxth	r2, r2
 8005c4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1c8      	bne.n	8005c06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fb30 	bl	80062e4 <UART_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e005      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b92      	ldr	r3, [pc, #584]	; (8005f1c <UART_SetConfig+0x274>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	6979      	ldr	r1, [r7, #20]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a80      	ldr	r2, [pc, #512]	; (8005f20 <UART_SetConfig+0x278>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d120      	bne.n	8005d66 <UART_SetConfig+0xbe>
 8005d24:	4b7f      	ldr	r3, [pc, #508]	; (8005f24 <UART_SetConfig+0x27c>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d817      	bhi.n	8005d60 <UART_SetConfig+0xb8>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x90>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d55 	.word	0x08005d55
 8005d40:	08005d5b 	.word	0x08005d5b
 8005d44:	08005d4f 	.word	0x08005d4f
 8005d48:	2301      	movs	r3, #1
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e0b5      	b.n	8005eba <UART_SetConfig+0x212>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e0b2      	b.n	8005eba <UART_SetConfig+0x212>
 8005d54:	2304      	movs	r3, #4
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e0af      	b.n	8005eba <UART_SetConfig+0x212>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e0ac      	b.n	8005eba <UART_SetConfig+0x212>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e0a9      	b.n	8005eba <UART_SetConfig+0x212>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a6f      	ldr	r2, [pc, #444]	; (8005f28 <UART_SetConfig+0x280>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d124      	bne.n	8005dba <UART_SetConfig+0x112>
 8005d70:	4b6c      	ldr	r3, [pc, #432]	; (8005f24 <UART_SetConfig+0x27c>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d7c:	d011      	beq.n	8005da2 <UART_SetConfig+0xfa>
 8005d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d82:	d817      	bhi.n	8005db4 <UART_SetConfig+0x10c>
 8005d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d88:	d011      	beq.n	8005dae <UART_SetConfig+0x106>
 8005d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d8e:	d811      	bhi.n	8005db4 <UART_SetConfig+0x10c>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <UART_SetConfig+0xf4>
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d006      	beq.n	8005da8 <UART_SetConfig+0x100>
 8005d9a:	e00b      	b.n	8005db4 <UART_SetConfig+0x10c>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e08b      	b.n	8005eba <UART_SetConfig+0x212>
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e088      	b.n	8005eba <UART_SetConfig+0x212>
 8005da8:	2304      	movs	r3, #4
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e085      	b.n	8005eba <UART_SetConfig+0x212>
 8005dae:	2308      	movs	r3, #8
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e082      	b.n	8005eba <UART_SetConfig+0x212>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e07f      	b.n	8005eba <UART_SetConfig+0x212>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5b      	ldr	r2, [pc, #364]	; (8005f2c <UART_SetConfig+0x284>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d124      	bne.n	8005e0e <UART_SetConfig+0x166>
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <UART_SetConfig+0x27c>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005dcc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dd0:	d011      	beq.n	8005df6 <UART_SetConfig+0x14e>
 8005dd2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dd6:	d817      	bhi.n	8005e08 <UART_SetConfig+0x160>
 8005dd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ddc:	d011      	beq.n	8005e02 <UART_SetConfig+0x15a>
 8005dde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005de2:	d811      	bhi.n	8005e08 <UART_SetConfig+0x160>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <UART_SetConfig+0x148>
 8005de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dec:	d006      	beq.n	8005dfc <UART_SetConfig+0x154>
 8005dee:	e00b      	b.n	8005e08 <UART_SetConfig+0x160>
 8005df0:	2300      	movs	r3, #0
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e061      	b.n	8005eba <UART_SetConfig+0x212>
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e05e      	b.n	8005eba <UART_SetConfig+0x212>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e05b      	b.n	8005eba <UART_SetConfig+0x212>
 8005e02:	2308      	movs	r3, #8
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e058      	b.n	8005eba <UART_SetConfig+0x212>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e055      	b.n	8005eba <UART_SetConfig+0x212>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a47      	ldr	r2, [pc, #284]	; (8005f30 <UART_SetConfig+0x288>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d124      	bne.n	8005e62 <UART_SetConfig+0x1ba>
 8005e18:	4b42      	ldr	r3, [pc, #264]	; (8005f24 <UART_SetConfig+0x27c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e24:	d011      	beq.n	8005e4a <UART_SetConfig+0x1a2>
 8005e26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e2a:	d817      	bhi.n	8005e5c <UART_SetConfig+0x1b4>
 8005e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e30:	d011      	beq.n	8005e56 <UART_SetConfig+0x1ae>
 8005e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e36:	d811      	bhi.n	8005e5c <UART_SetConfig+0x1b4>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <UART_SetConfig+0x19c>
 8005e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e40:	d006      	beq.n	8005e50 <UART_SetConfig+0x1a8>
 8005e42:	e00b      	b.n	8005e5c <UART_SetConfig+0x1b4>
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e037      	b.n	8005eba <UART_SetConfig+0x212>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e034      	b.n	8005eba <UART_SetConfig+0x212>
 8005e50:	2304      	movs	r3, #4
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e031      	b.n	8005eba <UART_SetConfig+0x212>
 8005e56:	2308      	movs	r3, #8
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e02e      	b.n	8005eba <UART_SetConfig+0x212>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e02b      	b.n	8005eba <UART_SetConfig+0x212>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a33      	ldr	r2, [pc, #204]	; (8005f34 <UART_SetConfig+0x28c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d124      	bne.n	8005eb6 <UART_SetConfig+0x20e>
 8005e6c:	4b2d      	ldr	r3, [pc, #180]	; (8005f24 <UART_SetConfig+0x27c>)
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e78:	d011      	beq.n	8005e9e <UART_SetConfig+0x1f6>
 8005e7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e7e:	d817      	bhi.n	8005eb0 <UART_SetConfig+0x208>
 8005e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e84:	d011      	beq.n	8005eaa <UART_SetConfig+0x202>
 8005e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e8a:	d811      	bhi.n	8005eb0 <UART_SetConfig+0x208>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x1f0>
 8005e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e94:	d006      	beq.n	8005ea4 <UART_SetConfig+0x1fc>
 8005e96:	e00b      	b.n	8005eb0 <UART_SetConfig+0x208>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e00d      	b.n	8005eba <UART_SetConfig+0x212>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e00a      	b.n	8005eba <UART_SetConfig+0x212>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e007      	b.n	8005eba <UART_SetConfig+0x212>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e004      	b.n	8005eba <UART_SetConfig+0x212>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e001      	b.n	8005eba <UART_SetConfig+0x212>
 8005eb6:	2310      	movs	r3, #16
 8005eb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec2:	d16b      	bne.n	8005f9c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005ec4:	7ffb      	ldrb	r3, [r7, #31]
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d838      	bhi.n	8005f3c <UART_SetConfig+0x294>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x228>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f3d 	.word	0x08005f3d
 8005ee0:	08005f0b 	.word	0x08005f0b
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005f3d 	.word	0x08005f3d
 8005ef0:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7fd fde6 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8005ef8:	61b8      	str	r0, [r7, #24]
        break;
 8005efa:	e024      	b.n	8005f46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fd fe04 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 8005f00:	61b8      	str	r0, [r7, #24]
        break;
 8005f02:	e020      	b.n	8005f46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <UART_SetConfig+0x290>)
 8005f06:	61bb      	str	r3, [r7, #24]
        break;
 8005f08:	e01d      	b.n	8005f46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fd fd65 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8005f0e:	61b8      	str	r0, [r7, #24]
        break;
 8005f10:	e019      	b.n	8005f46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	61bb      	str	r3, [r7, #24]
        break;
 8005f18:	e015      	b.n	8005f46 <UART_SetConfig+0x29e>
 8005f1a:	bf00      	nop
 8005f1c:	efff69f3 	.word	0xefff69f3
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004800 	.word	0x40004800
 8005f30:	40004c00 	.word	0x40004c00
 8005f34:	40005000 	.word	0x40005000
 8005f38:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	77bb      	strb	r3, [r7, #30]
        break;
 8005f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d073      	beq.n	8006034 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	005a      	lsls	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	441a      	add	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d916      	bls.n	8005f96 <UART_SetConfig+0x2ee>
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6e:	d212      	bcs.n	8005f96 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f023 030f 	bic.w	r3, r3, #15
 8005f78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	89fb      	ldrh	r3, [r7, #14]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	89fa      	ldrh	r2, [r7, #14]
 8005f92:	60da      	str	r2, [r3, #12]
 8005f94:	e04e      	b.n	8006034 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	77bb      	strb	r3, [r7, #30]
 8005f9a:	e04b      	b.n	8006034 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9c:	7ffb      	ldrb	r3, [r7, #31]
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x34a>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x300>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd fd7a 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61b8      	str	r0, [r7, #24]
        break;
 8005fd2:	e013      	b.n	8005ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd fd98 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	; (800604c <UART_SetConfig+0x3a4>)
 8005fde:	61bb      	str	r3, [r7, #24]
        break;
 8005fe0:	e00c      	b.n	8005ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fcf9 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61b8      	str	r0, [r7, #24]
        break;
 8005fe8:	e008      	b.n	8005ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61bb      	str	r3, [r7, #24]
        break;
 8005ff0:	e004      	b.n	8005ffc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8005ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085a      	lsrs	r2, r3, #1
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	441a      	add	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b0f      	cmp	r3, #15
 800601a:	d909      	bls.n	8006030 <UART_SetConfig+0x388>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006022:	d205      	bcs.n	8006030 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e001      	b.n	8006034 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006040:	7fbb      	ldrb	r3, [r7, #30]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	007a1200 	.word	0x007a1200

08006050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01a      	beq.n	8006166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614e:	d10a      	bne.n	8006166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b098      	sub	sp, #96	; 0x60
 8006198:	af02      	add	r7, sp, #8
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a4:	f7fb ff56 	bl	8002054 <HAL_GetTick>
 80061a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d12e      	bne.n	8006216 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c0:	2200      	movs	r2, #0
 80061c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f88c 	bl	80062e4 <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d021      	beq.n	8006216 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f0:	647b      	str	r3, [r7, #68]	; 0x44
 80061f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e062      	b.n	80062dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b04      	cmp	r3, #4
 8006222:	d149      	bne.n	80062b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622c:	2200      	movs	r2, #0
 800622e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f856 	bl	80062e4 <UART_WaitOnFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d03c      	beq.n	80062b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	623b      	str	r3, [r7, #32]
   return(result);
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
 800625e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e6      	bne.n	800623e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006290:	61fa      	str	r2, [r7, #28]
 8006292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	617b      	str	r3, [r7, #20]
   return(result);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e5      	bne.n	8006270 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e011      	b.n	80062dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3758      	adds	r7, #88	; 0x58
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f4:	e049      	b.n	800638a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fc:	d045      	beq.n	800638a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fb fea9 	bl	8002054 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <UART_WaitOnFlagUntilTimeout+0x30>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e048      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d031      	beq.n	800638a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b08      	cmp	r3, #8
 8006332:	d110      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2208      	movs	r2, #8
 800633a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f838 	bl	80063b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2208      	movs	r2, #8
 8006346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e029      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006364:	d111      	bne.n	800638a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800636e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f81e 	bl	80063b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e00f      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	429a      	cmp	r2, r3
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d0a6      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b095      	sub	sp, #84	; 0x54
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d8:	643b      	str	r3, [r7, #64]	; 0x40
 80063da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	64bb      	str	r3, [r7, #72]	; 0x48
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800640c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	2b01      	cmp	r3, #1
 8006426:	d118      	bne.n	800645a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	60bb      	str	r3, [r7, #8]
   return(result);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0310 	bic.w	r3, r3, #16
 800643c:	647b      	str	r3, [r7, #68]	; 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6979      	ldr	r1, [r7, #20]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e6      	bne.n	8006428 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800646e:	bf00      	nop
 8006470:	3754      	adds	r7, #84	; 0x54
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <__errno>:
 800647c:	4b01      	ldr	r3, [pc, #4]	; (8006484 <__errno+0x8>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000028 	.word	0x20000028

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4d0d      	ldr	r5, [pc, #52]	; (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	; (80064c4 <__libc_init_array+0x3c>)
 800648e:	1b64      	subs	r4, r4, r5
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2600      	movs	r6, #0
 8006494:	42a6      	cmp	r6, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4d0b      	ldr	r5, [pc, #44]	; (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	; (80064cc <__libc_init_array+0x44>)
 800649c:	f002 fd38 	bl	8008f10 <_init>
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2600      	movs	r6, #0
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b0:	4798      	blx	r3
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ba:	4798      	blx	r3
 80064bc:	3601      	adds	r6, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	0800936c 	.word	0x0800936c
 80064c4:	0800936c 	.word	0x0800936c
 80064c8:	0800936c 	.word	0x0800936c
 80064cc:	08009370 	.word	0x08009370

080064d0 <memset>:
 80064d0:	4402      	add	r2, r0
 80064d2:	4603      	mov	r3, r0
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d100      	bne.n	80064da <memset+0xa>
 80064d8:	4770      	bx	lr
 80064da:	f803 1b01 	strb.w	r1, [r3], #1
 80064de:	e7f9      	b.n	80064d4 <memset+0x4>

080064e0 <__cvt>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	ec55 4b10 	vmov	r4, r5, d0
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	460e      	mov	r6, r1
 80064ec:	4619      	mov	r1, r3
 80064ee:	462b      	mov	r3, r5
 80064f0:	bfbb      	ittet	lt
 80064f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064f6:	461d      	movlt	r5, r3
 80064f8:	2300      	movge	r3, #0
 80064fa:	232d      	movlt	r3, #45	; 0x2d
 80064fc:	700b      	strb	r3, [r1, #0]
 80064fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006500:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006504:	4691      	mov	r9, r2
 8006506:	f023 0820 	bic.w	r8, r3, #32
 800650a:	bfbc      	itt	lt
 800650c:	4622      	movlt	r2, r4
 800650e:	4614      	movlt	r4, r2
 8006510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006514:	d005      	beq.n	8006522 <__cvt+0x42>
 8006516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800651a:	d100      	bne.n	800651e <__cvt+0x3e>
 800651c:	3601      	adds	r6, #1
 800651e:	2102      	movs	r1, #2
 8006520:	e000      	b.n	8006524 <__cvt+0x44>
 8006522:	2103      	movs	r1, #3
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	ab02      	add	r3, sp, #8
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	ec45 4b10 	vmov	d0, r4, r5
 8006530:	4653      	mov	r3, sl
 8006532:	4632      	mov	r2, r6
 8006534:	f000 fccc 	bl	8006ed0 <_dtoa_r>
 8006538:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800653c:	4607      	mov	r7, r0
 800653e:	d102      	bne.n	8006546 <__cvt+0x66>
 8006540:	f019 0f01 	tst.w	r9, #1
 8006544:	d022      	beq.n	800658c <__cvt+0xac>
 8006546:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800654a:	eb07 0906 	add.w	r9, r7, r6
 800654e:	d110      	bne.n	8006572 <__cvt+0x92>
 8006550:	783b      	ldrb	r3, [r7, #0]
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d10a      	bne.n	800656c <__cvt+0x8c>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f7fa fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006562:	b918      	cbnz	r0, 800656c <__cvt+0x8c>
 8006564:	f1c6 0601 	rsb	r6, r6, #1
 8006568:	f8ca 6000 	str.w	r6, [sl]
 800656c:	f8da 3000 	ldr.w	r3, [sl]
 8006570:	4499      	add	r9, r3
 8006572:	2200      	movs	r2, #0
 8006574:	2300      	movs	r3, #0
 8006576:	4620      	mov	r0, r4
 8006578:	4629      	mov	r1, r5
 800657a:	f7fa faad 	bl	8000ad8 <__aeabi_dcmpeq>
 800657e:	b108      	cbz	r0, 8006584 <__cvt+0xa4>
 8006580:	f8cd 900c 	str.w	r9, [sp, #12]
 8006584:	2230      	movs	r2, #48	; 0x30
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	454b      	cmp	r3, r9
 800658a:	d307      	bcc.n	800659c <__cvt+0xbc>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006590:	1bdb      	subs	r3, r3, r7
 8006592:	4638      	mov	r0, r7
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	b004      	add	sp, #16
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e7f0      	b.n	8006586 <__cvt+0xa6>

080065a4 <__exponent>:
 80065a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a6:	4603      	mov	r3, r0
 80065a8:	2900      	cmp	r1, #0
 80065aa:	bfb8      	it	lt
 80065ac:	4249      	neglt	r1, r1
 80065ae:	f803 2b02 	strb.w	r2, [r3], #2
 80065b2:	bfb4      	ite	lt
 80065b4:	222d      	movlt	r2, #45	; 0x2d
 80065b6:	222b      	movge	r2, #43	; 0x2b
 80065b8:	2909      	cmp	r1, #9
 80065ba:	7042      	strb	r2, [r0, #1]
 80065bc:	dd2a      	ble.n	8006614 <__exponent+0x70>
 80065be:	f10d 0407 	add.w	r4, sp, #7
 80065c2:	46a4      	mov	ip, r4
 80065c4:	270a      	movs	r7, #10
 80065c6:	46a6      	mov	lr, r4
 80065c8:	460a      	mov	r2, r1
 80065ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80065ce:	fb07 1516 	mls	r5, r7, r6, r1
 80065d2:	3530      	adds	r5, #48	; 0x30
 80065d4:	2a63      	cmp	r2, #99	; 0x63
 80065d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80065da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065de:	4631      	mov	r1, r6
 80065e0:	dcf1      	bgt.n	80065c6 <__exponent+0x22>
 80065e2:	3130      	adds	r1, #48	; 0x30
 80065e4:	f1ae 0502 	sub.w	r5, lr, #2
 80065e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065ec:	1c44      	adds	r4, r0, #1
 80065ee:	4629      	mov	r1, r5
 80065f0:	4561      	cmp	r1, ip
 80065f2:	d30a      	bcc.n	800660a <__exponent+0x66>
 80065f4:	f10d 0209 	add.w	r2, sp, #9
 80065f8:	eba2 020e 	sub.w	r2, r2, lr
 80065fc:	4565      	cmp	r5, ip
 80065fe:	bf88      	it	hi
 8006600:	2200      	movhi	r2, #0
 8006602:	4413      	add	r3, r2
 8006604:	1a18      	subs	r0, r3, r0
 8006606:	b003      	add	sp, #12
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800660e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006612:	e7ed      	b.n	80065f0 <__exponent+0x4c>
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	3130      	adds	r1, #48	; 0x30
 8006618:	7083      	strb	r3, [r0, #2]
 800661a:	70c1      	strb	r1, [r0, #3]
 800661c:	1d03      	adds	r3, r0, #4
 800661e:	e7f1      	b.n	8006604 <__exponent+0x60>

08006620 <_printf_float>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	b08d      	sub	sp, #52	; 0x34
 800662a:	460c      	mov	r4, r1
 800662c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006630:	4616      	mov	r6, r2
 8006632:	461f      	mov	r7, r3
 8006634:	4605      	mov	r5, r0
 8006636:	f001 fb2f 	bl	8007c98 <_localeconv_r>
 800663a:	f8d0 a000 	ldr.w	sl, [r0]
 800663e:	4650      	mov	r0, sl
 8006640:	f7f9 fdce 	bl	80001e0 <strlen>
 8006644:	2300      	movs	r3, #0
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	9305      	str	r3, [sp, #20]
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006654:	3307      	adds	r3, #7
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	f103 0208 	add.w	r2, r3, #8
 800665e:	f8c8 2000 	str.w	r2, [r8]
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800666a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800666e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006672:	9307      	str	r3, [sp, #28]
 8006674:	f8cd 8018 	str.w	r8, [sp, #24]
 8006678:	ee08 0a10 	vmov	s16, r0
 800667c:	4b9f      	ldr	r3, [pc, #636]	; (80068fc <_printf_float+0x2dc>)
 800667e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006686:	f7fa fa59 	bl	8000b3c <__aeabi_dcmpun>
 800668a:	bb88      	cbnz	r0, 80066f0 <_printf_float+0xd0>
 800668c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006690:	4b9a      	ldr	r3, [pc, #616]	; (80068fc <_printf_float+0x2dc>)
 8006692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006696:	f7fa fa33 	bl	8000b00 <__aeabi_dcmple>
 800669a:	bb48      	cbnz	r0, 80066f0 <_printf_float+0xd0>
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa22 	bl	8000aec <__aeabi_dcmplt>
 80066a8:	b110      	cbz	r0, 80066b0 <_printf_float+0x90>
 80066aa:	232d      	movs	r3, #45	; 0x2d
 80066ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b0:	4b93      	ldr	r3, [pc, #588]	; (8006900 <_printf_float+0x2e0>)
 80066b2:	4894      	ldr	r0, [pc, #592]	; (8006904 <_printf_float+0x2e4>)
 80066b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066b8:	bf94      	ite	ls
 80066ba:	4698      	movls	r8, r3
 80066bc:	4680      	movhi	r8, r0
 80066be:	2303      	movs	r3, #3
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	9b05      	ldr	r3, [sp, #20]
 80066c4:	f023 0204 	bic.w	r2, r3, #4
 80066c8:	6022      	str	r2, [r4, #0]
 80066ca:	f04f 0900 	mov.w	r9, #0
 80066ce:	9700      	str	r7, [sp, #0]
 80066d0:	4633      	mov	r3, r6
 80066d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f9d8 	bl	8006a8c <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	f040 8090 	bne.w	8006802 <_printf_float+0x1e2>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e6:	b00d      	add	sp, #52	; 0x34
 80066e8:	ecbd 8b02 	vpop	{d8}
 80066ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	4640      	mov	r0, r8
 80066f6:	4649      	mov	r1, r9
 80066f8:	f7fa fa20 	bl	8000b3c <__aeabi_dcmpun>
 80066fc:	b140      	cbz	r0, 8006710 <_printf_float+0xf0>
 80066fe:	464b      	mov	r3, r9
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfbc      	itt	lt
 8006704:	232d      	movlt	r3, #45	; 0x2d
 8006706:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800670a:	487f      	ldr	r0, [pc, #508]	; (8006908 <_printf_float+0x2e8>)
 800670c:	4b7f      	ldr	r3, [pc, #508]	; (800690c <_printf_float+0x2ec>)
 800670e:	e7d1      	b.n	80066b4 <_printf_float+0x94>
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006716:	9206      	str	r2, [sp, #24]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	d13f      	bne.n	800679c <_printf_float+0x17c>
 800671c:	2306      	movs	r3, #6
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	9b05      	ldr	r3, [sp, #20]
 8006722:	6861      	ldr	r1, [r4, #4]
 8006724:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006728:	2300      	movs	r3, #0
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	ab0a      	add	r3, sp, #40	; 0x28
 800672e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006732:	ab09      	add	r3, sp, #36	; 0x24
 8006734:	ec49 8b10 	vmov	d0, r8, r9
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	6022      	str	r2, [r4, #0]
 800673c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006740:	4628      	mov	r0, r5
 8006742:	f7ff fecd 	bl	80064e0 <__cvt>
 8006746:	9b06      	ldr	r3, [sp, #24]
 8006748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800674a:	2b47      	cmp	r3, #71	; 0x47
 800674c:	4680      	mov	r8, r0
 800674e:	d108      	bne.n	8006762 <_printf_float+0x142>
 8006750:	1cc8      	adds	r0, r1, #3
 8006752:	db02      	blt.n	800675a <_printf_float+0x13a>
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	4299      	cmp	r1, r3
 8006758:	dd41      	ble.n	80067de <_printf_float+0x1be>
 800675a:	f1ab 0b02 	sub.w	fp, fp, #2
 800675e:	fa5f fb8b 	uxtb.w	fp, fp
 8006762:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006766:	d820      	bhi.n	80067aa <_printf_float+0x18a>
 8006768:	3901      	subs	r1, #1
 800676a:	465a      	mov	r2, fp
 800676c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006770:	9109      	str	r1, [sp, #36]	; 0x24
 8006772:	f7ff ff17 	bl	80065a4 <__exponent>
 8006776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006778:	1813      	adds	r3, r2, r0
 800677a:	2a01      	cmp	r2, #1
 800677c:	4681      	mov	r9, r0
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	dc02      	bgt.n	8006788 <_printf_float+0x168>
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	07d2      	lsls	r2, r2, #31
 8006786:	d501      	bpl.n	800678c <_printf_float+0x16c>
 8006788:	3301      	adds	r3, #1
 800678a:	6123      	str	r3, [r4, #16]
 800678c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006790:	2b00      	cmp	r3, #0
 8006792:	d09c      	beq.n	80066ce <_printf_float+0xae>
 8006794:	232d      	movs	r3, #45	; 0x2d
 8006796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679a:	e798      	b.n	80066ce <_printf_float+0xae>
 800679c:	9a06      	ldr	r2, [sp, #24]
 800679e:	2a47      	cmp	r2, #71	; 0x47
 80067a0:	d1be      	bne.n	8006720 <_printf_float+0x100>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1bc      	bne.n	8006720 <_printf_float+0x100>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7b9      	b.n	800671e <_printf_float+0xfe>
 80067aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067ae:	d118      	bne.n	80067e2 <_printf_float+0x1c2>
 80067b0:	2900      	cmp	r1, #0
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	dd0b      	ble.n	80067ce <_printf_float+0x1ae>
 80067b6:	6121      	str	r1, [r4, #16]
 80067b8:	b913      	cbnz	r3, 80067c0 <_printf_float+0x1a0>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	07d0      	lsls	r0, r2, #31
 80067be:	d502      	bpl.n	80067c6 <_printf_float+0x1a6>
 80067c0:	3301      	adds	r3, #1
 80067c2:	440b      	add	r3, r1
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	e7de      	b.n	800678c <_printf_float+0x16c>
 80067ce:	b913      	cbnz	r3, 80067d6 <_printf_float+0x1b6>
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	07d2      	lsls	r2, r2, #31
 80067d4:	d501      	bpl.n	80067da <_printf_float+0x1ba>
 80067d6:	3302      	adds	r3, #2
 80067d8:	e7f4      	b.n	80067c4 <_printf_float+0x1a4>
 80067da:	2301      	movs	r3, #1
 80067dc:	e7f2      	b.n	80067c4 <_printf_float+0x1a4>
 80067de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e4:	4299      	cmp	r1, r3
 80067e6:	db05      	blt.n	80067f4 <_printf_float+0x1d4>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	6121      	str	r1, [r4, #16]
 80067ec:	07d8      	lsls	r0, r3, #31
 80067ee:	d5ea      	bpl.n	80067c6 <_printf_float+0x1a6>
 80067f0:	1c4b      	adds	r3, r1, #1
 80067f2:	e7e7      	b.n	80067c4 <_printf_float+0x1a4>
 80067f4:	2900      	cmp	r1, #0
 80067f6:	bfd4      	ite	le
 80067f8:	f1c1 0202 	rsble	r2, r1, #2
 80067fc:	2201      	movgt	r2, #1
 80067fe:	4413      	add	r3, r2
 8006800:	e7e0      	b.n	80067c4 <_printf_float+0x1a4>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	055a      	lsls	r2, r3, #21
 8006806:	d407      	bmi.n	8006818 <_printf_float+0x1f8>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	4642      	mov	r2, r8
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	d12c      	bne.n	8006870 <_printf_float+0x250>
 8006816:	e764      	b.n	80066e2 <_printf_float+0xc2>
 8006818:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800681c:	f240 80e0 	bls.w	80069e0 <_printf_float+0x3c0>
 8006820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006824:	2200      	movs	r2, #0
 8006826:	2300      	movs	r3, #0
 8006828:	f7fa f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800682c:	2800      	cmp	r0, #0
 800682e:	d034      	beq.n	800689a <_printf_float+0x27a>
 8006830:	4a37      	ldr	r2, [pc, #220]	; (8006910 <_printf_float+0x2f0>)
 8006832:	2301      	movs	r3, #1
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af51 	beq.w	80066e2 <_printf_float+0xc2>
 8006840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006844:	429a      	cmp	r2, r3
 8006846:	db02      	blt.n	800684e <_printf_float+0x22e>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07d8      	lsls	r0, r3, #31
 800684c:	d510      	bpl.n	8006870 <_printf_float+0x250>
 800684e:	ee18 3a10 	vmov	r3, s16
 8006852:	4652      	mov	r2, sl
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	47b8      	blx	r7
 800685a:	3001      	adds	r0, #1
 800685c:	f43f af41 	beq.w	80066e2 <_printf_float+0xc2>
 8006860:	f04f 0800 	mov.w	r8, #0
 8006864:	f104 091a 	add.w	r9, r4, #26
 8006868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	4543      	cmp	r3, r8
 800686e:	dc09      	bgt.n	8006884 <_printf_float+0x264>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	079b      	lsls	r3, r3, #30
 8006874:	f100 8105 	bmi.w	8006a82 <_printf_float+0x462>
 8006878:	68e0      	ldr	r0, [r4, #12]
 800687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687c:	4298      	cmp	r0, r3
 800687e:	bfb8      	it	lt
 8006880:	4618      	movlt	r0, r3
 8006882:	e730      	b.n	80066e6 <_printf_float+0xc6>
 8006884:	2301      	movs	r3, #1
 8006886:	464a      	mov	r2, r9
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f af27 	beq.w	80066e2 <_printf_float+0xc2>
 8006894:	f108 0801 	add.w	r8, r8, #1
 8006898:	e7e6      	b.n	8006868 <_printf_float+0x248>
 800689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	dc39      	bgt.n	8006914 <_printf_float+0x2f4>
 80068a0:	4a1b      	ldr	r2, [pc, #108]	; (8006910 <_printf_float+0x2f0>)
 80068a2:	2301      	movs	r3, #1
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f af19 	beq.w	80066e2 <_printf_float+0xc2>
 80068b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d102      	bne.n	80068be <_printf_float+0x29e>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d5d8      	bpl.n	8006870 <_printf_float+0x250>
 80068be:	ee18 3a10 	vmov	r3, s16
 80068c2:	4652      	mov	r2, sl
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f af09 	beq.w	80066e2 <_printf_float+0xc2>
 80068d0:	f04f 0900 	mov.w	r9, #0
 80068d4:	f104 0a1a 	add.w	sl, r4, #26
 80068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068da:	425b      	negs	r3, r3
 80068dc:	454b      	cmp	r3, r9
 80068de:	dc01      	bgt.n	80068e4 <_printf_float+0x2c4>
 80068e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e2:	e792      	b.n	800680a <_printf_float+0x1ea>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4652      	mov	r2, sl
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f aef7 	beq.w	80066e2 <_printf_float+0xc2>
 80068f4:	f109 0901 	add.w	r9, r9, #1
 80068f8:	e7ee      	b.n	80068d8 <_printf_float+0x2b8>
 80068fa:	bf00      	nop
 80068fc:	7fefffff 	.word	0x7fefffff
 8006900:	08008f94 	.word	0x08008f94
 8006904:	08008f98 	.word	0x08008f98
 8006908:	08008fa0 	.word	0x08008fa0
 800690c:	08008f9c 	.word	0x08008f9c
 8006910:	08008fa4 	.word	0x08008fa4
 8006914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006918:	429a      	cmp	r2, r3
 800691a:	bfa8      	it	ge
 800691c:	461a      	movge	r2, r3
 800691e:	2a00      	cmp	r2, #0
 8006920:	4691      	mov	r9, r2
 8006922:	dc37      	bgt.n	8006994 <_printf_float+0x374>
 8006924:	f04f 0b00 	mov.w	fp, #0
 8006928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800692c:	f104 021a 	add.w	r2, r4, #26
 8006930:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006932:	9305      	str	r3, [sp, #20]
 8006934:	eba3 0309 	sub.w	r3, r3, r9
 8006938:	455b      	cmp	r3, fp
 800693a:	dc33      	bgt.n	80069a4 <_printf_float+0x384>
 800693c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006940:	429a      	cmp	r2, r3
 8006942:	db3b      	blt.n	80069bc <_printf_float+0x39c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	07da      	lsls	r2, r3, #31
 8006948:	d438      	bmi.n	80069bc <_printf_float+0x39c>
 800694a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694c:	9a05      	ldr	r2, [sp, #20]
 800694e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006950:	1a9a      	subs	r2, r3, r2
 8006952:	eba3 0901 	sub.w	r9, r3, r1
 8006956:	4591      	cmp	r9, r2
 8006958:	bfa8      	it	ge
 800695a:	4691      	movge	r9, r2
 800695c:	f1b9 0f00 	cmp.w	r9, #0
 8006960:	dc35      	bgt.n	80069ce <_printf_float+0x3ae>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800696a:	f104 0a1a 	add.w	sl, r4, #26
 800696e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	eba3 0309 	sub.w	r3, r3, r9
 8006978:	4543      	cmp	r3, r8
 800697a:	f77f af79 	ble.w	8006870 <_printf_float+0x250>
 800697e:	2301      	movs	r3, #1
 8006980:	4652      	mov	r2, sl
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	f43f aeaa 	beq.w	80066e2 <_printf_float+0xc2>
 800698e:	f108 0801 	add.w	r8, r8, #1
 8006992:	e7ec      	b.n	800696e <_printf_float+0x34e>
 8006994:	4613      	mov	r3, r2
 8006996:	4631      	mov	r1, r6
 8006998:	4642      	mov	r2, r8
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	d1c0      	bne.n	8006924 <_printf_float+0x304>
 80069a2:	e69e      	b.n	80066e2 <_printf_float+0xc2>
 80069a4:	2301      	movs	r3, #1
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	9205      	str	r2, [sp, #20]
 80069ac:	47b8      	blx	r7
 80069ae:	3001      	adds	r0, #1
 80069b0:	f43f ae97 	beq.w	80066e2 <_printf_float+0xc2>
 80069b4:	9a05      	ldr	r2, [sp, #20]
 80069b6:	f10b 0b01 	add.w	fp, fp, #1
 80069ba:	e7b9      	b.n	8006930 <_printf_float+0x310>
 80069bc:	ee18 3a10 	vmov	r3, s16
 80069c0:	4652      	mov	r2, sl
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	d1be      	bne.n	800694a <_printf_float+0x32a>
 80069cc:	e689      	b.n	80066e2 <_printf_float+0xc2>
 80069ce:	9a05      	ldr	r2, [sp, #20]
 80069d0:	464b      	mov	r3, r9
 80069d2:	4442      	add	r2, r8
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	d1c1      	bne.n	8006962 <_printf_float+0x342>
 80069de:	e680      	b.n	80066e2 <_printf_float+0xc2>
 80069e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e2:	2a01      	cmp	r2, #1
 80069e4:	dc01      	bgt.n	80069ea <_printf_float+0x3ca>
 80069e6:	07db      	lsls	r3, r3, #31
 80069e8:	d538      	bpl.n	8006a5c <_printf_float+0x43c>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4642      	mov	r2, r8
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	f43f ae74 	beq.w	80066e2 <_printf_float+0xc2>
 80069fa:	ee18 3a10 	vmov	r3, s16
 80069fe:	4652      	mov	r2, sl
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f ae6b 	beq.w	80066e2 <_printf_float+0xc2>
 8006a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a10:	2200      	movs	r2, #0
 8006a12:	2300      	movs	r3, #0
 8006a14:	f7fa f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a18:	b9d8      	cbnz	r0, 8006a52 <_printf_float+0x432>
 8006a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1c:	f108 0201 	add.w	r2, r8, #1
 8006a20:	3b01      	subs	r3, #1
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d10e      	bne.n	8006a4a <_printf_float+0x42a>
 8006a2c:	e659      	b.n	80066e2 <_printf_float+0xc2>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae52 	beq.w	80066e2 <_printf_float+0xc2>
 8006a3e:	f108 0801 	add.w	r8, r8, #1
 8006a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a44:	3b01      	subs	r3, #1
 8006a46:	4543      	cmp	r3, r8
 8006a48:	dcf1      	bgt.n	8006a2e <_printf_float+0x40e>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a50:	e6dc      	b.n	800680c <_printf_float+0x1ec>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0a1a 	add.w	sl, r4, #26
 8006a5a:	e7f2      	b.n	8006a42 <_printf_float+0x422>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4642      	mov	r2, r8
 8006a60:	e7df      	b.n	8006a22 <_printf_float+0x402>
 8006a62:	2301      	movs	r3, #1
 8006a64:	464a      	mov	r2, r9
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae38 	beq.w	80066e2 <_printf_float+0xc2>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	dcf0      	bgt.n	8006a62 <_printf_float+0x442>
 8006a80:	e6fa      	b.n	8006878 <_printf_float+0x258>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0919 	add.w	r9, r4, #25
 8006a8a:	e7f4      	b.n	8006a76 <_printf_float+0x456>

08006a8c <_printf_common>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4616      	mov	r6, r2
 8006a92:	4699      	mov	r9, r3
 8006a94:	688a      	ldr	r2, [r1, #8]
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bfb8      	it	lt
 8006aa0:	4613      	movlt	r3, r2
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_printf_common+0x26>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	0699      	lsls	r1, r3, #26
 8006ab6:	bf42      	ittt	mi
 8006ab8:	6833      	ldrmi	r3, [r6, #0]
 8006aba:	3302      	addmi	r3, #2
 8006abc:	6033      	strmi	r3, [r6, #0]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d106      	bne.n	8006ad4 <_printf_common+0x48>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc26      	bgt.n	8006b22 <_printf_common+0x96>
 8006ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad8:	1e13      	subs	r3, r2, #0
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d42b      	bmi.n	8006b3c <_printf_common+0xb0>
 8006ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d01e      	beq.n	8006b30 <_printf_common+0xa4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	68e5      	ldr	r5, [r4, #12]
 8006af6:	6832      	ldr	r2, [r6, #0]
 8006af8:	f003 0306 	and.w	r3, r3, #6
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	bf08      	it	eq
 8006b00:	1aad      	subeq	r5, r5, r2
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	6922      	ldr	r2, [r4, #16]
 8006b06:	bf0c      	ite	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	2500      	movne	r5, #0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bfc4      	itt	gt
 8006b12:	1a9b      	subgt	r3, r3, r2
 8006b14:	18ed      	addgt	r5, r5, r3
 8006b16:	2600      	movs	r6, #0
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xc8>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xa8>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4649      	mov	r1, r9
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c0      	blx	r8
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c6      	b.n	8006aca <_printf_common+0x3e>
 8006b3c:	18e1      	adds	r1, r4, r3
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2030      	movs	r0, #48	; 0x30
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b46:	4422      	add	r2, r4
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7c7      	b.n	8006ae4 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa4>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x8e>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	7e0f      	ldrb	r7, [r1, #24]
 8006b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b70:	2f78      	cmp	r7, #120	; 0x78
 8006b72:	4691      	mov	r9, r2
 8006b74:	4680      	mov	r8, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	; 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d8 	beq.w	8006d3a <_printf_i+0x1d2>
 8006b8a:	2f58      	cmp	r7, #88	; 0x58
 8006b8c:	f000 80a3 	beq.w	8006cd6 <_printf_i+0x16e>
 8006b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a101      	add	r1, pc, #4	; (adr r1, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d21 	.word	0x08006d21
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006d03 	.word	0x08006d03
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d43 	.word	0x08006d43
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006d0b 	.word	0x08006d0b
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0a3      	b.n	8006d5c <_printf_i+0x1f4>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	6829      	ldr	r1, [r5, #0]
 8006c18:	0606      	lsls	r6, r0, #24
 8006c1a:	f101 0304 	add.w	r3, r1, #4
 8006c1e:	d50a      	bpl.n	8006c36 <_printf_i+0xce>
 8006c20:	680e      	ldr	r6, [r1, #0]
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	2e00      	cmp	r6, #0
 8006c26:	da03      	bge.n	8006c30 <_printf_i+0xc8>
 8006c28:	232d      	movs	r3, #45	; 0x2d
 8006c2a:	4276      	negs	r6, r6
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c30:	485e      	ldr	r0, [pc, #376]	; (8006dac <_printf_i+0x244>)
 8006c32:	230a      	movs	r3, #10
 8006c34:	e019      	b.n	8006c6a <_printf_i+0x102>
 8006c36:	680e      	ldr	r6, [r1, #0]
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c3e:	bf18      	it	ne
 8006c40:	b236      	sxthne	r6, r6
 8006c42:	e7ef      	b.n	8006c24 <_printf_i+0xbc>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	6820      	ldr	r0, [r4, #0]
 8006c48:	1d19      	adds	r1, r3, #4
 8006c4a:	6029      	str	r1, [r5, #0]
 8006c4c:	0601      	lsls	r1, r0, #24
 8006c4e:	d501      	bpl.n	8006c54 <_printf_i+0xec>
 8006c50:	681e      	ldr	r6, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <_printf_i+0xf2>
 8006c54:	0646      	lsls	r6, r0, #25
 8006c56:	d5fb      	bpl.n	8006c50 <_printf_i+0xe8>
 8006c58:	881e      	ldrh	r6, [r3, #0]
 8006c5a:	4854      	ldr	r0, [pc, #336]	; (8006dac <_printf_i+0x244>)
 8006c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c5e:	bf0c      	ite	eq
 8006c60:	2308      	moveq	r3, #8
 8006c62:	230a      	movne	r3, #10
 8006c64:	2100      	movs	r1, #0
 8006c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6a:	6865      	ldr	r5, [r4, #4]
 8006c6c:	60a5      	str	r5, [r4, #8]
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	bfa2      	ittt	ge
 8006c72:	6821      	ldrge	r1, [r4, #0]
 8006c74:	f021 0104 	bicge.w	r1, r1, #4
 8006c78:	6021      	strge	r1, [r4, #0]
 8006c7a:	b90e      	cbnz	r6, 8006c80 <_printf_i+0x118>
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	d04d      	beq.n	8006d1c <_printf_i+0x1b4>
 8006c80:	4615      	mov	r5, r2
 8006c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c86:	fb03 6711 	mls	r7, r3, r1, r6
 8006c8a:	5dc7      	ldrb	r7, [r0, r7]
 8006c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c90:	4637      	mov	r7, r6
 8006c92:	42bb      	cmp	r3, r7
 8006c94:	460e      	mov	r6, r1
 8006c96:	d9f4      	bls.n	8006c82 <_printf_i+0x11a>
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d10b      	bne.n	8006cb4 <_printf_i+0x14c>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	07de      	lsls	r6, r3, #31
 8006ca0:	d508      	bpl.n	8006cb4 <_printf_i+0x14c>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	6861      	ldr	r1, [r4, #4]
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	bfde      	ittt	le
 8006caa:	2330      	movle	r3, #48	; 0x30
 8006cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cb4:	1b52      	subs	r2, r2, r5
 8006cb6:	6122      	str	r2, [r4, #16]
 8006cb8:	f8cd a000 	str.w	sl, [sp]
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	aa03      	add	r2, sp, #12
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	f7ff fee2 	bl	8006a8c <_printf_common>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d14c      	bne.n	8006d66 <_printf_i+0x1fe>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd0:	b004      	add	sp, #16
 8006cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd6:	4835      	ldr	r0, [pc, #212]	; (8006dac <_printf_i+0x244>)
 8006cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cdc:	6829      	ldr	r1, [r5, #0]
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ce4:	6029      	str	r1, [r5, #0]
 8006ce6:	061d      	lsls	r5, r3, #24
 8006ce8:	d514      	bpl.n	8006d14 <_printf_i+0x1ac>
 8006cea:	07df      	lsls	r7, r3, #31
 8006cec:	bf44      	itt	mi
 8006cee:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf2:	6023      	strmi	r3, [r4, #0]
 8006cf4:	b91e      	cbnz	r6, 8006cfe <_printf_i+0x196>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f023 0320 	bic.w	r3, r3, #32
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	2310      	movs	r3, #16
 8006d00:	e7b0      	b.n	8006c64 <_printf_i+0xfc>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f043 0320 	orr.w	r3, r3, #32
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	2378      	movs	r3, #120	; 0x78
 8006d0c:	4828      	ldr	r0, [pc, #160]	; (8006db0 <_printf_i+0x248>)
 8006d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d12:	e7e3      	b.n	8006cdc <_printf_i+0x174>
 8006d14:	0659      	lsls	r1, r3, #25
 8006d16:	bf48      	it	mi
 8006d18:	b2b6      	uxthmi	r6, r6
 8006d1a:	e7e6      	b.n	8006cea <_printf_i+0x182>
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	e7bb      	b.n	8006c98 <_printf_i+0x130>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	6826      	ldr	r6, [r4, #0]
 8006d24:	6961      	ldr	r1, [r4, #20]
 8006d26:	1d18      	adds	r0, r3, #4
 8006d28:	6028      	str	r0, [r5, #0]
 8006d2a:	0635      	lsls	r5, r6, #24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0x1cc>
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0x1d2>
 8006d34:	0670      	lsls	r0, r6, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0x1c8>
 8006d38:	8019      	strh	r1, [r3, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	4615      	mov	r5, r2
 8006d40:	e7ba      	b.n	8006cb8 <_printf_i+0x150>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7f9 fa4e 	bl	80001f0 <memchr>
 8006d54:	b108      	cbz	r0, 8006d5a <_printf_i+0x1f2>
 8006d56:	1b40      	subs	r0, r0, r5
 8006d58:	6060      	str	r0, [r4, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	e7a8      	b.n	8006cb8 <_printf_i+0x150>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0ab      	beq.n	8006ccc <_printf_i+0x164>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	079b      	lsls	r3, r3, #30
 8006d78:	d413      	bmi.n	8006da2 <_printf_i+0x23a>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	bfb8      	it	lt
 8006d82:	4618      	movlt	r0, r3
 8006d84:	e7a4      	b.n	8006cd0 <_printf_i+0x168>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4632      	mov	r2, r6
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	47d0      	blx	sl
 8006d90:	3001      	adds	r0, #1
 8006d92:	d09b      	beq.n	8006ccc <_printf_i+0x164>
 8006d94:	3501      	adds	r5, #1
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	9903      	ldr	r1, [sp, #12]
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dcf2      	bgt.n	8006d86 <_printf_i+0x21e>
 8006da0:	e7eb      	b.n	8006d7a <_printf_i+0x212>
 8006da2:	2500      	movs	r5, #0
 8006da4:	f104 0619 	add.w	r6, r4, #25
 8006da8:	e7f5      	b.n	8006d96 <_printf_i+0x22e>
 8006daa:	bf00      	nop
 8006dac:	08008fa6 	.word	0x08008fa6
 8006db0:	08008fb7 	.word	0x08008fb7

08006db4 <quorem>:
 8006db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	6903      	ldr	r3, [r0, #16]
 8006dba:	690c      	ldr	r4, [r1, #16]
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	f2c0 8081 	blt.w	8006ec6 <quorem+0x112>
 8006dc4:	3c01      	subs	r4, #1
 8006dc6:	f101 0814 	add.w	r8, r1, #20
 8006dca:	f100 0514 	add.w	r5, r0, #20
 8006dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006dd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	429a      	cmp	r2, r3
 8006de0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006de4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006de8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dec:	d331      	bcc.n	8006e52 <quorem+0x9e>
 8006dee:	f04f 0e00 	mov.w	lr, #0
 8006df2:	4640      	mov	r0, r8
 8006df4:	46ac      	mov	ip, r5
 8006df6:	46f2      	mov	sl, lr
 8006df8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dfc:	b293      	uxth	r3, r2
 8006dfe:	fb06 e303 	mla	r3, r6, r3, lr
 8006e02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ebaa 0303 	sub.w	r3, sl, r3
 8006e0c:	f8dc a000 	ldr.w	sl, [ip]
 8006e10:	0c12      	lsrs	r2, r2, #16
 8006e12:	fa13 f38a 	uxtah	r3, r3, sl
 8006e16:	fb06 e202 	mla	r2, r6, r2, lr
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	9b00      	ldr	r3, [sp, #0]
 8006e1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e22:	b292      	uxth	r2, r2
 8006e24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e30:	4581      	cmp	r9, r0
 8006e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e36:	f84c 3b04 	str.w	r3, [ip], #4
 8006e3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e3e:	d2db      	bcs.n	8006df8 <quorem+0x44>
 8006e40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e44:	b92b      	cbnz	r3, 8006e52 <quorem+0x9e>
 8006e46:	9b01      	ldr	r3, [sp, #4]
 8006e48:	3b04      	subs	r3, #4
 8006e4a:	429d      	cmp	r5, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	d32e      	bcc.n	8006eae <quorem+0xfa>
 8006e50:	613c      	str	r4, [r7, #16]
 8006e52:	4638      	mov	r0, r7
 8006e54:	f001 f9c0 	bl	80081d8 <__mcmp>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	db24      	blt.n	8006ea6 <quorem+0xf2>
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f04f 0c00 	mov.w	ip, #0
 8006e64:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e68:	f8d0 e000 	ldr.w	lr, [r0]
 8006e6c:	b293      	uxth	r3, r2
 8006e6e:	ebac 0303 	sub.w	r3, ip, r3
 8006e72:	0c12      	lsrs	r2, r2, #16
 8006e74:	fa13 f38e 	uxtah	r3, r3, lr
 8006e78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e86:	45c1      	cmp	r9, r8
 8006e88:	f840 3b04 	str.w	r3, [r0], #4
 8006e8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e90:	d2e8      	bcs.n	8006e64 <quorem+0xb0>
 8006e92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e9a:	b922      	cbnz	r2, 8006ea6 <quorem+0xf2>
 8006e9c:	3b04      	subs	r3, #4
 8006e9e:	429d      	cmp	r5, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	d30a      	bcc.n	8006eba <quorem+0x106>
 8006ea4:	613c      	str	r4, [r7, #16]
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	d1cc      	bne.n	8006e50 <quorem+0x9c>
 8006eb6:	3c01      	subs	r4, #1
 8006eb8:	e7c7      	b.n	8006e4a <quorem+0x96>
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <quorem+0xf0>
 8006ec2:	3c01      	subs	r4, #1
 8006ec4:	e7eb      	b.n	8006e9e <quorem+0xea>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e7ee      	b.n	8006ea8 <quorem+0xf4>
 8006eca:	0000      	movs	r0, r0
 8006ecc:	0000      	movs	r0, r0
	...

08006ed0 <_dtoa_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	ed2d 8b04 	vpush	{d8-d9}
 8006ed8:	ec57 6b10 	vmov	r6, r7, d0
 8006edc:	b093      	sub	sp, #76	; 0x4c
 8006ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ee4:	9106      	str	r1, [sp, #24]
 8006ee6:	ee10 aa10 	vmov	sl, s0
 8006eea:	4604      	mov	r4, r0
 8006eec:	9209      	str	r2, [sp, #36]	; 0x24
 8006eee:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef0:	46bb      	mov	fp, r7
 8006ef2:	b975      	cbnz	r5, 8006f12 <_dtoa_r+0x42>
 8006ef4:	2010      	movs	r0, #16
 8006ef6:	f000 fed7 	bl	8007ca8 <malloc>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6260      	str	r0, [r4, #36]	; 0x24
 8006efe:	b920      	cbnz	r0, 8006f0a <_dtoa_r+0x3a>
 8006f00:	4ba7      	ldr	r3, [pc, #668]	; (80071a0 <_dtoa_r+0x2d0>)
 8006f02:	21ea      	movs	r1, #234	; 0xea
 8006f04:	48a7      	ldr	r0, [pc, #668]	; (80071a4 <_dtoa_r+0x2d4>)
 8006f06:	f001 fddf 	bl	8008ac8 <__assert_func>
 8006f0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f0e:	6005      	str	r5, [r0, #0]
 8006f10:	60c5      	str	r5, [r0, #12]
 8006f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f14:	6819      	ldr	r1, [r3, #0]
 8006f16:	b151      	cbz	r1, 8006f2e <_dtoa_r+0x5e>
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	604a      	str	r2, [r1, #4]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4093      	lsls	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 ff16 	bl	8007d54 <_Bfree>
 8006f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	1e3b      	subs	r3, r7, #0
 8006f30:	bfaa      	itet	ge
 8006f32:	2300      	movge	r3, #0
 8006f34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006f38:	f8c8 3000 	strge.w	r3, [r8]
 8006f3c:	4b9a      	ldr	r3, [pc, #616]	; (80071a8 <_dtoa_r+0x2d8>)
 8006f3e:	bfbc      	itt	lt
 8006f40:	2201      	movlt	r2, #1
 8006f42:	f8c8 2000 	strlt.w	r2, [r8]
 8006f46:	ea33 030b 	bics.w	r3, r3, fp
 8006f4a:	d11b      	bne.n	8006f84 <_dtoa_r+0xb4>
 8006f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f58:	4333      	orrs	r3, r6
 8006f5a:	f000 8592 	beq.w	8007a82 <_dtoa_r+0xbb2>
 8006f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f60:	b963      	cbnz	r3, 8006f7c <_dtoa_r+0xac>
 8006f62:	4b92      	ldr	r3, [pc, #584]	; (80071ac <_dtoa_r+0x2dc>)
 8006f64:	e022      	b.n	8006fac <_dtoa_r+0xdc>
 8006f66:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <_dtoa_r+0x2e0>)
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	9801      	ldr	r0, [sp, #4]
 8006f72:	b013      	add	sp, #76	; 0x4c
 8006f74:	ecbd 8b04 	vpop	{d8-d9}
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <_dtoa_r+0x2dc>)
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	3303      	adds	r3, #3
 8006f82:	e7f3      	b.n	8006f6c <_dtoa_r+0x9c>
 8006f84:	2200      	movs	r2, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	4650      	mov	r0, sl
 8006f8a:	4659      	mov	r1, fp
 8006f8c:	f7f9 fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f90:	ec4b ab19 	vmov	d9, sl, fp
 8006f94:	4680      	mov	r8, r0
 8006f96:	b158      	cbz	r0, 8006fb0 <_dtoa_r+0xe0>
 8006f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 856b 	beq.w	8007a7c <_dtoa_r+0xbac>
 8006fa6:	4883      	ldr	r0, [pc, #524]	; (80071b4 <_dtoa_r+0x2e4>)
 8006fa8:	6018      	str	r0, [r3, #0]
 8006faa:	1e43      	subs	r3, r0, #1
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	e7df      	b.n	8006f70 <_dtoa_r+0xa0>
 8006fb0:	ec4b ab10 	vmov	d0, sl, fp
 8006fb4:	aa10      	add	r2, sp, #64	; 0x40
 8006fb6:	a911      	add	r1, sp, #68	; 0x44
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f001 f9b3 	bl	8008324 <__d2b>
 8006fbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006fc2:	ee08 0a10 	vmov	s16, r0
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	f000 8084 	beq.w	80070d4 <_dtoa_r+0x204>
 8006fcc:	ee19 3a90 	vmov	r3, s19
 8006fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006fd8:	4656      	mov	r6, sl
 8006fda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006fde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006fe6:	4b74      	ldr	r3, [pc, #464]	; (80071b8 <_dtoa_r+0x2e8>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4630      	mov	r0, r6
 8006fec:	4639      	mov	r1, r7
 8006fee:	f7f9 f953 	bl	8000298 <__aeabi_dsub>
 8006ff2:	a365      	add	r3, pc, #404	; (adr r3, 8007188 <_dtoa_r+0x2b8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 fb06 	bl	8000608 <__aeabi_dmul>
 8006ffc:	a364      	add	r3, pc, #400	; (adr r3, 8007190 <_dtoa_r+0x2c0>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 f94b 	bl	800029c <__adddf3>
 8007006:	4606      	mov	r6, r0
 8007008:	4628      	mov	r0, r5
 800700a:	460f      	mov	r7, r1
 800700c:	f7f9 fa92 	bl	8000534 <__aeabi_i2d>
 8007010:	a361      	add	r3, pc, #388	; (adr r3, 8007198 <_dtoa_r+0x2c8>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 faf7 	bl	8000608 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 f93b 	bl	800029c <__adddf3>
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	f7f9 fd9d 	bl	8000b68 <__aeabi_d2iz>
 800702e:	2200      	movs	r2, #0
 8007030:	9000      	str	r0, [sp, #0]
 8007032:	2300      	movs	r3, #0
 8007034:	4630      	mov	r0, r6
 8007036:	4639      	mov	r1, r7
 8007038:	f7f9 fd58 	bl	8000aec <__aeabi_dcmplt>
 800703c:	b150      	cbz	r0, 8007054 <_dtoa_r+0x184>
 800703e:	9800      	ldr	r0, [sp, #0]
 8007040:	f7f9 fa78 	bl	8000534 <__aeabi_i2d>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800704c:	b910      	cbnz	r0, 8007054 <_dtoa_r+0x184>
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	3b01      	subs	r3, #1
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	9b00      	ldr	r3, [sp, #0]
 8007056:	2b16      	cmp	r3, #22
 8007058:	d85a      	bhi.n	8007110 <_dtoa_r+0x240>
 800705a:	9a00      	ldr	r2, [sp, #0]
 800705c:	4b57      	ldr	r3, [pc, #348]	; (80071bc <_dtoa_r+0x2ec>)
 800705e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	ec51 0b19 	vmov	r0, r1, d9
 800706a:	f7f9 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800706e:	2800      	cmp	r0, #0
 8007070:	d050      	beq.n	8007114 <_dtoa_r+0x244>
 8007072:	9b00      	ldr	r3, [sp, #0]
 8007074:	3b01      	subs	r3, #1
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	930b      	str	r3, [sp, #44]	; 0x2c
 800707c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800707e:	1b5d      	subs	r5, r3, r5
 8007080:	1e6b      	subs	r3, r5, #1
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	bf45      	ittet	mi
 8007086:	f1c5 0301 	rsbmi	r3, r5, #1
 800708a:	9304      	strmi	r3, [sp, #16]
 800708c:	2300      	movpl	r3, #0
 800708e:	2300      	movmi	r3, #0
 8007090:	bf4c      	ite	mi
 8007092:	9305      	strmi	r3, [sp, #20]
 8007094:	9304      	strpl	r3, [sp, #16]
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db3d      	blt.n	8007118 <_dtoa_r+0x248>
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	9a00      	ldr	r2, [sp, #0]
 80070a0:	920a      	str	r2, [sp, #40]	; 0x28
 80070a2:	4413      	add	r3, r2
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	9b06      	ldr	r3, [sp, #24]
 80070ac:	2b09      	cmp	r3, #9
 80070ae:	f200 8089 	bhi.w	80071c4 <_dtoa_r+0x2f4>
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	bfc4      	itt	gt
 80070b6:	3b04      	subgt	r3, #4
 80070b8:	9306      	strgt	r3, [sp, #24]
 80070ba:	9b06      	ldr	r3, [sp, #24]
 80070bc:	f1a3 0302 	sub.w	r3, r3, #2
 80070c0:	bfcc      	ite	gt
 80070c2:	2500      	movgt	r5, #0
 80070c4:	2501      	movle	r5, #1
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	f200 8087 	bhi.w	80071da <_dtoa_r+0x30a>
 80070cc:	e8df f003 	tbb	[pc, r3]
 80070d0:	59383a2d 	.word	0x59383a2d
 80070d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80070d8:	441d      	add	r5, r3
 80070da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80070de:	2b20      	cmp	r3, #32
 80070e0:	bfc1      	itttt	gt
 80070e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80070ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80070ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070f2:	bfda      	itte	le
 80070f4:	f1c3 0320 	rsble	r3, r3, #32
 80070f8:	fa06 f003 	lslle.w	r0, r6, r3
 80070fc:	4318      	orrgt	r0, r3
 80070fe:	f7f9 fa09 	bl	8000514 <__aeabi_ui2d>
 8007102:	2301      	movs	r3, #1
 8007104:	4606      	mov	r6, r0
 8007106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800710a:	3d01      	subs	r5, #1
 800710c:	930e      	str	r3, [sp, #56]	; 0x38
 800710e:	e76a      	b.n	8006fe6 <_dtoa_r+0x116>
 8007110:	2301      	movs	r3, #1
 8007112:	e7b2      	b.n	800707a <_dtoa_r+0x1aa>
 8007114:	900b      	str	r0, [sp, #44]	; 0x2c
 8007116:	e7b1      	b.n	800707c <_dtoa_r+0x1ac>
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	9a00      	ldr	r2, [sp, #0]
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	9304      	str	r3, [sp, #16]
 8007120:	4253      	negs	r3, r2
 8007122:	9307      	str	r3, [sp, #28]
 8007124:	2300      	movs	r3, #0
 8007126:	930a      	str	r3, [sp, #40]	; 0x28
 8007128:	e7bf      	b.n	80070aa <_dtoa_r+0x1da>
 800712a:	2300      	movs	r3, #0
 800712c:	9308      	str	r3, [sp, #32]
 800712e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007130:	2b00      	cmp	r3, #0
 8007132:	dc55      	bgt.n	80071e0 <_dtoa_r+0x310>
 8007134:	2301      	movs	r3, #1
 8007136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800713a:	461a      	mov	r2, r3
 800713c:	9209      	str	r2, [sp, #36]	; 0x24
 800713e:	e00c      	b.n	800715a <_dtoa_r+0x28a>
 8007140:	2301      	movs	r3, #1
 8007142:	e7f3      	b.n	800712c <_dtoa_r+0x25c>
 8007144:	2300      	movs	r3, #0
 8007146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007148:	9308      	str	r3, [sp, #32]
 800714a:	9b00      	ldr	r3, [sp, #0]
 800714c:	4413      	add	r3, r2
 800714e:	9302      	str	r3, [sp, #8]
 8007150:	3301      	adds	r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	9303      	str	r3, [sp, #12]
 8007156:	bfb8      	it	lt
 8007158:	2301      	movlt	r3, #1
 800715a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800715c:	2200      	movs	r2, #0
 800715e:	6042      	str	r2, [r0, #4]
 8007160:	2204      	movs	r2, #4
 8007162:	f102 0614 	add.w	r6, r2, #20
 8007166:	429e      	cmp	r6, r3
 8007168:	6841      	ldr	r1, [r0, #4]
 800716a:	d93d      	bls.n	80071e8 <_dtoa_r+0x318>
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fdb1 	bl	8007cd4 <_Balloc>
 8007172:	9001      	str	r0, [sp, #4]
 8007174:	2800      	cmp	r0, #0
 8007176:	d13b      	bne.n	80071f0 <_dtoa_r+0x320>
 8007178:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <_dtoa_r+0x2f0>)
 800717a:	4602      	mov	r2, r0
 800717c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007180:	e6c0      	b.n	8006f04 <_dtoa_r+0x34>
 8007182:	2301      	movs	r3, #1
 8007184:	e7df      	b.n	8007146 <_dtoa_r+0x276>
 8007186:	bf00      	nop
 8007188:	636f4361 	.word	0x636f4361
 800718c:	3fd287a7 	.word	0x3fd287a7
 8007190:	8b60c8b3 	.word	0x8b60c8b3
 8007194:	3fc68a28 	.word	0x3fc68a28
 8007198:	509f79fb 	.word	0x509f79fb
 800719c:	3fd34413 	.word	0x3fd34413
 80071a0:	08008fd5 	.word	0x08008fd5
 80071a4:	08008fec 	.word	0x08008fec
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	08008fd1 	.word	0x08008fd1
 80071b0:	08008fc8 	.word	0x08008fc8
 80071b4:	08008fa5 	.word	0x08008fa5
 80071b8:	3ff80000 	.word	0x3ff80000
 80071bc:	08009140 	.word	0x08009140
 80071c0:	08009047 	.word	0x08009047
 80071c4:	2501      	movs	r5, #1
 80071c6:	2300      	movs	r3, #0
 80071c8:	9306      	str	r3, [sp, #24]
 80071ca:	9508      	str	r5, [sp, #32]
 80071cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2312      	movs	r3, #18
 80071d8:	e7b0      	b.n	800713c <_dtoa_r+0x26c>
 80071da:	2301      	movs	r3, #1
 80071dc:	9308      	str	r3, [sp, #32]
 80071de:	e7f5      	b.n	80071cc <_dtoa_r+0x2fc>
 80071e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071e6:	e7b8      	b.n	800715a <_dtoa_r+0x28a>
 80071e8:	3101      	adds	r1, #1
 80071ea:	6041      	str	r1, [r0, #4]
 80071ec:	0052      	lsls	r2, r2, #1
 80071ee:	e7b8      	b.n	8007162 <_dtoa_r+0x292>
 80071f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f2:	9a01      	ldr	r2, [sp, #4]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	2b0e      	cmp	r3, #14
 80071fa:	f200 809d 	bhi.w	8007338 <_dtoa_r+0x468>
 80071fe:	2d00      	cmp	r5, #0
 8007200:	f000 809a 	beq.w	8007338 <_dtoa_r+0x468>
 8007204:	9b00      	ldr	r3, [sp, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd32      	ble.n	8007270 <_dtoa_r+0x3a0>
 800720a:	4ab7      	ldr	r2, [pc, #732]	; (80074e8 <_dtoa_r+0x618>)
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	05d8      	lsls	r0, r3, #23
 800721c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007220:	d516      	bpl.n	8007250 <_dtoa_r+0x380>
 8007222:	4bb2      	ldr	r3, [pc, #712]	; (80074ec <_dtoa_r+0x61c>)
 8007224:	ec51 0b19 	vmov	r0, r1, d9
 8007228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800722c:	f7f9 fb16 	bl	800085c <__aeabi_ddiv>
 8007230:	f007 070f 	and.w	r7, r7, #15
 8007234:	4682      	mov	sl, r0
 8007236:	468b      	mov	fp, r1
 8007238:	2503      	movs	r5, #3
 800723a:	4eac      	ldr	r6, [pc, #688]	; (80074ec <_dtoa_r+0x61c>)
 800723c:	b957      	cbnz	r7, 8007254 <_dtoa_r+0x384>
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	4650      	mov	r0, sl
 8007244:	4659      	mov	r1, fp
 8007246:	f7f9 fb09 	bl	800085c <__aeabi_ddiv>
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	e028      	b.n	80072a2 <_dtoa_r+0x3d2>
 8007250:	2502      	movs	r5, #2
 8007252:	e7f2      	b.n	800723a <_dtoa_r+0x36a>
 8007254:	07f9      	lsls	r1, r7, #31
 8007256:	d508      	bpl.n	800726a <_dtoa_r+0x39a>
 8007258:	4640      	mov	r0, r8
 800725a:	4649      	mov	r1, r9
 800725c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007260:	f7f9 f9d2 	bl	8000608 <__aeabi_dmul>
 8007264:	3501      	adds	r5, #1
 8007266:	4680      	mov	r8, r0
 8007268:	4689      	mov	r9, r1
 800726a:	107f      	asrs	r7, r7, #1
 800726c:	3608      	adds	r6, #8
 800726e:	e7e5      	b.n	800723c <_dtoa_r+0x36c>
 8007270:	f000 809b 	beq.w	80073aa <_dtoa_r+0x4da>
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	4f9d      	ldr	r7, [pc, #628]	; (80074ec <_dtoa_r+0x61c>)
 8007278:	425e      	negs	r6, r3
 800727a:	4b9b      	ldr	r3, [pc, #620]	; (80074e8 <_dtoa_r+0x618>)
 800727c:	f006 020f 	and.w	r2, r6, #15
 8007280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	ec51 0b19 	vmov	r0, r1, d9
 800728c:	f7f9 f9bc 	bl	8000608 <__aeabi_dmul>
 8007290:	1136      	asrs	r6, r6, #4
 8007292:	4682      	mov	sl, r0
 8007294:	468b      	mov	fp, r1
 8007296:	2300      	movs	r3, #0
 8007298:	2502      	movs	r5, #2
 800729a:	2e00      	cmp	r6, #0
 800729c:	d17a      	bne.n	8007394 <_dtoa_r+0x4c4>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1d3      	bne.n	800724a <_dtoa_r+0x37a>
 80072a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8082 	beq.w	80073ae <_dtoa_r+0x4de>
 80072aa:	4b91      	ldr	r3, [pc, #580]	; (80074f0 <_dtoa_r+0x620>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	4650      	mov	r0, sl
 80072b0:	4659      	mov	r1, fp
 80072b2:	f7f9 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d079      	beq.n	80073ae <_dtoa_r+0x4de>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d076      	beq.n	80073ae <_dtoa_r+0x4de>
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dd36      	ble.n	8007334 <_dtoa_r+0x464>
 80072c6:	9b00      	ldr	r3, [sp, #0]
 80072c8:	4650      	mov	r0, sl
 80072ca:	4659      	mov	r1, fp
 80072cc:	1e5f      	subs	r7, r3, #1
 80072ce:	2200      	movs	r2, #0
 80072d0:	4b88      	ldr	r3, [pc, #544]	; (80074f4 <_dtoa_r+0x624>)
 80072d2:	f7f9 f999 	bl	8000608 <__aeabi_dmul>
 80072d6:	9e02      	ldr	r6, [sp, #8]
 80072d8:	4682      	mov	sl, r0
 80072da:	468b      	mov	fp, r1
 80072dc:	3501      	adds	r5, #1
 80072de:	4628      	mov	r0, r5
 80072e0:	f7f9 f928 	bl	8000534 <__aeabi_i2d>
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	f7f9 f98e 	bl	8000608 <__aeabi_dmul>
 80072ec:	4b82      	ldr	r3, [pc, #520]	; (80074f8 <_dtoa_r+0x628>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	f7f8 ffd4 	bl	800029c <__adddf3>
 80072f4:	46d0      	mov	r8, sl
 80072f6:	46d9      	mov	r9, fp
 80072f8:	4682      	mov	sl, r0
 80072fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80072fe:	2e00      	cmp	r6, #0
 8007300:	d158      	bne.n	80073b4 <_dtoa_r+0x4e4>
 8007302:	4b7e      	ldr	r3, [pc, #504]	; (80074fc <_dtoa_r+0x62c>)
 8007304:	2200      	movs	r2, #0
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ffc5 	bl	8000298 <__aeabi_dsub>
 800730e:	4652      	mov	r2, sl
 8007310:	465b      	mov	r3, fp
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	f7f9 fc07 	bl	8000b28 <__aeabi_dcmpgt>
 800731a:	2800      	cmp	r0, #0
 800731c:	f040 8295 	bne.w	800784a <_dtoa_r+0x97a>
 8007320:	4652      	mov	r2, sl
 8007322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7f9 fbdf 	bl	8000aec <__aeabi_dcmplt>
 800732e:	2800      	cmp	r0, #0
 8007330:	f040 8289 	bne.w	8007846 <_dtoa_r+0x976>
 8007334:	ec5b ab19 	vmov	sl, fp, d9
 8007338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800733a:	2b00      	cmp	r3, #0
 800733c:	f2c0 8148 	blt.w	80075d0 <_dtoa_r+0x700>
 8007340:	9a00      	ldr	r2, [sp, #0]
 8007342:	2a0e      	cmp	r2, #14
 8007344:	f300 8144 	bgt.w	80075d0 <_dtoa_r+0x700>
 8007348:	4b67      	ldr	r3, [pc, #412]	; (80074e8 <_dtoa_r+0x618>)
 800734a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f280 80d5 	bge.w	8007504 <_dtoa_r+0x634>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f300 80d1 	bgt.w	8007504 <_dtoa_r+0x634>
 8007362:	f040 826f 	bne.w	8007844 <_dtoa_r+0x974>
 8007366:	4b65      	ldr	r3, [pc, #404]	; (80074fc <_dtoa_r+0x62c>)
 8007368:	2200      	movs	r2, #0
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f9 f94b 	bl	8000608 <__aeabi_dmul>
 8007372:	4652      	mov	r2, sl
 8007374:	465b      	mov	r3, fp
 8007376:	f7f9 fbcd 	bl	8000b14 <__aeabi_dcmpge>
 800737a:	9e03      	ldr	r6, [sp, #12]
 800737c:	4637      	mov	r7, r6
 800737e:	2800      	cmp	r0, #0
 8007380:	f040 8245 	bne.w	800780e <_dtoa_r+0x93e>
 8007384:	9d01      	ldr	r5, [sp, #4]
 8007386:	2331      	movs	r3, #49	; 0x31
 8007388:	f805 3b01 	strb.w	r3, [r5], #1
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	e240      	b.n	8007816 <_dtoa_r+0x946>
 8007394:	07f2      	lsls	r2, r6, #31
 8007396:	d505      	bpl.n	80073a4 <_dtoa_r+0x4d4>
 8007398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739c:	f7f9 f934 	bl	8000608 <__aeabi_dmul>
 80073a0:	3501      	adds	r5, #1
 80073a2:	2301      	movs	r3, #1
 80073a4:	1076      	asrs	r6, r6, #1
 80073a6:	3708      	adds	r7, #8
 80073a8:	e777      	b.n	800729a <_dtoa_r+0x3ca>
 80073aa:	2502      	movs	r5, #2
 80073ac:	e779      	b.n	80072a2 <_dtoa_r+0x3d2>
 80073ae:	9f00      	ldr	r7, [sp, #0]
 80073b0:	9e03      	ldr	r6, [sp, #12]
 80073b2:	e794      	b.n	80072de <_dtoa_r+0x40e>
 80073b4:	9901      	ldr	r1, [sp, #4]
 80073b6:	4b4c      	ldr	r3, [pc, #304]	; (80074e8 <_dtoa_r+0x618>)
 80073b8:	4431      	add	r1, r6
 80073ba:	910d      	str	r1, [sp, #52]	; 0x34
 80073bc:	9908      	ldr	r1, [sp, #32]
 80073be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073c6:	2900      	cmp	r1, #0
 80073c8:	d043      	beq.n	8007452 <_dtoa_r+0x582>
 80073ca:	494d      	ldr	r1, [pc, #308]	; (8007500 <_dtoa_r+0x630>)
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7f9 fa45 	bl	800085c <__aeabi_ddiv>
 80073d2:	4652      	mov	r2, sl
 80073d4:	465b      	mov	r3, fp
 80073d6:	f7f8 ff5f 	bl	8000298 <__aeabi_dsub>
 80073da:	9d01      	ldr	r5, [sp, #4]
 80073dc:	4682      	mov	sl, r0
 80073de:	468b      	mov	fp, r1
 80073e0:	4649      	mov	r1, r9
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7f9 fbc0 	bl	8000b68 <__aeabi_d2iz>
 80073e8:	4606      	mov	r6, r0
 80073ea:	f7f9 f8a3 	bl	8000534 <__aeabi_i2d>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f8 ff4f 	bl	8000298 <__aeabi_dsub>
 80073fa:	3630      	adds	r6, #48	; 0x30
 80073fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007400:	4652      	mov	r2, sl
 8007402:	465b      	mov	r3, fp
 8007404:	4680      	mov	r8, r0
 8007406:	4689      	mov	r9, r1
 8007408:	f7f9 fb70 	bl	8000aec <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d163      	bne.n	80074d8 <_dtoa_r+0x608>
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	4936      	ldr	r1, [pc, #216]	; (80074f0 <_dtoa_r+0x620>)
 8007416:	2000      	movs	r0, #0
 8007418:	f7f8 ff3e 	bl	8000298 <__aeabi_dsub>
 800741c:	4652      	mov	r2, sl
 800741e:	465b      	mov	r3, fp
 8007420:	f7f9 fb64 	bl	8000aec <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	f040 80b5 	bne.w	8007594 <_dtoa_r+0x6c4>
 800742a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800742c:	429d      	cmp	r5, r3
 800742e:	d081      	beq.n	8007334 <_dtoa_r+0x464>
 8007430:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <_dtoa_r+0x624>)
 8007432:	2200      	movs	r2, #0
 8007434:	4650      	mov	r0, sl
 8007436:	4659      	mov	r1, fp
 8007438:	f7f9 f8e6 	bl	8000608 <__aeabi_dmul>
 800743c:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <_dtoa_r+0x624>)
 800743e:	4682      	mov	sl, r0
 8007440:	468b      	mov	fp, r1
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	2200      	movs	r2, #0
 8007448:	f7f9 f8de 	bl	8000608 <__aeabi_dmul>
 800744c:	4680      	mov	r8, r0
 800744e:	4689      	mov	r9, r1
 8007450:	e7c6      	b.n	80073e0 <_dtoa_r+0x510>
 8007452:	4650      	mov	r0, sl
 8007454:	4659      	mov	r1, fp
 8007456:	f7f9 f8d7 	bl	8000608 <__aeabi_dmul>
 800745a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800745c:	9d01      	ldr	r5, [sp, #4]
 800745e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	4649      	mov	r1, r9
 8007466:	4640      	mov	r0, r8
 8007468:	f7f9 fb7e 	bl	8000b68 <__aeabi_d2iz>
 800746c:	4606      	mov	r6, r0
 800746e:	f7f9 f861 	bl	8000534 <__aeabi_i2d>
 8007472:	3630      	adds	r6, #48	; 0x30
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	f7f8 ff0c 	bl	8000298 <__aeabi_dsub>
 8007480:	f805 6b01 	strb.w	r6, [r5], #1
 8007484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007486:	429d      	cmp	r5, r3
 8007488:	4680      	mov	r8, r0
 800748a:	4689      	mov	r9, r1
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	d124      	bne.n	80074dc <_dtoa_r+0x60c>
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <_dtoa_r+0x630>)
 8007494:	4650      	mov	r0, sl
 8007496:	4659      	mov	r1, fp
 8007498:	f7f8 ff00 	bl	800029c <__adddf3>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	f7f9 fb40 	bl	8000b28 <__aeabi_dcmpgt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d173      	bne.n	8007594 <_dtoa_r+0x6c4>
 80074ac:	4652      	mov	r2, sl
 80074ae:	465b      	mov	r3, fp
 80074b0:	4913      	ldr	r1, [pc, #76]	; (8007500 <_dtoa_r+0x630>)
 80074b2:	2000      	movs	r0, #0
 80074b4:	f7f8 fef0 	bl	8000298 <__aeabi_dsub>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	f7f9 fb14 	bl	8000aec <__aeabi_dcmplt>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	f43f af35 	beq.w	8007334 <_dtoa_r+0x464>
 80074ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80074cc:	1e6b      	subs	r3, r5, #1
 80074ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d0f8      	beq.n	80074ca <_dtoa_r+0x5fa>
 80074d8:	9700      	str	r7, [sp, #0]
 80074da:	e049      	b.n	8007570 <_dtoa_r+0x6a0>
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <_dtoa_r+0x624>)
 80074de:	f7f9 f893 	bl	8000608 <__aeabi_dmul>
 80074e2:	4680      	mov	r8, r0
 80074e4:	4689      	mov	r9, r1
 80074e6:	e7bd      	b.n	8007464 <_dtoa_r+0x594>
 80074e8:	08009140 	.word	0x08009140
 80074ec:	08009118 	.word	0x08009118
 80074f0:	3ff00000 	.word	0x3ff00000
 80074f4:	40240000 	.word	0x40240000
 80074f8:	401c0000 	.word	0x401c0000
 80074fc:	40140000 	.word	0x40140000
 8007500:	3fe00000 	.word	0x3fe00000
 8007504:	9d01      	ldr	r5, [sp, #4]
 8007506:	4656      	mov	r6, sl
 8007508:	465f      	mov	r7, fp
 800750a:	4642      	mov	r2, r8
 800750c:	464b      	mov	r3, r9
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f9 f9a3 	bl	800085c <__aeabi_ddiv>
 8007516:	f7f9 fb27 	bl	8000b68 <__aeabi_d2iz>
 800751a:	4682      	mov	sl, r0
 800751c:	f7f9 f80a 	bl	8000534 <__aeabi_i2d>
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4630      	mov	r0, r6
 800752e:	4639      	mov	r1, r7
 8007530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007534:	f7f8 feb0 	bl	8000298 <__aeabi_dsub>
 8007538:	f805 6b01 	strb.w	r6, [r5], #1
 800753c:	9e01      	ldr	r6, [sp, #4]
 800753e:	9f03      	ldr	r7, [sp, #12]
 8007540:	1bae      	subs	r6, r5, r6
 8007542:	42b7      	cmp	r7, r6
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	d135      	bne.n	80075b6 <_dtoa_r+0x6e6>
 800754a:	f7f8 fea7 	bl	800029c <__adddf3>
 800754e:	4642      	mov	r2, r8
 8007550:	464b      	mov	r3, r9
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	f7f9 fae7 	bl	8000b28 <__aeabi_dcmpgt>
 800755a:	b9d0      	cbnz	r0, 8007592 <_dtoa_r+0x6c2>
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007568:	b110      	cbz	r0, 8007570 <_dtoa_r+0x6a0>
 800756a:	f01a 0f01 	tst.w	sl, #1
 800756e:	d110      	bne.n	8007592 <_dtoa_r+0x6c2>
 8007570:	4620      	mov	r0, r4
 8007572:	ee18 1a10 	vmov	r1, s16
 8007576:	f000 fbed 	bl	8007d54 <_Bfree>
 800757a:	2300      	movs	r3, #0
 800757c:	9800      	ldr	r0, [sp, #0]
 800757e:	702b      	strb	r3, [r5, #0]
 8007580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007582:	3001      	adds	r0, #1
 8007584:	6018      	str	r0, [r3, #0]
 8007586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007588:	2b00      	cmp	r3, #0
 800758a:	f43f acf1 	beq.w	8006f70 <_dtoa_r+0xa0>
 800758e:	601d      	str	r5, [r3, #0]
 8007590:	e4ee      	b.n	8006f70 <_dtoa_r+0xa0>
 8007592:	9f00      	ldr	r7, [sp, #0]
 8007594:	462b      	mov	r3, r5
 8007596:	461d      	mov	r5, r3
 8007598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800759c:	2a39      	cmp	r2, #57	; 0x39
 800759e:	d106      	bne.n	80075ae <_dtoa_r+0x6de>
 80075a0:	9a01      	ldr	r2, [sp, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d1f7      	bne.n	8007596 <_dtoa_r+0x6c6>
 80075a6:	9901      	ldr	r1, [sp, #4]
 80075a8:	2230      	movs	r2, #48	; 0x30
 80075aa:	3701      	adds	r7, #1
 80075ac:	700a      	strb	r2, [r1, #0]
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	3201      	adds	r2, #1
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	e790      	b.n	80074d8 <_dtoa_r+0x608>
 80075b6:	4ba6      	ldr	r3, [pc, #664]	; (8007850 <_dtoa_r+0x980>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	f7f9 f825 	bl	8000608 <__aeabi_dmul>
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4606      	mov	r6, r0
 80075c4:	460f      	mov	r7, r1
 80075c6:	f7f9 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d09d      	beq.n	800750a <_dtoa_r+0x63a>
 80075ce:	e7cf      	b.n	8007570 <_dtoa_r+0x6a0>
 80075d0:	9a08      	ldr	r2, [sp, #32]
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	f000 80d7 	beq.w	8007786 <_dtoa_r+0x8b6>
 80075d8:	9a06      	ldr	r2, [sp, #24]
 80075da:	2a01      	cmp	r2, #1
 80075dc:	f300 80ba 	bgt.w	8007754 <_dtoa_r+0x884>
 80075e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	f000 80b2 	beq.w	800774c <_dtoa_r+0x87c>
 80075e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075ec:	9e07      	ldr	r6, [sp, #28]
 80075ee:	9d04      	ldr	r5, [sp, #16]
 80075f0:	9a04      	ldr	r2, [sp, #16]
 80075f2:	441a      	add	r2, r3
 80075f4:	9204      	str	r2, [sp, #16]
 80075f6:	9a05      	ldr	r2, [sp, #20]
 80075f8:	2101      	movs	r1, #1
 80075fa:	441a      	add	r2, r3
 80075fc:	4620      	mov	r0, r4
 80075fe:	9205      	str	r2, [sp, #20]
 8007600:	f000 fc60 	bl	8007ec4 <__i2b>
 8007604:	4607      	mov	r7, r0
 8007606:	2d00      	cmp	r5, #0
 8007608:	dd0c      	ble.n	8007624 <_dtoa_r+0x754>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dd09      	ble.n	8007624 <_dtoa_r+0x754>
 8007610:	42ab      	cmp	r3, r5
 8007612:	9a04      	ldr	r2, [sp, #16]
 8007614:	bfa8      	it	ge
 8007616:	462b      	movge	r3, r5
 8007618:	1ad2      	subs	r2, r2, r3
 800761a:	9204      	str	r2, [sp, #16]
 800761c:	9a05      	ldr	r2, [sp, #20]
 800761e:	1aed      	subs	r5, r5, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	b31b      	cbz	r3, 8007670 <_dtoa_r+0x7a0>
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80af 	beq.w	800778e <_dtoa_r+0x8be>
 8007630:	2e00      	cmp	r6, #0
 8007632:	dd13      	ble.n	800765c <_dtoa_r+0x78c>
 8007634:	4639      	mov	r1, r7
 8007636:	4632      	mov	r2, r6
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fd03 	bl	8008044 <__pow5mult>
 800763e:	ee18 2a10 	vmov	r2, s16
 8007642:	4601      	mov	r1, r0
 8007644:	4607      	mov	r7, r0
 8007646:	4620      	mov	r0, r4
 8007648:	f000 fc52 	bl	8007ef0 <__multiply>
 800764c:	ee18 1a10 	vmov	r1, s16
 8007650:	4680      	mov	r8, r0
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fb7e 	bl	8007d54 <_Bfree>
 8007658:	ee08 8a10 	vmov	s16, r8
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	1b9a      	subs	r2, r3, r6
 8007660:	d006      	beq.n	8007670 <_dtoa_r+0x7a0>
 8007662:	ee18 1a10 	vmov	r1, s16
 8007666:	4620      	mov	r0, r4
 8007668:	f000 fcec 	bl	8008044 <__pow5mult>
 800766c:	ee08 0a10 	vmov	s16, r0
 8007670:	2101      	movs	r1, #1
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fc26 	bl	8007ec4 <__i2b>
 8007678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767a:	2b00      	cmp	r3, #0
 800767c:	4606      	mov	r6, r0
 800767e:	f340 8088 	ble.w	8007792 <_dtoa_r+0x8c2>
 8007682:	461a      	mov	r2, r3
 8007684:	4601      	mov	r1, r0
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fcdc 	bl	8008044 <__pow5mult>
 800768c:	9b06      	ldr	r3, [sp, #24]
 800768e:	2b01      	cmp	r3, #1
 8007690:	4606      	mov	r6, r0
 8007692:	f340 8081 	ble.w	8007798 <_dtoa_r+0x8c8>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	6933      	ldr	r3, [r6, #16]
 800769c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076a0:	6918      	ldr	r0, [r3, #16]
 80076a2:	f000 fbbf 	bl	8007e24 <__hi0bits>
 80076a6:	f1c0 0020 	rsb	r0, r0, #32
 80076aa:	9b05      	ldr	r3, [sp, #20]
 80076ac:	4418      	add	r0, r3
 80076ae:	f010 001f 	ands.w	r0, r0, #31
 80076b2:	f000 8092 	beq.w	80077da <_dtoa_r+0x90a>
 80076b6:	f1c0 0320 	rsb	r3, r0, #32
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	f340 808a 	ble.w	80077d4 <_dtoa_r+0x904>
 80076c0:	f1c0 001c 	rsb	r0, r0, #28
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	4403      	add	r3, r0
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	4403      	add	r3, r0
 80076ce:	4405      	add	r5, r0
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd07      	ble.n	80076e8 <_dtoa_r+0x818>
 80076d8:	ee18 1a10 	vmov	r1, s16
 80076dc:	461a      	mov	r2, r3
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 fd0a 	bl	80080f8 <__lshift>
 80076e4:	ee08 0a10 	vmov	s16, r0
 80076e8:	9b05      	ldr	r3, [sp, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd05      	ble.n	80076fa <_dtoa_r+0x82a>
 80076ee:	4631      	mov	r1, r6
 80076f0:	461a      	mov	r2, r3
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fd00 	bl	80080f8 <__lshift>
 80076f8:	4606      	mov	r6, r0
 80076fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d06e      	beq.n	80077de <_dtoa_r+0x90e>
 8007700:	ee18 0a10 	vmov	r0, s16
 8007704:	4631      	mov	r1, r6
 8007706:	f000 fd67 	bl	80081d8 <__mcmp>
 800770a:	2800      	cmp	r0, #0
 800770c:	da67      	bge.n	80077de <_dtoa_r+0x90e>
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	3b01      	subs	r3, #1
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	220a      	movs	r2, #10
 800771a:	2300      	movs	r3, #0
 800771c:	4620      	mov	r0, r4
 800771e:	f000 fb3b 	bl	8007d98 <__multadd>
 8007722:	9b08      	ldr	r3, [sp, #32]
 8007724:	ee08 0a10 	vmov	s16, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 81b1 	beq.w	8007a90 <_dtoa_r+0xbc0>
 800772e:	2300      	movs	r3, #0
 8007730:	4639      	mov	r1, r7
 8007732:	220a      	movs	r2, #10
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fb2f 	bl	8007d98 <__multadd>
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	4607      	mov	r7, r0
 8007740:	f300 808e 	bgt.w	8007860 <_dtoa_r+0x990>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	2b02      	cmp	r3, #2
 8007748:	dc51      	bgt.n	80077ee <_dtoa_r+0x91e>
 800774a:	e089      	b.n	8007860 <_dtoa_r+0x990>
 800774c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800774e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007752:	e74b      	b.n	80075ec <_dtoa_r+0x71c>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	1e5e      	subs	r6, r3, #1
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	42b3      	cmp	r3, r6
 800775c:	bfbf      	itttt	lt
 800775e:	9b07      	ldrlt	r3, [sp, #28]
 8007760:	9607      	strlt	r6, [sp, #28]
 8007762:	1af2      	sublt	r2, r6, r3
 8007764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007766:	bfb6      	itet	lt
 8007768:	189b      	addlt	r3, r3, r2
 800776a:	1b9e      	subge	r6, r3, r6
 800776c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	bfb8      	it	lt
 8007772:	2600      	movlt	r6, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	bfb7      	itett	lt
 8007778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800777c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007780:	1a9d      	sublt	r5, r3, r2
 8007782:	2300      	movlt	r3, #0
 8007784:	e734      	b.n	80075f0 <_dtoa_r+0x720>
 8007786:	9e07      	ldr	r6, [sp, #28]
 8007788:	9d04      	ldr	r5, [sp, #16]
 800778a:	9f08      	ldr	r7, [sp, #32]
 800778c:	e73b      	b.n	8007606 <_dtoa_r+0x736>
 800778e:	9a07      	ldr	r2, [sp, #28]
 8007790:	e767      	b.n	8007662 <_dtoa_r+0x792>
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	2b01      	cmp	r3, #1
 8007796:	dc18      	bgt.n	80077ca <_dtoa_r+0x8fa>
 8007798:	f1ba 0f00 	cmp.w	sl, #0
 800779c:	d115      	bne.n	80077ca <_dtoa_r+0x8fa>
 800779e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077a2:	b993      	cbnz	r3, 80077ca <_dtoa_r+0x8fa>
 80077a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077a8:	0d1b      	lsrs	r3, r3, #20
 80077aa:	051b      	lsls	r3, r3, #20
 80077ac:	b183      	cbz	r3, 80077d0 <_dtoa_r+0x900>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	3301      	adds	r3, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9b05      	ldr	r3, [sp, #20]
 80077b6:	3301      	adds	r3, #1
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f04f 0801 	mov.w	r8, #1
 80077be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f47f af6a 	bne.w	800769a <_dtoa_r+0x7ca>
 80077c6:	2001      	movs	r0, #1
 80077c8:	e76f      	b.n	80076aa <_dtoa_r+0x7da>
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	e7f6      	b.n	80077be <_dtoa_r+0x8ee>
 80077d0:	4698      	mov	r8, r3
 80077d2:	e7f4      	b.n	80077be <_dtoa_r+0x8ee>
 80077d4:	f43f af7d 	beq.w	80076d2 <_dtoa_r+0x802>
 80077d8:	4618      	mov	r0, r3
 80077da:	301c      	adds	r0, #28
 80077dc:	e772      	b.n	80076c4 <_dtoa_r+0x7f4>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dc37      	bgt.n	8007854 <_dtoa_r+0x984>
 80077e4:	9b06      	ldr	r3, [sp, #24]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	dd34      	ble.n	8007854 <_dtoa_r+0x984>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	b96b      	cbnz	r3, 800780e <_dtoa_r+0x93e>
 80077f2:	4631      	mov	r1, r6
 80077f4:	2205      	movs	r2, #5
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 face 	bl	8007d98 <__multadd>
 80077fc:	4601      	mov	r1, r0
 80077fe:	4606      	mov	r6, r0
 8007800:	ee18 0a10 	vmov	r0, s16
 8007804:	f000 fce8 	bl	80081d8 <__mcmp>
 8007808:	2800      	cmp	r0, #0
 800780a:	f73f adbb 	bgt.w	8007384 <_dtoa_r+0x4b4>
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	9d01      	ldr	r5, [sp, #4]
 8007812:	43db      	mvns	r3, r3
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	4631      	mov	r1, r6
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fa99 	bl	8007d54 <_Bfree>
 8007822:	2f00      	cmp	r7, #0
 8007824:	f43f aea4 	beq.w	8007570 <_dtoa_r+0x6a0>
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	d005      	beq.n	800783a <_dtoa_r+0x96a>
 800782e:	45b8      	cmp	r8, r7
 8007830:	d003      	beq.n	800783a <_dtoa_r+0x96a>
 8007832:	4641      	mov	r1, r8
 8007834:	4620      	mov	r0, r4
 8007836:	f000 fa8d 	bl	8007d54 <_Bfree>
 800783a:	4639      	mov	r1, r7
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fa89 	bl	8007d54 <_Bfree>
 8007842:	e695      	b.n	8007570 <_dtoa_r+0x6a0>
 8007844:	2600      	movs	r6, #0
 8007846:	4637      	mov	r7, r6
 8007848:	e7e1      	b.n	800780e <_dtoa_r+0x93e>
 800784a:	9700      	str	r7, [sp, #0]
 800784c:	4637      	mov	r7, r6
 800784e:	e599      	b.n	8007384 <_dtoa_r+0x4b4>
 8007850:	40240000 	.word	0x40240000
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80ca 	beq.w	80079f0 <_dtoa_r+0xb20>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	9302      	str	r3, [sp, #8]
 8007860:	2d00      	cmp	r5, #0
 8007862:	dd05      	ble.n	8007870 <_dtoa_r+0x9a0>
 8007864:	4639      	mov	r1, r7
 8007866:	462a      	mov	r2, r5
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fc45 	bl	80080f8 <__lshift>
 800786e:	4607      	mov	r7, r0
 8007870:	f1b8 0f00 	cmp.w	r8, #0
 8007874:	d05b      	beq.n	800792e <_dtoa_r+0xa5e>
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4620      	mov	r0, r4
 800787a:	f000 fa2b 	bl	8007cd4 <_Balloc>
 800787e:	4605      	mov	r5, r0
 8007880:	b928      	cbnz	r0, 800788e <_dtoa_r+0x9be>
 8007882:	4b87      	ldr	r3, [pc, #540]	; (8007aa0 <_dtoa_r+0xbd0>)
 8007884:	4602      	mov	r2, r0
 8007886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800788a:	f7ff bb3b 	b.w	8006f04 <_dtoa_r+0x34>
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	3202      	adds	r2, #2
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	f107 010c 	add.w	r1, r7, #12
 8007898:	300c      	adds	r0, #12
 800789a:	f000 fa0d 	bl	8007cb8 <memcpy>
 800789e:	2201      	movs	r2, #1
 80078a0:	4629      	mov	r1, r5
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 fc28 	bl	80080f8 <__lshift>
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	f103 0901 	add.w	r9, r3, #1
 80078ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	9305      	str	r3, [sp, #20]
 80078b6:	f00a 0301 	and.w	r3, sl, #1
 80078ba:	46b8      	mov	r8, r7
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	4607      	mov	r7, r0
 80078c0:	4631      	mov	r1, r6
 80078c2:	ee18 0a10 	vmov	r0, s16
 80078c6:	f7ff fa75 	bl	8006db4 <quorem>
 80078ca:	4641      	mov	r1, r8
 80078cc:	9002      	str	r0, [sp, #8]
 80078ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078d2:	ee18 0a10 	vmov	r0, s16
 80078d6:	f000 fc7f 	bl	80081d8 <__mcmp>
 80078da:	463a      	mov	r2, r7
 80078dc:	9003      	str	r0, [sp, #12]
 80078de:	4631      	mov	r1, r6
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 fc95 	bl	8008210 <__mdiff>
 80078e6:	68c2      	ldr	r2, [r0, #12]
 80078e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80078ec:	4605      	mov	r5, r0
 80078ee:	bb02      	cbnz	r2, 8007932 <_dtoa_r+0xa62>
 80078f0:	4601      	mov	r1, r0
 80078f2:	ee18 0a10 	vmov	r0, s16
 80078f6:	f000 fc6f 	bl	80081d8 <__mcmp>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4629      	mov	r1, r5
 80078fe:	4620      	mov	r0, r4
 8007900:	9207      	str	r2, [sp, #28]
 8007902:	f000 fa27 	bl	8007d54 <_Bfree>
 8007906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800790a:	ea43 0102 	orr.w	r1, r3, r2
 800790e:	9b04      	ldr	r3, [sp, #16]
 8007910:	430b      	orrs	r3, r1
 8007912:	464d      	mov	r5, r9
 8007914:	d10f      	bne.n	8007936 <_dtoa_r+0xa66>
 8007916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800791a:	d02a      	beq.n	8007972 <_dtoa_r+0xaa2>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dd02      	ble.n	8007928 <_dtoa_r+0xa58>
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007928:	f88b a000 	strb.w	sl, [fp]
 800792c:	e775      	b.n	800781a <_dtoa_r+0x94a>
 800792e:	4638      	mov	r0, r7
 8007930:	e7ba      	b.n	80078a8 <_dtoa_r+0x9d8>
 8007932:	2201      	movs	r2, #1
 8007934:	e7e2      	b.n	80078fc <_dtoa_r+0xa2c>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db04      	blt.n	8007946 <_dtoa_r+0xa76>
 800793c:	9906      	ldr	r1, [sp, #24]
 800793e:	430b      	orrs	r3, r1
 8007940:	9904      	ldr	r1, [sp, #16]
 8007942:	430b      	orrs	r3, r1
 8007944:	d122      	bne.n	800798c <_dtoa_r+0xabc>
 8007946:	2a00      	cmp	r2, #0
 8007948:	ddee      	ble.n	8007928 <_dtoa_r+0xa58>
 800794a:	ee18 1a10 	vmov	r1, s16
 800794e:	2201      	movs	r2, #1
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fbd1 	bl	80080f8 <__lshift>
 8007956:	4631      	mov	r1, r6
 8007958:	ee08 0a10 	vmov	s16, r0
 800795c:	f000 fc3c 	bl	80081d8 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	dc03      	bgt.n	800796c <_dtoa_r+0xa9c>
 8007964:	d1e0      	bne.n	8007928 <_dtoa_r+0xa58>
 8007966:	f01a 0f01 	tst.w	sl, #1
 800796a:	d0dd      	beq.n	8007928 <_dtoa_r+0xa58>
 800796c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007970:	d1d7      	bne.n	8007922 <_dtoa_r+0xa52>
 8007972:	2339      	movs	r3, #57	; 0x39
 8007974:	f88b 3000 	strb.w	r3, [fp]
 8007978:	462b      	mov	r3, r5
 800797a:	461d      	mov	r5, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007982:	2a39      	cmp	r2, #57	; 0x39
 8007984:	d071      	beq.n	8007a6a <_dtoa_r+0xb9a>
 8007986:	3201      	adds	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e746      	b.n	800781a <_dtoa_r+0x94a>
 800798c:	2a00      	cmp	r2, #0
 800798e:	dd07      	ble.n	80079a0 <_dtoa_r+0xad0>
 8007990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007994:	d0ed      	beq.n	8007972 <_dtoa_r+0xaa2>
 8007996:	f10a 0301 	add.w	r3, sl, #1
 800799a:	f88b 3000 	strb.w	r3, [fp]
 800799e:	e73c      	b.n	800781a <_dtoa_r+0x94a>
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80079a6:	4599      	cmp	r9, r3
 80079a8:	d047      	beq.n	8007a3a <_dtoa_r+0xb6a>
 80079aa:	ee18 1a10 	vmov	r1, s16
 80079ae:	2300      	movs	r3, #0
 80079b0:	220a      	movs	r2, #10
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f9f0 	bl	8007d98 <__multadd>
 80079b8:	45b8      	cmp	r8, r7
 80079ba:	ee08 0a10 	vmov	s16, r0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f04f 020a 	mov.w	r2, #10
 80079c6:	4641      	mov	r1, r8
 80079c8:	4620      	mov	r0, r4
 80079ca:	d106      	bne.n	80079da <_dtoa_r+0xb0a>
 80079cc:	f000 f9e4 	bl	8007d98 <__multadd>
 80079d0:	4680      	mov	r8, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	f109 0901 	add.w	r9, r9, #1
 80079d8:	e772      	b.n	80078c0 <_dtoa_r+0x9f0>
 80079da:	f000 f9dd 	bl	8007d98 <__multadd>
 80079de:	4639      	mov	r1, r7
 80079e0:	4680      	mov	r8, r0
 80079e2:	2300      	movs	r3, #0
 80079e4:	220a      	movs	r2, #10
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f9d6 	bl	8007d98 <__multadd>
 80079ec:	4607      	mov	r7, r0
 80079ee:	e7f1      	b.n	80079d4 <_dtoa_r+0xb04>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	9d01      	ldr	r5, [sp, #4]
 80079f6:	ee18 0a10 	vmov	r0, s16
 80079fa:	4631      	mov	r1, r6
 80079fc:	f7ff f9da 	bl	8006db4 <quorem>
 8007a00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a04:	9b01      	ldr	r3, [sp, #4]
 8007a06:	f805 ab01 	strb.w	sl, [r5], #1
 8007a0a:	1aea      	subs	r2, r5, r3
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	dd09      	ble.n	8007a26 <_dtoa_r+0xb56>
 8007a12:	ee18 1a10 	vmov	r1, s16
 8007a16:	2300      	movs	r3, #0
 8007a18:	220a      	movs	r2, #10
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 f9bc 	bl	8007d98 <__multadd>
 8007a20:	ee08 0a10 	vmov	s16, r0
 8007a24:	e7e7      	b.n	80079f6 <_dtoa_r+0xb26>
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bfc8      	it	gt
 8007a2c:	461d      	movgt	r5, r3
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	bfd8      	it	le
 8007a32:	2501      	movle	r5, #1
 8007a34:	441d      	add	r5, r3
 8007a36:	f04f 0800 	mov.w	r8, #0
 8007a3a:	ee18 1a10 	vmov	r1, s16
 8007a3e:	2201      	movs	r2, #1
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fb59 	bl	80080f8 <__lshift>
 8007a46:	4631      	mov	r1, r6
 8007a48:	ee08 0a10 	vmov	s16, r0
 8007a4c:	f000 fbc4 	bl	80081d8 <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	dc91      	bgt.n	8007978 <_dtoa_r+0xaa8>
 8007a54:	d102      	bne.n	8007a5c <_dtoa_r+0xb8c>
 8007a56:	f01a 0f01 	tst.w	sl, #1
 8007a5a:	d18d      	bne.n	8007978 <_dtoa_r+0xaa8>
 8007a5c:	462b      	mov	r3, r5
 8007a5e:	461d      	mov	r5, r3
 8007a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a64:	2a30      	cmp	r2, #48	; 0x30
 8007a66:	d0fa      	beq.n	8007a5e <_dtoa_r+0xb8e>
 8007a68:	e6d7      	b.n	800781a <_dtoa_r+0x94a>
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d184      	bne.n	800797a <_dtoa_r+0xaaa>
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2331      	movs	r3, #49	; 0x31
 8007a78:	7013      	strb	r3, [r2, #0]
 8007a7a:	e6ce      	b.n	800781a <_dtoa_r+0x94a>
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <_dtoa_r+0xbd4>)
 8007a7e:	f7ff ba95 	b.w	8006fac <_dtoa_r+0xdc>
 8007a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f aa6e 	bne.w	8006f66 <_dtoa_r+0x96>
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <_dtoa_r+0xbd8>)
 8007a8c:	f7ff ba8e 	b.w	8006fac <_dtoa_r+0xdc>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dcae      	bgt.n	80079f4 <_dtoa_r+0xb24>
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	f73f aea8 	bgt.w	80077ee <_dtoa_r+0x91e>
 8007a9e:	e7a9      	b.n	80079f4 <_dtoa_r+0xb24>
 8007aa0:	08009047 	.word	0x08009047
 8007aa4:	08008fa4 	.word	0x08008fa4
 8007aa8:	08008fc8 	.word	0x08008fc8

08007aac <std>:
 8007aac:	2300      	movs	r3, #0
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aba:	6083      	str	r3, [r0, #8]
 8007abc:	8181      	strh	r1, [r0, #12]
 8007abe:	6643      	str	r3, [r0, #100]	; 0x64
 8007ac0:	81c2      	strh	r2, [r0, #14]
 8007ac2:	6183      	str	r3, [r0, #24]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	305c      	adds	r0, #92	; 0x5c
 8007aca:	f7fe fd01 	bl	80064d0 <memset>
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <std+0x38>)
 8007ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <std+0x3c>)
 8007ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ad6:	4b05      	ldr	r3, [pc, #20]	; (8007aec <std+0x40>)
 8007ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <std+0x44>)
 8007adc:	6224      	str	r4, [r4, #32]
 8007ade:	6323      	str	r3, [r4, #48]	; 0x30
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	bf00      	nop
 8007ae4:	0800889d 	.word	0x0800889d
 8007ae8:	080088bf 	.word	0x080088bf
 8007aec:	080088f7 	.word	0x080088f7
 8007af0:	0800891b 	.word	0x0800891b

08007af4 <_cleanup_r>:
 8007af4:	4901      	ldr	r1, [pc, #4]	; (8007afc <_cleanup_r+0x8>)
 8007af6:	f000 b8af 	b.w	8007c58 <_fwalk_reent>
 8007afa:	bf00      	nop
 8007afc:	08008c31 	.word	0x08008c31

08007b00 <__sfmoreglue>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	2268      	movs	r2, #104	; 0x68
 8007b04:	1e4d      	subs	r5, r1, #1
 8007b06:	4355      	muls	r5, r2
 8007b08:	460e      	mov	r6, r1
 8007b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b0e:	f000 fce7 	bl	80084e0 <_malloc_r>
 8007b12:	4604      	mov	r4, r0
 8007b14:	b140      	cbz	r0, 8007b28 <__sfmoreglue+0x28>
 8007b16:	2100      	movs	r1, #0
 8007b18:	e9c0 1600 	strd	r1, r6, [r0]
 8007b1c:	300c      	adds	r0, #12
 8007b1e:	60a0      	str	r0, [r4, #8]
 8007b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b24:	f7fe fcd4 	bl	80064d0 <memset>
 8007b28:	4620      	mov	r0, r4
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}

08007b2c <__sfp_lock_acquire>:
 8007b2c:	4801      	ldr	r0, [pc, #4]	; (8007b34 <__sfp_lock_acquire+0x8>)
 8007b2e:	f000 b8b8 	b.w	8007ca2 <__retarget_lock_acquire_recursive>
 8007b32:	bf00      	nop
 8007b34:	20000441 	.word	0x20000441

08007b38 <__sfp_lock_release>:
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <__sfp_lock_release+0x8>)
 8007b3a:	f000 b8b3 	b.w	8007ca4 <__retarget_lock_release_recursive>
 8007b3e:	bf00      	nop
 8007b40:	20000441 	.word	0x20000441

08007b44 <__sinit_lock_acquire>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__sinit_lock_acquire+0x8>)
 8007b46:	f000 b8ac 	b.w	8007ca2 <__retarget_lock_acquire_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	20000442 	.word	0x20000442

08007b50 <__sinit_lock_release>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__sinit_lock_release+0x8>)
 8007b52:	f000 b8a7 	b.w	8007ca4 <__retarget_lock_release_recursive>
 8007b56:	bf00      	nop
 8007b58:	20000442 	.word	0x20000442

08007b5c <__sinit>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	f7ff fff0 	bl	8007b44 <__sinit_lock_acquire>
 8007b64:	69a3      	ldr	r3, [r4, #24]
 8007b66:	b11b      	cbz	r3, 8007b70 <__sinit+0x14>
 8007b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b6c:	f7ff bff0 	b.w	8007b50 <__sinit_lock_release>
 8007b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b74:	6523      	str	r3, [r4, #80]	; 0x50
 8007b76:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <__sinit+0x68>)
 8007b78:	4a13      	ldr	r2, [pc, #76]	; (8007bc8 <__sinit+0x6c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b7e:	42a3      	cmp	r3, r4
 8007b80:	bf04      	itt	eq
 8007b82:	2301      	moveq	r3, #1
 8007b84:	61a3      	streq	r3, [r4, #24]
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 f820 	bl	8007bcc <__sfp>
 8007b8c:	6060      	str	r0, [r4, #4]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 f81c 	bl	8007bcc <__sfp>
 8007b94:	60a0      	str	r0, [r4, #8]
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 f818 	bl	8007bcc <__sfp>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	60e0      	str	r0, [r4, #12]
 8007ba0:	2104      	movs	r1, #4
 8007ba2:	6860      	ldr	r0, [r4, #4]
 8007ba4:	f7ff ff82 	bl	8007aac <std>
 8007ba8:	68a0      	ldr	r0, [r4, #8]
 8007baa:	2201      	movs	r2, #1
 8007bac:	2109      	movs	r1, #9
 8007bae:	f7ff ff7d 	bl	8007aac <std>
 8007bb2:	68e0      	ldr	r0, [r4, #12]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	2112      	movs	r1, #18
 8007bb8:	f7ff ff78 	bl	8007aac <std>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	61a3      	str	r3, [r4, #24]
 8007bc0:	e7d2      	b.n	8007b68 <__sinit+0xc>
 8007bc2:	bf00      	nop
 8007bc4:	08008f90 	.word	0x08008f90
 8007bc8:	08007af5 	.word	0x08007af5

08007bcc <__sfp>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	4607      	mov	r7, r0
 8007bd0:	f7ff ffac 	bl	8007b2c <__sfp_lock_acquire>
 8007bd4:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <__sfp+0x84>)
 8007bd6:	681e      	ldr	r6, [r3, #0]
 8007bd8:	69b3      	ldr	r3, [r6, #24]
 8007bda:	b913      	cbnz	r3, 8007be2 <__sfp+0x16>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7ff ffbd 	bl	8007b5c <__sinit>
 8007be2:	3648      	adds	r6, #72	; 0x48
 8007be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	d503      	bpl.n	8007bf4 <__sfp+0x28>
 8007bec:	6833      	ldr	r3, [r6, #0]
 8007bee:	b30b      	cbz	r3, 8007c34 <__sfp+0x68>
 8007bf0:	6836      	ldr	r6, [r6, #0]
 8007bf2:	e7f7      	b.n	8007be4 <__sfp+0x18>
 8007bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bf8:	b9d5      	cbnz	r5, 8007c30 <__sfp+0x64>
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <__sfp+0x88>)
 8007bfc:	60e3      	str	r3, [r4, #12]
 8007bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c02:	6665      	str	r5, [r4, #100]	; 0x64
 8007c04:	f000 f84c 	bl	8007ca0 <__retarget_lock_init_recursive>
 8007c08:	f7ff ff96 	bl	8007b38 <__sfp_lock_release>
 8007c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c14:	6025      	str	r5, [r4, #0]
 8007c16:	61a5      	str	r5, [r4, #24]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c20:	f7fe fc56 	bl	80064d0 <memset>
 8007c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c30:	3468      	adds	r4, #104	; 0x68
 8007c32:	e7d9      	b.n	8007be8 <__sfp+0x1c>
 8007c34:	2104      	movs	r1, #4
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff ff62 	bl	8007b00 <__sfmoreglue>
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	6030      	str	r0, [r6, #0]
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d1d5      	bne.n	8007bf0 <__sfp+0x24>
 8007c44:	f7ff ff78 	bl	8007b38 <__sfp_lock_release>
 8007c48:	230c      	movs	r3, #12
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	e7ee      	b.n	8007c2c <__sfp+0x60>
 8007c4e:	bf00      	nop
 8007c50:	08008f90 	.word	0x08008f90
 8007c54:	ffff0001 	.word	0xffff0001

08007c58 <_fwalk_reent>:
 8007c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	4688      	mov	r8, r1
 8007c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c64:	2700      	movs	r7, #0
 8007c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007c6e:	d505      	bpl.n	8007c7c <_fwalk_reent+0x24>
 8007c70:	6824      	ldr	r4, [r4, #0]
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	d1f7      	bne.n	8007c66 <_fwalk_reent+0xe>
 8007c76:	4638      	mov	r0, r7
 8007c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c7c:	89ab      	ldrh	r3, [r5, #12]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d907      	bls.n	8007c92 <_fwalk_reent+0x3a>
 8007c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c86:	3301      	adds	r3, #1
 8007c88:	d003      	beq.n	8007c92 <_fwalk_reent+0x3a>
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	47c0      	blx	r8
 8007c90:	4307      	orrs	r7, r0
 8007c92:	3568      	adds	r5, #104	; 0x68
 8007c94:	e7e9      	b.n	8007c6a <_fwalk_reent+0x12>
	...

08007c98 <_localeconv_r>:
 8007c98:	4800      	ldr	r0, [pc, #0]	; (8007c9c <_localeconv_r+0x4>)
 8007c9a:	4770      	bx	lr
 8007c9c:	2000017c 	.word	0x2000017c

08007ca0 <__retarget_lock_init_recursive>:
 8007ca0:	4770      	bx	lr

08007ca2 <__retarget_lock_acquire_recursive>:
 8007ca2:	4770      	bx	lr

08007ca4 <__retarget_lock_release_recursive>:
 8007ca4:	4770      	bx	lr
	...

08007ca8 <malloc>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <malloc+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f000 bc17 	b.w	80084e0 <_malloc_r>
 8007cb2:	bf00      	nop
 8007cb4:	20000028 	.word	0x20000028

08007cb8 <memcpy>:
 8007cb8:	440a      	add	r2, r1
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007cc0:	d100      	bne.n	8007cc4 <memcpy+0xc>
 8007cc2:	4770      	bx	lr
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cce:	4291      	cmp	r1, r2
 8007cd0:	d1f9      	bne.n	8007cc6 <memcpy+0xe>
 8007cd2:	bd10      	pop	{r4, pc}

08007cd4 <_Balloc>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cd8:	4604      	mov	r4, r0
 8007cda:	460d      	mov	r5, r1
 8007cdc:	b976      	cbnz	r6, 8007cfc <_Balloc+0x28>
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f7ff ffe2 	bl	8007ca8 <malloc>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ce8:	b920      	cbnz	r0, 8007cf4 <_Balloc+0x20>
 8007cea:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <_Balloc+0x78>)
 8007cec:	4818      	ldr	r0, [pc, #96]	; (8007d50 <_Balloc+0x7c>)
 8007cee:	2166      	movs	r1, #102	; 0x66
 8007cf0:	f000 feea 	bl	8008ac8 <__assert_func>
 8007cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf8:	6006      	str	r6, [r0, #0]
 8007cfa:	60c6      	str	r6, [r0, #12]
 8007cfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cfe:	68f3      	ldr	r3, [r6, #12]
 8007d00:	b183      	cbz	r3, 8007d24 <_Balloc+0x50>
 8007d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d0a:	b9b8      	cbnz	r0, 8007d3c <_Balloc+0x68>
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d12:	1d72      	adds	r2, r6, #5
 8007d14:	0092      	lsls	r2, r2, #2
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fb60 	bl	80083dc <_calloc_r>
 8007d1c:	b160      	cbz	r0, 8007d38 <_Balloc+0x64>
 8007d1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d22:	e00e      	b.n	8007d42 <_Balloc+0x6e>
 8007d24:	2221      	movs	r2, #33	; 0x21
 8007d26:	2104      	movs	r1, #4
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fb57 	bl	80083dc <_calloc_r>
 8007d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d30:	60f0      	str	r0, [r6, #12]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e4      	bne.n	8007d02 <_Balloc+0x2e>
 8007d38:	2000      	movs	r0, #0
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	6802      	ldr	r2, [r0, #0]
 8007d3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d42:	2300      	movs	r3, #0
 8007d44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d48:	e7f7      	b.n	8007d3a <_Balloc+0x66>
 8007d4a:	bf00      	nop
 8007d4c:	08008fd5 	.word	0x08008fd5
 8007d50:	080090b8 	.word	0x080090b8

08007d54 <_Bfree>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d58:	4605      	mov	r5, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	b976      	cbnz	r6, 8007d7c <_Bfree+0x28>
 8007d5e:	2010      	movs	r0, #16
 8007d60:	f7ff ffa2 	bl	8007ca8 <malloc>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6268      	str	r0, [r5, #36]	; 0x24
 8007d68:	b920      	cbnz	r0, 8007d74 <_Bfree+0x20>
 8007d6a:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <_Bfree+0x3c>)
 8007d6c:	4809      	ldr	r0, [pc, #36]	; (8007d94 <_Bfree+0x40>)
 8007d6e:	218a      	movs	r1, #138	; 0x8a
 8007d70:	f000 feaa 	bl	8008ac8 <__assert_func>
 8007d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d78:	6006      	str	r6, [r0, #0]
 8007d7a:	60c6      	str	r6, [r0, #12]
 8007d7c:	b13c      	cbz	r4, 8007d8e <_Bfree+0x3a>
 8007d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d80:	6862      	ldr	r2, [r4, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d88:	6021      	str	r1, [r4, #0]
 8007d8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	08008fd5 	.word	0x08008fd5
 8007d94:	080090b8 	.word	0x080090b8

08007d98 <__multadd>:
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	690d      	ldr	r5, [r1, #16]
 8007d9e:	4607      	mov	r7, r0
 8007da0:	460c      	mov	r4, r1
 8007da2:	461e      	mov	r6, r3
 8007da4:	f101 0c14 	add.w	ip, r1, #20
 8007da8:	2000      	movs	r0, #0
 8007daa:	f8dc 3000 	ldr.w	r3, [ip]
 8007dae:	b299      	uxth	r1, r3
 8007db0:	fb02 6101 	mla	r1, r2, r1, r6
 8007db4:	0c1e      	lsrs	r6, r3, #16
 8007db6:	0c0b      	lsrs	r3, r1, #16
 8007db8:	fb02 3306 	mla	r3, r2, r6, r3
 8007dbc:	b289      	uxth	r1, r1
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007dc4:	4285      	cmp	r5, r0
 8007dc6:	f84c 1b04 	str.w	r1, [ip], #4
 8007dca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dce:	dcec      	bgt.n	8007daa <__multadd+0x12>
 8007dd0:	b30e      	cbz	r6, 8007e16 <__multadd+0x7e>
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dc19      	bgt.n	8007e0c <__multadd+0x74>
 8007dd8:	6861      	ldr	r1, [r4, #4]
 8007dda:	4638      	mov	r0, r7
 8007ddc:	3101      	adds	r1, #1
 8007dde:	f7ff ff79 	bl	8007cd4 <_Balloc>
 8007de2:	4680      	mov	r8, r0
 8007de4:	b928      	cbnz	r0, 8007df2 <__multadd+0x5a>
 8007de6:	4602      	mov	r2, r0
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <__multadd+0x84>)
 8007dea:	480d      	ldr	r0, [pc, #52]	; (8007e20 <__multadd+0x88>)
 8007dec:	21b5      	movs	r1, #181	; 0xb5
 8007dee:	f000 fe6b 	bl	8008ac8 <__assert_func>
 8007df2:	6922      	ldr	r2, [r4, #16]
 8007df4:	3202      	adds	r2, #2
 8007df6:	f104 010c 	add.w	r1, r4, #12
 8007dfa:	0092      	lsls	r2, r2, #2
 8007dfc:	300c      	adds	r0, #12
 8007dfe:	f7ff ff5b 	bl	8007cb8 <memcpy>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7ff ffa5 	bl	8007d54 <_Bfree>
 8007e0a:	4644      	mov	r4, r8
 8007e0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e10:	3501      	adds	r5, #1
 8007e12:	615e      	str	r6, [r3, #20]
 8007e14:	6125      	str	r5, [r4, #16]
 8007e16:	4620      	mov	r0, r4
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e1c:	08009047 	.word	0x08009047
 8007e20:	080090b8 	.word	0x080090b8

08007e24 <__hi0bits>:
 8007e24:	0c03      	lsrs	r3, r0, #16
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	b9d3      	cbnz	r3, 8007e60 <__hi0bits+0x3c>
 8007e2a:	0400      	lsls	r0, r0, #16
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e32:	bf04      	itt	eq
 8007e34:	0200      	lsleq	r0, r0, #8
 8007e36:	3308      	addeq	r3, #8
 8007e38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e3c:	bf04      	itt	eq
 8007e3e:	0100      	lsleq	r0, r0, #4
 8007e40:	3304      	addeq	r3, #4
 8007e42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e46:	bf04      	itt	eq
 8007e48:	0080      	lsleq	r0, r0, #2
 8007e4a:	3302      	addeq	r3, #2
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	db05      	blt.n	8007e5c <__hi0bits+0x38>
 8007e50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e54:	f103 0301 	add.w	r3, r3, #1
 8007e58:	bf08      	it	eq
 8007e5a:	2320      	moveq	r3, #32
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	4770      	bx	lr
 8007e60:	2300      	movs	r3, #0
 8007e62:	e7e4      	b.n	8007e2e <__hi0bits+0xa>

08007e64 <__lo0bits>:
 8007e64:	6803      	ldr	r3, [r0, #0]
 8007e66:	f013 0207 	ands.w	r2, r3, #7
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	d00b      	beq.n	8007e86 <__lo0bits+0x22>
 8007e6e:	07da      	lsls	r2, r3, #31
 8007e70:	d423      	bmi.n	8007eba <__lo0bits+0x56>
 8007e72:	0798      	lsls	r0, r3, #30
 8007e74:	bf49      	itett	mi
 8007e76:	085b      	lsrmi	r3, r3, #1
 8007e78:	089b      	lsrpl	r3, r3, #2
 8007e7a:	2001      	movmi	r0, #1
 8007e7c:	600b      	strmi	r3, [r1, #0]
 8007e7e:	bf5c      	itt	pl
 8007e80:	600b      	strpl	r3, [r1, #0]
 8007e82:	2002      	movpl	r0, #2
 8007e84:	4770      	bx	lr
 8007e86:	b298      	uxth	r0, r3
 8007e88:	b9a8      	cbnz	r0, 8007eb6 <__lo0bits+0x52>
 8007e8a:	0c1b      	lsrs	r3, r3, #16
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	b90a      	cbnz	r2, 8007e96 <__lo0bits+0x32>
 8007e92:	3008      	adds	r0, #8
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	071a      	lsls	r2, r3, #28
 8007e98:	bf04      	itt	eq
 8007e9a:	091b      	lsreq	r3, r3, #4
 8007e9c:	3004      	addeq	r0, #4
 8007e9e:	079a      	lsls	r2, r3, #30
 8007ea0:	bf04      	itt	eq
 8007ea2:	089b      	lsreq	r3, r3, #2
 8007ea4:	3002      	addeq	r0, #2
 8007ea6:	07da      	lsls	r2, r3, #31
 8007ea8:	d403      	bmi.n	8007eb2 <__lo0bits+0x4e>
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	f100 0001 	add.w	r0, r0, #1
 8007eb0:	d005      	beq.n	8007ebe <__lo0bits+0x5a>
 8007eb2:	600b      	str	r3, [r1, #0]
 8007eb4:	4770      	bx	lr
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	e7e9      	b.n	8007e8e <__lo0bits+0x2a>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4770      	bx	lr
 8007ebe:	2020      	movs	r0, #32
 8007ec0:	4770      	bx	lr
	...

08007ec4 <__i2b>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	2101      	movs	r1, #1
 8007eca:	f7ff ff03 	bl	8007cd4 <_Balloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	b928      	cbnz	r0, 8007ede <__i2b+0x1a>
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <__i2b+0x24>)
 8007ed4:	4805      	ldr	r0, [pc, #20]	; (8007eec <__i2b+0x28>)
 8007ed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007eda:	f000 fdf5 	bl	8008ac8 <__assert_func>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	6144      	str	r4, [r0, #20]
 8007ee2:	6103      	str	r3, [r0, #16]
 8007ee4:	bd10      	pop	{r4, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08009047 	.word	0x08009047
 8007eec:	080090b8 	.word	0x080090b8

08007ef0 <__multiply>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	4691      	mov	r9, r2
 8007ef6:	690a      	ldr	r2, [r1, #16]
 8007ef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	bfb8      	it	lt
 8007f00:	460b      	movlt	r3, r1
 8007f02:	460c      	mov	r4, r1
 8007f04:	bfbc      	itt	lt
 8007f06:	464c      	movlt	r4, r9
 8007f08:	4699      	movlt	r9, r3
 8007f0a:	6927      	ldr	r7, [r4, #16]
 8007f0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f10:	68a3      	ldr	r3, [r4, #8]
 8007f12:	6861      	ldr	r1, [r4, #4]
 8007f14:	eb07 060a 	add.w	r6, r7, sl
 8007f18:	42b3      	cmp	r3, r6
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	bfb8      	it	lt
 8007f1e:	3101      	addlt	r1, #1
 8007f20:	f7ff fed8 	bl	8007cd4 <_Balloc>
 8007f24:	b930      	cbnz	r0, 8007f34 <__multiply+0x44>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4b44      	ldr	r3, [pc, #272]	; (800803c <__multiply+0x14c>)
 8007f2a:	4845      	ldr	r0, [pc, #276]	; (8008040 <__multiply+0x150>)
 8007f2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007f30:	f000 fdca 	bl	8008ac8 <__assert_func>
 8007f34:	f100 0514 	add.w	r5, r0, #20
 8007f38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4543      	cmp	r3, r8
 8007f42:	d321      	bcc.n	8007f88 <__multiply+0x98>
 8007f44:	f104 0314 	add.w	r3, r4, #20
 8007f48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f4c:	f109 0314 	add.w	r3, r9, #20
 8007f50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f54:	9202      	str	r2, [sp, #8]
 8007f56:	1b3a      	subs	r2, r7, r4
 8007f58:	3a15      	subs	r2, #21
 8007f5a:	f022 0203 	bic.w	r2, r2, #3
 8007f5e:	3204      	adds	r2, #4
 8007f60:	f104 0115 	add.w	r1, r4, #21
 8007f64:	428f      	cmp	r7, r1
 8007f66:	bf38      	it	cc
 8007f68:	2204      	movcc	r2, #4
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	9a02      	ldr	r2, [sp, #8]
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d80c      	bhi.n	8007f8e <__multiply+0x9e>
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	dd03      	ble.n	8007f80 <__multiply+0x90>
 8007f78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d05a      	beq.n	8008036 <__multiply+0x146>
 8007f80:	6106      	str	r6, [r0, #16]
 8007f82:	b005      	add	sp, #20
 8007f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f88:	f843 2b04 	str.w	r2, [r3], #4
 8007f8c:	e7d8      	b.n	8007f40 <__multiply+0x50>
 8007f8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f92:	f1ba 0f00 	cmp.w	sl, #0
 8007f96:	d024      	beq.n	8007fe2 <__multiply+0xf2>
 8007f98:	f104 0e14 	add.w	lr, r4, #20
 8007f9c:	46a9      	mov	r9, r5
 8007f9e:	f04f 0c00 	mov.w	ip, #0
 8007fa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fa6:	f8d9 1000 	ldr.w	r1, [r9]
 8007faa:	fa1f fb82 	uxth.w	fp, r2
 8007fae:	b289      	uxth	r1, r1
 8007fb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fbc:	4461      	add	r1, ip
 8007fbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fca:	b289      	uxth	r1, r1
 8007fcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fd0:	4577      	cmp	r7, lr
 8007fd2:	f849 1b04 	str.w	r1, [r9], #4
 8007fd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fda:	d8e2      	bhi.n	8007fa2 <__multiply+0xb2>
 8007fdc:	9a01      	ldr	r2, [sp, #4]
 8007fde:	f845 c002 	str.w	ip, [r5, r2]
 8007fe2:	9a03      	ldr	r2, [sp, #12]
 8007fe4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	f1b9 0f00 	cmp.w	r9, #0
 8007fee:	d020      	beq.n	8008032 <__multiply+0x142>
 8007ff0:	6829      	ldr	r1, [r5, #0]
 8007ff2:	f104 0c14 	add.w	ip, r4, #20
 8007ff6:	46ae      	mov	lr, r5
 8007ff8:	f04f 0a00 	mov.w	sl, #0
 8007ffc:	f8bc b000 	ldrh.w	fp, [ip]
 8008000:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008004:	fb09 220b 	mla	r2, r9, fp, r2
 8008008:	4492      	add	sl, r2
 800800a:	b289      	uxth	r1, r1
 800800c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008010:	f84e 1b04 	str.w	r1, [lr], #4
 8008014:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008018:	f8be 1000 	ldrh.w	r1, [lr]
 800801c:	0c12      	lsrs	r2, r2, #16
 800801e:	fb09 1102 	mla	r1, r9, r2, r1
 8008022:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008026:	4567      	cmp	r7, ip
 8008028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800802c:	d8e6      	bhi.n	8007ffc <__multiply+0x10c>
 800802e:	9a01      	ldr	r2, [sp, #4]
 8008030:	50a9      	str	r1, [r5, r2]
 8008032:	3504      	adds	r5, #4
 8008034:	e79a      	b.n	8007f6c <__multiply+0x7c>
 8008036:	3e01      	subs	r6, #1
 8008038:	e79c      	b.n	8007f74 <__multiply+0x84>
 800803a:	bf00      	nop
 800803c:	08009047 	.word	0x08009047
 8008040:	080090b8 	.word	0x080090b8

08008044 <__pow5mult>:
 8008044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008048:	4615      	mov	r5, r2
 800804a:	f012 0203 	ands.w	r2, r2, #3
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	d007      	beq.n	8008064 <__pow5mult+0x20>
 8008054:	4c25      	ldr	r4, [pc, #148]	; (80080ec <__pow5mult+0xa8>)
 8008056:	3a01      	subs	r2, #1
 8008058:	2300      	movs	r3, #0
 800805a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800805e:	f7ff fe9b 	bl	8007d98 <__multadd>
 8008062:	4607      	mov	r7, r0
 8008064:	10ad      	asrs	r5, r5, #2
 8008066:	d03d      	beq.n	80080e4 <__pow5mult+0xa0>
 8008068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800806a:	b97c      	cbnz	r4, 800808c <__pow5mult+0x48>
 800806c:	2010      	movs	r0, #16
 800806e:	f7ff fe1b 	bl	8007ca8 <malloc>
 8008072:	4602      	mov	r2, r0
 8008074:	6270      	str	r0, [r6, #36]	; 0x24
 8008076:	b928      	cbnz	r0, 8008084 <__pow5mult+0x40>
 8008078:	4b1d      	ldr	r3, [pc, #116]	; (80080f0 <__pow5mult+0xac>)
 800807a:	481e      	ldr	r0, [pc, #120]	; (80080f4 <__pow5mult+0xb0>)
 800807c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008080:	f000 fd22 	bl	8008ac8 <__assert_func>
 8008084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008088:	6004      	str	r4, [r0, #0]
 800808a:	60c4      	str	r4, [r0, #12]
 800808c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008094:	b94c      	cbnz	r4, 80080aa <__pow5mult+0x66>
 8008096:	f240 2171 	movw	r1, #625	; 0x271
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff ff12 	bl	8007ec4 <__i2b>
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080a6:	4604      	mov	r4, r0
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	07eb      	lsls	r3, r5, #31
 80080b0:	d50a      	bpl.n	80080c8 <__pow5mult+0x84>
 80080b2:	4639      	mov	r1, r7
 80080b4:	4622      	mov	r2, r4
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff1a 	bl	8007ef0 <__multiply>
 80080bc:	4639      	mov	r1, r7
 80080be:	4680      	mov	r8, r0
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff fe47 	bl	8007d54 <_Bfree>
 80080c6:	4647      	mov	r7, r8
 80080c8:	106d      	asrs	r5, r5, #1
 80080ca:	d00b      	beq.n	80080e4 <__pow5mult+0xa0>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	b938      	cbnz	r0, 80080e0 <__pow5mult+0x9c>
 80080d0:	4622      	mov	r2, r4
 80080d2:	4621      	mov	r1, r4
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff ff0b 	bl	8007ef0 <__multiply>
 80080da:	6020      	str	r0, [r4, #0]
 80080dc:	f8c0 9000 	str.w	r9, [r0]
 80080e0:	4604      	mov	r4, r0
 80080e2:	e7e4      	b.n	80080ae <__pow5mult+0x6a>
 80080e4:	4638      	mov	r0, r7
 80080e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ea:	bf00      	nop
 80080ec:	08009208 	.word	0x08009208
 80080f0:	08008fd5 	.word	0x08008fd5
 80080f4:	080090b8 	.word	0x080090b8

080080f8 <__lshift>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	460c      	mov	r4, r1
 80080fe:	6849      	ldr	r1, [r1, #4]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	4607      	mov	r7, r0
 800810a:	4691      	mov	r9, r2
 800810c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008110:	f108 0601 	add.w	r6, r8, #1
 8008114:	42b3      	cmp	r3, r6
 8008116:	db0b      	blt.n	8008130 <__lshift+0x38>
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff fddb 	bl	8007cd4 <_Balloc>
 800811e:	4605      	mov	r5, r0
 8008120:	b948      	cbnz	r0, 8008136 <__lshift+0x3e>
 8008122:	4602      	mov	r2, r0
 8008124:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <__lshift+0xd8>)
 8008126:	482b      	ldr	r0, [pc, #172]	; (80081d4 <__lshift+0xdc>)
 8008128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800812c:	f000 fccc 	bl	8008ac8 <__assert_func>
 8008130:	3101      	adds	r1, #1
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	e7ee      	b.n	8008114 <__lshift+0x1c>
 8008136:	2300      	movs	r3, #0
 8008138:	f100 0114 	add.w	r1, r0, #20
 800813c:	f100 0210 	add.w	r2, r0, #16
 8008140:	4618      	mov	r0, r3
 8008142:	4553      	cmp	r3, sl
 8008144:	db37      	blt.n	80081b6 <__lshift+0xbe>
 8008146:	6920      	ldr	r0, [r4, #16]
 8008148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800814c:	f104 0314 	add.w	r3, r4, #20
 8008150:	f019 091f 	ands.w	r9, r9, #31
 8008154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800815c:	d02f      	beq.n	80081be <__lshift+0xc6>
 800815e:	f1c9 0e20 	rsb	lr, r9, #32
 8008162:	468a      	mov	sl, r1
 8008164:	f04f 0c00 	mov.w	ip, #0
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	fa02 f209 	lsl.w	r2, r2, r9
 800816e:	ea42 020c 	orr.w	r2, r2, ip
 8008172:	f84a 2b04 	str.w	r2, [sl], #4
 8008176:	f853 2b04 	ldr.w	r2, [r3], #4
 800817a:	4298      	cmp	r0, r3
 800817c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008180:	d8f2      	bhi.n	8008168 <__lshift+0x70>
 8008182:	1b03      	subs	r3, r0, r4
 8008184:	3b15      	subs	r3, #21
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	3304      	adds	r3, #4
 800818c:	f104 0215 	add.w	r2, r4, #21
 8008190:	4290      	cmp	r0, r2
 8008192:	bf38      	it	cc
 8008194:	2304      	movcc	r3, #4
 8008196:	f841 c003 	str.w	ip, [r1, r3]
 800819a:	f1bc 0f00 	cmp.w	ip, #0
 800819e:	d001      	beq.n	80081a4 <__lshift+0xac>
 80081a0:	f108 0602 	add.w	r6, r8, #2
 80081a4:	3e01      	subs	r6, #1
 80081a6:	4638      	mov	r0, r7
 80081a8:	612e      	str	r6, [r5, #16]
 80081aa:	4621      	mov	r1, r4
 80081ac:	f7ff fdd2 	bl	8007d54 <_Bfree>
 80081b0:	4628      	mov	r0, r5
 80081b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ba:	3301      	adds	r3, #1
 80081bc:	e7c1      	b.n	8008142 <__lshift+0x4a>
 80081be:	3904      	subs	r1, #4
 80081c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80081c8:	4298      	cmp	r0, r3
 80081ca:	d8f9      	bhi.n	80081c0 <__lshift+0xc8>
 80081cc:	e7ea      	b.n	80081a4 <__lshift+0xac>
 80081ce:	bf00      	nop
 80081d0:	08009047 	.word	0x08009047
 80081d4:	080090b8 	.word	0x080090b8

080081d8 <__mcmp>:
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	6902      	ldr	r2, [r0, #16]
 80081dc:	690c      	ldr	r4, [r1, #16]
 80081de:	1b12      	subs	r2, r2, r4
 80081e0:	d10e      	bne.n	8008200 <__mcmp+0x28>
 80081e2:	f100 0314 	add.w	r3, r0, #20
 80081e6:	3114      	adds	r1, #20
 80081e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081f8:	42a5      	cmp	r5, r4
 80081fa:	d003      	beq.n	8008204 <__mcmp+0x2c>
 80081fc:	d305      	bcc.n	800820a <__mcmp+0x32>
 80081fe:	2201      	movs	r2, #1
 8008200:	4610      	mov	r0, r2
 8008202:	bd30      	pop	{r4, r5, pc}
 8008204:	4283      	cmp	r3, r0
 8008206:	d3f3      	bcc.n	80081f0 <__mcmp+0x18>
 8008208:	e7fa      	b.n	8008200 <__mcmp+0x28>
 800820a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800820e:	e7f7      	b.n	8008200 <__mcmp+0x28>

08008210 <__mdiff>:
 8008210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	460c      	mov	r4, r1
 8008216:	4606      	mov	r6, r0
 8008218:	4611      	mov	r1, r2
 800821a:	4620      	mov	r0, r4
 800821c:	4690      	mov	r8, r2
 800821e:	f7ff ffdb 	bl	80081d8 <__mcmp>
 8008222:	1e05      	subs	r5, r0, #0
 8008224:	d110      	bne.n	8008248 <__mdiff+0x38>
 8008226:	4629      	mov	r1, r5
 8008228:	4630      	mov	r0, r6
 800822a:	f7ff fd53 	bl	8007cd4 <_Balloc>
 800822e:	b930      	cbnz	r0, 800823e <__mdiff+0x2e>
 8008230:	4b3a      	ldr	r3, [pc, #232]	; (800831c <__mdiff+0x10c>)
 8008232:	4602      	mov	r2, r0
 8008234:	f240 2132 	movw	r1, #562	; 0x232
 8008238:	4839      	ldr	r0, [pc, #228]	; (8008320 <__mdiff+0x110>)
 800823a:	f000 fc45 	bl	8008ac8 <__assert_func>
 800823e:	2301      	movs	r3, #1
 8008240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	bfa4      	itt	ge
 800824a:	4643      	movge	r3, r8
 800824c:	46a0      	movge	r8, r4
 800824e:	4630      	mov	r0, r6
 8008250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008254:	bfa6      	itte	ge
 8008256:	461c      	movge	r4, r3
 8008258:	2500      	movge	r5, #0
 800825a:	2501      	movlt	r5, #1
 800825c:	f7ff fd3a 	bl	8007cd4 <_Balloc>
 8008260:	b920      	cbnz	r0, 800826c <__mdiff+0x5c>
 8008262:	4b2e      	ldr	r3, [pc, #184]	; (800831c <__mdiff+0x10c>)
 8008264:	4602      	mov	r2, r0
 8008266:	f44f 7110 	mov.w	r1, #576	; 0x240
 800826a:	e7e5      	b.n	8008238 <__mdiff+0x28>
 800826c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008270:	6926      	ldr	r6, [r4, #16]
 8008272:	60c5      	str	r5, [r0, #12]
 8008274:	f104 0914 	add.w	r9, r4, #20
 8008278:	f108 0514 	add.w	r5, r8, #20
 800827c:	f100 0e14 	add.w	lr, r0, #20
 8008280:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008284:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008288:	f108 0210 	add.w	r2, r8, #16
 800828c:	46f2      	mov	sl, lr
 800828e:	2100      	movs	r1, #0
 8008290:	f859 3b04 	ldr.w	r3, [r9], #4
 8008294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008298:	fa1f f883 	uxth.w	r8, r3
 800829c:	fa11 f18b 	uxtah	r1, r1, fp
 80082a0:	0c1b      	lsrs	r3, r3, #16
 80082a2:	eba1 0808 	sub.w	r8, r1, r8
 80082a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082ae:	fa1f f888 	uxth.w	r8, r8
 80082b2:	1419      	asrs	r1, r3, #16
 80082b4:	454e      	cmp	r6, r9
 80082b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082ba:	f84a 3b04 	str.w	r3, [sl], #4
 80082be:	d8e7      	bhi.n	8008290 <__mdiff+0x80>
 80082c0:	1b33      	subs	r3, r6, r4
 80082c2:	3b15      	subs	r3, #21
 80082c4:	f023 0303 	bic.w	r3, r3, #3
 80082c8:	3304      	adds	r3, #4
 80082ca:	3415      	adds	r4, #21
 80082cc:	42a6      	cmp	r6, r4
 80082ce:	bf38      	it	cc
 80082d0:	2304      	movcc	r3, #4
 80082d2:	441d      	add	r5, r3
 80082d4:	4473      	add	r3, lr
 80082d6:	469e      	mov	lr, r3
 80082d8:	462e      	mov	r6, r5
 80082da:	4566      	cmp	r6, ip
 80082dc:	d30e      	bcc.n	80082fc <__mdiff+0xec>
 80082de:	f10c 0203 	add.w	r2, ip, #3
 80082e2:	1b52      	subs	r2, r2, r5
 80082e4:	f022 0203 	bic.w	r2, r2, #3
 80082e8:	3d03      	subs	r5, #3
 80082ea:	45ac      	cmp	ip, r5
 80082ec:	bf38      	it	cc
 80082ee:	2200      	movcc	r2, #0
 80082f0:	441a      	add	r2, r3
 80082f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082f6:	b17b      	cbz	r3, 8008318 <__mdiff+0x108>
 80082f8:	6107      	str	r7, [r0, #16]
 80082fa:	e7a3      	b.n	8008244 <__mdiff+0x34>
 80082fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8008300:	fa11 f288 	uxtah	r2, r1, r8
 8008304:	1414      	asrs	r4, r2, #16
 8008306:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800830a:	b292      	uxth	r2, r2
 800830c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008310:	f84e 2b04 	str.w	r2, [lr], #4
 8008314:	1421      	asrs	r1, r4, #16
 8008316:	e7e0      	b.n	80082da <__mdiff+0xca>
 8008318:	3f01      	subs	r7, #1
 800831a:	e7ea      	b.n	80082f2 <__mdiff+0xe2>
 800831c:	08009047 	.word	0x08009047
 8008320:	080090b8 	.word	0x080090b8

08008324 <__d2b>:
 8008324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008328:	4689      	mov	r9, r1
 800832a:	2101      	movs	r1, #1
 800832c:	ec57 6b10 	vmov	r6, r7, d0
 8008330:	4690      	mov	r8, r2
 8008332:	f7ff fccf 	bl	8007cd4 <_Balloc>
 8008336:	4604      	mov	r4, r0
 8008338:	b930      	cbnz	r0, 8008348 <__d2b+0x24>
 800833a:	4602      	mov	r2, r0
 800833c:	4b25      	ldr	r3, [pc, #148]	; (80083d4 <__d2b+0xb0>)
 800833e:	4826      	ldr	r0, [pc, #152]	; (80083d8 <__d2b+0xb4>)
 8008340:	f240 310a 	movw	r1, #778	; 0x30a
 8008344:	f000 fbc0 	bl	8008ac8 <__assert_func>
 8008348:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800834c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008350:	bb35      	cbnz	r5, 80083a0 <__d2b+0x7c>
 8008352:	2e00      	cmp	r6, #0
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	d028      	beq.n	80083aa <__d2b+0x86>
 8008358:	4668      	mov	r0, sp
 800835a:	9600      	str	r6, [sp, #0]
 800835c:	f7ff fd82 	bl	8007e64 <__lo0bits>
 8008360:	9900      	ldr	r1, [sp, #0]
 8008362:	b300      	cbz	r0, 80083a6 <__d2b+0x82>
 8008364:	9a01      	ldr	r2, [sp, #4]
 8008366:	f1c0 0320 	rsb	r3, r0, #32
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	430b      	orrs	r3, r1
 8008370:	40c2      	lsrs	r2, r0
 8008372:	6163      	str	r3, [r4, #20]
 8008374:	9201      	str	r2, [sp, #4]
 8008376:	9b01      	ldr	r3, [sp, #4]
 8008378:	61a3      	str	r3, [r4, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	bf14      	ite	ne
 800837e:	2202      	movne	r2, #2
 8008380:	2201      	moveq	r2, #1
 8008382:	6122      	str	r2, [r4, #16]
 8008384:	b1d5      	cbz	r5, 80083bc <__d2b+0x98>
 8008386:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800838a:	4405      	add	r5, r0
 800838c:	f8c9 5000 	str.w	r5, [r9]
 8008390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008394:	f8c8 0000 	str.w	r0, [r8]
 8008398:	4620      	mov	r0, r4
 800839a:	b003      	add	sp, #12
 800839c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083a4:	e7d5      	b.n	8008352 <__d2b+0x2e>
 80083a6:	6161      	str	r1, [r4, #20]
 80083a8:	e7e5      	b.n	8008376 <__d2b+0x52>
 80083aa:	a801      	add	r0, sp, #4
 80083ac:	f7ff fd5a 	bl	8007e64 <__lo0bits>
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	6163      	str	r3, [r4, #20]
 80083b4:	2201      	movs	r2, #1
 80083b6:	6122      	str	r2, [r4, #16]
 80083b8:	3020      	adds	r0, #32
 80083ba:	e7e3      	b.n	8008384 <__d2b+0x60>
 80083bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083c4:	f8c9 0000 	str.w	r0, [r9]
 80083c8:	6918      	ldr	r0, [r3, #16]
 80083ca:	f7ff fd2b 	bl	8007e24 <__hi0bits>
 80083ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083d2:	e7df      	b.n	8008394 <__d2b+0x70>
 80083d4:	08009047 	.word	0x08009047
 80083d8:	080090b8 	.word	0x080090b8

080083dc <_calloc_r>:
 80083dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083de:	fba1 2402 	umull	r2, r4, r1, r2
 80083e2:	b94c      	cbnz	r4, 80083f8 <_calloc_r+0x1c>
 80083e4:	4611      	mov	r1, r2
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	f000 f87a 	bl	80084e0 <_malloc_r>
 80083ec:	9a01      	ldr	r2, [sp, #4]
 80083ee:	4605      	mov	r5, r0
 80083f0:	b930      	cbnz	r0, 8008400 <_calloc_r+0x24>
 80083f2:	4628      	mov	r0, r5
 80083f4:	b003      	add	sp, #12
 80083f6:	bd30      	pop	{r4, r5, pc}
 80083f8:	220c      	movs	r2, #12
 80083fa:	6002      	str	r2, [r0, #0]
 80083fc:	2500      	movs	r5, #0
 80083fe:	e7f8      	b.n	80083f2 <_calloc_r+0x16>
 8008400:	4621      	mov	r1, r4
 8008402:	f7fe f865 	bl	80064d0 <memset>
 8008406:	e7f4      	b.n	80083f2 <_calloc_r+0x16>

08008408 <_free_r>:
 8008408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800840a:	2900      	cmp	r1, #0
 800840c:	d044      	beq.n	8008498 <_free_r+0x90>
 800840e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008412:	9001      	str	r0, [sp, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f1a1 0404 	sub.w	r4, r1, #4
 800841a:	bfb8      	it	lt
 800841c:	18e4      	addlt	r4, r4, r3
 800841e:	f000 fcdf 	bl	8008de0 <__malloc_lock>
 8008422:	4a1e      	ldr	r2, [pc, #120]	; (800849c <_free_r+0x94>)
 8008424:	9801      	ldr	r0, [sp, #4]
 8008426:	6813      	ldr	r3, [r2, #0]
 8008428:	b933      	cbnz	r3, 8008438 <_free_r+0x30>
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	6014      	str	r4, [r2, #0]
 800842e:	b003      	add	sp, #12
 8008430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008434:	f000 bcda 	b.w	8008dec <__malloc_unlock>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d908      	bls.n	800844e <_free_r+0x46>
 800843c:	6825      	ldr	r5, [r4, #0]
 800843e:	1961      	adds	r1, r4, r5
 8008440:	428b      	cmp	r3, r1
 8008442:	bf01      	itttt	eq
 8008444:	6819      	ldreq	r1, [r3, #0]
 8008446:	685b      	ldreq	r3, [r3, #4]
 8008448:	1949      	addeq	r1, r1, r5
 800844a:	6021      	streq	r1, [r4, #0]
 800844c:	e7ed      	b.n	800842a <_free_r+0x22>
 800844e:	461a      	mov	r2, r3
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	b10b      	cbz	r3, 8008458 <_free_r+0x50>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d9fa      	bls.n	800844e <_free_r+0x46>
 8008458:	6811      	ldr	r1, [r2, #0]
 800845a:	1855      	adds	r5, r2, r1
 800845c:	42a5      	cmp	r5, r4
 800845e:	d10b      	bne.n	8008478 <_free_r+0x70>
 8008460:	6824      	ldr	r4, [r4, #0]
 8008462:	4421      	add	r1, r4
 8008464:	1854      	adds	r4, r2, r1
 8008466:	42a3      	cmp	r3, r4
 8008468:	6011      	str	r1, [r2, #0]
 800846a:	d1e0      	bne.n	800842e <_free_r+0x26>
 800846c:	681c      	ldr	r4, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	6053      	str	r3, [r2, #4]
 8008472:	4421      	add	r1, r4
 8008474:	6011      	str	r1, [r2, #0]
 8008476:	e7da      	b.n	800842e <_free_r+0x26>
 8008478:	d902      	bls.n	8008480 <_free_r+0x78>
 800847a:	230c      	movs	r3, #12
 800847c:	6003      	str	r3, [r0, #0]
 800847e:	e7d6      	b.n	800842e <_free_r+0x26>
 8008480:	6825      	ldr	r5, [r4, #0]
 8008482:	1961      	adds	r1, r4, r5
 8008484:	428b      	cmp	r3, r1
 8008486:	bf04      	itt	eq
 8008488:	6819      	ldreq	r1, [r3, #0]
 800848a:	685b      	ldreq	r3, [r3, #4]
 800848c:	6063      	str	r3, [r4, #4]
 800848e:	bf04      	itt	eq
 8008490:	1949      	addeq	r1, r1, r5
 8008492:	6021      	streq	r1, [r4, #0]
 8008494:	6054      	str	r4, [r2, #4]
 8008496:	e7ca      	b.n	800842e <_free_r+0x26>
 8008498:	b003      	add	sp, #12
 800849a:	bd30      	pop	{r4, r5, pc}
 800849c:	20000444 	.word	0x20000444

080084a0 <sbrk_aligned>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4e0e      	ldr	r6, [pc, #56]	; (80084dc <sbrk_aligned+0x3c>)
 80084a4:	460c      	mov	r4, r1
 80084a6:	6831      	ldr	r1, [r6, #0]
 80084a8:	4605      	mov	r5, r0
 80084aa:	b911      	cbnz	r1, 80084b2 <sbrk_aligned+0x12>
 80084ac:	f000 f9e6 	bl	800887c <_sbrk_r>
 80084b0:	6030      	str	r0, [r6, #0]
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 f9e1 	bl	800887c <_sbrk_r>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d00a      	beq.n	80084d4 <sbrk_aligned+0x34>
 80084be:	1cc4      	adds	r4, r0, #3
 80084c0:	f024 0403 	bic.w	r4, r4, #3
 80084c4:	42a0      	cmp	r0, r4
 80084c6:	d007      	beq.n	80084d8 <sbrk_aligned+0x38>
 80084c8:	1a21      	subs	r1, r4, r0
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f9d6 	bl	800887c <_sbrk_r>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d101      	bne.n	80084d8 <sbrk_aligned+0x38>
 80084d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084d8:	4620      	mov	r0, r4
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	20000448 	.word	0x20000448

080084e0 <_malloc_r>:
 80084e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e4:	1ccd      	adds	r5, r1, #3
 80084e6:	f025 0503 	bic.w	r5, r5, #3
 80084ea:	3508      	adds	r5, #8
 80084ec:	2d0c      	cmp	r5, #12
 80084ee:	bf38      	it	cc
 80084f0:	250c      	movcc	r5, #12
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	4607      	mov	r7, r0
 80084f6:	db01      	blt.n	80084fc <_malloc_r+0x1c>
 80084f8:	42a9      	cmp	r1, r5
 80084fa:	d905      	bls.n	8008508 <_malloc_r+0x28>
 80084fc:	230c      	movs	r3, #12
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	2600      	movs	r6, #0
 8008502:	4630      	mov	r0, r6
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008508:	4e2e      	ldr	r6, [pc, #184]	; (80085c4 <_malloc_r+0xe4>)
 800850a:	f000 fc69 	bl	8008de0 <__malloc_lock>
 800850e:	6833      	ldr	r3, [r6, #0]
 8008510:	461c      	mov	r4, r3
 8008512:	bb34      	cbnz	r4, 8008562 <_malloc_r+0x82>
 8008514:	4629      	mov	r1, r5
 8008516:	4638      	mov	r0, r7
 8008518:	f7ff ffc2 	bl	80084a0 <sbrk_aligned>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	4604      	mov	r4, r0
 8008520:	d14d      	bne.n	80085be <_malloc_r+0xde>
 8008522:	6834      	ldr	r4, [r6, #0]
 8008524:	4626      	mov	r6, r4
 8008526:	2e00      	cmp	r6, #0
 8008528:	d140      	bne.n	80085ac <_malloc_r+0xcc>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	4631      	mov	r1, r6
 800852e:	4638      	mov	r0, r7
 8008530:	eb04 0803 	add.w	r8, r4, r3
 8008534:	f000 f9a2 	bl	800887c <_sbrk_r>
 8008538:	4580      	cmp	r8, r0
 800853a:	d13a      	bne.n	80085b2 <_malloc_r+0xd2>
 800853c:	6821      	ldr	r1, [r4, #0]
 800853e:	3503      	adds	r5, #3
 8008540:	1a6d      	subs	r5, r5, r1
 8008542:	f025 0503 	bic.w	r5, r5, #3
 8008546:	3508      	adds	r5, #8
 8008548:	2d0c      	cmp	r5, #12
 800854a:	bf38      	it	cc
 800854c:	250c      	movcc	r5, #12
 800854e:	4629      	mov	r1, r5
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ffa5 	bl	80084a0 <sbrk_aligned>
 8008556:	3001      	adds	r0, #1
 8008558:	d02b      	beq.n	80085b2 <_malloc_r+0xd2>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	442b      	add	r3, r5
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	e00e      	b.n	8008580 <_malloc_r+0xa0>
 8008562:	6822      	ldr	r2, [r4, #0]
 8008564:	1b52      	subs	r2, r2, r5
 8008566:	d41e      	bmi.n	80085a6 <_malloc_r+0xc6>
 8008568:	2a0b      	cmp	r2, #11
 800856a:	d916      	bls.n	800859a <_malloc_r+0xba>
 800856c:	1961      	adds	r1, r4, r5
 800856e:	42a3      	cmp	r3, r4
 8008570:	6025      	str	r5, [r4, #0]
 8008572:	bf18      	it	ne
 8008574:	6059      	strne	r1, [r3, #4]
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	bf08      	it	eq
 800857a:	6031      	streq	r1, [r6, #0]
 800857c:	5162      	str	r2, [r4, r5]
 800857e:	604b      	str	r3, [r1, #4]
 8008580:	4638      	mov	r0, r7
 8008582:	f104 060b 	add.w	r6, r4, #11
 8008586:	f000 fc31 	bl	8008dec <__malloc_unlock>
 800858a:	f026 0607 	bic.w	r6, r6, #7
 800858e:	1d23      	adds	r3, r4, #4
 8008590:	1af2      	subs	r2, r6, r3
 8008592:	d0b6      	beq.n	8008502 <_malloc_r+0x22>
 8008594:	1b9b      	subs	r3, r3, r6
 8008596:	50a3      	str	r3, [r4, r2]
 8008598:	e7b3      	b.n	8008502 <_malloc_r+0x22>
 800859a:	6862      	ldr	r2, [r4, #4]
 800859c:	42a3      	cmp	r3, r4
 800859e:	bf0c      	ite	eq
 80085a0:	6032      	streq	r2, [r6, #0]
 80085a2:	605a      	strne	r2, [r3, #4]
 80085a4:	e7ec      	b.n	8008580 <_malloc_r+0xa0>
 80085a6:	4623      	mov	r3, r4
 80085a8:	6864      	ldr	r4, [r4, #4]
 80085aa:	e7b2      	b.n	8008512 <_malloc_r+0x32>
 80085ac:	4634      	mov	r4, r6
 80085ae:	6876      	ldr	r6, [r6, #4]
 80085b0:	e7b9      	b.n	8008526 <_malloc_r+0x46>
 80085b2:	230c      	movs	r3, #12
 80085b4:	603b      	str	r3, [r7, #0]
 80085b6:	4638      	mov	r0, r7
 80085b8:	f000 fc18 	bl	8008dec <__malloc_unlock>
 80085bc:	e7a1      	b.n	8008502 <_malloc_r+0x22>
 80085be:	6025      	str	r5, [r4, #0]
 80085c0:	e7de      	b.n	8008580 <_malloc_r+0xa0>
 80085c2:	bf00      	nop
 80085c4:	20000444 	.word	0x20000444

080085c8 <__sfputc_r>:
 80085c8:	6893      	ldr	r3, [r2, #8]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	b410      	push	{r4}
 80085d0:	6093      	str	r3, [r2, #8]
 80085d2:	da08      	bge.n	80085e6 <__sfputc_r+0x1e>
 80085d4:	6994      	ldr	r4, [r2, #24]
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	db01      	blt.n	80085de <__sfputc_r+0x16>
 80085da:	290a      	cmp	r1, #10
 80085dc:	d103      	bne.n	80085e6 <__sfputc_r+0x1e>
 80085de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085e2:	f000 b99f 	b.w	8008924 <__swbuf_r>
 80085e6:	6813      	ldr	r3, [r2, #0]
 80085e8:	1c58      	adds	r0, r3, #1
 80085ea:	6010      	str	r0, [r2, #0]
 80085ec:	7019      	strb	r1, [r3, #0]
 80085ee:	4608      	mov	r0, r1
 80085f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <__sfputs_r>:
 80085f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f8:	4606      	mov	r6, r0
 80085fa:	460f      	mov	r7, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	18d5      	adds	r5, r2, r3
 8008600:	42ac      	cmp	r4, r5
 8008602:	d101      	bne.n	8008608 <__sfputs_r+0x12>
 8008604:	2000      	movs	r0, #0
 8008606:	e007      	b.n	8008618 <__sfputs_r+0x22>
 8008608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860c:	463a      	mov	r2, r7
 800860e:	4630      	mov	r0, r6
 8008610:	f7ff ffda 	bl	80085c8 <__sfputc_r>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d1f3      	bne.n	8008600 <__sfputs_r+0xa>
 8008618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800861c <_vfiprintf_r>:
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	460d      	mov	r5, r1
 8008622:	b09d      	sub	sp, #116	; 0x74
 8008624:	4614      	mov	r4, r2
 8008626:	4698      	mov	r8, r3
 8008628:	4606      	mov	r6, r0
 800862a:	b118      	cbz	r0, 8008634 <_vfiprintf_r+0x18>
 800862c:	6983      	ldr	r3, [r0, #24]
 800862e:	b90b      	cbnz	r3, 8008634 <_vfiprintf_r+0x18>
 8008630:	f7ff fa94 	bl	8007b5c <__sinit>
 8008634:	4b89      	ldr	r3, [pc, #548]	; (800885c <_vfiprintf_r+0x240>)
 8008636:	429d      	cmp	r5, r3
 8008638:	d11b      	bne.n	8008672 <_vfiprintf_r+0x56>
 800863a:	6875      	ldr	r5, [r6, #4]
 800863c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800863e:	07d9      	lsls	r1, r3, #31
 8008640:	d405      	bmi.n	800864e <_vfiprintf_r+0x32>
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	059a      	lsls	r2, r3, #22
 8008646:	d402      	bmi.n	800864e <_vfiprintf_r+0x32>
 8008648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800864a:	f7ff fb2a 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 800864e:	89ab      	ldrh	r3, [r5, #12]
 8008650:	071b      	lsls	r3, r3, #28
 8008652:	d501      	bpl.n	8008658 <_vfiprintf_r+0x3c>
 8008654:	692b      	ldr	r3, [r5, #16]
 8008656:	b9eb      	cbnz	r3, 8008694 <_vfiprintf_r+0x78>
 8008658:	4629      	mov	r1, r5
 800865a:	4630      	mov	r0, r6
 800865c:	f000 f9c6 	bl	80089ec <__swsetup_r>
 8008660:	b1c0      	cbz	r0, 8008694 <_vfiprintf_r+0x78>
 8008662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008664:	07dc      	lsls	r4, r3, #31
 8008666:	d50e      	bpl.n	8008686 <_vfiprintf_r+0x6a>
 8008668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800866c:	b01d      	add	sp, #116	; 0x74
 800866e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008672:	4b7b      	ldr	r3, [pc, #492]	; (8008860 <_vfiprintf_r+0x244>)
 8008674:	429d      	cmp	r5, r3
 8008676:	d101      	bne.n	800867c <_vfiprintf_r+0x60>
 8008678:	68b5      	ldr	r5, [r6, #8]
 800867a:	e7df      	b.n	800863c <_vfiprintf_r+0x20>
 800867c:	4b79      	ldr	r3, [pc, #484]	; (8008864 <_vfiprintf_r+0x248>)
 800867e:	429d      	cmp	r5, r3
 8008680:	bf08      	it	eq
 8008682:	68f5      	ldreq	r5, [r6, #12]
 8008684:	e7da      	b.n	800863c <_vfiprintf_r+0x20>
 8008686:	89ab      	ldrh	r3, [r5, #12]
 8008688:	0598      	lsls	r0, r3, #22
 800868a:	d4ed      	bmi.n	8008668 <_vfiprintf_r+0x4c>
 800868c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800868e:	f7ff fb09 	bl	8007ca4 <__retarget_lock_release_recursive>
 8008692:	e7e9      	b.n	8008668 <_vfiprintf_r+0x4c>
 8008694:	2300      	movs	r3, #0
 8008696:	9309      	str	r3, [sp, #36]	; 0x24
 8008698:	2320      	movs	r3, #32
 800869a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800869e:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a2:	2330      	movs	r3, #48	; 0x30
 80086a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008868 <_vfiprintf_r+0x24c>
 80086a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ac:	f04f 0901 	mov.w	r9, #1
 80086b0:	4623      	mov	r3, r4
 80086b2:	469a      	mov	sl, r3
 80086b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b8:	b10a      	cbz	r2, 80086be <_vfiprintf_r+0xa2>
 80086ba:	2a25      	cmp	r2, #37	; 0x25
 80086bc:	d1f9      	bne.n	80086b2 <_vfiprintf_r+0x96>
 80086be:	ebba 0b04 	subs.w	fp, sl, r4
 80086c2:	d00b      	beq.n	80086dc <_vfiprintf_r+0xc0>
 80086c4:	465b      	mov	r3, fp
 80086c6:	4622      	mov	r2, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff ff93 	bl	80085f6 <__sfputs_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	f000 80aa 	beq.w	800882a <_vfiprintf_r+0x20e>
 80086d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d8:	445a      	add	r2, fp
 80086da:	9209      	str	r2, [sp, #36]	; 0x24
 80086dc:	f89a 3000 	ldrb.w	r3, [sl]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 80a2 	beq.w	800882a <_vfiprintf_r+0x20e>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f0:	f10a 0a01 	add.w	sl, sl, #1
 80086f4:	9304      	str	r3, [sp, #16]
 80086f6:	9307      	str	r3, [sp, #28]
 80086f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086fc:	931a      	str	r3, [sp, #104]	; 0x68
 80086fe:	4654      	mov	r4, sl
 8008700:	2205      	movs	r2, #5
 8008702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008706:	4858      	ldr	r0, [pc, #352]	; (8008868 <_vfiprintf_r+0x24c>)
 8008708:	f7f7 fd72 	bl	80001f0 <memchr>
 800870c:	9a04      	ldr	r2, [sp, #16]
 800870e:	b9d8      	cbnz	r0, 8008748 <_vfiprintf_r+0x12c>
 8008710:	06d1      	lsls	r1, r2, #27
 8008712:	bf44      	itt	mi
 8008714:	2320      	movmi	r3, #32
 8008716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871a:	0713      	lsls	r3, r2, #28
 800871c:	bf44      	itt	mi
 800871e:	232b      	movmi	r3, #43	; 0x2b
 8008720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008724:	f89a 3000 	ldrb.w	r3, [sl]
 8008728:	2b2a      	cmp	r3, #42	; 0x2a
 800872a:	d015      	beq.n	8008758 <_vfiprintf_r+0x13c>
 800872c:	9a07      	ldr	r2, [sp, #28]
 800872e:	4654      	mov	r4, sl
 8008730:	2000      	movs	r0, #0
 8008732:	f04f 0c0a 	mov.w	ip, #10
 8008736:	4621      	mov	r1, r4
 8008738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873c:	3b30      	subs	r3, #48	; 0x30
 800873e:	2b09      	cmp	r3, #9
 8008740:	d94e      	bls.n	80087e0 <_vfiprintf_r+0x1c4>
 8008742:	b1b0      	cbz	r0, 8008772 <_vfiprintf_r+0x156>
 8008744:	9207      	str	r2, [sp, #28]
 8008746:	e014      	b.n	8008772 <_vfiprintf_r+0x156>
 8008748:	eba0 0308 	sub.w	r3, r0, r8
 800874c:	fa09 f303 	lsl.w	r3, r9, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	46a2      	mov	sl, r4
 8008756:	e7d2      	b.n	80086fe <_vfiprintf_r+0xe2>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	1d19      	adds	r1, r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	9103      	str	r1, [sp, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	bfbb      	ittet	lt
 8008764:	425b      	neglt	r3, r3
 8008766:	f042 0202 	orrlt.w	r2, r2, #2
 800876a:	9307      	strge	r3, [sp, #28]
 800876c:	9307      	strlt	r3, [sp, #28]
 800876e:	bfb8      	it	lt
 8008770:	9204      	strlt	r2, [sp, #16]
 8008772:	7823      	ldrb	r3, [r4, #0]
 8008774:	2b2e      	cmp	r3, #46	; 0x2e
 8008776:	d10c      	bne.n	8008792 <_vfiprintf_r+0x176>
 8008778:	7863      	ldrb	r3, [r4, #1]
 800877a:	2b2a      	cmp	r3, #42	; 0x2a
 800877c:	d135      	bne.n	80087ea <_vfiprintf_r+0x1ce>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	1d1a      	adds	r2, r3, #4
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	9203      	str	r2, [sp, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfb8      	it	lt
 800878a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800878e:	3402      	adds	r4, #2
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008878 <_vfiprintf_r+0x25c>
 8008796:	7821      	ldrb	r1, [r4, #0]
 8008798:	2203      	movs	r2, #3
 800879a:	4650      	mov	r0, sl
 800879c:	f7f7 fd28 	bl	80001f0 <memchr>
 80087a0:	b140      	cbz	r0, 80087b4 <_vfiprintf_r+0x198>
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	eba0 000a 	sub.w	r0, r0, sl
 80087a8:	fa03 f000 	lsl.w	r0, r3, r0
 80087ac:	9b04      	ldr	r3, [sp, #16]
 80087ae:	4303      	orrs	r3, r0
 80087b0:	3401      	adds	r4, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b8:	482c      	ldr	r0, [pc, #176]	; (800886c <_vfiprintf_r+0x250>)
 80087ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087be:	2206      	movs	r2, #6
 80087c0:	f7f7 fd16 	bl	80001f0 <memchr>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d03f      	beq.n	8008848 <_vfiprintf_r+0x22c>
 80087c8:	4b29      	ldr	r3, [pc, #164]	; (8008870 <_vfiprintf_r+0x254>)
 80087ca:	bb1b      	cbnz	r3, 8008814 <_vfiprintf_r+0x1f8>
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	3307      	adds	r3, #7
 80087d0:	f023 0307 	bic.w	r3, r3, #7
 80087d4:	3308      	adds	r3, #8
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087da:	443b      	add	r3, r7
 80087dc:	9309      	str	r3, [sp, #36]	; 0x24
 80087de:	e767      	b.n	80086b0 <_vfiprintf_r+0x94>
 80087e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e4:	460c      	mov	r4, r1
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7a5      	b.n	8008736 <_vfiprintf_r+0x11a>
 80087ea:	2300      	movs	r3, #0
 80087ec:	3401      	adds	r4, #1
 80087ee:	9305      	str	r3, [sp, #20]
 80087f0:	4619      	mov	r1, r3
 80087f2:	f04f 0c0a 	mov.w	ip, #10
 80087f6:	4620      	mov	r0, r4
 80087f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fc:	3a30      	subs	r2, #48	; 0x30
 80087fe:	2a09      	cmp	r2, #9
 8008800:	d903      	bls.n	800880a <_vfiprintf_r+0x1ee>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0c5      	beq.n	8008792 <_vfiprintf_r+0x176>
 8008806:	9105      	str	r1, [sp, #20]
 8008808:	e7c3      	b.n	8008792 <_vfiprintf_r+0x176>
 800880a:	fb0c 2101 	mla	r1, ip, r1, r2
 800880e:	4604      	mov	r4, r0
 8008810:	2301      	movs	r3, #1
 8008812:	e7f0      	b.n	80087f6 <_vfiprintf_r+0x1da>
 8008814:	ab03      	add	r3, sp, #12
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	462a      	mov	r2, r5
 800881a:	4b16      	ldr	r3, [pc, #88]	; (8008874 <_vfiprintf_r+0x258>)
 800881c:	a904      	add	r1, sp, #16
 800881e:	4630      	mov	r0, r6
 8008820:	f7fd fefe 	bl	8006620 <_printf_float>
 8008824:	4607      	mov	r7, r0
 8008826:	1c78      	adds	r0, r7, #1
 8008828:	d1d6      	bne.n	80087d8 <_vfiprintf_r+0x1bc>
 800882a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882c:	07d9      	lsls	r1, r3, #31
 800882e:	d405      	bmi.n	800883c <_vfiprintf_r+0x220>
 8008830:	89ab      	ldrh	r3, [r5, #12]
 8008832:	059a      	lsls	r2, r3, #22
 8008834:	d402      	bmi.n	800883c <_vfiprintf_r+0x220>
 8008836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008838:	f7ff fa34 	bl	8007ca4 <__retarget_lock_release_recursive>
 800883c:	89ab      	ldrh	r3, [r5, #12]
 800883e:	065b      	lsls	r3, r3, #25
 8008840:	f53f af12 	bmi.w	8008668 <_vfiprintf_r+0x4c>
 8008844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008846:	e711      	b.n	800866c <_vfiprintf_r+0x50>
 8008848:	ab03      	add	r3, sp, #12
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	462a      	mov	r2, r5
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <_vfiprintf_r+0x258>)
 8008850:	a904      	add	r1, sp, #16
 8008852:	4630      	mov	r0, r6
 8008854:	f7fe f988 	bl	8006b68 <_printf_i>
 8008858:	e7e4      	b.n	8008824 <_vfiprintf_r+0x208>
 800885a:	bf00      	nop
 800885c:	08009078 	.word	0x08009078
 8008860:	08009098 	.word	0x08009098
 8008864:	08009058 	.word	0x08009058
 8008868:	08009214 	.word	0x08009214
 800886c:	0800921e 	.word	0x0800921e
 8008870:	08006621 	.word	0x08006621
 8008874:	080085f7 	.word	0x080085f7
 8008878:	0800921a 	.word	0x0800921a

0800887c <_sbrk_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	; (8008898 <_sbrk_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 fb18 	bl	8001ebc <_sbrk>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_sbrk_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_sbrk_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	2000044c 	.word	0x2000044c

0800889c <__sread>:
 800889c:	b510      	push	{r4, lr}
 800889e:	460c      	mov	r4, r1
 80088a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a4:	f000 faa8 	bl	8008df8 <_read_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	bfab      	itete	ge
 80088ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088ae:	89a3      	ldrhlt	r3, [r4, #12]
 80088b0:	181b      	addge	r3, r3, r0
 80088b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088b6:	bfac      	ite	ge
 80088b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ba:	81a3      	strhlt	r3, [r4, #12]
 80088bc:	bd10      	pop	{r4, pc}

080088be <__swrite>:
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	461f      	mov	r7, r3
 80088c4:	898b      	ldrh	r3, [r1, #12]
 80088c6:	05db      	lsls	r3, r3, #23
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4616      	mov	r6, r2
 80088ce:	d505      	bpl.n	80088dc <__swrite+0x1e>
 80088d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d4:	2302      	movs	r3, #2
 80088d6:	2200      	movs	r2, #0
 80088d8:	f000 f9f8 	bl	8008ccc <_lseek_r>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	f000 b869 	b.w	80089c8 <_write_r>

080088f6 <__sseek>:
 80088f6:	b510      	push	{r4, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fe:	f000 f9e5 	bl	8008ccc <_lseek_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	bf15      	itete	ne
 8008908:	6560      	strne	r0, [r4, #84]	; 0x54
 800890a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800890e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008912:	81a3      	strheq	r3, [r4, #12]
 8008914:	bf18      	it	ne
 8008916:	81a3      	strhne	r3, [r4, #12]
 8008918:	bd10      	pop	{r4, pc}

0800891a <__sclose>:
 800891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891e:	f000 b8f1 	b.w	8008b04 <_close_r>
	...

08008924 <__swbuf_r>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	460e      	mov	r6, r1
 8008928:	4614      	mov	r4, r2
 800892a:	4605      	mov	r5, r0
 800892c:	b118      	cbz	r0, 8008936 <__swbuf_r+0x12>
 800892e:	6983      	ldr	r3, [r0, #24]
 8008930:	b90b      	cbnz	r3, 8008936 <__swbuf_r+0x12>
 8008932:	f7ff f913 	bl	8007b5c <__sinit>
 8008936:	4b21      	ldr	r3, [pc, #132]	; (80089bc <__swbuf_r+0x98>)
 8008938:	429c      	cmp	r4, r3
 800893a:	d12b      	bne.n	8008994 <__swbuf_r+0x70>
 800893c:	686c      	ldr	r4, [r5, #4]
 800893e:	69a3      	ldr	r3, [r4, #24]
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	071a      	lsls	r2, r3, #28
 8008946:	d52f      	bpl.n	80089a8 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	b36b      	cbz	r3, 80089a8 <__swbuf_r+0x84>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	6820      	ldr	r0, [r4, #0]
 8008950:	1ac0      	subs	r0, r0, r3
 8008952:	6963      	ldr	r3, [r4, #20]
 8008954:	b2f6      	uxtb	r6, r6
 8008956:	4283      	cmp	r3, r0
 8008958:	4637      	mov	r7, r6
 800895a:	dc04      	bgt.n	8008966 <__swbuf_r+0x42>
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f966 	bl	8008c30 <_fflush_r>
 8008964:	bb30      	cbnz	r0, 80089b4 <__swbuf_r+0x90>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	6022      	str	r2, [r4, #0]
 8008972:	701e      	strb	r6, [r3, #0]
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	3001      	adds	r0, #1
 8008978:	4283      	cmp	r3, r0
 800897a:	d004      	beq.n	8008986 <__swbuf_r+0x62>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	07db      	lsls	r3, r3, #31
 8008980:	d506      	bpl.n	8008990 <__swbuf_r+0x6c>
 8008982:	2e0a      	cmp	r6, #10
 8008984:	d104      	bne.n	8008990 <__swbuf_r+0x6c>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f000 f951 	bl	8008c30 <_fflush_r>
 800898e:	b988      	cbnz	r0, 80089b4 <__swbuf_r+0x90>
 8008990:	4638      	mov	r0, r7
 8008992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <__swbuf_r+0x9c>)
 8008996:	429c      	cmp	r4, r3
 8008998:	d101      	bne.n	800899e <__swbuf_r+0x7a>
 800899a:	68ac      	ldr	r4, [r5, #8]
 800899c:	e7cf      	b.n	800893e <__swbuf_r+0x1a>
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <__swbuf_r+0xa0>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	bf08      	it	eq
 80089a4:	68ec      	ldreq	r4, [r5, #12]
 80089a6:	e7ca      	b.n	800893e <__swbuf_r+0x1a>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f81e 	bl	80089ec <__swsetup_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0cb      	beq.n	800894c <__swbuf_r+0x28>
 80089b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80089b8:	e7ea      	b.n	8008990 <__swbuf_r+0x6c>
 80089ba:	bf00      	nop
 80089bc:	08009078 	.word	0x08009078
 80089c0:	08009098 	.word	0x08009098
 80089c4:	08009058 	.word	0x08009058

080089c8 <_write_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	; (80089e8 <_write_r+0x20>)
 80089cc:	4604      	mov	r4, r0
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	2200      	movs	r2, #0
 80089d4:	602a      	str	r2, [r5, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f7f9 fa1f 	bl	8001e1a <_write>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_write_r+0x1e>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_write_r+0x1e>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	2000044c 	.word	0x2000044c

080089ec <__swsetup_r>:
 80089ec:	4b32      	ldr	r3, [pc, #200]	; (8008ab8 <__swsetup_r+0xcc>)
 80089ee:	b570      	push	{r4, r5, r6, lr}
 80089f0:	681d      	ldr	r5, [r3, #0]
 80089f2:	4606      	mov	r6, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	b125      	cbz	r5, 8008a02 <__swsetup_r+0x16>
 80089f8:	69ab      	ldr	r3, [r5, #24]
 80089fa:	b913      	cbnz	r3, 8008a02 <__swsetup_r+0x16>
 80089fc:	4628      	mov	r0, r5
 80089fe:	f7ff f8ad 	bl	8007b5c <__sinit>
 8008a02:	4b2e      	ldr	r3, [pc, #184]	; (8008abc <__swsetup_r+0xd0>)
 8008a04:	429c      	cmp	r4, r3
 8008a06:	d10f      	bne.n	8008a28 <__swsetup_r+0x3c>
 8008a08:	686c      	ldr	r4, [r5, #4]
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a10:	0719      	lsls	r1, r3, #28
 8008a12:	d42c      	bmi.n	8008a6e <__swsetup_r+0x82>
 8008a14:	06dd      	lsls	r5, r3, #27
 8008a16:	d411      	bmi.n	8008a3c <__swsetup_r+0x50>
 8008a18:	2309      	movs	r3, #9
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a26:	e03e      	b.n	8008aa6 <__swsetup_r+0xba>
 8008a28:	4b25      	ldr	r3, [pc, #148]	; (8008ac0 <__swsetup_r+0xd4>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d101      	bne.n	8008a32 <__swsetup_r+0x46>
 8008a2e:	68ac      	ldr	r4, [r5, #8]
 8008a30:	e7eb      	b.n	8008a0a <__swsetup_r+0x1e>
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <__swsetup_r+0xd8>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	bf08      	it	eq
 8008a38:	68ec      	ldreq	r4, [r5, #12]
 8008a3a:	e7e6      	b.n	8008a0a <__swsetup_r+0x1e>
 8008a3c:	0758      	lsls	r0, r3, #29
 8008a3e:	d512      	bpl.n	8008a66 <__swsetup_r+0x7a>
 8008a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a42:	b141      	cbz	r1, 8008a56 <__swsetup_r+0x6a>
 8008a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d002      	beq.n	8008a52 <__swsetup_r+0x66>
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7ff fcdb 	bl	8008408 <_free_r>
 8008a52:	2300      	movs	r3, #0
 8008a54:	6363      	str	r3, [r4, #52]	; 0x34
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f043 0308 	orr.w	r3, r3, #8
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	b94b      	cbnz	r3, 8008a86 <__swsetup_r+0x9a>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a7c:	d003      	beq.n	8008a86 <__swsetup_r+0x9a>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 f95b 	bl	8008d3c <__smakebuf_r>
 8008a86:	89a0      	ldrh	r0, [r4, #12]
 8008a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a8c:	f010 0301 	ands.w	r3, r0, #1
 8008a90:	d00a      	beq.n	8008aa8 <__swsetup_r+0xbc>
 8008a92:	2300      	movs	r3, #0
 8008a94:	60a3      	str	r3, [r4, #8]
 8008a96:	6963      	ldr	r3, [r4, #20]
 8008a98:	425b      	negs	r3, r3
 8008a9a:	61a3      	str	r3, [r4, #24]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	b943      	cbnz	r3, 8008ab2 <__swsetup_r+0xc6>
 8008aa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008aa4:	d1ba      	bne.n	8008a1c <__swsetup_r+0x30>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	0781      	lsls	r1, r0, #30
 8008aaa:	bf58      	it	pl
 8008aac:	6963      	ldrpl	r3, [r4, #20]
 8008aae:	60a3      	str	r3, [r4, #8]
 8008ab0:	e7f4      	b.n	8008a9c <__swsetup_r+0xb0>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e7f7      	b.n	8008aa6 <__swsetup_r+0xba>
 8008ab6:	bf00      	nop
 8008ab8:	20000028 	.word	0x20000028
 8008abc:	08009078 	.word	0x08009078
 8008ac0:	08009098 	.word	0x08009098
 8008ac4:	08009058 	.word	0x08009058

08008ac8 <__assert_func>:
 8008ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aca:	4614      	mov	r4, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <__assert_func+0x2c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	68d8      	ldr	r0, [r3, #12]
 8008ad6:	b14c      	cbz	r4, 8008aec <__assert_func+0x24>
 8008ad8:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <__assert_func+0x30>)
 8008ada:	9100      	str	r1, [sp, #0]
 8008adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ae0:	4906      	ldr	r1, [pc, #24]	; (8008afc <__assert_func+0x34>)
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f000 f8e0 	bl	8008ca8 <fiprintf>
 8008ae8:	f000 f9a5 	bl	8008e36 <abort>
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <__assert_func+0x38>)
 8008aee:	461c      	mov	r4, r3
 8008af0:	e7f3      	b.n	8008ada <__assert_func+0x12>
 8008af2:	bf00      	nop
 8008af4:	20000028 	.word	0x20000028
 8008af8:	08009225 	.word	0x08009225
 8008afc:	08009232 	.word	0x08009232
 8008b00:	08009260 	.word	0x08009260

08008b04 <_close_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d06      	ldr	r5, [pc, #24]	; (8008b20 <_close_r+0x1c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7f9 f99f 	bl	8001e52 <_close>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_close_r+0x1a>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_close_r+0x1a>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	2000044c 	.word	0x2000044c

08008b24 <__sflush_r>:
 8008b24:	898a      	ldrh	r2, [r1, #12]
 8008b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	0710      	lsls	r0, r2, #28
 8008b2e:	460c      	mov	r4, r1
 8008b30:	d458      	bmi.n	8008be4 <__sflush_r+0xc0>
 8008b32:	684b      	ldr	r3, [r1, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dc05      	bgt.n	8008b44 <__sflush_r+0x20>
 8008b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dc02      	bgt.n	8008b44 <__sflush_r+0x20>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d0f9      	beq.n	8008b3e <__sflush_r+0x1a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b50:	682f      	ldr	r7, [r5, #0]
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	d032      	beq.n	8008bbc <__sflush_r+0x98>
 8008b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	075a      	lsls	r2, r3, #29
 8008b5c:	d505      	bpl.n	8008b6a <__sflush_r+0x46>
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	1ac0      	subs	r0, r0, r3
 8008b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b64:	b10b      	cbz	r3, 8008b6a <__sflush_r+0x46>
 8008b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b68:	1ac0      	subs	r0, r0, r3
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b0      	blx	r6
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	d106      	bne.n	8008b8a <__sflush_r+0x66>
 8008b7c:	6829      	ldr	r1, [r5, #0]
 8008b7e:	291d      	cmp	r1, #29
 8008b80:	d82c      	bhi.n	8008bdc <__sflush_r+0xb8>
 8008b82:	4a2a      	ldr	r2, [pc, #168]	; (8008c2c <__sflush_r+0x108>)
 8008b84:	40ca      	lsrs	r2, r1
 8008b86:	07d6      	lsls	r6, r2, #31
 8008b88:	d528      	bpl.n	8008bdc <__sflush_r+0xb8>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	6062      	str	r2, [r4, #4]
 8008b8e:	04d9      	lsls	r1, r3, #19
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	6022      	str	r2, [r4, #0]
 8008b94:	d504      	bpl.n	8008ba0 <__sflush_r+0x7c>
 8008b96:	1c42      	adds	r2, r0, #1
 8008b98:	d101      	bne.n	8008b9e <__sflush_r+0x7a>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	b903      	cbnz	r3, 8008ba0 <__sflush_r+0x7c>
 8008b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba2:	602f      	str	r7, [r5, #0]
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	d0ca      	beq.n	8008b3e <__sflush_r+0x1a>
 8008ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <__sflush_r+0x92>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff fc29 	bl	8008408 <_free_r>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bba:	e7c1      	b.n	8008b40 <__sflush_r+0x1c>
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b0      	blx	r6
 8008bc4:	1c41      	adds	r1, r0, #1
 8008bc6:	d1c7      	bne.n	8008b58 <__sflush_r+0x34>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0c4      	beq.n	8008b58 <__sflush_r+0x34>
 8008bce:	2b1d      	cmp	r3, #29
 8008bd0:	d001      	beq.n	8008bd6 <__sflush_r+0xb2>
 8008bd2:	2b16      	cmp	r3, #22
 8008bd4:	d101      	bne.n	8008bda <__sflush_r+0xb6>
 8008bd6:	602f      	str	r7, [r5, #0]
 8008bd8:	e7b1      	b.n	8008b3e <__sflush_r+0x1a>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	e7ad      	b.n	8008b40 <__sflush_r+0x1c>
 8008be4:	690f      	ldr	r7, [r1, #16]
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	d0a9      	beq.n	8008b3e <__sflush_r+0x1a>
 8008bea:	0793      	lsls	r3, r2, #30
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	600f      	str	r7, [r1, #0]
 8008bf4:	bf18      	it	ne
 8008bf6:	2300      	movne	r3, #0
 8008bf8:	eba6 0807 	sub.w	r8, r6, r7
 8008bfc:	608b      	str	r3, [r1, #8]
 8008bfe:	f1b8 0f00 	cmp.w	r8, #0
 8008c02:	dd9c      	ble.n	8008b3e <__sflush_r+0x1a>
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c08:	4643      	mov	r3, r8
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b0      	blx	r6
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dc06      	bgt.n	8008c22 <__sflush_r+0xfe>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c20:	e78e      	b.n	8008b40 <__sflush_r+0x1c>
 8008c22:	4407      	add	r7, r0
 8008c24:	eba8 0800 	sub.w	r8, r8, r0
 8008c28:	e7e9      	b.n	8008bfe <__sflush_r+0xda>
 8008c2a:	bf00      	nop
 8008c2c:	20400001 	.word	0x20400001

08008c30 <_fflush_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	4605      	mov	r5, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b913      	cbnz	r3, 8008c40 <_fflush_r+0x10>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	b118      	cbz	r0, 8008c4a <_fflush_r+0x1a>
 8008c42:	6983      	ldr	r3, [r0, #24]
 8008c44:	b90b      	cbnz	r3, 8008c4a <_fflush_r+0x1a>
 8008c46:	f7fe ff89 	bl	8007b5c <__sinit>
 8008c4a:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <_fflush_r+0x6c>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	d11b      	bne.n	8008c88 <_fflush_r+0x58>
 8008c50:	686c      	ldr	r4, [r5, #4]
 8008c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0ef      	beq.n	8008c3a <_fflush_r+0xa>
 8008c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c5c:	07d0      	lsls	r0, r2, #31
 8008c5e:	d404      	bmi.n	8008c6a <_fflush_r+0x3a>
 8008c60:	0599      	lsls	r1, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_fflush_r+0x3a>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f7ff f81c 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7ff ff59 	bl	8008b24 <__sflush_r>
 8008c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	4605      	mov	r5, r0
 8008c78:	d4e0      	bmi.n	8008c3c <_fflush_r+0xc>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	059b      	lsls	r3, r3, #22
 8008c7e:	d4dd      	bmi.n	8008c3c <_fflush_r+0xc>
 8008c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c82:	f7ff f80f 	bl	8007ca4 <__retarget_lock_release_recursive>
 8008c86:	e7d9      	b.n	8008c3c <_fflush_r+0xc>
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <_fflush_r+0x70>)
 8008c8a:	429c      	cmp	r4, r3
 8008c8c:	d101      	bne.n	8008c92 <_fflush_r+0x62>
 8008c8e:	68ac      	ldr	r4, [r5, #8]
 8008c90:	e7df      	b.n	8008c52 <_fflush_r+0x22>
 8008c92:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <_fflush_r+0x74>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	bf08      	it	eq
 8008c98:	68ec      	ldreq	r4, [r5, #12]
 8008c9a:	e7da      	b.n	8008c52 <_fflush_r+0x22>
 8008c9c:	08009078 	.word	0x08009078
 8008ca0:	08009098 	.word	0x08009098
 8008ca4:	08009058 	.word	0x08009058

08008ca8 <fiprintf>:
 8008ca8:	b40e      	push	{r1, r2, r3}
 8008caa:	b503      	push	{r0, r1, lr}
 8008cac:	4601      	mov	r1, r0
 8008cae:	ab03      	add	r3, sp, #12
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <fiprintf+0x20>)
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f7ff fcaf 	bl	800861c <_vfiprintf_r>
 8008cbe:	b002      	add	sp, #8
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	20000028 	.word	0x20000028

08008ccc <_lseek_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <_lseek_r+0x20>)
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	602a      	str	r2, [r5, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f7f9 f8e0 	bl	8001ea0 <_lseek>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_lseek_r+0x1e>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_lseek_r+0x1e>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	2000044c 	.word	0x2000044c

08008cf0 <__swhatbuf_r>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	460e      	mov	r6, r1
 8008cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	b096      	sub	sp, #88	; 0x58
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	461d      	mov	r5, r3
 8008d00:	da08      	bge.n	8008d14 <__swhatbuf_r+0x24>
 8008d02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	061a      	lsls	r2, r3, #24
 8008d0c:	d410      	bmi.n	8008d30 <__swhatbuf_r+0x40>
 8008d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d12:	e00e      	b.n	8008d32 <__swhatbuf_r+0x42>
 8008d14:	466a      	mov	r2, sp
 8008d16:	f000 f895 	bl	8008e44 <_fstat_r>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	dbf1      	blt.n	8008d02 <__swhatbuf_r+0x12>
 8008d1e:	9a01      	ldr	r2, [sp, #4]
 8008d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d28:	425a      	negs	r2, r3
 8008d2a:	415a      	adcs	r2, r3
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	e7ee      	b.n	8008d0e <__swhatbuf_r+0x1e>
 8008d30:	2340      	movs	r3, #64	; 0x40
 8008d32:	2000      	movs	r0, #0
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	b016      	add	sp, #88	; 0x58
 8008d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d3c <__smakebuf_r>:
 8008d3c:	898b      	ldrh	r3, [r1, #12]
 8008d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d40:	079d      	lsls	r5, r3, #30
 8008d42:	4606      	mov	r6, r0
 8008d44:	460c      	mov	r4, r1
 8008d46:	d507      	bpl.n	8008d58 <__smakebuf_r+0x1c>
 8008d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	2301      	movs	r3, #1
 8008d52:	6163      	str	r3, [r4, #20]
 8008d54:	b002      	add	sp, #8
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	ab01      	add	r3, sp, #4
 8008d5a:	466a      	mov	r2, sp
 8008d5c:	f7ff ffc8 	bl	8008cf0 <__swhatbuf_r>
 8008d60:	9900      	ldr	r1, [sp, #0]
 8008d62:	4605      	mov	r5, r0
 8008d64:	4630      	mov	r0, r6
 8008d66:	f7ff fbbb 	bl	80084e0 <_malloc_r>
 8008d6a:	b948      	cbnz	r0, 8008d80 <__smakebuf_r+0x44>
 8008d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d70:	059a      	lsls	r2, r3, #22
 8008d72:	d4ef      	bmi.n	8008d54 <__smakebuf_r+0x18>
 8008d74:	f023 0303 	bic.w	r3, r3, #3
 8008d78:	f043 0302 	orr.w	r3, r3, #2
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	e7e3      	b.n	8008d48 <__smakebuf_r+0xc>
 8008d80:	4b0d      	ldr	r3, [pc, #52]	; (8008db8 <__smakebuf_r+0x7c>)
 8008d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	6020      	str	r0, [r4, #0]
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	81a3      	strh	r3, [r4, #12]
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	6163      	str	r3, [r4, #20]
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	6120      	str	r0, [r4, #16]
 8008d96:	b15b      	cbz	r3, 8008db0 <__smakebuf_r+0x74>
 8008d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f000 f863 	bl	8008e68 <_isatty_r>
 8008da2:	b128      	cbz	r0, 8008db0 <__smakebuf_r+0x74>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	f043 0301 	orr.w	r3, r3, #1
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	89a0      	ldrh	r0, [r4, #12]
 8008db2:	4305      	orrs	r5, r0
 8008db4:	81a5      	strh	r5, [r4, #12]
 8008db6:	e7cd      	b.n	8008d54 <__smakebuf_r+0x18>
 8008db8:	08007af5 	.word	0x08007af5

08008dbc <__ascii_mbtowc>:
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	b901      	cbnz	r1, 8008dc2 <__ascii_mbtowc+0x6>
 8008dc0:	a901      	add	r1, sp, #4
 8008dc2:	b142      	cbz	r2, 8008dd6 <__ascii_mbtowc+0x1a>
 8008dc4:	b14b      	cbz	r3, 8008dda <__ascii_mbtowc+0x1e>
 8008dc6:	7813      	ldrb	r3, [r2, #0]
 8008dc8:	600b      	str	r3, [r1, #0]
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	1e10      	subs	r0, r2, #0
 8008dce:	bf18      	it	ne
 8008dd0:	2001      	movne	r0, #1
 8008dd2:	b002      	add	sp, #8
 8008dd4:	4770      	bx	lr
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	e7fb      	b.n	8008dd2 <__ascii_mbtowc+0x16>
 8008dda:	f06f 0001 	mvn.w	r0, #1
 8008dde:	e7f8      	b.n	8008dd2 <__ascii_mbtowc+0x16>

08008de0 <__malloc_lock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__malloc_lock+0x8>)
 8008de2:	f7fe bf5e 	b.w	8007ca2 <__retarget_lock_acquire_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000440 	.word	0x20000440

08008dec <__malloc_unlock>:
 8008dec:	4801      	ldr	r0, [pc, #4]	; (8008df4 <__malloc_unlock+0x8>)
 8008dee:	f7fe bf59 	b.w	8007ca4 <__retarget_lock_release_recursive>
 8008df2:	bf00      	nop
 8008df4:	20000440 	.word	0x20000440

08008df8 <_read_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	; (8008e18 <_read_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f8 ffea 	bl	8001de0 <_read>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_read_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_read_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	2000044c 	.word	0x2000044c

08008e1c <__ascii_wctomb>:
 8008e1c:	b149      	cbz	r1, 8008e32 <__ascii_wctomb+0x16>
 8008e1e:	2aff      	cmp	r2, #255	; 0xff
 8008e20:	bf85      	ittet	hi
 8008e22:	238a      	movhi	r3, #138	; 0x8a
 8008e24:	6003      	strhi	r3, [r0, #0]
 8008e26:	700a      	strbls	r2, [r1, #0]
 8008e28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e2c:	bf98      	it	ls
 8008e2e:	2001      	movls	r0, #1
 8008e30:	4770      	bx	lr
 8008e32:	4608      	mov	r0, r1
 8008e34:	4770      	bx	lr

08008e36 <abort>:
 8008e36:	b508      	push	{r3, lr}
 8008e38:	2006      	movs	r0, #6
 8008e3a:	f000 f84d 	bl	8008ed8 <raise>
 8008e3e:	2001      	movs	r0, #1
 8008e40:	f7f8 ffc4 	bl	8001dcc <_exit>

08008e44 <_fstat_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d07      	ldr	r5, [pc, #28]	; (8008e64 <_fstat_r+0x20>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	f7f9 f80a 	bl	8001e6a <_fstat>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d102      	bne.n	8008e60 <_fstat_r+0x1c>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	b103      	cbz	r3, 8008e60 <_fstat_r+0x1c>
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	2000044c 	.word	0x2000044c

08008e68 <_isatty_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d06      	ldr	r5, [pc, #24]	; (8008e84 <_isatty_r+0x1c>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7f9 f809 	bl	8001e8a <_isatty>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_isatty_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_isatty_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	2000044c 	.word	0x2000044c

08008e88 <_raise_r>:
 8008e88:	291f      	cmp	r1, #31
 8008e8a:	b538      	push	{r3, r4, r5, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	d904      	bls.n	8008e9c <_raise_r+0x14>
 8008e92:	2316      	movs	r3, #22
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e9e:	b112      	cbz	r2, 8008ea6 <_raise_r+0x1e>
 8008ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ea4:	b94b      	cbnz	r3, 8008eba <_raise_r+0x32>
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 f830 	bl	8008f0c <_getpid_r>
 8008eac:	462a      	mov	r2, r5
 8008eae:	4601      	mov	r1, r0
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb6:	f000 b817 	b.w	8008ee8 <_kill_r>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d00a      	beq.n	8008ed4 <_raise_r+0x4c>
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	d103      	bne.n	8008eca <_raise_r+0x42>
 8008ec2:	2316      	movs	r3, #22
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7e7      	b.n	8008e9a <_raise_r+0x12>
 8008eca:	2400      	movs	r4, #0
 8008ecc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	4798      	blx	r3
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e7e0      	b.n	8008e9a <_raise_r+0x12>

08008ed8 <raise>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <raise+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f7ff bfd3 	b.w	8008e88 <_raise_r>
 8008ee2:	bf00      	nop
 8008ee4:	20000028 	.word	0x20000028

08008ee8 <_kill_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	; (8008f08 <_kill_r+0x20>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 ff59 	bl	8001dac <_kill>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_kill_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_kill_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	2000044c 	.word	0x2000044c

08008f0c <_getpid_r>:
 8008f0c:	f7f8 bf46 	b.w	8001d9c <_getpid>

08008f10 <_init>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr

08008f1c <_fini>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	bf00      	nop
 8008f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f22:	bc08      	pop	{r3}
 8008f24:	469e      	mov	lr, r3
 8008f26:	4770      	bx	lr
