
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008090  08008090  00018090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a4  080084a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080084a4  080084a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084a4  080084a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080084ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001a4  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec31  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc9  00000000  00000000  0002ee3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00030b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216e2  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010053  00000000  00000000  00053af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb97c  00000000  00000000  00063b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f4c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004640  00000000  00000000  0012f514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008078 	.word	0x08008078

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008078 	.word	0x08008078

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f004 f893 	bl	8004d00 <HAL_UART_Transmit>

  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200002dc 	.word	0x200002dc

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fcfe 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f820 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 fa0c 	bl	8001010 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf8:	f000 f9da 	bl	8000fb0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bfc:	f000 f880 	bl	8000d00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c00:	f000 f90c 	bl	8000e1c <MX_TIM3_Init>
  MX_TIM15_Init();
 8000c04:	f000 f982 	bl	8000f0c <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <main+0x44>)
 8000c0c:	f002 fea0 	bl	8003950 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000c10:	2104      	movs	r1, #4
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <main+0x44>)
 8000c14:	f002 fe9c 	bl	8003950 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <main+0x44>)
 8000c1c:	f002 fd34 	bl	8003688 <HAL_TIM_PWM_Start>
  tick_start = HAL_GetTick();
 8000c20:	f000 fd3e 	bl	80016a0 <HAL_GetTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a02      	ldr	r2, [pc, #8]	; (8000c30 <main+0x48>)
 8000c28:	6013      	str	r3, [r2, #0]
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <main+0x42>
 8000c2c:	200001f8 	.word	0x200001f8
 8000c30:	20000364 	.word	0x20000364

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0a6      	sub	sp, #152	; 0x98
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fcfa 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2258      	movs	r2, #88	; 0x58
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 fcec 	bl	800563c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 ff98 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 fa3d 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 ffd6 	bl	8002c70 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cca:	f000 fa27 	bl	800111c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <SystemClock_Config+0xc8>)
 8000cd0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 f9f9 	bl	80030dc <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cf0:	f000 fa14 	bl	800111c <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3798      	adds	r7, #152	; 0x98
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	00700002 	.word	0x00700002

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
 8000d30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d32:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d3c:	2248      	movs	r2, #72	; 0x48
 8000d3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d48:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <MX_TIM2_Init+0x118>)
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d5a:	f002 fda1 	bl	80038a0 <HAL_TIM_IC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d64:	f000 f9da 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d68:	482a      	ldr	r0, [pc, #168]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d6a:	f002 fc2c 	bl	80035c6 <HAL_TIM_PWM_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d74:	f000 f9d2 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4823      	ldr	r0, [pc, #140]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000d88:	f003 fee0 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d92:	f000 f9c3 	bl	800111c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000db0:	f002 feca 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000dba:	f000 f9af 	bl	800111c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2204      	movs	r2, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000dd0:	f002 feba 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000dda:	f000 f99f 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000de2:	230a      	movs	r3, #10
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2208      	movs	r2, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000df6:	f002 ff43 	bl	8003c80 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e00:	f000 f98c 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM2_Init+0x114>)
 8000e06:	f000 fa27 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001f8 	.word	0x200001f8
 8000e18:	000f4240 	.word	0x000f4240

08000e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <MX_TIM3_Init+0xec>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1107-1;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e56:	f240 4252 	movw	r2, #1106	; 0x452
 8000e5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e64:	22fe      	movs	r2, #254	; 0xfe
 8000e66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e74:	4823      	ldr	r0, [pc, #140]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e76:	f002 fb4f 	bl	8003518 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e80:	f000 f94c 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481c      	ldr	r0, [pc, #112]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e92:	f003 f809 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e9c:	f000 f93e 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000ea2:	f002 fb90 	bl	80035c6 <HAL_TIM_PWM_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000eac:	f000 f936 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000ec0:	f003 fe44 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eca:	f000 f927 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ece:	2360      	movs	r3, #96	; 0x60
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000ee6:	f002 fecb 	bl	8003c80 <HAL_TIM_PWM_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ef0:	f000 f914 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000ef6:	f000 f9af 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000efa:	bf00      	nop
 8000efc:	3738      	adds	r7, #56	; 0x38
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000244 	.word	0x20000244
 8000f08:	40000400 	.word	0x40000400

08000f0c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <MX_TIM15_Init+0xa0>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6000;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f32:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f36:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 6000;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f40:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f44:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f5a:	f002 fadd 	bl	8003518 <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 f8da 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f76:	f002 ff97 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000f80:	f000 f8cc 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_TIM15_Init+0x9c>)
 8000f92:	f003 fddb 	bl	8004b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000f9c:	f000 f8be 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000290 	.word	0x20000290
 8000fac:	40014000 	.word	0x40014000

08000fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_USART2_UART_Init+0x5c>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f003 fe36 	bl	8004c64 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f000 f88d 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002dc 	.word	0x200002dc
 800100c:	40004400 	.word	0x40004400

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <MX_GPIO_Init+0x100>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a39      	ldr	r2, [pc, #228]	; (8001110 <MX_GPIO_Init+0x100>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_GPIO_Init+0x100>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <MX_GPIO_Init+0x100>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a33      	ldr	r2, [pc, #204]	; (8001110 <MX_GPIO_Init+0x100>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <MX_GPIO_Init+0x100>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <MX_GPIO_Init+0x100>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <MX_GPIO_Init+0x100>)
 800105c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <MX_GPIO_Init+0x100>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f000 fd8e 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_7_GPIO_Port, RED_7_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4824      	ldr	r0, [pc, #144]	; (8001114 <MX_GPIO_Init+0x104>)
 8001082:	f000 fd89 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_pin_Pin|YELLOW_6_Pin|BLUE_1_Pin|BLUE_2_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7154 	mov.w	r1, #848	; 0x350
 800108c:	4822      	ldr	r0, [pc, #136]	; (8001118 <MX_GPIO_Init+0x108>)
 800108e:	f000 fd83 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SERVO_analog_Pin */
  GPIO_InitStruct.Pin = SERVO_analog_Pin;
 8001092:	2310      	movs	r3, #16
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SERVO_analog_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f000 fbec 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_3_Pin GREEN_4_Pin YELLOW_5_Pin RED_8_Pin */
  GPIO_InitStruct.Pin = GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin;
 80010ac:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80010b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f000 fbdc 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_7_Pin */
  GPIO_InitStruct.Pin = RED_7_Pin;
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_7_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_GPIO_Init+0x104>)
 80010e4:	f000 fbce 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_pin_Pin YELLOW_6_Pin BLUE_1_Pin BLUE_2_Pin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin|YELLOW_6_Pin|BLUE_1_Pin|BLUE_2_Pin;
 80010e8:	f44f 7354 	mov.w	r3, #848	; 0x350
 80010ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_GPIO_Init+0x108>)
 8001102:	f000 fbbf 	bl	8001884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001106:	bf00      	nop
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800
 8001118:	48000400 	.word	0x48000400

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001190:	d128      	bne.n	80011e4 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_TIM_IC_MspInit+0x7c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_TIM_IC_MspInit+0x7c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_TIM_IC_MspInit+0x7c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_TIM_IC_MspInit+0x7c>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_TIM_IC_MspInit+0x7c>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_TIM_IC_MspInit+0x7c>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d2:	2301      	movs	r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fb50 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_TIM_Base_MspInit+0x5c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10c      	bne.n	800121c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_TIM_Base_MspInit+0x60>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_TIM_Base_MspInit+0x60>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_TIM_Base_MspInit+0x60>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800121a:	e010      	b.n	800123e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM15)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <HAL_TIM_Base_MspInit+0x64>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10b      	bne.n	800123e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_TIM_Base_MspInit+0x60>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_TIM_Base_MspInit+0x60>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_TIM_Base_MspInit+0x60>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40000400 	.word	0x40000400
 8001250:	40021000 	.word	0x40021000
 8001254:	40014000 	.word	0x40014000

08001258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d11d      	bne.n	80012b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a4:	2301      	movs	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 80012b0:	f000 fae8 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012b4:	e020      	b.n	80012f8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <HAL_TIM_MspPostInit+0xb0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d11b      	bne.n	80012f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 80012c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ca:	6153      	str	r3, [r2, #20]
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012d8:	2340      	movs	r3, #64	; 0x40
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e8:	2302      	movs	r3, #2
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <HAL_TIM_MspPostInit+0xb4>)
 80012f4:	f000 fac6 	bl	8001884 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400
 8001308:	40000400 	.word	0x40000400
 800130c:	48000800 	.word	0x48000800

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_UART_MspInit+0x7c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d128      	bne.n	8001384 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_UART_MspInit+0x80>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <HAL_UART_MspInit+0x80>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_UART_MspInit+0x80>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0x80>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_UART_MspInit+0x80>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_UART_MspInit+0x80>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001362:	230c      	movs	r3, #12
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f000 fa80 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40004400 	.word	0x40004400
 8001390:	40021000 	.word	0x40021000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f94a 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_getpid>:
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	2301      	movs	r3, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_kill>:
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	f004 f8f1 	bl	80055e8 <__errno>
 8001406:	4603      	mov	r3, r0
 8001408:	2216      	movs	r2, #22
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_exit>:
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffe7 	bl	80013f8 <_kill>
 800142a:	e7fe      	b.n	800142a <_exit+0x12>

0800142c <_read>:
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_write>:
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e009      	b.n	800148c <_write+0x26>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fb99 	bl	8000bb8 <__io_putchar>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf1      	blt.n	8001478 <_write+0x12>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_close>:
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_fstat>:
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	2300      	movs	r3, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_isatty>:
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	2301      	movs	r3, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_lseek>:
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	2300      	movs	r3, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <_sbrk>:
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
 8001538:	f004 f856 	bl	80055e8 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20010000 	.word	0x20010000
 8001568:	00000400 	.word	0x00000400
 800156c:	20000368 	.word	0x20000368
 8001570:	20000380 	.word	0x20000380

08001574 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopForever+0x2>
 800159c:	f7ff ffea 	bl	8001574 <SystemInit>
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopForever+0x6>)
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopForever+0xa>)
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopForever+0xe>)
 80015a6:	2300      	movs	r3, #0
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:
 80015aa:	58d4      	ldr	r4, [r2, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:
 80015b0:	18c4      	adds	r4, r0, r3
 80015b2:	428c      	cmp	r4, r1
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopForever+0x12>)
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopForever+0x16>)
 80015ba:	2300      	movs	r3, #0
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:
 80015c2:	42a2      	cmp	r2, r4
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>
 80015c6:	f004 f815 	bl	80055f4 <__libc_init_array>
 80015ca:	f7ff fb0d 	bl	8000be8 <main>

080015ce <LoopForever>:
 80015ce:	e7fe      	b.n	80015ce <LoopForever>
 80015d0:	20010000 	.word	0x20010000
 80015d4:	20000000 	.word	0x20000000
 80015d8:	200001dc 	.word	0x200001dc
 80015dc:	080084ac 	.word	0x080084ac
 80015e0:	200001dc 	.word	0x200001dc
 80015e4:	20000380 	.word	0x20000380

080015e8 <ADC1_2_IRQHandler>:
 80015e8:	e7fe      	b.n	80015e8 <ADC1_2_IRQHandler>
	...

080015ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f90d 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fd8e 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f917 	bl	800186a <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001654:	f000 f8ed 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	2000036c 	.word	0x2000036c

080016a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000036c 	.word	0x2000036c

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e160      	b.n	8001b56 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8152 	beq.w	8001b50 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <HAL_GPIO_Init+0x40>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b03      	cmp	r3, #3
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80ac 	beq.w	8001b50 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f8:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <HAL_GPIO_Init+0x2f0>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_GPIO_Init+0x2f0>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_GPIO_Init+0x2f0>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a10:	4a59      	ldr	r2, [pc, #356]	; (8001b78 <HAL_GPIO_Init+0x2f4>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a3a:	d025      	beq.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d01f      	beq.n	8001a84 <HAL_GPIO_Init+0x200>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_GPIO_Init+0x2fc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d019      	beq.n	8001a80 <HAL_GPIO_Init+0x1fc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x300>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d013      	beq.n	8001a7c <HAL_GPIO_Init+0x1f8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_GPIO_Init+0x304>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00d      	beq.n	8001a78 <HAL_GPIO_Init+0x1f4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_GPIO_Init+0x308>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x1f0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <HAL_GPIO_Init+0x30c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_GPIO_Init+0x1ec>
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	e00c      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a70:	2307      	movs	r3, #7
 8001a72:	e00a      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e008      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9a:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_GPIO_Init+0x2f4>)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001acc:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b20:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f47f ae97 	bne.w	8001894 <HAL_GPIO_Init+0x10>
  }
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	48000400 	.word	0x48000400
 8001b80:	48000800 	.word	0x48000800
 8001b84:	48000c00 	.word	0x48000c00
 8001b88:	48001000 	.word	0x48001000
 8001b8c:	48001400 	.word	0x48001400
 8001b90:	48001800 	.word	0x48001800
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f001 b83a 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 816f 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c04:	4bb5      	ldr	r3, [pc, #724]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4bb2      	ldr	r3, [pc, #712]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d15c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x10e>
 8001c1c:	4baf      	ldr	r3, [pc, #700]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d155      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x10e>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_OscConfig+0x94>
 8001c56:	4ba1      	ldr	r3, [pc, #644]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e015      	b.n	8001c88 <HAL_RCC_OscConfig+0xc0>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c60:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c78:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c84:	4b95      	ldr	r3, [pc, #596]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c8c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c90:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8111 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x318>
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8108 	bne.w	8001ee0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f000 bfc6 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
 8001ce8:	4b7c      	ldr	r3, [pc, #496]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7b      	ldr	r2, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e036      	b.n	8001d64 <HAL_RCC_OscConfig+0x19c>
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x158>
 8001d06:	4b75      	ldr	r3, [pc, #468]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a74      	ldr	r2, [pc, #464]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a71      	ldr	r2, [pc, #452]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e021      	b.n	8001d64 <HAL_RCC_OscConfig+0x19c>
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x184>
 8001d32:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a69      	ldr	r2, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a66      	ldr	r2, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0x19c>
 8001d4c:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a62      	ldr	r2, [pc, #392]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b60      	ldr	r3, [pc, #384]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5f      	ldr	r2, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d059      	beq.n	8001e28 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fc94 	bl	80016a0 <HAL_GetTick>
 8001d78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fc8f 	bl	80016a0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d902      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	f000 bf67 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001da8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1fe>
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x22a>
 8001dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001de2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001dfa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001dfe:	fa92 f2a2 	rbit	r2, r2
 8001e02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e0a:	fab2 f282 	clz	r2, r2
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f042 0220 	orr.w	r2, r2, #32
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f002 021f 	and.w	r2, r2, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ab      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b6>
 8001e26:	e05c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc3a 	bl	80016a0 <HAL_GetTick>
 8001e2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e32:	f7ff fc35 	bl	80016a0 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d902      	bls.n	8001e48 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	f000 bf0d 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001e5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2b2>
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2de>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCC_OscConfig+0x314>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eaa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001eae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001eb2:	fa92 f2a2 	rbit	r2, r2
 8001eb6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001eba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ab      	bne.n	8001e32 <HAL_RCC_OscConfig+0x26a>
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_OscConfig+0x31a>
 8001edc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 817f 	beq.w	80021f6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef8:	4ba7      	ldr	r3, [pc, #668]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f04:	4ba4      	ldr	r3, [pc, #656]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d173      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x430>
 8001f10:	4ba1      	ldr	r3, [pc, #644]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f1c:	d16c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x430>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0x386>
 8001f48:	4b93      	ldr	r3, [pc, #588]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e013      	b.n	8001f76 <HAL_RCC_OscConfig+0x3ae>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	2202      	movs	r2, #2
 8001f78:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f7c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f042 0220 	orr.w	r2, r2, #32
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f002 021f 	and.w	r2, r2, #31
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCC_OscConfig+0x3f6>
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d002      	beq.n	8001fbe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f000 be52 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	21f8      	movs	r1, #248	; 0xf8
 8001fd4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001fdc:	fa91 f1a1 	rbit	r1, r1
 8001fe0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001fe4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fe8:	fab1 f181 	clz	r1, r1
 8001fec:	b2c9      	uxtb	r1, r1
 8001fee:	408b      	lsls	r3, r1
 8001ff0:	4969      	ldr	r1, [pc, #420]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	e0fe      	b.n	80021f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8088 	beq.w	800211a <HAL_RCC_OscConfig+0x552>
 800200a:	2301      	movs	r3, #1
 800200c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800201c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800202a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	461a      	mov	r2, r3
 8002032:	2301      	movs	r3, #1
 8002034:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fb33 	bl	80016a0 <HAL_GetTick>
 800203a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fb2e 	bl	80016a0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d902      	bls.n	8002056 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	f000 be06 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002068:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_RCC_OscConfig+0x4be>
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	e013      	b.n	80020ae <HAL_RCC_OscConfig+0x4e6>
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002098:	2302      	movs	r3, #2
 800209a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800209e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2202      	movs	r2, #2
 80020b0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80020b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80020c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f042 0220 	orr.w	r2, r2, #32
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f002 021f 	and.w	r2, r2, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0af      	beq.n	8002040 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	21f8      	movs	r1, #248	; 0xf8
 80020f6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80020fe:	fa91 f1a1 	rbit	r1, r1
 8002102:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002106:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800210a:	fab1 f181 	clz	r1, r1
 800210e:	b2c9      	uxtb	r1, r1
 8002110:	408b      	lsls	r3, r1
 8002112:	4921      	ldr	r1, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e06d      	b.n	80021f6 <HAL_RCC_OscConfig+0x62e>
 800211a:	2301      	movs	r3, #1
 800211c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800212c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2300      	movs	r3, #0
 8002144:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff faab 	bl	80016a0 <HAL_GetTick>
 800214a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff faa6 	bl	80016a0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	f000 bd7e 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002178:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCC_OscConfig+0x5d4>
 8002190:	4b01      	ldr	r3, [pc, #4]	; (8002198 <HAL_RCC_OscConfig+0x5d0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	e016      	b.n	80021c4 <HAL_RCC_OscConfig+0x5fc>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80021ae:	2302      	movs	r3, #2
 80021b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021c0:	4bbf      	ldr	r3, [pc, #764]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2202      	movs	r2, #2
 80021c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80021ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80021d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f042 0220 	orr.w	r2, r2, #32
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f002 021f 	and.w	r2, r2, #31
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ac      	bne.n	8002150 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8113 	beq.w	8002432 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d07c      	beq.n	8002316 <HAL_RCC_OscConfig+0x74e>
 800221c:	2301      	movs	r3, #1
 800221e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800222e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4ba2      	ldr	r3, [pc, #648]	; (80024c4 <HAL_RCC_OscConfig+0x8fc>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2301      	movs	r3, #1
 8002244:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fa2b 	bl	80016a0 <HAL_GetTick>
 800224a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fa26 	bl	80016a0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bcfe 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002278:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002286:	2202      	movs	r2, #2
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022aa:	2202      	movs	r2, #2
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b7e      	ldr	r3, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 80022c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022d2:	2102      	movs	r1, #2
 80022d4:	6019      	str	r1, [r3, #0]
 80022d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f1a3 	rbit	r1, r3
 80022e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022ec:	6019      	str	r1, [r3, #0]
  return result;
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d09d      	beq.n	8002250 <HAL_RCC_OscConfig+0x688>
 8002314:	e08d      	b.n	8002432 <HAL_RCC_OscConfig+0x86a>
 8002316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002338:	601a      	str	r2, [r3, #0]
  return result;
 800233a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002342:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x8fc>)
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	461a      	mov	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7ff f9a2 	bl	80016a0 <HAL_GetTick>
 800235c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002362:	f7ff f99d 	bl	80016a0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d902      	bls.n	8002378 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	f000 bc75 	b.w	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023a4:	2202      	movs	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 80023e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023f0:	2102      	movs	r1, #2
 80023f2:	6019      	str	r1, [r3, #0]
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f1a3 	rbit	r1, r3
 8002402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002406:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800240a:	6019      	str	r1, [r3, #0]
  return result;
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d197      	bne.n	8002362 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 81a5 	beq.w	8002792 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d116      	bne.n	8002488 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCC_OscConfig+0x8f8>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002480:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_RCC_OscConfig+0x900>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d121      	bne.n	80024d8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_RCC_OscConfig+0x900>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x900>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a0:	f7ff f8fe 	bl	80016a0 <HAL_GetTick>
 80024a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e010      	b.n	80024cc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7ff f8f9 	bl	80016a0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d908      	bls.n	80024cc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e3d1      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	10908120 	.word	0x10908120
 80024c8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	4b8d      	ldr	r3, [pc, #564]	; (8002704 <HAL_RCC_OscConfig+0xb3c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0e8      	beq.n	80024aa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x92e>
 80024e8:	4b87      	ldr	r3, [pc, #540]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a86      	ldr	r2, [pc, #536]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	e035      	b.n	8002562 <HAL_RCC_OscConfig+0x99a>
 80024f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x958>
 8002506:	4b80      	ldr	r3, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a7f      	ldr	r2, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a7c      	ldr	r2, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	e020      	b.n	8002562 <HAL_RCC_OscConfig+0x99a>
 8002520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d10c      	bne.n	800254a <HAL_RCC_OscConfig+0x982>
 8002530:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a74      	ldr	r2, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a71      	ldr	r2, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	e00b      	b.n	8002562 <HAL_RCC_OscConfig+0x99a>
 800254a:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002566:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8081 	beq.w	8002676 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7ff f894 	bl	80016a0 <HAL_GetTick>
 8002578:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff f88f 	bl	80016a0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e365      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025c2:	2202      	movs	r2, #2
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025dc:	601a      	str	r2, [r3, #0]
  return result;
 80025de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_OscConfig+0xa3a>
 80025fc:	4b42      	ldr	r3, [pc, #264]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	e013      	b.n	800262a <HAL_RCC_OscConfig+0xa62>
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800262e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002632:	2102      	movs	r1, #2
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800263a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	fa92 f1a2 	rbit	r1, r2
 8002644:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002648:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800264c:	6011      	str	r1, [r2, #0]
  return result;
 800264e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002652:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f002 021f 	and.w	r2, r2, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d084      	beq.n	800257e <HAL_RCC_OscConfig+0x9b6>
 8002674:	e083      	b.n	800277e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff f813 	bl	80016a0 <HAL_GetTick>
 800267a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7ff f80e 	bl	80016a0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e2e4      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026a0:	2202      	movs	r2, #2
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026de:	601a      	str	r2, [r3, #0]
  return result;
 80026e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d106      	bne.n	800270c <HAL_RCC_OscConfig+0xb44>
 80026fe:	4b02      	ldr	r3, [pc, #8]	; (8002708 <HAL_RCC_OscConfig+0xb40>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	e017      	b.n	8002734 <HAL_RCC_OscConfig+0xb6c>
 8002704:	40007000 	.word	0x40007000
 8002708:	40021000 	.word	0x40021000
 800270c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002710:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002714:	2202      	movs	r2, #2
 8002716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4bb3      	ldr	r3, [pc, #716]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002738:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800273c:	2102      	movs	r1, #2
 800273e:	6011      	str	r1, [r2, #0]
 8002740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002744:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	fa92 f1a2 	rbit	r1, r2
 800274e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002752:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002756:	6011      	str	r1, [r2, #0]
  return result;
 8002758:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800275c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d180      	bne.n	8002680 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002782:	2b01      	cmp	r3, #1
 8002784:	d105      	bne.n	8002792 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b9e      	ldr	r3, [pc, #632]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a9d      	ldr	r2, [pc, #628]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002796:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 825e 	beq.w	8002c60 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b96      	ldr	r3, [pc, #600]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f000 821f 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	f040 8170 	bne.w	8002aa4 <HAL_RCC_OscConfig+0xedc>
 80027c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027e8:	601a      	str	r2, [r3, #0]
  return result;
 80027ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	461a      	mov	r2, r3
 8002806:	2300      	movs	r3, #0
 8002808:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe ff49 	bl	80016a0 <HAL_GetTick>
 800280e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002812:	e009      	b.n	8002828 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe ff44 	bl	80016a0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e21c      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002848:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800284c:	601a      	str	r2, [r3, #0]
  return result;
 800284e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002852:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002856:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <HAL_RCC_OscConfig+0xcaa>
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	e027      	b.n	80028c2 <HAL_RCC_OscConfig+0xcfa>
 8002872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002876:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800287a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002884:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002892:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ce:	6011      	str	r1, [r2, #0]
 80028d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	fa92 f1a2 	rbit	r1, r2
 80028de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028e2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80028e6:	6011      	str	r1, [r2, #0]
  return result;
 80028e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028ec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f042 0220 	orr.w	r2, r2, #32
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f002 021f 	and.w	r2, r2, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d182      	bne.n	8002814 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290e:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f023 020f 	bic.w	r2, r3, #15
 8002916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 8002924:	4313      	orrs	r3, r2
 8002926:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a19      	ldr	r1, [r3, #32]
 800293c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	430b      	orrs	r3, r1
 800294a:	492d      	ldr	r1, [pc, #180]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
 8002950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002954:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800295c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002962:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f2a3 	rbit	r2, r3
 800296c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002970:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002974:	601a      	str	r2, [r3, #0]
  return result;
 8002976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800297e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800298a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	2301      	movs	r3, #1
 8002994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fe83 	bl	80016a0 <HAL_GetTick>
 800299a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800299e:	e009      	b.n	80029b4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fe7e 	bl	80016a0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e156      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
 80029b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029d8:	601a      	str	r2, [r3, #0]
  return result;
 80029da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0xe3c>
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <HAL_RCC_OscConfig+0xe38>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e02a      	b.n	8002a54 <HAL_RCC_OscConfig+0xe8c>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <HAL_RCC_OscConfig+0x10a4>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a58:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a60:	6011      	str	r1, [r2, #0]
 8002a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	fa92 f1a2 	rbit	r1, r2
 8002a70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a74:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a78:	6011      	str	r1, [r2, #0]
  return result;
 8002a7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a7e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	fab2 f282 	clz	r2, r2
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f042 0220 	orr.w	r2, r2, #32
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f002 021f 	and.w	r2, r2, #31
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f43f af7f 	beq.w	80029a0 <HAL_RCC_OscConfig+0xdd8>
 8002aa2:	e0dd      	b.n	8002c60 <HAL_RCC_OscConfig+0x1098>
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ac8:	601a      	str	r2, [r3, #0]
  return result;
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ad2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fdd9 	bl	80016a0 <HAL_GetTick>
 8002aee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e009      	b.n	8002b08 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fdd4 	bl	80016a0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0ac      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b28:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b2c:	601a      	str	r2, [r3, #0]
  return result;
 8002b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0xf8a>
 8002b4c:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x10a4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e027      	b.n	8002ba2 <HAL_RCC_OscConfig+0xfda>
 8002b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b56:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f2a3 	rbit	r2, r3
 8002b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b98:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_RCC_OscConfig+0x10a4>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ba6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002baa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bae:	6011      	str	r1, [r2, #0]
 8002bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bb4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fa92 f1a2 	rbit	r1, r2
 8002bbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bc2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002bc6:	6011      	str	r1, [r2, #0]
  return result;
 8002bc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bcc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d182      	bne.n	8002af4 <HAL_RCC_OscConfig+0xf2c>
 8002bee:	e037      	b.n	8002c60 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e02e      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_OscConfig+0x10a4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_RCC_OscConfig+0x10a4>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c18:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d117      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c30:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c48:	f003 020f 	and.w	r2, r3, #15
 8002c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b09e      	sub	sp, #120	; 0x78
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e162      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d910      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b8d      	ldr	r3, [pc, #564]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 0207 	bic.w	r2, r3, #7
 8002c9e:	498b      	ldr	r1, [pc, #556]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e14a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	497f      	ldr	r1, [pc, #508]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80dc 	beq.w	8002e9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d13c      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xf6>
 8002cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xa6>
 8002d10:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	e00f      	b.n	8002d36 <HAL_RCC_ClockConfig+0xc6>
 8002d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	667b      	str	r3, [r7, #100]	; 0x64
 8002d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d32:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f042 0220 	orr.w	r2, r2, #32
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f002 021f 	and.w	r2, r2, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d17b      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0f3      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d13c      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x178>
 8002d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x128>
 8002d92:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e00f      	b.n	8002db8 <HAL_RCC_ClockConfig+0x148>
 8002d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
 8002da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002daa:	643b      	str	r3, [r7, #64]	; 0x40
 8002dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc0:	fa92 f2a2 	rbit	r2, r2
 8002dc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13a      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b2      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
 8002de8:	2302      	movs	r3, #2
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1a0>
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	e00d      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1bc>
 8002e10:	2302      	movs	r3, #2
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	61ba      	str	r2, [r7, #24]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	fa92 f2a2 	rbit	r2, r2
 8002e36:	617a      	str	r2, [r7, #20]
  return result;
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	fab2 f282 	clz	r2, r2
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f042 0220 	orr.w	r2, r2, #32
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f002 021f 	and.w	r2, r2, #31
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e079      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	491a      	ldr	r1, [pc, #104]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fc18 	bl	80016a0 <HAL_GetTick>
 8002e70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fc14 	bl	80016a0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e061      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d214      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4906      	ldr	r1, [pc, #24]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e040      	b.n	8002f4e <HAL_RCC_ClockConfig+0x2de>
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_ClockConfig+0x2e8>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	491a      	ldr	r1, [pc, #104]	; (8002f58 <HAL_RCC_ClockConfig+0x2e8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_RCC_ClockConfig+0x2e8>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4912      	ldr	r1, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x2e8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f12:	f000 f829 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f16:	4601      	mov	r1, r0
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_RCC_ClockConfig+0x2e8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f20:	22f0      	movs	r2, #240	; 0xf0
 8002f22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	40d3      	lsrs	r3, r2
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x2ec>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_RCC_ClockConfig+0x2f0>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_RCC_ClockConfig+0x2f4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fb66 	bl	8001618 <HAL_InitTick>
  
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3778      	adds	r7, #120	; 0x78
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08008090 	.word	0x08008090
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b08b      	sub	sp, #44	; 0x2c
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x30>
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x36>
 8002f96:	e03f      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f9a:	623b      	str	r3, [r7, #32]
      break;
 8002f9c:	e03f      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fa4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fa8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	607a      	str	r2, [r7, #4]
  return result;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	220f      	movs	r2, #15
 8002fcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	fa92 f2a2 	rbit	r2, r2
 8002fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	40d3      	lsrs	r3, r2
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	e007      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fbb2 f2f3 	udiv	r2, r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	623b      	str	r3, [r7, #32]
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetSysClockFreq+0xc8>)
 800301a:	623b      	str	r3, [r7, #32]
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6a3b      	ldr	r3, [r7, #32]
}
 8003020:	4618      	mov	r0, r3
 8003022:	372c      	adds	r7, #44	; 0x2c
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40021000 	.word	0x40021000
 8003030:	007a1200 	.word	0x007a1200
 8003034:	080080a8 	.word	0x080080a8
 8003038:	080080b8 	.word	0x080080b8

0800303c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800305a:	f7ff ffef 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305e:	4601      	mov	r1, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003068:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800306c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa92 f2a2 	rbit	r2, r2
 8003074:	603a      	str	r2, [r7, #0]
  return result;
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	40d3      	lsrs	r3, r2
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	080080a0 	.word	0x080080a0

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800309e:	f7ff ffcd 	bl	800303c <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	603a      	str	r2, [r7, #0]
  return result;
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	40d3      	lsrs	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	080080a0 	.word	0x080080a0

080030dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b092      	sub	sp, #72	; 0x48
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80d4 	beq.w	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003116:	61d3      	str	r3, [r2, #28]
 8003118:	4b48      	ldr	r3, [pc, #288]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b45      	ldr	r3, [pc, #276]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003136:	4b42      	ldr	r3, [pc, #264]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a41      	ldr	r2, [pc, #260]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fe faad 	bl	80016a0 <HAL_GetTick>
 8003146:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fe faa9 	bl	80016a0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1d6      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003168:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8084 	beq.w	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003184:	429a      	cmp	r2, r3
 8003186:	d07c      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003188:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	461a      	mov	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	461a      	mov	r2, r3
 80031d6:	2300      	movs	r3, #0
 80031d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d04b      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fa59 	bl	80016a0 <HAL_GetTick>
 80031ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fa55 	bl	80016a0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e180      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003208:	2302      	movs	r3, #2
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	2302      	movs	r3, #2
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	61fb      	str	r3, [r7, #28]
  return result;
 8003220:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d108      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003236:	4b01      	ldr	r3, [pc, #4]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	e00d      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
 8003244:	10908100 	.word	0x10908100
 8003248:	2302      	movs	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	4b9a      	ldr	r3, [pc, #616]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2202      	movs	r2, #2
 800325a:	613a      	str	r2, [r7, #16]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	fa92 f2a2 	rbit	r2, r2
 8003262:	60fa      	str	r2, [r7, #12]
  return result;
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	fab2 f282 	clz	r2, r2
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	f002 021f 	and.w	r2, r2, #31
 8003276:	2101      	movs	r1, #1
 8003278:	fa01 f202 	lsl.w	r2, r1, r2
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0b7      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003282:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	498c      	ldr	r1, [pc, #560]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003294:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4a87      	ldr	r2, [pc, #540]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b4:	4b82      	ldr	r3, [pc, #520]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	f023 0203 	bic.w	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	497f      	ldr	r1, [pc, #508]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d2:	4b7b      	ldr	r3, [pc, #492]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4978      	ldr	r1, [pc, #480]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	4970      	ldr	r1, [pc, #448]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800330e:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f023 0210 	bic.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4969      	ldr	r1, [pc, #420]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	4961      	ldr	r1, [pc, #388]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f023 0220 	bic.w	r2, r3, #32
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	495a      	ldr	r1, [pc, #360]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	4952      	ldr	r1, [pc, #328]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	494b      	ldr	r1, [pc, #300]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a4:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4943      	ldr	r1, [pc, #268]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033c2:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	493c      	ldr	r1, [pc, #240]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	4934      	ldr	r1, [pc, #208]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	492d      	ldr	r1, [pc, #180]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	4925      	ldr	r1, [pc, #148]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	491e      	ldr	r1, [pc, #120]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	4916      	ldr	r1, [pc, #88]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	490f      	ldr	r1, [pc, #60]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80034b2:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	4913      	ldr	r1, [pc, #76]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	490b      	ldr	r1, [pc, #44]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	4904      	ldr	r1, [pc, #16]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003504:	4313      	orrs	r3, r2
 8003506:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3748      	adds	r7, #72	; 0x48
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e049      	b.n	80035be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fe56 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fd70 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e049      	b.n	800366c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f841 	bl	8003674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	4619      	mov	r1, r3
 8003604:	4610      	mov	r0, r2
 8003606:	f000 fd19 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x24>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e03c      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d109      	bne.n	80036c6 <HAL_TIM_PWM_Start+0x3e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e02f      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d109      	bne.n	80036e0 <HAL_TIM_PWM_Start+0x58>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e022      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d109      	bne.n	80036fa <HAL_TIM_PWM_Start+0x72>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e015      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x8c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e008      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0a1      	b.n	8003872 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_TIM_PWM_Start+0xb6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373c:	e023      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Start+0xc6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	e01b      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d104      	bne.n	800375e <HAL_TIM_PWM_Start+0xd6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375c:	e013      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0xe6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800376c:	e00b      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0xf6>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	e003      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f001 f9b6 	bl	8004b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a38      	ldr	r2, [pc, #224]	; (800387c <HAL_TIM_PWM_Start+0x1f4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_TIM_PWM_Start+0x148>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a37      	ldr	r2, [pc, #220]	; (8003880 <HAL_TIM_PWM_Start+0x1f8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_TIM_PWM_Start+0x148>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a35      	ldr	r2, [pc, #212]	; (8003884 <HAL_TIM_PWM_Start+0x1fc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_TIM_PWM_Start+0x148>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a34      	ldr	r2, [pc, #208]	; (8003888 <HAL_TIM_PWM_Start+0x200>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_TIM_PWM_Start+0x148>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a32      	ldr	r2, [pc, #200]	; (800388c <HAL_TIM_PWM_Start+0x204>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_TIM_PWM_Start+0x148>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a31      	ldr	r2, [pc, #196]	; (8003890 <HAL_TIM_PWM_Start+0x208>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_PWM_Start+0x14c>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_TIM_PWM_Start+0x14e>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_TIM_PWM_Start+0x1f4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01d      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1a8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d018      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1a8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a24      	ldr	r2, [pc, #144]	; (8003894 <HAL_TIM_PWM_Start+0x20c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1a8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_TIM_PWM_Start+0x210>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1a8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <HAL_TIM_PWM_Start+0x1f8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1a8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_TIM_PWM_Start+0x1fc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_TIM_PWM_Start+0x1a8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_TIM_PWM_Start+0x208>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d115      	bne.n	800385c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_TIM_PWM_Start+0x214>)
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b06      	cmp	r3, #6
 8003840:	d015      	beq.n	800386e <HAL_TIM_PWM_Start+0x1e6>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d011      	beq.n	800386e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e008      	b.n	800386e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e000      	b.n	8003870 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800
 8003890:	40015000 	.word	0x40015000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	00010007 	.word	0x00010007

080038a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e049      	b.n	8003946 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fc52 	bl	8001170 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 fbac 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_TIM_IC_Start+0x1a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e023      	b.n	80039b2 <HAL_TIM_IC_Start+0x62>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <HAL_TIM_IC_Start+0x2a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003976:	b2db      	uxtb	r3, r3
 8003978:	e01b      	b.n	80039b2 <HAL_TIM_IC_Start+0x62>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d104      	bne.n	800398a <HAL_TIM_IC_Start+0x3a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e013      	b.n	80039b2 <HAL_TIM_IC_Start+0x62>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d104      	bne.n	800399a <HAL_TIM_IC_Start+0x4a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e00b      	b.n	80039b2 <HAL_TIM_IC_Start+0x62>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b10      	cmp	r3, #16
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start+0x5a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e003      	b.n	80039b2 <HAL_TIM_IC_Start+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <HAL_TIM_IC_Start+0x74>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e013      	b.n	80039ec <HAL_TIM_IC_Start+0x9c>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d104      	bne.n	80039d4 <HAL_TIM_IC_Start+0x84>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e00b      	b.n	80039ec <HAL_TIM_IC_Start+0x9c>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d104      	bne.n	80039e4 <HAL_TIM_IC_Start+0x94>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e003      	b.n	80039ec <HAL_TIM_IC_Start+0x9c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d102      	bne.n	80039fa <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d001      	beq.n	80039fe <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e092      	b.n	8003b24 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_IC_Start+0xbe>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	e023      	b.n	8003a56 <HAL_TIM_IC_Start+0x106>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_IC_Start+0xce>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a1c:	e01b      	b.n	8003a56 <HAL_TIM_IC_Start+0x106>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_IC_Start+0xde>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	e013      	b.n	8003a56 <HAL_TIM_IC_Start+0x106>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_IC_Start+0xee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_IC_Start+0x106>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_IC_Start+0xfe>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4c:	e003      	b.n	8003a56 <HAL_TIM_IC_Start+0x106>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_IC_Start+0x116>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a64:	e013      	b.n	8003a8e <HAL_TIM_IC_Start+0x13e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_IC_Start+0x126>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a74:	e00b      	b.n	8003a8e <HAL_TIM_IC_Start+0x13e>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_IC_Start+0x136>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a84:	e003      	b.n	8003a8e <HAL_TIM_IC_Start+0x13e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f832 	bl	8004b00 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <HAL_TIM_IC_Start+0x1dc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_TIM_IC_Start+0x192>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d018      	beq.n	8003ae2 <HAL_TIM_IC_Start+0x192>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_TIM_IC_Start+0x1e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_TIM_IC_Start+0x192>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_TIM_IC_Start+0x1e4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_TIM_IC_Start+0x192>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_TIM_IC_Start+0x1e8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_TIM_IC_Start+0x192>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_TIM_IC_Start+0x1ec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_TIM_IC_Start+0x192>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <HAL_TIM_IC_Start+0x1f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d115      	bne.n	8003b0e <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <HAL_TIM_IC_Start+0x1f4>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d015      	beq.n	8003b20 <HAL_TIM_IC_Start+0x1d0>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d011      	beq.n	8003b20 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0c:	e008      	b.n	8003b20 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e000      	b.n	8003b22 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40015000 	.word	0x40015000
 8003b44:	00010007 	.word	0x00010007

08003b48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e088      	b.n	8003c78 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f000 fdfe 	bl	8004784 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 020c 	bic.w	r2, r2, #12
 8003b96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	619a      	str	r2, [r3, #24]
 8003baa:	e060      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d11c      	bne.n	8003bec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f000 fe7c 	bl	80048be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bd4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6999      	ldr	r1, [r3, #24]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	021a      	lsls	r2, r3, #8
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	619a      	str	r2, [r3, #24]
 8003bea:	e040      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11b      	bne.n	8003c2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f000 fec9 	bl	8004998 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 020c 	bic.w	r2, r2, #12
 8003c14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	61da      	str	r2, [r3, #28]
 8003c28:	e021      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d11c      	bne.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f000 fee6 	bl	8004a10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69d9      	ldr	r1, [r3, #28]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	61da      	str	r2, [r3, #28]
 8003c68:	e001      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e0ff      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b14      	cmp	r3, #20
 8003caa:	f200 80f0 	bhi.w	8003e8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003e8f 	.word	0x08003e8f
 8003cbc:	08003e8f 	.word	0x08003e8f
 8003cc0:	08003e8f 	.word	0x08003e8f
 8003cc4:	08003d49 	.word	0x08003d49
 8003cc8:	08003e8f 	.word	0x08003e8f
 8003ccc:	08003e8f 	.word	0x08003e8f
 8003cd0:	08003e8f 	.word	0x08003e8f
 8003cd4:	08003d8b 	.word	0x08003d8b
 8003cd8:	08003e8f 	.word	0x08003e8f
 8003cdc:	08003e8f 	.word	0x08003e8f
 8003ce0:	08003e8f 	.word	0x08003e8f
 8003ce4:	08003dcb 	.word	0x08003dcb
 8003ce8:	08003e8f 	.word	0x08003e8f
 8003cec:	08003e8f 	.word	0x08003e8f
 8003cf0:	08003e8f 	.word	0x08003e8f
 8003cf4:	08003e0d 	.word	0x08003e0d
 8003cf8:	08003e8f 	.word	0x08003e8f
 8003cfc:	08003e8f 	.word	0x08003e8f
 8003d00:	08003e8f 	.word	0x08003e8f
 8003d04:	08003e4d 	.word	0x08003e4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fa32 	bl	8004178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
      break;
 8003d46:	e0a5      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 faac 	bl	80042ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	619a      	str	r2, [r3, #24]
      break;
 8003d88:	e084      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fb1f 	bl	80043d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0208 	orr.w	r2, r2, #8
 8003da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0204 	bic.w	r2, r2, #4
 8003db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69d9      	ldr	r1, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	61da      	str	r2, [r3, #28]
      break;
 8003dc8:	e064      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fb91 	bl	80044f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	021a      	lsls	r2, r3, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	61da      	str	r2, [r3, #28]
      break;
 8003e0a:	e043      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fbe0 	bl	80045d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0208 	orr.w	r2, r2, #8
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0204 	bic.w	r2, r2, #4
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e4a:	e023      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fc2a 	bl	80046ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e8c:	e002      	b.n	8003e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
      break;
 8003e92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0b6      	b.n	8004032 <HAL_TIM_ConfigClockSource+0x18a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f00:	d03e      	beq.n	8003f80 <HAL_TIM_ConfigClockSource+0xd8>
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f06:	f200 8087 	bhi.w	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	f000 8086 	beq.w	800401e <HAL_TIM_ConfigClockSource+0x176>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d87f      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f18:	2b70      	cmp	r3, #112	; 0x70
 8003f1a:	d01a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xaa>
 8003f1c:	2b70      	cmp	r3, #112	; 0x70
 8003f1e:	d87b      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f20:	2b60      	cmp	r3, #96	; 0x60
 8003f22:	d050      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x11e>
 8003f24:	2b60      	cmp	r3, #96	; 0x60
 8003f26:	d877      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f28:	2b50      	cmp	r3, #80	; 0x50
 8003f2a:	d03c      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0xfe>
 8003f2c:	2b50      	cmp	r3, #80	; 0x50
 8003f2e:	d873      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d058      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x13e>
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d86f      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d064      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15e>
 8003f3c:	2b30      	cmp	r3, #48	; 0x30
 8003f3e:	d86b      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d060      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15e>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d867      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05c      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15e>
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d05a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15e>
 8003f50:	e062      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6899      	ldr	r1, [r3, #8]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f000 fdad 	bl	8004ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	609a      	str	r2, [r3, #8]
      break;
 8003f7e:	e04f      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f000 fd96 	bl	8004ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa2:	609a      	str	r2, [r3, #8]
      break;
 8003fa4:	e03c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f000 fc54 	bl	8004860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2150      	movs	r1, #80	; 0x50
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fd63 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8003fc4:	e02c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f000 fcb0 	bl	8004938 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2160      	movs	r1, #96	; 0x60
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fd53 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e01c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 fc34 	bl	8004860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fd43 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8004004:	e00c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f000 fd3a 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8004016:	e003      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e000      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800401e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a42      	ldr	r2, [pc, #264]	; (8004158 <TIM_Base_SetConfig+0x11c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d00f      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3f      	ldr	r2, [pc, #252]	; (800415c <TIM_Base_SetConfig+0x120>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3e      	ldr	r2, [pc, #248]	; (8004160 <TIM_Base_SetConfig+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <TIM_Base_SetConfig+0x128>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3c      	ldr	r2, [pc, #240]	; (8004168 <TIM_Base_SetConfig+0x12c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d108      	bne.n	800408e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a31      	ldr	r2, [pc, #196]	; (8004158 <TIM_Base_SetConfig+0x11c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01f      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d01b      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2e      	ldr	r2, [pc, #184]	; (800415c <TIM_Base_SetConfig+0x120>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d017      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <TIM_Base_SetConfig+0x124>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <TIM_Base_SetConfig+0x128>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00f      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	; (800416c <TIM_Base_SetConfig+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00b      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <TIM_Base_SetConfig+0x134>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <TIM_Base_SetConfig+0x138>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a25      	ldr	r2, [pc, #148]	; (8004168 <TIM_Base_SetConfig+0x12c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d108      	bne.n	80040e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a12      	ldr	r2, [pc, #72]	; (8004158 <TIM_Base_SetConfig+0x11c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d013      	beq.n	800413c <TIM_Base_SetConfig+0x100>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a13      	ldr	r2, [pc, #76]	; (8004164 <TIM_Base_SetConfig+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00f      	beq.n	800413c <TIM_Base_SetConfig+0x100>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <TIM_Base_SetConfig+0x130>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x100>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <TIM_Base_SetConfig+0x134>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x100>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <TIM_Base_SetConfig+0x138>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x100>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <TIM_Base_SetConfig+0x12c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d103      	bne.n	8004144 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	615a      	str	r2, [r3, #20]
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800
 8004164:	40013400 	.word	0x40013400
 8004168:	40015000 	.word	0x40015000
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800

08004178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 0302 	bic.w	r3, r3, #2
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a30      	ldr	r2, [pc, #192]	; (8004294 <TIM_OC1_SetConfig+0x11c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <TIM_OC1_SetConfig+0x88>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <TIM_OC1_SetConfig+0x120>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00f      	beq.n	8004200 <TIM_OC1_SetConfig+0x88>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a2e      	ldr	r2, [pc, #184]	; (800429c <TIM_OC1_SetConfig+0x124>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_OC1_SetConfig+0x88>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a2d      	ldr	r2, [pc, #180]	; (80042a0 <TIM_OC1_SetConfig+0x128>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_OC1_SetConfig+0x88>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <TIM_OC1_SetConfig+0x12c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC1_SetConfig+0x88>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <TIM_OC1_SetConfig+0x130>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10c      	bne.n	800421a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 0308 	bic.w	r3, r3, #8
 8004206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_OC1_SetConfig+0x11c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <TIM_OC1_SetConfig+0xd2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <TIM_OC1_SetConfig+0x120>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00f      	beq.n	800424a <TIM_OC1_SetConfig+0xd2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <TIM_OC1_SetConfig+0x124>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00b      	beq.n	800424a <TIM_OC1_SetConfig+0xd2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <TIM_OC1_SetConfig+0x128>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <TIM_OC1_SetConfig+0xd2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <TIM_OC1_SetConfig+0x12c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_OC1_SetConfig+0xd2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <TIM_OC1_SetConfig+0x130>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d111      	bne.n	800426e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	621a      	str	r2, [r3, #32]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40013400 	.word	0x40013400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800
 80042a8:	40015000 	.word	0x40015000

080042ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0210 	bic.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0320 	bic.w	r3, r3, #32
 80042fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <TIM_OC2_SetConfig+0x110>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_OC2_SetConfig+0x74>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <TIM_OC2_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC2_SetConfig+0x74>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <TIM_OC2_SetConfig+0x118>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10d      	bne.n	800433c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <TIM_OC2_SetConfig+0x110>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_OC2_SetConfig+0xc0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <TIM_OC2_SetConfig+0x114>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_OC2_SetConfig+0xc0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <TIM_OC2_SetConfig+0x11c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_OC2_SetConfig+0xc0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <TIM_OC2_SetConfig+0x120>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_OC2_SetConfig+0xc0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <TIM_OC2_SetConfig+0x124>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC2_SetConfig+0xc0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <TIM_OC2_SetConfig+0x118>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d113      	bne.n	8004394 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004372:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40013400 	.word	0x40013400
 80043c4:	40015000 	.word	0x40015000
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800

080043d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <TIM_OC3_SetConfig+0x10c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_OC3_SetConfig+0x72>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <TIM_OC3_SetConfig+0x110>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_OC3_SetConfig+0x72>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <TIM_OC3_SetConfig+0x114>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10d      	bne.n	8004462 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800444c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004460:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <TIM_OC3_SetConfig+0x10c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <TIM_OC3_SetConfig+0xbe>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <TIM_OC3_SetConfig+0x110>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_OC3_SetConfig+0xbe>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <TIM_OC3_SetConfig+0x118>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_OC3_SetConfig+0xbe>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <TIM_OC3_SetConfig+0x11c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_OC3_SetConfig+0xbe>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <TIM_OC3_SetConfig+0x120>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_OC3_SetConfig+0xbe>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_OC3_SetConfig+0x114>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d113      	bne.n	80044ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40015000 	.word	0x40015000
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <TIM_OC4_SetConfig+0xc8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <TIM_OC4_SetConfig+0x8c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <TIM_OC4_SetConfig+0xcc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_OC4_SetConfig+0x8c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <TIM_OC4_SetConfig+0xd0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_OC4_SetConfig+0x8c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <TIM_OC4_SetConfig+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_OC4_SetConfig+0x8c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <TIM_OC4_SetConfig+0xd8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC4_SetConfig+0x8c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <TIM_OC4_SetConfig+0xdc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800
 80045d4:	40015000 	.word	0x40015000

080045d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800461c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <TIM_OC5_SetConfig+0xbc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <TIM_OC5_SetConfig+0x82>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <TIM_OC5_SetConfig+0xc0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00f      	beq.n	800465a <TIM_OC5_SetConfig+0x82>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <TIM_OC5_SetConfig+0xc4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00b      	beq.n	800465a <TIM_OC5_SetConfig+0x82>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <TIM_OC5_SetConfig+0xc8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <TIM_OC5_SetConfig+0x82>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <TIM_OC5_SetConfig+0xcc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d003      	beq.n	800465a <TIM_OC5_SetConfig+0x82>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <TIM_OC5_SetConfig+0xd0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d109      	bne.n	800466e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	621a      	str	r2, [r3, #32]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40013400 	.word	0x40013400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800
 80046a8:	40015000 	.word	0x40015000

080046ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <TIM_OC6_SetConfig+0xc0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <TIM_OC6_SetConfig+0x84>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a19      	ldr	r2, [pc, #100]	; (8004770 <TIM_OC6_SetConfig+0xc4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_OC6_SetConfig+0x84>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a18      	ldr	r2, [pc, #96]	; (8004774 <TIM_OC6_SetConfig+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_OC6_SetConfig+0x84>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <TIM_OC6_SetConfig+0xcc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_OC6_SetConfig+0x84>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a16      	ldr	r2, [pc, #88]	; (800477c <TIM_OC6_SetConfig+0xd0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC6_SetConfig+0x84>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <TIM_OC6_SetConfig+0xd4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d109      	bne.n	8004744 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	029b      	lsls	r3, r3, #10
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	40015000 	.word	0x40015000

08004784 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a26      	ldr	r2, [pc, #152]	; (8004848 <TIM_TI1_SetConfig+0xc4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d017      	beq.n	80047e2 <TIM_TI1_SetConfig+0x5e>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d013      	beq.n	80047e2 <TIM_TI1_SetConfig+0x5e>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a23      	ldr	r2, [pc, #140]	; (800484c <TIM_TI1_SetConfig+0xc8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00f      	beq.n	80047e2 <TIM_TI1_SetConfig+0x5e>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a22      	ldr	r2, [pc, #136]	; (8004850 <TIM_TI1_SetConfig+0xcc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_TI1_SetConfig+0x5e>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <TIM_TI1_SetConfig+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_TI1_SetConfig+0x5e>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <TIM_TI1_SetConfig+0xd4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_TI1_SetConfig+0x5e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a1f      	ldr	r2, [pc, #124]	; (800485c <TIM_TI1_SetConfig+0xd8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <TIM_TI1_SetConfig+0x62>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <TIM_TI1_SetConfig+0x64>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e003      	b.n	8004806 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	b2db      	uxtb	r3, r3
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f023 030a 	bic.w	r3, r3, #10
 8004820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 030a 	and.w	r3, r3, #10
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40013400 	.word	0x40013400
 8004858:	40014000 	.word	0x40014000
 800485c:	40015000 	.word	0x40015000

08004860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 030a 	bic.w	r3, r3, #10
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048be:	b480      	push	{r7}
 80048c0:	b087      	sub	sp, #28
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 0210 	bic.w	r2, r3, #16
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	031b      	lsls	r3, r3, #12
 8004902:	b29b      	uxth	r3, r3
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004910:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f023 0210 	bic.w	r2, r3, #16
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004962:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	031b      	lsls	r3, r3, #12
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80049e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	031b      	lsls	r3, r3, #12
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	031b      	lsls	r3, r3, #12
 8004a68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f043 0307 	orr.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	021a      	lsls	r2, r3, #8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2201      	movs	r2, #1
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e06d      	b.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a30      	ldr	r2, [pc, #192]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ba8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d01d      	beq.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d018      	beq.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1a      	ldr	r2, [pc, #104]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10c      	bne.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40015000 	.word	0x40015000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40014000 	.word	0x40014000

08004c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e040      	b.n	8004cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fb42 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2224      	movs	r2, #36	; 0x24
 8004c90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8b6 	bl	8004e14 <UART_SetConfig>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e022      	b.n	8004cf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa7e 	bl	80051bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb05 	bl	8005300 <UART_CheckIdleState>
 8004cf6:	4603      	mov	r3, r0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d178      	bne.n	8004e0a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Transmit+0x24>
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e071      	b.n	8004e0c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2221      	movs	r2, #33	; 0x21
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d36:	f7fc fcb3 	bl	80016a0 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d108      	bne.n	8004d68 <HAL_UART_Transmit+0x68>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e003      	b.n	8004d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d70:	e030      	b.n	8004dd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fb67 	bl	8005450 <UART_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e03c      	b.n	8004e0c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	881a      	ldrh	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da4:	b292      	uxth	r2, r2
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	3302      	adds	r3, #2
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	e008      	b.n	8004dc2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	b292      	uxth	r2, r2
 8004dba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1c8      	bne.n	8004d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2200      	movs	r2, #0
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fb30 	bl	8005450 <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e005      	b.n	8004e0c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b92      	ldr	r3, [pc, #584]	; (8005088 <UART_SetConfig+0x274>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a80      	ldr	r2, [pc, #512]	; (800508c <UART_SetConfig+0x278>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d120      	bne.n	8004ed2 <UART_SetConfig+0xbe>
 8004e90:	4b7f      	ldr	r3, [pc, #508]	; (8005090 <UART_SetConfig+0x27c>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d817      	bhi.n	8004ecc <UART_SetConfig+0xb8>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0x90>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ec1 	.word	0x08004ec1
 8004eac:	08004ec7 	.word	0x08004ec7
 8004eb0:	08004ebb 	.word	0x08004ebb
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e0b5      	b.n	8005026 <UART_SetConfig+0x212>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e0b2      	b.n	8005026 <UART_SetConfig+0x212>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e0af      	b.n	8005026 <UART_SetConfig+0x212>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e0ac      	b.n	8005026 <UART_SetConfig+0x212>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e0a9      	b.n	8005026 <UART_SetConfig+0x212>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6f      	ldr	r2, [pc, #444]	; (8005094 <UART_SetConfig+0x280>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d124      	bne.n	8004f26 <UART_SetConfig+0x112>
 8004edc:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <UART_SetConfig+0x27c>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ee8:	d011      	beq.n	8004f0e <UART_SetConfig+0xfa>
 8004eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eee:	d817      	bhi.n	8004f20 <UART_SetConfig+0x10c>
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef4:	d011      	beq.n	8004f1a <UART_SetConfig+0x106>
 8004ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efa:	d811      	bhi.n	8004f20 <UART_SetConfig+0x10c>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <UART_SetConfig+0xf4>
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f04:	d006      	beq.n	8004f14 <UART_SetConfig+0x100>
 8004f06:	e00b      	b.n	8004f20 <UART_SetConfig+0x10c>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e08b      	b.n	8005026 <UART_SetConfig+0x212>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e088      	b.n	8005026 <UART_SetConfig+0x212>
 8004f14:	2304      	movs	r3, #4
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e085      	b.n	8005026 <UART_SetConfig+0x212>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e082      	b.n	8005026 <UART_SetConfig+0x212>
 8004f20:	2310      	movs	r3, #16
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e07f      	b.n	8005026 <UART_SetConfig+0x212>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a5b      	ldr	r2, [pc, #364]	; (8005098 <UART_SetConfig+0x284>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d124      	bne.n	8004f7a <UART_SetConfig+0x166>
 8004f30:	4b57      	ldr	r3, [pc, #348]	; (8005090 <UART_SetConfig+0x27c>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f3c:	d011      	beq.n	8004f62 <UART_SetConfig+0x14e>
 8004f3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f42:	d817      	bhi.n	8004f74 <UART_SetConfig+0x160>
 8004f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f48:	d011      	beq.n	8004f6e <UART_SetConfig+0x15a>
 8004f4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f4e:	d811      	bhi.n	8004f74 <UART_SetConfig+0x160>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <UART_SetConfig+0x148>
 8004f54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f58:	d006      	beq.n	8004f68 <UART_SetConfig+0x154>
 8004f5a:	e00b      	b.n	8004f74 <UART_SetConfig+0x160>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e061      	b.n	8005026 <UART_SetConfig+0x212>
 8004f62:	2302      	movs	r3, #2
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e05e      	b.n	8005026 <UART_SetConfig+0x212>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e05b      	b.n	8005026 <UART_SetConfig+0x212>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	77fb      	strb	r3, [r7, #31]
 8004f72:	e058      	b.n	8005026 <UART_SetConfig+0x212>
 8004f74:	2310      	movs	r3, #16
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e055      	b.n	8005026 <UART_SetConfig+0x212>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a47      	ldr	r2, [pc, #284]	; (800509c <UART_SetConfig+0x288>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d124      	bne.n	8004fce <UART_SetConfig+0x1ba>
 8004f84:	4b42      	ldr	r3, [pc, #264]	; (8005090 <UART_SetConfig+0x27c>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f90:	d011      	beq.n	8004fb6 <UART_SetConfig+0x1a2>
 8004f92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f96:	d817      	bhi.n	8004fc8 <UART_SetConfig+0x1b4>
 8004f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f9c:	d011      	beq.n	8004fc2 <UART_SetConfig+0x1ae>
 8004f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa2:	d811      	bhi.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <UART_SetConfig+0x19c>
 8004fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fac:	d006      	beq.n	8004fbc <UART_SetConfig+0x1a8>
 8004fae:	e00b      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e037      	b.n	8005026 <UART_SetConfig+0x212>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e034      	b.n	8005026 <UART_SetConfig+0x212>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e031      	b.n	8005026 <UART_SetConfig+0x212>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e02e      	b.n	8005026 <UART_SetConfig+0x212>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e02b      	b.n	8005026 <UART_SetConfig+0x212>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a33      	ldr	r2, [pc, #204]	; (80050a0 <UART_SetConfig+0x28c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d124      	bne.n	8005022 <UART_SetConfig+0x20e>
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <UART_SetConfig+0x27c>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe4:	d011      	beq.n	800500a <UART_SetConfig+0x1f6>
 8004fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fea:	d817      	bhi.n	800501c <UART_SetConfig+0x208>
 8004fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ff0:	d011      	beq.n	8005016 <UART_SetConfig+0x202>
 8004ff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ff6:	d811      	bhi.n	800501c <UART_SetConfig+0x208>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <UART_SetConfig+0x1f0>
 8004ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005000:	d006      	beq.n	8005010 <UART_SetConfig+0x1fc>
 8005002:	e00b      	b.n	800501c <UART_SetConfig+0x208>
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e00d      	b.n	8005026 <UART_SetConfig+0x212>
 800500a:	2302      	movs	r3, #2
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e00a      	b.n	8005026 <UART_SetConfig+0x212>
 8005010:	2304      	movs	r3, #4
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e007      	b.n	8005026 <UART_SetConfig+0x212>
 8005016:	2308      	movs	r3, #8
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e004      	b.n	8005026 <UART_SetConfig+0x212>
 800501c:	2310      	movs	r3, #16
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e001      	b.n	8005026 <UART_SetConfig+0x212>
 8005022:	2310      	movs	r3, #16
 8005024:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502e:	d16b      	bne.n	8005108 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005030:	7ffb      	ldrb	r3, [r7, #31]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d838      	bhi.n	80050a8 <UART_SetConfig+0x294>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x228>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	080050a9 	.word	0x080050a9
 800504c:	08005077 	.word	0x08005077
 8005050:	080050a9 	.word	0x080050a9
 8005054:	080050a9 	.word	0x080050a9
 8005058:	080050a9 	.word	0x080050a9
 800505c:	0800507f 	.word	0x0800507f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fd fff8 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8005064:	61b8      	str	r0, [r7, #24]
        break;
 8005066:	e024      	b.n	80050b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7fe f816 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 800506c:	61b8      	str	r0, [r7, #24]
        break;
 800506e:	e020      	b.n	80050b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <UART_SetConfig+0x290>)
 8005072:	61bb      	str	r3, [r7, #24]
        break;
 8005074:	e01d      	b.n	80050b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7fd ff77 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 800507a:	61b8      	str	r0, [r7, #24]
        break;
 800507c:	e019      	b.n	80050b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	61bb      	str	r3, [r7, #24]
        break;
 8005084:	e015      	b.n	80050b2 <UART_SetConfig+0x29e>
 8005086:	bf00      	nop
 8005088:	efff69f3 	.word	0xefff69f3
 800508c:	40013800 	.word	0x40013800
 8005090:	40021000 	.word	0x40021000
 8005094:	40004400 	.word	0x40004400
 8005098:	40004800 	.word	0x40004800
 800509c:	40004c00 	.word	0x40004c00
 80050a0:	40005000 	.word	0x40005000
 80050a4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	77bb      	strb	r3, [r7, #30]
        break;
 80050b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d073      	beq.n	80051a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	005a      	lsls	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	441a      	add	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b0f      	cmp	r3, #15
 80050d2:	d916      	bls.n	8005102 <UART_SetConfig+0x2ee>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050da:	d212      	bcs.n	8005102 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f023 030f 	bic.w	r3, r3, #15
 80050e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	89fb      	ldrh	r3, [r7, #14]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	89fa      	ldrh	r2, [r7, #14]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e04e      	b.n	80051a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77bb      	strb	r3, [r7, #30]
 8005106:	e04b      	b.n	80051a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005108:	7ffb      	ldrb	r3, [r7, #31]
 800510a:	2b08      	cmp	r3, #8
 800510c:	d827      	bhi.n	800515e <UART_SetConfig+0x34a>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x300>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	0800515f 	.word	0x0800515f
 8005124:	0800514f 	.word	0x0800514f
 8005128:	0800515f 	.word	0x0800515f
 800512c:	0800515f 	.word	0x0800515f
 8005130:	0800515f 	.word	0x0800515f
 8005134:	08005157 	.word	0x08005157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fd ff8c 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e013      	b.n	8005168 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7fd ffaa 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8005144:	61b8      	str	r0, [r7, #24]
        break;
 8005146:	e00f      	b.n	8005168 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <UART_SetConfig+0x3a4>)
 800514a:	61bb      	str	r3, [r7, #24]
        break;
 800514c:	e00c      	b.n	8005168 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514e:	f7fd ff0b 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8005152:	61b8      	str	r0, [r7, #24]
        break;
 8005154:	e008      	b.n	8005168 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515a:	61bb      	str	r3, [r7, #24]
        break;
 800515c:	e004      	b.n	8005168 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	77bb      	strb	r3, [r7, #30]
        break;
 8005166:	bf00      	nop
    }

    if (pclk != 0U)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	085a      	lsrs	r2, r3, #1
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	441a      	add	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b0f      	cmp	r3, #15
 8005186:	d909      	bls.n	800519c <UART_SetConfig+0x388>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518e:	d205      	bcs.n	800519c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e001      	b.n	80051a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	007a1200 	.word	0x007a1200

080051bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ba:	d10a      	bne.n	80052d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b098      	sub	sp, #96	; 0x60
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005310:	f7fc f9c6 	bl	80016a0 <HAL_GetTick>
 8005314:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b08      	cmp	r3, #8
 8005322:	d12e      	bne.n	8005382 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532c:	2200      	movs	r2, #0
 800532e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f88c 	bl	8005450 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d021      	beq.n	8005382 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005352:	653b      	str	r3, [r7, #80]	; 0x50
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535c:	647b      	str	r3, [r7, #68]	; 0x44
 800535e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e062      	b.n	8005448 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d149      	bne.n	8005424 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005398:	2200      	movs	r2, #0
 800539a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f856 	bl	8005450 <UART_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d03c      	beq.n	8005424 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	623b      	str	r3, [r7, #32]
   return(result);
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e6      	bne.n	80053aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fc:	61fa      	str	r2, [r7, #28]
 80053fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	69b9      	ldr	r1, [r7, #24]
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	617b      	str	r3, [r7, #20]
   return(result);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e011      	b.n	8005448 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3758      	adds	r7, #88	; 0x58
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005460:	e049      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d045      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fc f919 	bl	80016a0 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <UART_WaitOnFlagUntilTimeout+0x30>
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e048      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d031      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d110      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2208      	movs	r2, #8
 80054a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f838 	bl	800551e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2208      	movs	r2, #8
 80054b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e029      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d0:	d111      	bne.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f81e 	bl	800551e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e00f      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	429a      	cmp	r2, r3
 8005512:	d0a6      	beq.n	8005462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800551e:	b480      	push	{r7}
 8005520:	b095      	sub	sp, #84	; 0x54
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
 8005546:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800554a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	61fb      	str	r3, [r7, #28]
   return(result);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3308      	adds	r3, #8
 8005576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005590:	2b01      	cmp	r3, #1
 8005592:	d118      	bne.n	80055c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0310 	bic.w	r3, r3, #16
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	613b      	str	r3, [r7, #16]
   return(result);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e6      	bne.n	8005594 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055da:	bf00      	nop
 80055dc:	3754      	adds	r7, #84	; 0x54
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <__errno>:
 80055e8:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <__errno+0x8>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	2000000c 	.word	0x2000000c

080055f4 <__libc_init_array>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	4d0d      	ldr	r5, [pc, #52]	; (800562c <__libc_init_array+0x38>)
 80055f8:	4c0d      	ldr	r4, [pc, #52]	; (8005630 <__libc_init_array+0x3c>)
 80055fa:	1b64      	subs	r4, r4, r5
 80055fc:	10a4      	asrs	r4, r4, #2
 80055fe:	2600      	movs	r6, #0
 8005600:	42a6      	cmp	r6, r4
 8005602:	d109      	bne.n	8005618 <__libc_init_array+0x24>
 8005604:	4d0b      	ldr	r5, [pc, #44]	; (8005634 <__libc_init_array+0x40>)
 8005606:	4c0c      	ldr	r4, [pc, #48]	; (8005638 <__libc_init_array+0x44>)
 8005608:	f002 fd36 	bl	8008078 <_init>
 800560c:	1b64      	subs	r4, r4, r5
 800560e:	10a4      	asrs	r4, r4, #2
 8005610:	2600      	movs	r6, #0
 8005612:	42a6      	cmp	r6, r4
 8005614:	d105      	bne.n	8005622 <__libc_init_array+0x2e>
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	f855 3b04 	ldr.w	r3, [r5], #4
 800561c:	4798      	blx	r3
 800561e:	3601      	adds	r6, #1
 8005620:	e7ee      	b.n	8005600 <__libc_init_array+0xc>
 8005622:	f855 3b04 	ldr.w	r3, [r5], #4
 8005626:	4798      	blx	r3
 8005628:	3601      	adds	r6, #1
 800562a:	e7f2      	b.n	8005612 <__libc_init_array+0x1e>
 800562c:	080084a4 	.word	0x080084a4
 8005630:	080084a4 	.word	0x080084a4
 8005634:	080084a4 	.word	0x080084a4
 8005638:	080084a8 	.word	0x080084a8

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <__cvt>:
 800564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	ec55 4b10 	vmov	r4, r5, d0
 8005654:	2d00      	cmp	r5, #0
 8005656:	460e      	mov	r6, r1
 8005658:	4619      	mov	r1, r3
 800565a:	462b      	mov	r3, r5
 800565c:	bfbb      	ittet	lt
 800565e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005662:	461d      	movlt	r5, r3
 8005664:	2300      	movge	r3, #0
 8005666:	232d      	movlt	r3, #45	; 0x2d
 8005668:	700b      	strb	r3, [r1, #0]
 800566a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800566c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005670:	4691      	mov	r9, r2
 8005672:	f023 0820 	bic.w	r8, r3, #32
 8005676:	bfbc      	itt	lt
 8005678:	4622      	movlt	r2, r4
 800567a:	4614      	movlt	r4, r2
 800567c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005680:	d005      	beq.n	800568e <__cvt+0x42>
 8005682:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005686:	d100      	bne.n	800568a <__cvt+0x3e>
 8005688:	3601      	adds	r6, #1
 800568a:	2102      	movs	r1, #2
 800568c:	e000      	b.n	8005690 <__cvt+0x44>
 800568e:	2103      	movs	r1, #3
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	ab02      	add	r3, sp, #8
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	ec45 4b10 	vmov	d0, r4, r5
 800569c:	4653      	mov	r3, sl
 800569e:	4632      	mov	r2, r6
 80056a0:	f000 fcca 	bl	8006038 <_dtoa_r>
 80056a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056a8:	4607      	mov	r7, r0
 80056aa:	d102      	bne.n	80056b2 <__cvt+0x66>
 80056ac:	f019 0f01 	tst.w	r9, #1
 80056b0:	d022      	beq.n	80056f8 <__cvt+0xac>
 80056b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056b6:	eb07 0906 	add.w	r9, r7, r6
 80056ba:	d110      	bne.n	80056de <__cvt+0x92>
 80056bc:	783b      	ldrb	r3, [r7, #0]
 80056be:	2b30      	cmp	r3, #48	; 0x30
 80056c0:	d10a      	bne.n	80056d8 <__cvt+0x8c>
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ce:	b918      	cbnz	r0, 80056d8 <__cvt+0x8c>
 80056d0:	f1c6 0601 	rsb	r6, r6, #1
 80056d4:	f8ca 6000 	str.w	r6, [sl]
 80056d8:	f8da 3000 	ldr.w	r3, [sl]
 80056dc:	4499      	add	r9, r3
 80056de:	2200      	movs	r2, #0
 80056e0:	2300      	movs	r3, #0
 80056e2:	4620      	mov	r0, r4
 80056e4:	4629      	mov	r1, r5
 80056e6:	f7fb f9f7 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ea:	b108      	cbz	r0, 80056f0 <__cvt+0xa4>
 80056ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80056f0:	2230      	movs	r2, #48	; 0x30
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	454b      	cmp	r3, r9
 80056f6:	d307      	bcc.n	8005708 <__cvt+0xbc>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056fc:	1bdb      	subs	r3, r3, r7
 80056fe:	4638      	mov	r0, r7
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	b004      	add	sp, #16
 8005704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	9103      	str	r1, [sp, #12]
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e7f0      	b.n	80056f2 <__cvt+0xa6>

08005710 <__exponent>:
 8005710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005712:	4603      	mov	r3, r0
 8005714:	2900      	cmp	r1, #0
 8005716:	bfb8      	it	lt
 8005718:	4249      	neglt	r1, r1
 800571a:	f803 2b02 	strb.w	r2, [r3], #2
 800571e:	bfb4      	ite	lt
 8005720:	222d      	movlt	r2, #45	; 0x2d
 8005722:	222b      	movge	r2, #43	; 0x2b
 8005724:	2909      	cmp	r1, #9
 8005726:	7042      	strb	r2, [r0, #1]
 8005728:	dd2a      	ble.n	8005780 <__exponent+0x70>
 800572a:	f10d 0407 	add.w	r4, sp, #7
 800572e:	46a4      	mov	ip, r4
 8005730:	270a      	movs	r7, #10
 8005732:	46a6      	mov	lr, r4
 8005734:	460a      	mov	r2, r1
 8005736:	fb91 f6f7 	sdiv	r6, r1, r7
 800573a:	fb07 1516 	mls	r5, r7, r6, r1
 800573e:	3530      	adds	r5, #48	; 0x30
 8005740:	2a63      	cmp	r2, #99	; 0x63
 8005742:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005746:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800574a:	4631      	mov	r1, r6
 800574c:	dcf1      	bgt.n	8005732 <__exponent+0x22>
 800574e:	3130      	adds	r1, #48	; 0x30
 8005750:	f1ae 0502 	sub.w	r5, lr, #2
 8005754:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005758:	1c44      	adds	r4, r0, #1
 800575a:	4629      	mov	r1, r5
 800575c:	4561      	cmp	r1, ip
 800575e:	d30a      	bcc.n	8005776 <__exponent+0x66>
 8005760:	f10d 0209 	add.w	r2, sp, #9
 8005764:	eba2 020e 	sub.w	r2, r2, lr
 8005768:	4565      	cmp	r5, ip
 800576a:	bf88      	it	hi
 800576c:	2200      	movhi	r2, #0
 800576e:	4413      	add	r3, r2
 8005770:	1a18      	subs	r0, r3, r0
 8005772:	b003      	add	sp, #12
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800577e:	e7ed      	b.n	800575c <__exponent+0x4c>
 8005780:	2330      	movs	r3, #48	; 0x30
 8005782:	3130      	adds	r1, #48	; 0x30
 8005784:	7083      	strb	r3, [r0, #2]
 8005786:	70c1      	strb	r1, [r0, #3]
 8005788:	1d03      	adds	r3, r0, #4
 800578a:	e7f1      	b.n	8005770 <__exponent+0x60>

0800578c <_printf_float>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	ed2d 8b02 	vpush	{d8}
 8005794:	b08d      	sub	sp, #52	; 0x34
 8005796:	460c      	mov	r4, r1
 8005798:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800579c:	4616      	mov	r6, r2
 800579e:	461f      	mov	r7, r3
 80057a0:	4605      	mov	r5, r0
 80057a2:	f001 fb2d 	bl	8006e00 <_localeconv_r>
 80057a6:	f8d0 a000 	ldr.w	sl, [r0]
 80057aa:	4650      	mov	r0, sl
 80057ac:	f7fa fd18 	bl	80001e0 <strlen>
 80057b0:	2300      	movs	r3, #0
 80057b2:	930a      	str	r3, [sp, #40]	; 0x28
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	f8d8 3000 	ldr.w	r3, [r8]
 80057bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057c0:	3307      	adds	r3, #7
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	f103 0208 	add.w	r2, r3, #8
 80057ca:	f8c8 2000 	str.w	r2, [r8]
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057de:	9307      	str	r3, [sp, #28]
 80057e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057e4:	ee08 0a10 	vmov	s16, r0
 80057e8:	4b9f      	ldr	r3, [pc, #636]	; (8005a68 <_printf_float+0x2dc>)
 80057ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f2:	f7fb f9a3 	bl	8000b3c <__aeabi_dcmpun>
 80057f6:	bb88      	cbnz	r0, 800585c <_printf_float+0xd0>
 80057f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fc:	4b9a      	ldr	r3, [pc, #616]	; (8005a68 <_printf_float+0x2dc>)
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005802:	f7fb f97d 	bl	8000b00 <__aeabi_dcmple>
 8005806:	bb48      	cbnz	r0, 800585c <_printf_float+0xd0>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	4640      	mov	r0, r8
 800580e:	4649      	mov	r1, r9
 8005810:	f7fb f96c 	bl	8000aec <__aeabi_dcmplt>
 8005814:	b110      	cbz	r0, 800581c <_printf_float+0x90>
 8005816:	232d      	movs	r3, #45	; 0x2d
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581c:	4b93      	ldr	r3, [pc, #588]	; (8005a6c <_printf_float+0x2e0>)
 800581e:	4894      	ldr	r0, [pc, #592]	; (8005a70 <_printf_float+0x2e4>)
 8005820:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005824:	bf94      	ite	ls
 8005826:	4698      	movls	r8, r3
 8005828:	4680      	movhi	r8, r0
 800582a:	2303      	movs	r3, #3
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	9b05      	ldr	r3, [sp, #20]
 8005830:	f023 0204 	bic.w	r2, r3, #4
 8005834:	6022      	str	r2, [r4, #0]
 8005836:	f04f 0900 	mov.w	r9, #0
 800583a:	9700      	str	r7, [sp, #0]
 800583c:	4633      	mov	r3, r6
 800583e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f9d8 	bl	8005bf8 <_printf_common>
 8005848:	3001      	adds	r0, #1
 800584a:	f040 8090 	bne.w	800596e <_printf_float+0x1e2>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005852:	b00d      	add	sp, #52	; 0x34
 8005854:	ecbd 8b02 	vpop	{d8}
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	4640      	mov	r0, r8
 8005862:	4649      	mov	r1, r9
 8005864:	f7fb f96a 	bl	8000b3c <__aeabi_dcmpun>
 8005868:	b140      	cbz	r0, 800587c <_printf_float+0xf0>
 800586a:	464b      	mov	r3, r9
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfbc      	itt	lt
 8005870:	232d      	movlt	r3, #45	; 0x2d
 8005872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005876:	487f      	ldr	r0, [pc, #508]	; (8005a74 <_printf_float+0x2e8>)
 8005878:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <_printf_float+0x2ec>)
 800587a:	e7d1      	b.n	8005820 <_printf_float+0x94>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005882:	9206      	str	r2, [sp, #24]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	d13f      	bne.n	8005908 <_printf_float+0x17c>
 8005888:	2306      	movs	r3, #6
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	9b05      	ldr	r3, [sp, #20]
 800588e:	6861      	ldr	r1, [r4, #4]
 8005890:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005894:	2300      	movs	r3, #0
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	ab0a      	add	r3, sp, #40	; 0x28
 800589a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800589e:	ab09      	add	r3, sp, #36	; 0x24
 80058a0:	ec49 8b10 	vmov	d0, r8, r9
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6022      	str	r2, [r4, #0]
 80058a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058ac:	4628      	mov	r0, r5
 80058ae:	f7ff fecd 	bl	800564c <__cvt>
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b6:	2b47      	cmp	r3, #71	; 0x47
 80058b8:	4680      	mov	r8, r0
 80058ba:	d108      	bne.n	80058ce <_printf_float+0x142>
 80058bc:	1cc8      	adds	r0, r1, #3
 80058be:	db02      	blt.n	80058c6 <_printf_float+0x13a>
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	dd41      	ble.n	800594a <_printf_float+0x1be>
 80058c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80058ca:	fa5f fb8b 	uxtb.w	fp, fp
 80058ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058d2:	d820      	bhi.n	8005916 <_printf_float+0x18a>
 80058d4:	3901      	subs	r1, #1
 80058d6:	465a      	mov	r2, fp
 80058d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058dc:	9109      	str	r1, [sp, #36]	; 0x24
 80058de:	f7ff ff17 	bl	8005710 <__exponent>
 80058e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e4:	1813      	adds	r3, r2, r0
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	4681      	mov	r9, r0
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	dc02      	bgt.n	80058f4 <_printf_float+0x168>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	07d2      	lsls	r2, r2, #31
 80058f2:	d501      	bpl.n	80058f8 <_printf_float+0x16c>
 80058f4:	3301      	adds	r3, #1
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d09c      	beq.n	800583a <_printf_float+0xae>
 8005900:	232d      	movs	r3, #45	; 0x2d
 8005902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005906:	e798      	b.n	800583a <_printf_float+0xae>
 8005908:	9a06      	ldr	r2, [sp, #24]
 800590a:	2a47      	cmp	r2, #71	; 0x47
 800590c:	d1be      	bne.n	800588c <_printf_float+0x100>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1bc      	bne.n	800588c <_printf_float+0x100>
 8005912:	2301      	movs	r3, #1
 8005914:	e7b9      	b.n	800588a <_printf_float+0xfe>
 8005916:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800591a:	d118      	bne.n	800594e <_printf_float+0x1c2>
 800591c:	2900      	cmp	r1, #0
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	dd0b      	ble.n	800593a <_printf_float+0x1ae>
 8005922:	6121      	str	r1, [r4, #16]
 8005924:	b913      	cbnz	r3, 800592c <_printf_float+0x1a0>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d502      	bpl.n	8005932 <_printf_float+0x1a6>
 800592c:	3301      	adds	r3, #1
 800592e:	440b      	add	r3, r1
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	65a1      	str	r1, [r4, #88]	; 0x58
 8005934:	f04f 0900 	mov.w	r9, #0
 8005938:	e7de      	b.n	80058f8 <_printf_float+0x16c>
 800593a:	b913      	cbnz	r3, 8005942 <_printf_float+0x1b6>
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	07d2      	lsls	r2, r2, #31
 8005940:	d501      	bpl.n	8005946 <_printf_float+0x1ba>
 8005942:	3302      	adds	r3, #2
 8005944:	e7f4      	b.n	8005930 <_printf_float+0x1a4>
 8005946:	2301      	movs	r3, #1
 8005948:	e7f2      	b.n	8005930 <_printf_float+0x1a4>
 800594a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005950:	4299      	cmp	r1, r3
 8005952:	db05      	blt.n	8005960 <_printf_float+0x1d4>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	6121      	str	r1, [r4, #16]
 8005958:	07d8      	lsls	r0, r3, #31
 800595a:	d5ea      	bpl.n	8005932 <_printf_float+0x1a6>
 800595c:	1c4b      	adds	r3, r1, #1
 800595e:	e7e7      	b.n	8005930 <_printf_float+0x1a4>
 8005960:	2900      	cmp	r1, #0
 8005962:	bfd4      	ite	le
 8005964:	f1c1 0202 	rsble	r2, r1, #2
 8005968:	2201      	movgt	r2, #1
 800596a:	4413      	add	r3, r2
 800596c:	e7e0      	b.n	8005930 <_printf_float+0x1a4>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	055a      	lsls	r2, r3, #21
 8005972:	d407      	bmi.n	8005984 <_printf_float+0x1f8>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	4642      	mov	r2, r8
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	d12c      	bne.n	80059dc <_printf_float+0x250>
 8005982:	e764      	b.n	800584e <_printf_float+0xc2>
 8005984:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005988:	f240 80e0 	bls.w	8005b4c <_printf_float+0x3c0>
 800598c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	f7fb f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005998:	2800      	cmp	r0, #0
 800599a:	d034      	beq.n	8005a06 <_printf_float+0x27a>
 800599c:	4a37      	ldr	r2, [pc, #220]	; (8005a7c <_printf_float+0x2f0>)
 800599e:	2301      	movs	r3, #1
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af51 	beq.w	800584e <_printf_float+0xc2>
 80059ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b0:	429a      	cmp	r2, r3
 80059b2:	db02      	blt.n	80059ba <_printf_float+0x22e>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	07d8      	lsls	r0, r3, #31
 80059b8:	d510      	bpl.n	80059dc <_printf_float+0x250>
 80059ba:	ee18 3a10 	vmov	r3, s16
 80059be:	4652      	mov	r2, sl
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f af41 	beq.w	800584e <_printf_float+0xc2>
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	f104 091a 	add.w	r9, r4, #26
 80059d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4543      	cmp	r3, r8
 80059da:	dc09      	bgt.n	80059f0 <_printf_float+0x264>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	f100 8105 	bmi.w	8005bee <_printf_float+0x462>
 80059e4:	68e0      	ldr	r0, [r4, #12]
 80059e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e8:	4298      	cmp	r0, r3
 80059ea:	bfb8      	it	lt
 80059ec:	4618      	movlt	r0, r3
 80059ee:	e730      	b.n	8005852 <_printf_float+0xc6>
 80059f0:	2301      	movs	r3, #1
 80059f2:	464a      	mov	r2, r9
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af27 	beq.w	800584e <_printf_float+0xc2>
 8005a00:	f108 0801 	add.w	r8, r8, #1
 8005a04:	e7e6      	b.n	80059d4 <_printf_float+0x248>
 8005a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dc39      	bgt.n	8005a80 <_printf_float+0x2f4>
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <_printf_float+0x2f0>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af19 	beq.w	800584e <_printf_float+0xc2>
 8005a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d102      	bne.n	8005a2a <_printf_float+0x29e>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07d9      	lsls	r1, r3, #31
 8005a28:	d5d8      	bpl.n	80059dc <_printf_float+0x250>
 8005a2a:	ee18 3a10 	vmov	r3, s16
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af09 	beq.w	800584e <_printf_float+0xc2>
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	f104 0a1a 	add.w	sl, r4, #26
 8005a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a46:	425b      	negs	r3, r3
 8005a48:	454b      	cmp	r3, r9
 8005a4a:	dc01      	bgt.n	8005a50 <_printf_float+0x2c4>
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4e:	e792      	b.n	8005976 <_printf_float+0x1ea>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f aef7 	beq.w	800584e <_printf_float+0xc2>
 8005a60:	f109 0901 	add.w	r9, r9, #1
 8005a64:	e7ee      	b.n	8005a44 <_printf_float+0x2b8>
 8005a66:	bf00      	nop
 8005a68:	7fefffff 	.word	0x7fefffff
 8005a6c:	080080cc 	.word	0x080080cc
 8005a70:	080080d0 	.word	0x080080d0
 8005a74:	080080d8 	.word	0x080080d8
 8005a78:	080080d4 	.word	0x080080d4
 8005a7c:	080080dc 	.word	0x080080dc
 8005a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bfa8      	it	ge
 8005a88:	461a      	movge	r2, r3
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	4691      	mov	r9, r2
 8005a8e:	dc37      	bgt.n	8005b00 <_printf_float+0x374>
 8005a90:	f04f 0b00 	mov.w	fp, #0
 8005a94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a98:	f104 021a 	add.w	r2, r4, #26
 8005a9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	eba3 0309 	sub.w	r3, r3, r9
 8005aa4:	455b      	cmp	r3, fp
 8005aa6:	dc33      	bgt.n	8005b10 <_printf_float+0x384>
 8005aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aac:	429a      	cmp	r2, r3
 8005aae:	db3b      	blt.n	8005b28 <_printf_float+0x39c>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	07da      	lsls	r2, r3, #31
 8005ab4:	d438      	bmi.n	8005b28 <_printf_float+0x39c>
 8005ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab8:	9a05      	ldr	r2, [sp, #20]
 8005aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005abc:	1a9a      	subs	r2, r3, r2
 8005abe:	eba3 0901 	sub.w	r9, r3, r1
 8005ac2:	4591      	cmp	r9, r2
 8005ac4:	bfa8      	it	ge
 8005ac6:	4691      	movge	r9, r2
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	dc35      	bgt.n	8005b3a <_printf_float+0x3ae>
 8005ace:	f04f 0800 	mov.w	r8, #0
 8005ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad6:	f104 0a1a 	add.w	sl, r4, #26
 8005ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	eba3 0309 	sub.w	r3, r3, r9
 8005ae4:	4543      	cmp	r3, r8
 8005ae6:	f77f af79 	ble.w	80059dc <_printf_float+0x250>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4652      	mov	r2, sl
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f aeaa 	beq.w	800584e <_printf_float+0xc2>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	e7ec      	b.n	8005ada <_printf_float+0x34e>
 8005b00:	4613      	mov	r3, r2
 8005b02:	4631      	mov	r1, r6
 8005b04:	4642      	mov	r2, r8
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d1c0      	bne.n	8005a90 <_printf_float+0x304>
 8005b0e:	e69e      	b.n	800584e <_printf_float+0xc2>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	9205      	str	r2, [sp, #20]
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f ae97 	beq.w	800584e <_printf_float+0xc2>
 8005b20:	9a05      	ldr	r2, [sp, #20]
 8005b22:	f10b 0b01 	add.w	fp, fp, #1
 8005b26:	e7b9      	b.n	8005a9c <_printf_float+0x310>
 8005b28:	ee18 3a10 	vmov	r3, s16
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	d1be      	bne.n	8005ab6 <_printf_float+0x32a>
 8005b38:	e689      	b.n	800584e <_printf_float+0xc2>
 8005b3a:	9a05      	ldr	r2, [sp, #20]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	4442      	add	r2, r8
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	d1c1      	bne.n	8005ace <_printf_float+0x342>
 8005b4a:	e680      	b.n	800584e <_printf_float+0xc2>
 8005b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b4e:	2a01      	cmp	r2, #1
 8005b50:	dc01      	bgt.n	8005b56 <_printf_float+0x3ca>
 8005b52:	07db      	lsls	r3, r3, #31
 8005b54:	d538      	bpl.n	8005bc8 <_printf_float+0x43c>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f ae74 	beq.w	800584e <_printf_float+0xc2>
 8005b66:	ee18 3a10 	vmov	r3, s16
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f ae6b 	beq.w	800584e <_printf_float+0xc2>
 8005b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f7fa ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b84:	b9d8      	cbnz	r0, 8005bbe <_printf_float+0x432>
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	f108 0201 	add.w	r2, r8, #1
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	d10e      	bne.n	8005bb6 <_printf_float+0x42a>
 8005b98:	e659      	b.n	800584e <_printf_float+0xc2>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f43f ae52 	beq.w	800584e <_printf_float+0xc2>
 8005baa:	f108 0801 	add.w	r8, r8, #1
 8005bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4543      	cmp	r3, r8
 8005bb4:	dcf1      	bgt.n	8005b9a <_printf_float+0x40e>
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bbc:	e6dc      	b.n	8005978 <_printf_float+0x1ec>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	f104 0a1a 	add.w	sl, r4, #26
 8005bc6:	e7f2      	b.n	8005bae <_printf_float+0x422>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4642      	mov	r2, r8
 8005bcc:	e7df      	b.n	8005b8e <_printf_float+0x402>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f43f ae38 	beq.w	800584e <_printf_float+0xc2>
 8005bde:	f108 0801 	add.w	r8, r8, #1
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005be6:	1a5b      	subs	r3, r3, r1
 8005be8:	4543      	cmp	r3, r8
 8005bea:	dcf0      	bgt.n	8005bce <_printf_float+0x442>
 8005bec:	e6fa      	b.n	80059e4 <_printf_float+0x258>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	f104 0919 	add.w	r9, r4, #25
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x456>

08005bf8 <_printf_common>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	4699      	mov	r9, r3
 8005c00:	688a      	ldr	r2, [r1, #8]
 8005c02:	690b      	ldr	r3, [r1, #16]
 8005c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bfb8      	it	lt
 8005c0c:	4613      	movlt	r3, r2
 8005c0e:	6033      	str	r3, [r6, #0]
 8005c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c14:	4607      	mov	r7, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	b10a      	cbz	r2, 8005c1e <_printf_common+0x26>
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	6033      	str	r3, [r6, #0]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	0699      	lsls	r1, r3, #26
 8005c22:	bf42      	ittt	mi
 8005c24:	6833      	ldrmi	r3, [r6, #0]
 8005c26:	3302      	addmi	r3, #2
 8005c28:	6033      	strmi	r3, [r6, #0]
 8005c2a:	6825      	ldr	r5, [r4, #0]
 8005c2c:	f015 0506 	ands.w	r5, r5, #6
 8005c30:	d106      	bne.n	8005c40 <_printf_common+0x48>
 8005c32:	f104 0a19 	add.w	sl, r4, #25
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	6832      	ldr	r2, [r6, #0]
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dc26      	bgt.n	8005c8e <_printf_common+0x96>
 8005c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c44:	1e13      	subs	r3, r2, #0
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	bf18      	it	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	0692      	lsls	r2, r2, #26
 8005c4e:	d42b      	bmi.n	8005ca8 <_printf_common+0xb0>
 8005c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c54:	4649      	mov	r1, r9
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d01e      	beq.n	8005c9c <_printf_common+0xa4>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	68e5      	ldr	r5, [r4, #12]
 8005c62:	6832      	ldr	r2, [r6, #0]
 8005c64:	f003 0306 	and.w	r3, r3, #6
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	bf08      	it	eq
 8005c6c:	1aad      	subeq	r5, r5, r2
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	6922      	ldr	r2, [r4, #16]
 8005c72:	bf0c      	ite	eq
 8005c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c78:	2500      	movne	r5, #0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfc4      	itt	gt
 8005c7e:	1a9b      	subgt	r3, r3, r2
 8005c80:	18ed      	addgt	r5, r5, r3
 8005c82:	2600      	movs	r6, #0
 8005c84:	341a      	adds	r4, #26
 8005c86:	42b5      	cmp	r5, r6
 8005c88:	d11a      	bne.n	8005cc0 <_printf_common+0xc8>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e008      	b.n	8005ca0 <_printf_common+0xa8>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4652      	mov	r2, sl
 8005c92:	4649      	mov	r1, r9
 8005c94:	4638      	mov	r0, r7
 8005c96:	47c0      	blx	r8
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d103      	bne.n	8005ca4 <_printf_common+0xac>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	e7c6      	b.n	8005c36 <_printf_common+0x3e>
 8005ca8:	18e1      	adds	r1, r4, r3
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	2030      	movs	r0, #48	; 0x30
 8005cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb2:	4422      	add	r2, r4
 8005cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	e7c7      	b.n	8005c50 <_printf_common+0x58>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c0      	blx	r8
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d0e6      	beq.n	8005c9c <_printf_common+0xa4>
 8005cce:	3601      	adds	r6, #1
 8005cd0:	e7d9      	b.n	8005c86 <_printf_common+0x8e>
	...

08005cd4 <_printf_i>:
 8005cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	7e0f      	ldrb	r7, [r1, #24]
 8005cda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cdc:	2f78      	cmp	r7, #120	; 0x78
 8005cde:	4691      	mov	r9, r2
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	469a      	mov	sl, r3
 8005ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cea:	d807      	bhi.n	8005cfc <_printf_i+0x28>
 8005cec:	2f62      	cmp	r7, #98	; 0x62
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x32>
 8005cf0:	2f00      	cmp	r7, #0
 8005cf2:	f000 80d8 	beq.w	8005ea6 <_printf_i+0x1d2>
 8005cf6:	2f58      	cmp	r7, #88	; 0x58
 8005cf8:	f000 80a3 	beq.w	8005e42 <_printf_i+0x16e>
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d04:	e03a      	b.n	8005d7c <_printf_i+0xa8>
 8005d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d0a:	2b15      	cmp	r3, #21
 8005d0c:	d8f6      	bhi.n	8005cfc <_printf_i+0x28>
 8005d0e:	a101      	add	r1, pc, #4	; (adr r1, 8005d14 <_printf_i+0x40>)
 8005d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d81 	.word	0x08005d81
 8005d1c:	08005cfd 	.word	0x08005cfd
 8005d20:	08005cfd 	.word	0x08005cfd
 8005d24:	08005cfd 	.word	0x08005cfd
 8005d28:	08005cfd 	.word	0x08005cfd
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005cfd 	.word	0x08005cfd
 8005d34:	08005cfd 	.word	0x08005cfd
 8005d38:	08005cfd 	.word	0x08005cfd
 8005d3c:	08005cfd 	.word	0x08005cfd
 8005d40:	08005e8d 	.word	0x08005e8d
 8005d44:	08005db1 	.word	0x08005db1
 8005d48:	08005e6f 	.word	0x08005e6f
 8005d4c:	08005cfd 	.word	0x08005cfd
 8005d50:	08005cfd 	.word	0x08005cfd
 8005d54:	08005eaf 	.word	0x08005eaf
 8005d58:	08005cfd 	.word	0x08005cfd
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005cfd 	.word	0x08005cfd
 8005d64:	08005cfd 	.word	0x08005cfd
 8005d68:	08005e77 	.word	0x08005e77
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	602a      	str	r2, [r5, #0]
 8005d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0a3      	b.n	8005ec8 <_printf_i+0x1f4>
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	6829      	ldr	r1, [r5, #0]
 8005d84:	0606      	lsls	r6, r0, #24
 8005d86:	f101 0304 	add.w	r3, r1, #4
 8005d8a:	d50a      	bpl.n	8005da2 <_printf_i+0xce>
 8005d8c:	680e      	ldr	r6, [r1, #0]
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	da03      	bge.n	8005d9c <_printf_i+0xc8>
 8005d94:	232d      	movs	r3, #45	; 0x2d
 8005d96:	4276      	negs	r6, r6
 8005d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9c:	485e      	ldr	r0, [pc, #376]	; (8005f18 <_printf_i+0x244>)
 8005d9e:	230a      	movs	r3, #10
 8005da0:	e019      	b.n	8005dd6 <_printf_i+0x102>
 8005da2:	680e      	ldr	r6, [r1, #0]
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005daa:	bf18      	it	ne
 8005dac:	b236      	sxthne	r6, r6
 8005dae:	e7ef      	b.n	8005d90 <_printf_i+0xbc>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	6029      	str	r1, [r5, #0]
 8005db8:	0601      	lsls	r1, r0, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xec>
 8005dbc:	681e      	ldr	r6, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <_printf_i+0xf2>
 8005dc0:	0646      	lsls	r6, r0, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xe8>
 8005dc4:	881e      	ldrh	r6, [r3, #0]
 8005dc6:	4854      	ldr	r0, [pc, #336]	; (8005f18 <_printf_i+0x244>)
 8005dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dca:	bf0c      	ite	eq
 8005dcc:	2308      	moveq	r3, #8
 8005dce:	230a      	movne	r3, #10
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd6:	6865      	ldr	r5, [r4, #4]
 8005dd8:	60a5      	str	r5, [r4, #8]
 8005dda:	2d00      	cmp	r5, #0
 8005ddc:	bfa2      	ittt	ge
 8005dde:	6821      	ldrge	r1, [r4, #0]
 8005de0:	f021 0104 	bicge.w	r1, r1, #4
 8005de4:	6021      	strge	r1, [r4, #0]
 8005de6:	b90e      	cbnz	r6, 8005dec <_printf_i+0x118>
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	d04d      	beq.n	8005e88 <_printf_i+0x1b4>
 8005dec:	4615      	mov	r5, r2
 8005dee:	fbb6 f1f3 	udiv	r1, r6, r3
 8005df2:	fb03 6711 	mls	r7, r3, r1, r6
 8005df6:	5dc7      	ldrb	r7, [r0, r7]
 8005df8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dfc:	4637      	mov	r7, r6
 8005dfe:	42bb      	cmp	r3, r7
 8005e00:	460e      	mov	r6, r1
 8005e02:	d9f4      	bls.n	8005dee <_printf_i+0x11a>
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d10b      	bne.n	8005e20 <_printf_i+0x14c>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07de      	lsls	r6, r3, #31
 8005e0c:	d508      	bpl.n	8005e20 <_printf_i+0x14c>
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	6861      	ldr	r1, [r4, #4]
 8005e12:	4299      	cmp	r1, r3
 8005e14:	bfde      	ittt	le
 8005e16:	2330      	movle	r3, #48	; 0x30
 8005e18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e20:	1b52      	subs	r2, r2, r5
 8005e22:	6122      	str	r2, [r4, #16]
 8005e24:	f8cd a000 	str.w	sl, [sp]
 8005e28:	464b      	mov	r3, r9
 8005e2a:	aa03      	add	r2, sp, #12
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f7ff fee2 	bl	8005bf8 <_printf_common>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d14c      	bne.n	8005ed2 <_printf_i+0x1fe>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e3c:	b004      	add	sp, #16
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	4835      	ldr	r0, [pc, #212]	; (8005f18 <_printf_i+0x244>)
 8005e44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e48:	6829      	ldr	r1, [r5, #0]
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e50:	6029      	str	r1, [r5, #0]
 8005e52:	061d      	lsls	r5, r3, #24
 8005e54:	d514      	bpl.n	8005e80 <_printf_i+0x1ac>
 8005e56:	07df      	lsls	r7, r3, #31
 8005e58:	bf44      	itt	mi
 8005e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e5e:	6023      	strmi	r3, [r4, #0]
 8005e60:	b91e      	cbnz	r6, 8005e6a <_printf_i+0x196>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f023 0320 	bic.w	r3, r3, #32
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	e7b0      	b.n	8005dd0 <_printf_i+0xfc>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	f043 0320 	orr.w	r3, r3, #32
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	2378      	movs	r3, #120	; 0x78
 8005e78:	4828      	ldr	r0, [pc, #160]	; (8005f1c <_printf_i+0x248>)
 8005e7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e7e:	e7e3      	b.n	8005e48 <_printf_i+0x174>
 8005e80:	0659      	lsls	r1, r3, #25
 8005e82:	bf48      	it	mi
 8005e84:	b2b6      	uxthmi	r6, r6
 8005e86:	e7e6      	b.n	8005e56 <_printf_i+0x182>
 8005e88:	4615      	mov	r5, r2
 8005e8a:	e7bb      	b.n	8005e04 <_printf_i+0x130>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	6826      	ldr	r6, [r4, #0]
 8005e90:	6961      	ldr	r1, [r4, #20]
 8005e92:	1d18      	adds	r0, r3, #4
 8005e94:	6028      	str	r0, [r5, #0]
 8005e96:	0635      	lsls	r5, r6, #24
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0x1cc>
 8005e9c:	6019      	str	r1, [r3, #0]
 8005e9e:	e002      	b.n	8005ea6 <_printf_i+0x1d2>
 8005ea0:	0670      	lsls	r0, r6, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0x1c8>
 8005ea4:	8019      	strh	r1, [r3, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	4615      	mov	r5, r2
 8005eac:	e7ba      	b.n	8005e24 <_printf_i+0x150>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	1d1a      	adds	r2, r3, #4
 8005eb2:	602a      	str	r2, [r5, #0]
 8005eb4:	681d      	ldr	r5, [r3, #0]
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7fa f998 	bl	80001f0 <memchr>
 8005ec0:	b108      	cbz	r0, 8005ec6 <_printf_i+0x1f2>
 8005ec2:	1b40      	subs	r0, r0, r5
 8005ec4:	6060      	str	r0, [r4, #4]
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	e7a8      	b.n	8005e24 <_printf_i+0x150>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	4640      	mov	r0, r8
 8005eda:	47d0      	blx	sl
 8005edc:	3001      	adds	r0, #1
 8005ede:	d0ab      	beq.n	8005e38 <_printf_i+0x164>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	079b      	lsls	r3, r3, #30
 8005ee4:	d413      	bmi.n	8005f0e <_printf_i+0x23a>
 8005ee6:	68e0      	ldr	r0, [r4, #12]
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	4298      	cmp	r0, r3
 8005eec:	bfb8      	it	lt
 8005eee:	4618      	movlt	r0, r3
 8005ef0:	e7a4      	b.n	8005e3c <_printf_i+0x168>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	47d0      	blx	sl
 8005efc:	3001      	adds	r0, #1
 8005efe:	d09b      	beq.n	8005e38 <_printf_i+0x164>
 8005f00:	3501      	adds	r5, #1
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	9903      	ldr	r1, [sp, #12]
 8005f06:	1a5b      	subs	r3, r3, r1
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dcf2      	bgt.n	8005ef2 <_printf_i+0x21e>
 8005f0c:	e7eb      	b.n	8005ee6 <_printf_i+0x212>
 8005f0e:	2500      	movs	r5, #0
 8005f10:	f104 0619 	add.w	r6, r4, #25
 8005f14:	e7f5      	b.n	8005f02 <_printf_i+0x22e>
 8005f16:	bf00      	nop
 8005f18:	080080de 	.word	0x080080de
 8005f1c:	080080ef 	.word	0x080080ef

08005f20 <quorem>:
 8005f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	6903      	ldr	r3, [r0, #16]
 8005f26:	690c      	ldr	r4, [r1, #16]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	4607      	mov	r7, r0
 8005f2c:	f2c0 8081 	blt.w	8006032 <quorem+0x112>
 8005f30:	3c01      	subs	r4, #1
 8005f32:	f101 0814 	add.w	r8, r1, #20
 8005f36:	f100 0514 	add.w	r5, r0, #20
 8005f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f54:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f58:	d331      	bcc.n	8005fbe <quorem+0x9e>
 8005f5a:	f04f 0e00 	mov.w	lr, #0
 8005f5e:	4640      	mov	r0, r8
 8005f60:	46ac      	mov	ip, r5
 8005f62:	46f2      	mov	sl, lr
 8005f64:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f68:	b293      	uxth	r3, r2
 8005f6a:	fb06 e303 	mla	r3, r6, r3, lr
 8005f6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ebaa 0303 	sub.w	r3, sl, r3
 8005f78:	f8dc a000 	ldr.w	sl, [ip]
 8005f7c:	0c12      	lsrs	r2, r2, #16
 8005f7e:	fa13 f38a 	uxtah	r3, r3, sl
 8005f82:	fb06 e202 	mla	r2, r6, r2, lr
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f8e:	b292      	uxth	r2, r2
 8005f90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f98:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f9c:	4581      	cmp	r9, r0
 8005f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fa2:	f84c 3b04 	str.w	r3, [ip], #4
 8005fa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005faa:	d2db      	bcs.n	8005f64 <quorem+0x44>
 8005fac:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fb0:	b92b      	cbnz	r3, 8005fbe <quorem+0x9e>
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	d32e      	bcc.n	800601a <quorem+0xfa>
 8005fbc:	613c      	str	r4, [r7, #16]
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	f001 f9be 	bl	8007340 <__mcmp>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	db24      	blt.n	8006012 <quorem+0xf2>
 8005fc8:	3601      	adds	r6, #1
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f04f 0c00 	mov.w	ip, #0
 8005fd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fd4:	f8d0 e000 	ldr.w	lr, [r0]
 8005fd8:	b293      	uxth	r3, r2
 8005fda:	ebac 0303 	sub.w	r3, ip, r3
 8005fde:	0c12      	lsrs	r2, r2, #16
 8005fe0:	fa13 f38e 	uxtah	r3, r3, lr
 8005fe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ff2:	45c1      	cmp	r9, r8
 8005ff4:	f840 3b04 	str.w	r3, [r0], #4
 8005ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ffc:	d2e8      	bcs.n	8005fd0 <quorem+0xb0>
 8005ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006006:	b922      	cbnz	r2, 8006012 <quorem+0xf2>
 8006008:	3b04      	subs	r3, #4
 800600a:	429d      	cmp	r5, r3
 800600c:	461a      	mov	r2, r3
 800600e:	d30a      	bcc.n	8006026 <quorem+0x106>
 8006010:	613c      	str	r4, [r7, #16]
 8006012:	4630      	mov	r0, r6
 8006014:	b003      	add	sp, #12
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	3b04      	subs	r3, #4
 800601e:	2a00      	cmp	r2, #0
 8006020:	d1cc      	bne.n	8005fbc <quorem+0x9c>
 8006022:	3c01      	subs	r4, #1
 8006024:	e7c7      	b.n	8005fb6 <quorem+0x96>
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	3b04      	subs	r3, #4
 800602a:	2a00      	cmp	r2, #0
 800602c:	d1f0      	bne.n	8006010 <quorem+0xf0>
 800602e:	3c01      	subs	r4, #1
 8006030:	e7eb      	b.n	800600a <quorem+0xea>
 8006032:	2000      	movs	r0, #0
 8006034:	e7ee      	b.n	8006014 <quorem+0xf4>
	...

08006038 <_dtoa_r>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	ed2d 8b04 	vpush	{d8-d9}
 8006040:	ec57 6b10 	vmov	r6, r7, d0
 8006044:	b093      	sub	sp, #76	; 0x4c
 8006046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800604c:	9106      	str	r1, [sp, #24]
 800604e:	ee10 aa10 	vmov	sl, s0
 8006052:	4604      	mov	r4, r0
 8006054:	9209      	str	r2, [sp, #36]	; 0x24
 8006056:	930c      	str	r3, [sp, #48]	; 0x30
 8006058:	46bb      	mov	fp, r7
 800605a:	b975      	cbnz	r5, 800607a <_dtoa_r+0x42>
 800605c:	2010      	movs	r0, #16
 800605e:	f000 fed7 	bl	8006e10 <malloc>
 8006062:	4602      	mov	r2, r0
 8006064:	6260      	str	r0, [r4, #36]	; 0x24
 8006066:	b920      	cbnz	r0, 8006072 <_dtoa_r+0x3a>
 8006068:	4ba7      	ldr	r3, [pc, #668]	; (8006308 <_dtoa_r+0x2d0>)
 800606a:	21ea      	movs	r1, #234	; 0xea
 800606c:	48a7      	ldr	r0, [pc, #668]	; (800630c <_dtoa_r+0x2d4>)
 800606e:	f001 fddf 	bl	8007c30 <__assert_func>
 8006072:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006076:	6005      	str	r5, [r0, #0]
 8006078:	60c5      	str	r5, [r0, #12]
 800607a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	b151      	cbz	r1, 8006096 <_dtoa_r+0x5e>
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	604a      	str	r2, [r1, #4]
 8006084:	2301      	movs	r3, #1
 8006086:	4093      	lsls	r3, r2
 8006088:	608b      	str	r3, [r1, #8]
 800608a:	4620      	mov	r0, r4
 800608c:	f000 ff16 	bl	8006ebc <_Bfree>
 8006090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	1e3b      	subs	r3, r7, #0
 8006098:	bfaa      	itet	ge
 800609a:	2300      	movge	r3, #0
 800609c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80060a0:	f8c8 3000 	strge.w	r3, [r8]
 80060a4:	4b9a      	ldr	r3, [pc, #616]	; (8006310 <_dtoa_r+0x2d8>)
 80060a6:	bfbc      	itt	lt
 80060a8:	2201      	movlt	r2, #1
 80060aa:	f8c8 2000 	strlt.w	r2, [r8]
 80060ae:	ea33 030b 	bics.w	r3, r3, fp
 80060b2:	d11b      	bne.n	80060ec <_dtoa_r+0xb4>
 80060b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060c0:	4333      	orrs	r3, r6
 80060c2:	f000 8592 	beq.w	8006bea <_dtoa_r+0xbb2>
 80060c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060c8:	b963      	cbnz	r3, 80060e4 <_dtoa_r+0xac>
 80060ca:	4b92      	ldr	r3, [pc, #584]	; (8006314 <_dtoa_r+0x2dc>)
 80060cc:	e022      	b.n	8006114 <_dtoa_r+0xdc>
 80060ce:	4b92      	ldr	r3, [pc, #584]	; (8006318 <_dtoa_r+0x2e0>)
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	3308      	adds	r3, #8
 80060d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	9801      	ldr	r0, [sp, #4]
 80060da:	b013      	add	sp, #76	; 0x4c
 80060dc:	ecbd 8b04 	vpop	{d8-d9}
 80060e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e4:	4b8b      	ldr	r3, [pc, #556]	; (8006314 <_dtoa_r+0x2dc>)
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	3303      	adds	r3, #3
 80060ea:	e7f3      	b.n	80060d4 <_dtoa_r+0x9c>
 80060ec:	2200      	movs	r2, #0
 80060ee:	2300      	movs	r3, #0
 80060f0:	4650      	mov	r0, sl
 80060f2:	4659      	mov	r1, fp
 80060f4:	f7fa fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80060f8:	ec4b ab19 	vmov	d9, sl, fp
 80060fc:	4680      	mov	r8, r0
 80060fe:	b158      	cbz	r0, 8006118 <_dtoa_r+0xe0>
 8006100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006102:	2301      	movs	r3, #1
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 856b 	beq.w	8006be4 <_dtoa_r+0xbac>
 800610e:	4883      	ldr	r0, [pc, #524]	; (800631c <_dtoa_r+0x2e4>)
 8006110:	6018      	str	r0, [r3, #0]
 8006112:	1e43      	subs	r3, r0, #1
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	e7df      	b.n	80060d8 <_dtoa_r+0xa0>
 8006118:	ec4b ab10 	vmov	d0, sl, fp
 800611c:	aa10      	add	r2, sp, #64	; 0x40
 800611e:	a911      	add	r1, sp, #68	; 0x44
 8006120:	4620      	mov	r0, r4
 8006122:	f001 f9b3 	bl	800748c <__d2b>
 8006126:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800612a:	ee08 0a10 	vmov	s16, r0
 800612e:	2d00      	cmp	r5, #0
 8006130:	f000 8084 	beq.w	800623c <_dtoa_r+0x204>
 8006134:	ee19 3a90 	vmov	r3, s19
 8006138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800613c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006140:	4656      	mov	r6, sl
 8006142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800614a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800614e:	4b74      	ldr	r3, [pc, #464]	; (8006320 <_dtoa_r+0x2e8>)
 8006150:	2200      	movs	r2, #0
 8006152:	4630      	mov	r0, r6
 8006154:	4639      	mov	r1, r7
 8006156:	f7fa f89f 	bl	8000298 <__aeabi_dsub>
 800615a:	a365      	add	r3, pc, #404	; (adr r3, 80062f0 <_dtoa_r+0x2b8>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa fa52 	bl	8000608 <__aeabi_dmul>
 8006164:	a364      	add	r3, pc, #400	; (adr r3, 80062f8 <_dtoa_r+0x2c0>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa f897 	bl	800029c <__adddf3>
 800616e:	4606      	mov	r6, r0
 8006170:	4628      	mov	r0, r5
 8006172:	460f      	mov	r7, r1
 8006174:	f7fa f9de 	bl	8000534 <__aeabi_i2d>
 8006178:	a361      	add	r3, pc, #388	; (adr r3, 8006300 <_dtoa_r+0x2c8>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa fa43 	bl	8000608 <__aeabi_dmul>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa f887 	bl	800029c <__adddf3>
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	f7fa fce9 	bl	8000b68 <__aeabi_d2iz>
 8006196:	2200      	movs	r2, #0
 8006198:	9000      	str	r0, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa fca4 	bl	8000aec <__aeabi_dcmplt>
 80061a4:	b150      	cbz	r0, 80061bc <_dtoa_r+0x184>
 80061a6:	9800      	ldr	r0, [sp, #0]
 80061a8:	f7fa f9c4 	bl	8000534 <__aeabi_i2d>
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	f7fa fc92 	bl	8000ad8 <__aeabi_dcmpeq>
 80061b4:	b910      	cbnz	r0, 80061bc <_dtoa_r+0x184>
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	9b00      	ldr	r3, [sp, #0]
 80061be:	2b16      	cmp	r3, #22
 80061c0:	d85a      	bhi.n	8006278 <_dtoa_r+0x240>
 80061c2:	9a00      	ldr	r2, [sp, #0]
 80061c4:	4b57      	ldr	r3, [pc, #348]	; (8006324 <_dtoa_r+0x2ec>)
 80061c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	ec51 0b19 	vmov	r0, r1, d9
 80061d2:	f7fa fc8b 	bl	8000aec <__aeabi_dcmplt>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d050      	beq.n	800627c <_dtoa_r+0x244>
 80061da:	9b00      	ldr	r3, [sp, #0]
 80061dc:	3b01      	subs	r3, #1
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2300      	movs	r3, #0
 80061e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061e6:	1b5d      	subs	r5, r3, r5
 80061e8:	1e6b      	subs	r3, r5, #1
 80061ea:	9305      	str	r3, [sp, #20]
 80061ec:	bf45      	ittet	mi
 80061ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80061f2:	9304      	strmi	r3, [sp, #16]
 80061f4:	2300      	movpl	r3, #0
 80061f6:	2300      	movmi	r3, #0
 80061f8:	bf4c      	ite	mi
 80061fa:	9305      	strmi	r3, [sp, #20]
 80061fc:	9304      	strpl	r3, [sp, #16]
 80061fe:	9b00      	ldr	r3, [sp, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db3d      	blt.n	8006280 <_dtoa_r+0x248>
 8006204:	9b05      	ldr	r3, [sp, #20]
 8006206:	9a00      	ldr	r2, [sp, #0]
 8006208:	920a      	str	r2, [sp, #40]	; 0x28
 800620a:	4413      	add	r3, r2
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	2300      	movs	r3, #0
 8006210:	9307      	str	r3, [sp, #28]
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	2b09      	cmp	r3, #9
 8006216:	f200 8089 	bhi.w	800632c <_dtoa_r+0x2f4>
 800621a:	2b05      	cmp	r3, #5
 800621c:	bfc4      	itt	gt
 800621e:	3b04      	subgt	r3, #4
 8006220:	9306      	strgt	r3, [sp, #24]
 8006222:	9b06      	ldr	r3, [sp, #24]
 8006224:	f1a3 0302 	sub.w	r3, r3, #2
 8006228:	bfcc      	ite	gt
 800622a:	2500      	movgt	r5, #0
 800622c:	2501      	movle	r5, #1
 800622e:	2b03      	cmp	r3, #3
 8006230:	f200 8087 	bhi.w	8006342 <_dtoa_r+0x30a>
 8006234:	e8df f003 	tbb	[pc, r3]
 8006238:	59383a2d 	.word	0x59383a2d
 800623c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006240:	441d      	add	r5, r3
 8006242:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006246:	2b20      	cmp	r3, #32
 8006248:	bfc1      	itttt	gt
 800624a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800624e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006252:	fa0b f303 	lslgt.w	r3, fp, r3
 8006256:	fa26 f000 	lsrgt.w	r0, r6, r0
 800625a:	bfda      	itte	le
 800625c:	f1c3 0320 	rsble	r3, r3, #32
 8006260:	fa06 f003 	lslle.w	r0, r6, r3
 8006264:	4318      	orrgt	r0, r3
 8006266:	f7fa f955 	bl	8000514 <__aeabi_ui2d>
 800626a:	2301      	movs	r3, #1
 800626c:	4606      	mov	r6, r0
 800626e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006272:	3d01      	subs	r5, #1
 8006274:	930e      	str	r3, [sp, #56]	; 0x38
 8006276:	e76a      	b.n	800614e <_dtoa_r+0x116>
 8006278:	2301      	movs	r3, #1
 800627a:	e7b2      	b.n	80061e2 <_dtoa_r+0x1aa>
 800627c:	900b      	str	r0, [sp, #44]	; 0x2c
 800627e:	e7b1      	b.n	80061e4 <_dtoa_r+0x1ac>
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	9a00      	ldr	r2, [sp, #0]
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	4253      	negs	r3, r2
 800628a:	9307      	str	r3, [sp, #28]
 800628c:	2300      	movs	r3, #0
 800628e:	930a      	str	r3, [sp, #40]	; 0x28
 8006290:	e7bf      	b.n	8006212 <_dtoa_r+0x1da>
 8006292:	2300      	movs	r3, #0
 8006294:	9308      	str	r3, [sp, #32]
 8006296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	dc55      	bgt.n	8006348 <_dtoa_r+0x310>
 800629c:	2301      	movs	r3, #1
 800629e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062a2:	461a      	mov	r2, r3
 80062a4:	9209      	str	r2, [sp, #36]	; 0x24
 80062a6:	e00c      	b.n	80062c2 <_dtoa_r+0x28a>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e7f3      	b.n	8006294 <_dtoa_r+0x25c>
 80062ac:	2300      	movs	r3, #0
 80062ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b0:	9308      	str	r3, [sp, #32]
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	4413      	add	r3, r2
 80062b6:	9302      	str	r3, [sp, #8]
 80062b8:	3301      	adds	r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	bfb8      	it	lt
 80062c0:	2301      	movlt	r3, #1
 80062c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062c4:	2200      	movs	r2, #0
 80062c6:	6042      	str	r2, [r0, #4]
 80062c8:	2204      	movs	r2, #4
 80062ca:	f102 0614 	add.w	r6, r2, #20
 80062ce:	429e      	cmp	r6, r3
 80062d0:	6841      	ldr	r1, [r0, #4]
 80062d2:	d93d      	bls.n	8006350 <_dtoa_r+0x318>
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fdb1 	bl	8006e3c <_Balloc>
 80062da:	9001      	str	r0, [sp, #4]
 80062dc:	2800      	cmp	r0, #0
 80062de:	d13b      	bne.n	8006358 <_dtoa_r+0x320>
 80062e0:	4b11      	ldr	r3, [pc, #68]	; (8006328 <_dtoa_r+0x2f0>)
 80062e2:	4602      	mov	r2, r0
 80062e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062e8:	e6c0      	b.n	800606c <_dtoa_r+0x34>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e7df      	b.n	80062ae <_dtoa_r+0x276>
 80062ee:	bf00      	nop
 80062f0:	636f4361 	.word	0x636f4361
 80062f4:	3fd287a7 	.word	0x3fd287a7
 80062f8:	8b60c8b3 	.word	0x8b60c8b3
 80062fc:	3fc68a28 	.word	0x3fc68a28
 8006300:	509f79fb 	.word	0x509f79fb
 8006304:	3fd34413 	.word	0x3fd34413
 8006308:	0800810d 	.word	0x0800810d
 800630c:	08008124 	.word	0x08008124
 8006310:	7ff00000 	.word	0x7ff00000
 8006314:	08008109 	.word	0x08008109
 8006318:	08008100 	.word	0x08008100
 800631c:	080080dd 	.word	0x080080dd
 8006320:	3ff80000 	.word	0x3ff80000
 8006324:	08008278 	.word	0x08008278
 8006328:	0800817f 	.word	0x0800817f
 800632c:	2501      	movs	r5, #1
 800632e:	2300      	movs	r3, #0
 8006330:	9306      	str	r3, [sp, #24]
 8006332:	9508      	str	r5, [sp, #32]
 8006334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006338:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	2312      	movs	r3, #18
 8006340:	e7b0      	b.n	80062a4 <_dtoa_r+0x26c>
 8006342:	2301      	movs	r3, #1
 8006344:	9308      	str	r3, [sp, #32]
 8006346:	e7f5      	b.n	8006334 <_dtoa_r+0x2fc>
 8006348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800634e:	e7b8      	b.n	80062c2 <_dtoa_r+0x28a>
 8006350:	3101      	adds	r1, #1
 8006352:	6041      	str	r1, [r0, #4]
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	e7b8      	b.n	80062ca <_dtoa_r+0x292>
 8006358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800635a:	9a01      	ldr	r2, [sp, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	2b0e      	cmp	r3, #14
 8006362:	f200 809d 	bhi.w	80064a0 <_dtoa_r+0x468>
 8006366:	2d00      	cmp	r5, #0
 8006368:	f000 809a 	beq.w	80064a0 <_dtoa_r+0x468>
 800636c:	9b00      	ldr	r3, [sp, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	dd32      	ble.n	80063d8 <_dtoa_r+0x3a0>
 8006372:	4ab7      	ldr	r2, [pc, #732]	; (8006650 <_dtoa_r+0x618>)
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800637c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006380:	9b00      	ldr	r3, [sp, #0]
 8006382:	05d8      	lsls	r0, r3, #23
 8006384:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006388:	d516      	bpl.n	80063b8 <_dtoa_r+0x380>
 800638a:	4bb2      	ldr	r3, [pc, #712]	; (8006654 <_dtoa_r+0x61c>)
 800638c:	ec51 0b19 	vmov	r0, r1, d9
 8006390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006394:	f7fa fa62 	bl	800085c <__aeabi_ddiv>
 8006398:	f007 070f 	and.w	r7, r7, #15
 800639c:	4682      	mov	sl, r0
 800639e:	468b      	mov	fp, r1
 80063a0:	2503      	movs	r5, #3
 80063a2:	4eac      	ldr	r6, [pc, #688]	; (8006654 <_dtoa_r+0x61c>)
 80063a4:	b957      	cbnz	r7, 80063bc <_dtoa_r+0x384>
 80063a6:	4642      	mov	r2, r8
 80063a8:	464b      	mov	r3, r9
 80063aa:	4650      	mov	r0, sl
 80063ac:	4659      	mov	r1, fp
 80063ae:	f7fa fa55 	bl	800085c <__aeabi_ddiv>
 80063b2:	4682      	mov	sl, r0
 80063b4:	468b      	mov	fp, r1
 80063b6:	e028      	b.n	800640a <_dtoa_r+0x3d2>
 80063b8:	2502      	movs	r5, #2
 80063ba:	e7f2      	b.n	80063a2 <_dtoa_r+0x36a>
 80063bc:	07f9      	lsls	r1, r7, #31
 80063be:	d508      	bpl.n	80063d2 <_dtoa_r+0x39a>
 80063c0:	4640      	mov	r0, r8
 80063c2:	4649      	mov	r1, r9
 80063c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063c8:	f7fa f91e 	bl	8000608 <__aeabi_dmul>
 80063cc:	3501      	adds	r5, #1
 80063ce:	4680      	mov	r8, r0
 80063d0:	4689      	mov	r9, r1
 80063d2:	107f      	asrs	r7, r7, #1
 80063d4:	3608      	adds	r6, #8
 80063d6:	e7e5      	b.n	80063a4 <_dtoa_r+0x36c>
 80063d8:	f000 809b 	beq.w	8006512 <_dtoa_r+0x4da>
 80063dc:	9b00      	ldr	r3, [sp, #0]
 80063de:	4f9d      	ldr	r7, [pc, #628]	; (8006654 <_dtoa_r+0x61c>)
 80063e0:	425e      	negs	r6, r3
 80063e2:	4b9b      	ldr	r3, [pc, #620]	; (8006650 <_dtoa_r+0x618>)
 80063e4:	f006 020f 	and.w	r2, r6, #15
 80063e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	ec51 0b19 	vmov	r0, r1, d9
 80063f4:	f7fa f908 	bl	8000608 <__aeabi_dmul>
 80063f8:	1136      	asrs	r6, r6, #4
 80063fa:	4682      	mov	sl, r0
 80063fc:	468b      	mov	fp, r1
 80063fe:	2300      	movs	r3, #0
 8006400:	2502      	movs	r5, #2
 8006402:	2e00      	cmp	r6, #0
 8006404:	d17a      	bne.n	80064fc <_dtoa_r+0x4c4>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d3      	bne.n	80063b2 <_dtoa_r+0x37a>
 800640a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8082 	beq.w	8006516 <_dtoa_r+0x4de>
 8006412:	4b91      	ldr	r3, [pc, #580]	; (8006658 <_dtoa_r+0x620>)
 8006414:	2200      	movs	r2, #0
 8006416:	4650      	mov	r0, sl
 8006418:	4659      	mov	r1, fp
 800641a:	f7fa fb67 	bl	8000aec <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	d079      	beq.n	8006516 <_dtoa_r+0x4de>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d076      	beq.n	8006516 <_dtoa_r+0x4de>
 8006428:	9b02      	ldr	r3, [sp, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	dd36      	ble.n	800649c <_dtoa_r+0x464>
 800642e:	9b00      	ldr	r3, [sp, #0]
 8006430:	4650      	mov	r0, sl
 8006432:	4659      	mov	r1, fp
 8006434:	1e5f      	subs	r7, r3, #1
 8006436:	2200      	movs	r2, #0
 8006438:	4b88      	ldr	r3, [pc, #544]	; (800665c <_dtoa_r+0x624>)
 800643a:	f7fa f8e5 	bl	8000608 <__aeabi_dmul>
 800643e:	9e02      	ldr	r6, [sp, #8]
 8006440:	4682      	mov	sl, r0
 8006442:	468b      	mov	fp, r1
 8006444:	3501      	adds	r5, #1
 8006446:	4628      	mov	r0, r5
 8006448:	f7fa f874 	bl	8000534 <__aeabi_i2d>
 800644c:	4652      	mov	r2, sl
 800644e:	465b      	mov	r3, fp
 8006450:	f7fa f8da 	bl	8000608 <__aeabi_dmul>
 8006454:	4b82      	ldr	r3, [pc, #520]	; (8006660 <_dtoa_r+0x628>)
 8006456:	2200      	movs	r2, #0
 8006458:	f7f9 ff20 	bl	800029c <__adddf3>
 800645c:	46d0      	mov	r8, sl
 800645e:	46d9      	mov	r9, fp
 8006460:	4682      	mov	sl, r0
 8006462:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006466:	2e00      	cmp	r6, #0
 8006468:	d158      	bne.n	800651c <_dtoa_r+0x4e4>
 800646a:	4b7e      	ldr	r3, [pc, #504]	; (8006664 <_dtoa_r+0x62c>)
 800646c:	2200      	movs	r2, #0
 800646e:	4640      	mov	r0, r8
 8006470:	4649      	mov	r1, r9
 8006472:	f7f9 ff11 	bl	8000298 <__aeabi_dsub>
 8006476:	4652      	mov	r2, sl
 8006478:	465b      	mov	r3, fp
 800647a:	4680      	mov	r8, r0
 800647c:	4689      	mov	r9, r1
 800647e:	f7fa fb53 	bl	8000b28 <__aeabi_dcmpgt>
 8006482:	2800      	cmp	r0, #0
 8006484:	f040 8295 	bne.w	80069b2 <_dtoa_r+0x97a>
 8006488:	4652      	mov	r2, sl
 800648a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7fa fb2b 	bl	8000aec <__aeabi_dcmplt>
 8006496:	2800      	cmp	r0, #0
 8006498:	f040 8289 	bne.w	80069ae <_dtoa_r+0x976>
 800649c:	ec5b ab19 	vmov	sl, fp, d9
 80064a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f2c0 8148 	blt.w	8006738 <_dtoa_r+0x700>
 80064a8:	9a00      	ldr	r2, [sp, #0]
 80064aa:	2a0e      	cmp	r2, #14
 80064ac:	f300 8144 	bgt.w	8006738 <_dtoa_r+0x700>
 80064b0:	4b67      	ldr	r3, [pc, #412]	; (8006650 <_dtoa_r+0x618>)
 80064b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f280 80d5 	bge.w	800666c <_dtoa_r+0x634>
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f300 80d1 	bgt.w	800666c <_dtoa_r+0x634>
 80064ca:	f040 826f 	bne.w	80069ac <_dtoa_r+0x974>
 80064ce:	4b65      	ldr	r3, [pc, #404]	; (8006664 <_dtoa_r+0x62c>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7fa f897 	bl	8000608 <__aeabi_dmul>
 80064da:	4652      	mov	r2, sl
 80064dc:	465b      	mov	r3, fp
 80064de:	f7fa fb19 	bl	8000b14 <__aeabi_dcmpge>
 80064e2:	9e03      	ldr	r6, [sp, #12]
 80064e4:	4637      	mov	r7, r6
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f040 8245 	bne.w	8006976 <_dtoa_r+0x93e>
 80064ec:	9d01      	ldr	r5, [sp, #4]
 80064ee:	2331      	movs	r3, #49	; 0x31
 80064f0:	f805 3b01 	strb.w	r3, [r5], #1
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	e240      	b.n	800697e <_dtoa_r+0x946>
 80064fc:	07f2      	lsls	r2, r6, #31
 80064fe:	d505      	bpl.n	800650c <_dtoa_r+0x4d4>
 8006500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006504:	f7fa f880 	bl	8000608 <__aeabi_dmul>
 8006508:	3501      	adds	r5, #1
 800650a:	2301      	movs	r3, #1
 800650c:	1076      	asrs	r6, r6, #1
 800650e:	3708      	adds	r7, #8
 8006510:	e777      	b.n	8006402 <_dtoa_r+0x3ca>
 8006512:	2502      	movs	r5, #2
 8006514:	e779      	b.n	800640a <_dtoa_r+0x3d2>
 8006516:	9f00      	ldr	r7, [sp, #0]
 8006518:	9e03      	ldr	r6, [sp, #12]
 800651a:	e794      	b.n	8006446 <_dtoa_r+0x40e>
 800651c:	9901      	ldr	r1, [sp, #4]
 800651e:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <_dtoa_r+0x618>)
 8006520:	4431      	add	r1, r6
 8006522:	910d      	str	r1, [sp, #52]	; 0x34
 8006524:	9908      	ldr	r1, [sp, #32]
 8006526:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800652a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800652e:	2900      	cmp	r1, #0
 8006530:	d043      	beq.n	80065ba <_dtoa_r+0x582>
 8006532:	494d      	ldr	r1, [pc, #308]	; (8006668 <_dtoa_r+0x630>)
 8006534:	2000      	movs	r0, #0
 8006536:	f7fa f991 	bl	800085c <__aeabi_ddiv>
 800653a:	4652      	mov	r2, sl
 800653c:	465b      	mov	r3, fp
 800653e:	f7f9 feab 	bl	8000298 <__aeabi_dsub>
 8006542:	9d01      	ldr	r5, [sp, #4]
 8006544:	4682      	mov	sl, r0
 8006546:	468b      	mov	fp, r1
 8006548:	4649      	mov	r1, r9
 800654a:	4640      	mov	r0, r8
 800654c:	f7fa fb0c 	bl	8000b68 <__aeabi_d2iz>
 8006550:	4606      	mov	r6, r0
 8006552:	f7f9 ffef 	bl	8000534 <__aeabi_i2d>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7f9 fe9b 	bl	8000298 <__aeabi_dsub>
 8006562:	3630      	adds	r6, #48	; 0x30
 8006564:	f805 6b01 	strb.w	r6, [r5], #1
 8006568:	4652      	mov	r2, sl
 800656a:	465b      	mov	r3, fp
 800656c:	4680      	mov	r8, r0
 800656e:	4689      	mov	r9, r1
 8006570:	f7fa fabc 	bl	8000aec <__aeabi_dcmplt>
 8006574:	2800      	cmp	r0, #0
 8006576:	d163      	bne.n	8006640 <_dtoa_r+0x608>
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	4936      	ldr	r1, [pc, #216]	; (8006658 <_dtoa_r+0x620>)
 800657e:	2000      	movs	r0, #0
 8006580:	f7f9 fe8a 	bl	8000298 <__aeabi_dsub>
 8006584:	4652      	mov	r2, sl
 8006586:	465b      	mov	r3, fp
 8006588:	f7fa fab0 	bl	8000aec <__aeabi_dcmplt>
 800658c:	2800      	cmp	r0, #0
 800658e:	f040 80b5 	bne.w	80066fc <_dtoa_r+0x6c4>
 8006592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006594:	429d      	cmp	r5, r3
 8006596:	d081      	beq.n	800649c <_dtoa_r+0x464>
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <_dtoa_r+0x624>)
 800659a:	2200      	movs	r2, #0
 800659c:	4650      	mov	r0, sl
 800659e:	4659      	mov	r1, fp
 80065a0:	f7fa f832 	bl	8000608 <__aeabi_dmul>
 80065a4:	4b2d      	ldr	r3, [pc, #180]	; (800665c <_dtoa_r+0x624>)
 80065a6:	4682      	mov	sl, r0
 80065a8:	468b      	mov	fp, r1
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	2200      	movs	r2, #0
 80065b0:	f7fa f82a 	bl	8000608 <__aeabi_dmul>
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	e7c6      	b.n	8006548 <_dtoa_r+0x510>
 80065ba:	4650      	mov	r0, sl
 80065bc:	4659      	mov	r1, fp
 80065be:	f7fa f823 	bl	8000608 <__aeabi_dmul>
 80065c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065c4:	9d01      	ldr	r5, [sp, #4]
 80065c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065c8:	4682      	mov	sl, r0
 80065ca:	468b      	mov	fp, r1
 80065cc:	4649      	mov	r1, r9
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7fa faca 	bl	8000b68 <__aeabi_d2iz>
 80065d4:	4606      	mov	r6, r0
 80065d6:	f7f9 ffad 	bl	8000534 <__aeabi_i2d>
 80065da:	3630      	adds	r6, #48	; 0x30
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4640      	mov	r0, r8
 80065e2:	4649      	mov	r1, r9
 80065e4:	f7f9 fe58 	bl	8000298 <__aeabi_dsub>
 80065e8:	f805 6b01 	strb.w	r6, [r5], #1
 80065ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ee:	429d      	cmp	r5, r3
 80065f0:	4680      	mov	r8, r0
 80065f2:	4689      	mov	r9, r1
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	d124      	bne.n	8006644 <_dtoa_r+0x60c>
 80065fa:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <_dtoa_r+0x630>)
 80065fc:	4650      	mov	r0, sl
 80065fe:	4659      	mov	r1, fp
 8006600:	f7f9 fe4c 	bl	800029c <__adddf3>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7fa fa8c 	bl	8000b28 <__aeabi_dcmpgt>
 8006610:	2800      	cmp	r0, #0
 8006612:	d173      	bne.n	80066fc <_dtoa_r+0x6c4>
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	4913      	ldr	r1, [pc, #76]	; (8006668 <_dtoa_r+0x630>)
 800661a:	2000      	movs	r0, #0
 800661c:	f7f9 fe3c 	bl	8000298 <__aeabi_dsub>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4640      	mov	r0, r8
 8006626:	4649      	mov	r1, r9
 8006628:	f7fa fa60 	bl	8000aec <__aeabi_dcmplt>
 800662c:	2800      	cmp	r0, #0
 800662e:	f43f af35 	beq.w	800649c <_dtoa_r+0x464>
 8006632:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006634:	1e6b      	subs	r3, r5, #1
 8006636:	930f      	str	r3, [sp, #60]	; 0x3c
 8006638:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800663c:	2b30      	cmp	r3, #48	; 0x30
 800663e:	d0f8      	beq.n	8006632 <_dtoa_r+0x5fa>
 8006640:	9700      	str	r7, [sp, #0]
 8006642:	e049      	b.n	80066d8 <_dtoa_r+0x6a0>
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <_dtoa_r+0x624>)
 8006646:	f7f9 ffdf 	bl	8000608 <__aeabi_dmul>
 800664a:	4680      	mov	r8, r0
 800664c:	4689      	mov	r9, r1
 800664e:	e7bd      	b.n	80065cc <_dtoa_r+0x594>
 8006650:	08008278 	.word	0x08008278
 8006654:	08008250 	.word	0x08008250
 8006658:	3ff00000 	.word	0x3ff00000
 800665c:	40240000 	.word	0x40240000
 8006660:	401c0000 	.word	0x401c0000
 8006664:	40140000 	.word	0x40140000
 8006668:	3fe00000 	.word	0x3fe00000
 800666c:	9d01      	ldr	r5, [sp, #4]
 800666e:	4656      	mov	r6, sl
 8006670:	465f      	mov	r7, fp
 8006672:	4642      	mov	r2, r8
 8006674:	464b      	mov	r3, r9
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	f7fa f8ef 	bl	800085c <__aeabi_ddiv>
 800667e:	f7fa fa73 	bl	8000b68 <__aeabi_d2iz>
 8006682:	4682      	mov	sl, r0
 8006684:	f7f9 ff56 	bl	8000534 <__aeabi_i2d>
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	f7f9 ffbc 	bl	8000608 <__aeabi_dmul>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800669c:	f7f9 fdfc 	bl	8000298 <__aeabi_dsub>
 80066a0:	f805 6b01 	strb.w	r6, [r5], #1
 80066a4:	9e01      	ldr	r6, [sp, #4]
 80066a6:	9f03      	ldr	r7, [sp, #12]
 80066a8:	1bae      	subs	r6, r5, r6
 80066aa:	42b7      	cmp	r7, r6
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	d135      	bne.n	800671e <_dtoa_r+0x6e6>
 80066b2:	f7f9 fdf3 	bl	800029c <__adddf3>
 80066b6:	4642      	mov	r2, r8
 80066b8:	464b      	mov	r3, r9
 80066ba:	4606      	mov	r6, r0
 80066bc:	460f      	mov	r7, r1
 80066be:	f7fa fa33 	bl	8000b28 <__aeabi_dcmpgt>
 80066c2:	b9d0      	cbnz	r0, 80066fa <_dtoa_r+0x6c2>
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa fa04 	bl	8000ad8 <__aeabi_dcmpeq>
 80066d0:	b110      	cbz	r0, 80066d8 <_dtoa_r+0x6a0>
 80066d2:	f01a 0f01 	tst.w	sl, #1
 80066d6:	d110      	bne.n	80066fa <_dtoa_r+0x6c2>
 80066d8:	4620      	mov	r0, r4
 80066da:	ee18 1a10 	vmov	r1, s16
 80066de:	f000 fbed 	bl	8006ebc <_Bfree>
 80066e2:	2300      	movs	r3, #0
 80066e4:	9800      	ldr	r0, [sp, #0]
 80066e6:	702b      	strb	r3, [r5, #0]
 80066e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ea:	3001      	adds	r0, #1
 80066ec:	6018      	str	r0, [r3, #0]
 80066ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f43f acf1 	beq.w	80060d8 <_dtoa_r+0xa0>
 80066f6:	601d      	str	r5, [r3, #0]
 80066f8:	e4ee      	b.n	80060d8 <_dtoa_r+0xa0>
 80066fa:	9f00      	ldr	r7, [sp, #0]
 80066fc:	462b      	mov	r3, r5
 80066fe:	461d      	mov	r5, r3
 8006700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006704:	2a39      	cmp	r2, #57	; 0x39
 8006706:	d106      	bne.n	8006716 <_dtoa_r+0x6de>
 8006708:	9a01      	ldr	r2, [sp, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d1f7      	bne.n	80066fe <_dtoa_r+0x6c6>
 800670e:	9901      	ldr	r1, [sp, #4]
 8006710:	2230      	movs	r2, #48	; 0x30
 8006712:	3701      	adds	r7, #1
 8006714:	700a      	strb	r2, [r1, #0]
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	3201      	adds	r2, #1
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e790      	b.n	8006640 <_dtoa_r+0x608>
 800671e:	4ba6      	ldr	r3, [pc, #664]	; (80069b8 <_dtoa_r+0x980>)
 8006720:	2200      	movs	r2, #0
 8006722:	f7f9 ff71 	bl	8000608 <__aeabi_dmul>
 8006726:	2200      	movs	r2, #0
 8006728:	2300      	movs	r3, #0
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	f7fa f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006732:	2800      	cmp	r0, #0
 8006734:	d09d      	beq.n	8006672 <_dtoa_r+0x63a>
 8006736:	e7cf      	b.n	80066d8 <_dtoa_r+0x6a0>
 8006738:	9a08      	ldr	r2, [sp, #32]
 800673a:	2a00      	cmp	r2, #0
 800673c:	f000 80d7 	beq.w	80068ee <_dtoa_r+0x8b6>
 8006740:	9a06      	ldr	r2, [sp, #24]
 8006742:	2a01      	cmp	r2, #1
 8006744:	f300 80ba 	bgt.w	80068bc <_dtoa_r+0x884>
 8006748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800674a:	2a00      	cmp	r2, #0
 800674c:	f000 80b2 	beq.w	80068b4 <_dtoa_r+0x87c>
 8006750:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006754:	9e07      	ldr	r6, [sp, #28]
 8006756:	9d04      	ldr	r5, [sp, #16]
 8006758:	9a04      	ldr	r2, [sp, #16]
 800675a:	441a      	add	r2, r3
 800675c:	9204      	str	r2, [sp, #16]
 800675e:	9a05      	ldr	r2, [sp, #20]
 8006760:	2101      	movs	r1, #1
 8006762:	441a      	add	r2, r3
 8006764:	4620      	mov	r0, r4
 8006766:	9205      	str	r2, [sp, #20]
 8006768:	f000 fc60 	bl	800702c <__i2b>
 800676c:	4607      	mov	r7, r0
 800676e:	2d00      	cmp	r5, #0
 8006770:	dd0c      	ble.n	800678c <_dtoa_r+0x754>
 8006772:	9b05      	ldr	r3, [sp, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	dd09      	ble.n	800678c <_dtoa_r+0x754>
 8006778:	42ab      	cmp	r3, r5
 800677a:	9a04      	ldr	r2, [sp, #16]
 800677c:	bfa8      	it	ge
 800677e:	462b      	movge	r3, r5
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	9204      	str	r2, [sp, #16]
 8006784:	9a05      	ldr	r2, [sp, #20]
 8006786:	1aed      	subs	r5, r5, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	9305      	str	r3, [sp, #20]
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	b31b      	cbz	r3, 80067d8 <_dtoa_r+0x7a0>
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80af 	beq.w	80068f6 <_dtoa_r+0x8be>
 8006798:	2e00      	cmp	r6, #0
 800679a:	dd13      	ble.n	80067c4 <_dtoa_r+0x78c>
 800679c:	4639      	mov	r1, r7
 800679e:	4632      	mov	r2, r6
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fd03 	bl	80071ac <__pow5mult>
 80067a6:	ee18 2a10 	vmov	r2, s16
 80067aa:	4601      	mov	r1, r0
 80067ac:	4607      	mov	r7, r0
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fc52 	bl	8007058 <__multiply>
 80067b4:	ee18 1a10 	vmov	r1, s16
 80067b8:	4680      	mov	r8, r0
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fb7e 	bl	8006ebc <_Bfree>
 80067c0:	ee08 8a10 	vmov	s16, r8
 80067c4:	9b07      	ldr	r3, [sp, #28]
 80067c6:	1b9a      	subs	r2, r3, r6
 80067c8:	d006      	beq.n	80067d8 <_dtoa_r+0x7a0>
 80067ca:	ee18 1a10 	vmov	r1, s16
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fcec 	bl	80071ac <__pow5mult>
 80067d4:	ee08 0a10 	vmov	s16, r0
 80067d8:	2101      	movs	r1, #1
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fc26 	bl	800702c <__i2b>
 80067e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	4606      	mov	r6, r0
 80067e6:	f340 8088 	ble.w	80068fa <_dtoa_r+0x8c2>
 80067ea:	461a      	mov	r2, r3
 80067ec:	4601      	mov	r1, r0
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 fcdc 	bl	80071ac <__pow5mult>
 80067f4:	9b06      	ldr	r3, [sp, #24]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	4606      	mov	r6, r0
 80067fa:	f340 8081 	ble.w	8006900 <_dtoa_r+0x8c8>
 80067fe:	f04f 0800 	mov.w	r8, #0
 8006802:	6933      	ldr	r3, [r6, #16]
 8006804:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006808:	6918      	ldr	r0, [r3, #16]
 800680a:	f000 fbbf 	bl	8006f8c <__hi0bits>
 800680e:	f1c0 0020 	rsb	r0, r0, #32
 8006812:	9b05      	ldr	r3, [sp, #20]
 8006814:	4418      	add	r0, r3
 8006816:	f010 001f 	ands.w	r0, r0, #31
 800681a:	f000 8092 	beq.w	8006942 <_dtoa_r+0x90a>
 800681e:	f1c0 0320 	rsb	r3, r0, #32
 8006822:	2b04      	cmp	r3, #4
 8006824:	f340 808a 	ble.w	800693c <_dtoa_r+0x904>
 8006828:	f1c0 001c 	rsb	r0, r0, #28
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	4403      	add	r3, r0
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	9b05      	ldr	r3, [sp, #20]
 8006834:	4403      	add	r3, r0
 8006836:	4405      	add	r5, r0
 8006838:	9305      	str	r3, [sp, #20]
 800683a:	9b04      	ldr	r3, [sp, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	dd07      	ble.n	8006850 <_dtoa_r+0x818>
 8006840:	ee18 1a10 	vmov	r1, s16
 8006844:	461a      	mov	r2, r3
 8006846:	4620      	mov	r0, r4
 8006848:	f000 fd0a 	bl	8007260 <__lshift>
 800684c:	ee08 0a10 	vmov	s16, r0
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	dd05      	ble.n	8006862 <_dtoa_r+0x82a>
 8006856:	4631      	mov	r1, r6
 8006858:	461a      	mov	r2, r3
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fd00 	bl	8007260 <__lshift>
 8006860:	4606      	mov	r6, r0
 8006862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d06e      	beq.n	8006946 <_dtoa_r+0x90e>
 8006868:	ee18 0a10 	vmov	r0, s16
 800686c:	4631      	mov	r1, r6
 800686e:	f000 fd67 	bl	8007340 <__mcmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	da67      	bge.n	8006946 <_dtoa_r+0x90e>
 8006876:	9b00      	ldr	r3, [sp, #0]
 8006878:	3b01      	subs	r3, #1
 800687a:	ee18 1a10 	vmov	r1, s16
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	220a      	movs	r2, #10
 8006882:	2300      	movs	r3, #0
 8006884:	4620      	mov	r0, r4
 8006886:	f000 fb3b 	bl	8006f00 <__multadd>
 800688a:	9b08      	ldr	r3, [sp, #32]
 800688c:	ee08 0a10 	vmov	s16, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 81b1 	beq.w	8006bf8 <_dtoa_r+0xbc0>
 8006896:	2300      	movs	r3, #0
 8006898:	4639      	mov	r1, r7
 800689a:	220a      	movs	r2, #10
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fb2f 	bl	8006f00 <__multadd>
 80068a2:	9b02      	ldr	r3, [sp, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	4607      	mov	r7, r0
 80068a8:	f300 808e 	bgt.w	80069c8 <_dtoa_r+0x990>
 80068ac:	9b06      	ldr	r3, [sp, #24]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	dc51      	bgt.n	8006956 <_dtoa_r+0x91e>
 80068b2:	e089      	b.n	80069c8 <_dtoa_r+0x990>
 80068b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068ba:	e74b      	b.n	8006754 <_dtoa_r+0x71c>
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	1e5e      	subs	r6, r3, #1
 80068c0:	9b07      	ldr	r3, [sp, #28]
 80068c2:	42b3      	cmp	r3, r6
 80068c4:	bfbf      	itttt	lt
 80068c6:	9b07      	ldrlt	r3, [sp, #28]
 80068c8:	9607      	strlt	r6, [sp, #28]
 80068ca:	1af2      	sublt	r2, r6, r3
 80068cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068ce:	bfb6      	itet	lt
 80068d0:	189b      	addlt	r3, r3, r2
 80068d2:	1b9e      	subge	r6, r3, r6
 80068d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	bfb8      	it	lt
 80068da:	2600      	movlt	r6, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bfb7      	itett	lt
 80068e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80068e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80068e8:	1a9d      	sublt	r5, r3, r2
 80068ea:	2300      	movlt	r3, #0
 80068ec:	e734      	b.n	8006758 <_dtoa_r+0x720>
 80068ee:	9e07      	ldr	r6, [sp, #28]
 80068f0:	9d04      	ldr	r5, [sp, #16]
 80068f2:	9f08      	ldr	r7, [sp, #32]
 80068f4:	e73b      	b.n	800676e <_dtoa_r+0x736>
 80068f6:	9a07      	ldr	r2, [sp, #28]
 80068f8:	e767      	b.n	80067ca <_dtoa_r+0x792>
 80068fa:	9b06      	ldr	r3, [sp, #24]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	dc18      	bgt.n	8006932 <_dtoa_r+0x8fa>
 8006900:	f1ba 0f00 	cmp.w	sl, #0
 8006904:	d115      	bne.n	8006932 <_dtoa_r+0x8fa>
 8006906:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800690a:	b993      	cbnz	r3, 8006932 <_dtoa_r+0x8fa>
 800690c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006910:	0d1b      	lsrs	r3, r3, #20
 8006912:	051b      	lsls	r3, r3, #20
 8006914:	b183      	cbz	r3, 8006938 <_dtoa_r+0x900>
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	3301      	adds	r3, #1
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	9b05      	ldr	r3, [sp, #20]
 800691e:	3301      	adds	r3, #1
 8006920:	9305      	str	r3, [sp, #20]
 8006922:	f04f 0801 	mov.w	r8, #1
 8006926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006928:	2b00      	cmp	r3, #0
 800692a:	f47f af6a 	bne.w	8006802 <_dtoa_r+0x7ca>
 800692e:	2001      	movs	r0, #1
 8006930:	e76f      	b.n	8006812 <_dtoa_r+0x7da>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	e7f6      	b.n	8006926 <_dtoa_r+0x8ee>
 8006938:	4698      	mov	r8, r3
 800693a:	e7f4      	b.n	8006926 <_dtoa_r+0x8ee>
 800693c:	f43f af7d 	beq.w	800683a <_dtoa_r+0x802>
 8006940:	4618      	mov	r0, r3
 8006942:	301c      	adds	r0, #28
 8006944:	e772      	b.n	800682c <_dtoa_r+0x7f4>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	dc37      	bgt.n	80069bc <_dtoa_r+0x984>
 800694c:	9b06      	ldr	r3, [sp, #24]
 800694e:	2b02      	cmp	r3, #2
 8006950:	dd34      	ble.n	80069bc <_dtoa_r+0x984>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	9302      	str	r3, [sp, #8]
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	b96b      	cbnz	r3, 8006976 <_dtoa_r+0x93e>
 800695a:	4631      	mov	r1, r6
 800695c:	2205      	movs	r2, #5
 800695e:	4620      	mov	r0, r4
 8006960:	f000 face 	bl	8006f00 <__multadd>
 8006964:	4601      	mov	r1, r0
 8006966:	4606      	mov	r6, r0
 8006968:	ee18 0a10 	vmov	r0, s16
 800696c:	f000 fce8 	bl	8007340 <__mcmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	f73f adbb 	bgt.w	80064ec <_dtoa_r+0x4b4>
 8006976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006978:	9d01      	ldr	r5, [sp, #4]
 800697a:	43db      	mvns	r3, r3
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	f04f 0800 	mov.w	r8, #0
 8006982:	4631      	mov	r1, r6
 8006984:	4620      	mov	r0, r4
 8006986:	f000 fa99 	bl	8006ebc <_Bfree>
 800698a:	2f00      	cmp	r7, #0
 800698c:	f43f aea4 	beq.w	80066d8 <_dtoa_r+0x6a0>
 8006990:	f1b8 0f00 	cmp.w	r8, #0
 8006994:	d005      	beq.n	80069a2 <_dtoa_r+0x96a>
 8006996:	45b8      	cmp	r8, r7
 8006998:	d003      	beq.n	80069a2 <_dtoa_r+0x96a>
 800699a:	4641      	mov	r1, r8
 800699c:	4620      	mov	r0, r4
 800699e:	f000 fa8d 	bl	8006ebc <_Bfree>
 80069a2:	4639      	mov	r1, r7
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 fa89 	bl	8006ebc <_Bfree>
 80069aa:	e695      	b.n	80066d8 <_dtoa_r+0x6a0>
 80069ac:	2600      	movs	r6, #0
 80069ae:	4637      	mov	r7, r6
 80069b0:	e7e1      	b.n	8006976 <_dtoa_r+0x93e>
 80069b2:	9700      	str	r7, [sp, #0]
 80069b4:	4637      	mov	r7, r6
 80069b6:	e599      	b.n	80064ec <_dtoa_r+0x4b4>
 80069b8:	40240000 	.word	0x40240000
 80069bc:	9b08      	ldr	r3, [sp, #32]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80ca 	beq.w	8006b58 <_dtoa_r+0xb20>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	9302      	str	r3, [sp, #8]
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	dd05      	ble.n	80069d8 <_dtoa_r+0x9a0>
 80069cc:	4639      	mov	r1, r7
 80069ce:	462a      	mov	r2, r5
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fc45 	bl	8007260 <__lshift>
 80069d6:	4607      	mov	r7, r0
 80069d8:	f1b8 0f00 	cmp.w	r8, #0
 80069dc:	d05b      	beq.n	8006a96 <_dtoa_r+0xa5e>
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fa2b 	bl	8006e3c <_Balloc>
 80069e6:	4605      	mov	r5, r0
 80069e8:	b928      	cbnz	r0, 80069f6 <_dtoa_r+0x9be>
 80069ea:	4b87      	ldr	r3, [pc, #540]	; (8006c08 <_dtoa_r+0xbd0>)
 80069ec:	4602      	mov	r2, r0
 80069ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069f2:	f7ff bb3b 	b.w	800606c <_dtoa_r+0x34>
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	3202      	adds	r2, #2
 80069fa:	0092      	lsls	r2, r2, #2
 80069fc:	f107 010c 	add.w	r1, r7, #12
 8006a00:	300c      	adds	r0, #12
 8006a02:	f000 fa0d 	bl	8006e20 <memcpy>
 8006a06:	2201      	movs	r2, #1
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 fc28 	bl	8007260 <__lshift>
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	f103 0901 	add.w	r9, r3, #1
 8006a16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	f00a 0301 	and.w	r3, sl, #1
 8006a22:	46b8      	mov	r8, r7
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	4607      	mov	r7, r0
 8006a28:	4631      	mov	r1, r6
 8006a2a:	ee18 0a10 	vmov	r0, s16
 8006a2e:	f7ff fa77 	bl	8005f20 <quorem>
 8006a32:	4641      	mov	r1, r8
 8006a34:	9002      	str	r0, [sp, #8]
 8006a36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a3a:	ee18 0a10 	vmov	r0, s16
 8006a3e:	f000 fc7f 	bl	8007340 <__mcmp>
 8006a42:	463a      	mov	r2, r7
 8006a44:	9003      	str	r0, [sp, #12]
 8006a46:	4631      	mov	r1, r6
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fc95 	bl	8007378 <__mdiff>
 8006a4e:	68c2      	ldr	r2, [r0, #12]
 8006a50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006a54:	4605      	mov	r5, r0
 8006a56:	bb02      	cbnz	r2, 8006a9a <_dtoa_r+0xa62>
 8006a58:	4601      	mov	r1, r0
 8006a5a:	ee18 0a10 	vmov	r0, s16
 8006a5e:	f000 fc6f 	bl	8007340 <__mcmp>
 8006a62:	4602      	mov	r2, r0
 8006a64:	4629      	mov	r1, r5
 8006a66:	4620      	mov	r0, r4
 8006a68:	9207      	str	r2, [sp, #28]
 8006a6a:	f000 fa27 	bl	8006ebc <_Bfree>
 8006a6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006a72:	ea43 0102 	orr.w	r1, r3, r2
 8006a76:	9b04      	ldr	r3, [sp, #16]
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	464d      	mov	r5, r9
 8006a7c:	d10f      	bne.n	8006a9e <_dtoa_r+0xa66>
 8006a7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a82:	d02a      	beq.n	8006ada <_dtoa_r+0xaa2>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	dd02      	ble.n	8006a90 <_dtoa_r+0xa58>
 8006a8a:	9b02      	ldr	r3, [sp, #8]
 8006a8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a90:	f88b a000 	strb.w	sl, [fp]
 8006a94:	e775      	b.n	8006982 <_dtoa_r+0x94a>
 8006a96:	4638      	mov	r0, r7
 8006a98:	e7ba      	b.n	8006a10 <_dtoa_r+0x9d8>
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	e7e2      	b.n	8006a64 <_dtoa_r+0xa2c>
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	db04      	blt.n	8006aae <_dtoa_r+0xa76>
 8006aa4:	9906      	ldr	r1, [sp, #24]
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	9904      	ldr	r1, [sp, #16]
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	d122      	bne.n	8006af4 <_dtoa_r+0xabc>
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	ddee      	ble.n	8006a90 <_dtoa_r+0xa58>
 8006ab2:	ee18 1a10 	vmov	r1, s16
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fbd1 	bl	8007260 <__lshift>
 8006abe:	4631      	mov	r1, r6
 8006ac0:	ee08 0a10 	vmov	s16, r0
 8006ac4:	f000 fc3c 	bl	8007340 <__mcmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	dc03      	bgt.n	8006ad4 <_dtoa_r+0xa9c>
 8006acc:	d1e0      	bne.n	8006a90 <_dtoa_r+0xa58>
 8006ace:	f01a 0f01 	tst.w	sl, #1
 8006ad2:	d0dd      	beq.n	8006a90 <_dtoa_r+0xa58>
 8006ad4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ad8:	d1d7      	bne.n	8006a8a <_dtoa_r+0xa52>
 8006ada:	2339      	movs	r3, #57	; 0x39
 8006adc:	f88b 3000 	strb.w	r3, [fp]
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	461d      	mov	r5, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006aea:	2a39      	cmp	r2, #57	; 0x39
 8006aec:	d071      	beq.n	8006bd2 <_dtoa_r+0xb9a>
 8006aee:	3201      	adds	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	e746      	b.n	8006982 <_dtoa_r+0x94a>
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	dd07      	ble.n	8006b08 <_dtoa_r+0xad0>
 8006af8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006afc:	d0ed      	beq.n	8006ada <_dtoa_r+0xaa2>
 8006afe:	f10a 0301 	add.w	r3, sl, #1
 8006b02:	f88b 3000 	strb.w	r3, [fp]
 8006b06:	e73c      	b.n	8006982 <_dtoa_r+0x94a>
 8006b08:	9b05      	ldr	r3, [sp, #20]
 8006b0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b0e:	4599      	cmp	r9, r3
 8006b10:	d047      	beq.n	8006ba2 <_dtoa_r+0xb6a>
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	2300      	movs	r3, #0
 8006b18:	220a      	movs	r2, #10
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f9f0 	bl	8006f00 <__multadd>
 8006b20:	45b8      	cmp	r8, r7
 8006b22:	ee08 0a10 	vmov	s16, r0
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	f04f 020a 	mov.w	r2, #10
 8006b2e:	4641      	mov	r1, r8
 8006b30:	4620      	mov	r0, r4
 8006b32:	d106      	bne.n	8006b42 <_dtoa_r+0xb0a>
 8006b34:	f000 f9e4 	bl	8006f00 <__multadd>
 8006b38:	4680      	mov	r8, r0
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	f109 0901 	add.w	r9, r9, #1
 8006b40:	e772      	b.n	8006a28 <_dtoa_r+0x9f0>
 8006b42:	f000 f9dd 	bl	8006f00 <__multadd>
 8006b46:	4639      	mov	r1, r7
 8006b48:	4680      	mov	r8, r0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 f9d6 	bl	8006f00 <__multadd>
 8006b54:	4607      	mov	r7, r0
 8006b56:	e7f1      	b.n	8006b3c <_dtoa_r+0xb04>
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	9d01      	ldr	r5, [sp, #4]
 8006b5e:	ee18 0a10 	vmov	r0, s16
 8006b62:	4631      	mov	r1, r6
 8006b64:	f7ff f9dc 	bl	8005f20 <quorem>
 8006b68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b6c:	9b01      	ldr	r3, [sp, #4]
 8006b6e:	f805 ab01 	strb.w	sl, [r5], #1
 8006b72:	1aea      	subs	r2, r5, r3
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	dd09      	ble.n	8006b8e <_dtoa_r+0xb56>
 8006b7a:	ee18 1a10 	vmov	r1, s16
 8006b7e:	2300      	movs	r3, #0
 8006b80:	220a      	movs	r2, #10
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f9bc 	bl	8006f00 <__multadd>
 8006b88:	ee08 0a10 	vmov	s16, r0
 8006b8c:	e7e7      	b.n	8006b5e <_dtoa_r+0xb26>
 8006b8e:	9b02      	ldr	r3, [sp, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bfc8      	it	gt
 8006b94:	461d      	movgt	r5, r3
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	bfd8      	it	le
 8006b9a:	2501      	movle	r5, #1
 8006b9c:	441d      	add	r5, r3
 8006b9e:	f04f 0800 	mov.w	r8, #0
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fb59 	bl	8007260 <__lshift>
 8006bae:	4631      	mov	r1, r6
 8006bb0:	ee08 0a10 	vmov	s16, r0
 8006bb4:	f000 fbc4 	bl	8007340 <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dc91      	bgt.n	8006ae0 <_dtoa_r+0xaa8>
 8006bbc:	d102      	bne.n	8006bc4 <_dtoa_r+0xb8c>
 8006bbe:	f01a 0f01 	tst.w	sl, #1
 8006bc2:	d18d      	bne.n	8006ae0 <_dtoa_r+0xaa8>
 8006bc4:	462b      	mov	r3, r5
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bcc:	2a30      	cmp	r2, #48	; 0x30
 8006bce:	d0fa      	beq.n	8006bc6 <_dtoa_r+0xb8e>
 8006bd0:	e6d7      	b.n	8006982 <_dtoa_r+0x94a>
 8006bd2:	9a01      	ldr	r2, [sp, #4]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d184      	bne.n	8006ae2 <_dtoa_r+0xaaa>
 8006bd8:	9b00      	ldr	r3, [sp, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	2331      	movs	r3, #49	; 0x31
 8006be0:	7013      	strb	r3, [r2, #0]
 8006be2:	e6ce      	b.n	8006982 <_dtoa_r+0x94a>
 8006be4:	4b09      	ldr	r3, [pc, #36]	; (8006c0c <_dtoa_r+0xbd4>)
 8006be6:	f7ff ba95 	b.w	8006114 <_dtoa_r+0xdc>
 8006bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f47f aa6e 	bne.w	80060ce <_dtoa_r+0x96>
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <_dtoa_r+0xbd8>)
 8006bf4:	f7ff ba8e 	b.w	8006114 <_dtoa_r+0xdc>
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	dcae      	bgt.n	8006b5c <_dtoa_r+0xb24>
 8006bfe:	9b06      	ldr	r3, [sp, #24]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	f73f aea8 	bgt.w	8006956 <_dtoa_r+0x91e>
 8006c06:	e7a9      	b.n	8006b5c <_dtoa_r+0xb24>
 8006c08:	0800817f 	.word	0x0800817f
 8006c0c:	080080dc 	.word	0x080080dc
 8006c10:	08008100 	.word	0x08008100

08006c14 <std>:
 8006c14:	2300      	movs	r3, #0
 8006c16:	b510      	push	{r4, lr}
 8006c18:	4604      	mov	r4, r0
 8006c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c22:	6083      	str	r3, [r0, #8]
 8006c24:	8181      	strh	r1, [r0, #12]
 8006c26:	6643      	str	r3, [r0, #100]	; 0x64
 8006c28:	81c2      	strh	r2, [r0, #14]
 8006c2a:	6183      	str	r3, [r0, #24]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	2208      	movs	r2, #8
 8006c30:	305c      	adds	r0, #92	; 0x5c
 8006c32:	f7fe fd03 	bl	800563c <memset>
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <std+0x38>)
 8006c38:	6263      	str	r3, [r4, #36]	; 0x24
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <std+0x3c>)
 8006c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <std+0x40>)
 8006c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <std+0x44>)
 8006c44:	6224      	str	r4, [r4, #32]
 8006c46:	6323      	str	r3, [r4, #48]	; 0x30
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08007a05 	.word	0x08007a05
 8006c50:	08007a27 	.word	0x08007a27
 8006c54:	08007a5f 	.word	0x08007a5f
 8006c58:	08007a83 	.word	0x08007a83

08006c5c <_cleanup_r>:
 8006c5c:	4901      	ldr	r1, [pc, #4]	; (8006c64 <_cleanup_r+0x8>)
 8006c5e:	f000 b8af 	b.w	8006dc0 <_fwalk_reent>
 8006c62:	bf00      	nop
 8006c64:	08007d99 	.word	0x08007d99

08006c68 <__sfmoreglue>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	2268      	movs	r2, #104	; 0x68
 8006c6c:	1e4d      	subs	r5, r1, #1
 8006c6e:	4355      	muls	r5, r2
 8006c70:	460e      	mov	r6, r1
 8006c72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c76:	f000 fce7 	bl	8007648 <_malloc_r>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	b140      	cbz	r0, 8006c90 <__sfmoreglue+0x28>
 8006c7e:	2100      	movs	r1, #0
 8006c80:	e9c0 1600 	strd	r1, r6, [r0]
 8006c84:	300c      	adds	r0, #12
 8006c86:	60a0      	str	r0, [r4, #8]
 8006c88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c8c:	f7fe fcd6 	bl	800563c <memset>
 8006c90:	4620      	mov	r0, r4
 8006c92:	bd70      	pop	{r4, r5, r6, pc}

08006c94 <__sfp_lock_acquire>:
 8006c94:	4801      	ldr	r0, [pc, #4]	; (8006c9c <__sfp_lock_acquire+0x8>)
 8006c96:	f000 b8b8 	b.w	8006e0a <__retarget_lock_acquire_recursive>
 8006c9a:	bf00      	nop
 8006c9c:	20000371 	.word	0x20000371

08006ca0 <__sfp_lock_release>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	; (8006ca8 <__sfp_lock_release+0x8>)
 8006ca2:	f000 b8b3 	b.w	8006e0c <__retarget_lock_release_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	20000371 	.word	0x20000371

08006cac <__sinit_lock_acquire>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__sinit_lock_acquire+0x8>)
 8006cae:	f000 b8ac 	b.w	8006e0a <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20000372 	.word	0x20000372

08006cb8 <__sinit_lock_release>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__sinit_lock_release+0x8>)
 8006cba:	f000 b8a7 	b.w	8006e0c <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000372 	.word	0x20000372

08006cc4 <__sinit>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	f7ff fff0 	bl	8006cac <__sinit_lock_acquire>
 8006ccc:	69a3      	ldr	r3, [r4, #24]
 8006cce:	b11b      	cbz	r3, 8006cd8 <__sinit+0x14>
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f7ff bff0 	b.w	8006cb8 <__sinit_lock_release>
 8006cd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cdc:	6523      	str	r3, [r4, #80]	; 0x50
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <__sinit+0x68>)
 8006ce0:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <__sinit+0x6c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	bf04      	itt	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	61a3      	streq	r3, [r4, #24]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f820 	bl	8006d34 <__sfp>
 8006cf4:	6060      	str	r0, [r4, #4]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f81c 	bl	8006d34 <__sfp>
 8006cfc:	60a0      	str	r0, [r4, #8]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 f818 	bl	8006d34 <__sfp>
 8006d04:	2200      	movs	r2, #0
 8006d06:	60e0      	str	r0, [r4, #12]
 8006d08:	2104      	movs	r1, #4
 8006d0a:	6860      	ldr	r0, [r4, #4]
 8006d0c:	f7ff ff82 	bl	8006c14 <std>
 8006d10:	68a0      	ldr	r0, [r4, #8]
 8006d12:	2201      	movs	r2, #1
 8006d14:	2109      	movs	r1, #9
 8006d16:	f7ff ff7d 	bl	8006c14 <std>
 8006d1a:	68e0      	ldr	r0, [r4, #12]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	2112      	movs	r1, #18
 8006d20:	f7ff ff78 	bl	8006c14 <std>
 8006d24:	2301      	movs	r3, #1
 8006d26:	61a3      	str	r3, [r4, #24]
 8006d28:	e7d2      	b.n	8006cd0 <__sinit+0xc>
 8006d2a:	bf00      	nop
 8006d2c:	080080c8 	.word	0x080080c8
 8006d30:	08006c5d 	.word	0x08006c5d

08006d34 <__sfp>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	4607      	mov	r7, r0
 8006d38:	f7ff ffac 	bl	8006c94 <__sfp_lock_acquire>
 8006d3c:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <__sfp+0x84>)
 8006d3e:	681e      	ldr	r6, [r3, #0]
 8006d40:	69b3      	ldr	r3, [r6, #24]
 8006d42:	b913      	cbnz	r3, 8006d4a <__sfp+0x16>
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff ffbd 	bl	8006cc4 <__sinit>
 8006d4a:	3648      	adds	r6, #72	; 0x48
 8006d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	d503      	bpl.n	8006d5c <__sfp+0x28>
 8006d54:	6833      	ldr	r3, [r6, #0]
 8006d56:	b30b      	cbz	r3, 8006d9c <__sfp+0x68>
 8006d58:	6836      	ldr	r6, [r6, #0]
 8006d5a:	e7f7      	b.n	8006d4c <__sfp+0x18>
 8006d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d60:	b9d5      	cbnz	r5, 8006d98 <__sfp+0x64>
 8006d62:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <__sfp+0x88>)
 8006d64:	60e3      	str	r3, [r4, #12]
 8006d66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d6a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d6c:	f000 f84c 	bl	8006e08 <__retarget_lock_init_recursive>
 8006d70:	f7ff ff96 	bl	8006ca0 <__sfp_lock_release>
 8006d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d7c:	6025      	str	r5, [r4, #0]
 8006d7e:	61a5      	str	r5, [r4, #24]
 8006d80:	2208      	movs	r2, #8
 8006d82:	4629      	mov	r1, r5
 8006d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d88:	f7fe fc58 	bl	800563c <memset>
 8006d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d94:	4620      	mov	r0, r4
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d98:	3468      	adds	r4, #104	; 0x68
 8006d9a:	e7d9      	b.n	8006d50 <__sfp+0x1c>
 8006d9c:	2104      	movs	r1, #4
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7ff ff62 	bl	8006c68 <__sfmoreglue>
 8006da4:	4604      	mov	r4, r0
 8006da6:	6030      	str	r0, [r6, #0]
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d1d5      	bne.n	8006d58 <__sfp+0x24>
 8006dac:	f7ff ff78 	bl	8006ca0 <__sfp_lock_release>
 8006db0:	230c      	movs	r3, #12
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	e7ee      	b.n	8006d94 <__sfp+0x60>
 8006db6:	bf00      	nop
 8006db8:	080080c8 	.word	0x080080c8
 8006dbc:	ffff0001 	.word	0xffff0001

08006dc0 <_fwalk_reent>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	4688      	mov	r8, r1
 8006dc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dcc:	2700      	movs	r7, #0
 8006dce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd2:	f1b9 0901 	subs.w	r9, r9, #1
 8006dd6:	d505      	bpl.n	8006de4 <_fwalk_reent+0x24>
 8006dd8:	6824      	ldr	r4, [r4, #0]
 8006dda:	2c00      	cmp	r4, #0
 8006ddc:	d1f7      	bne.n	8006dce <_fwalk_reent+0xe>
 8006dde:	4638      	mov	r0, r7
 8006de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de4:	89ab      	ldrh	r3, [r5, #12]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d907      	bls.n	8006dfa <_fwalk_reent+0x3a>
 8006dea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dee:	3301      	adds	r3, #1
 8006df0:	d003      	beq.n	8006dfa <_fwalk_reent+0x3a>
 8006df2:	4629      	mov	r1, r5
 8006df4:	4630      	mov	r0, r6
 8006df6:	47c0      	blx	r8
 8006df8:	4307      	orrs	r7, r0
 8006dfa:	3568      	adds	r5, #104	; 0x68
 8006dfc:	e7e9      	b.n	8006dd2 <_fwalk_reent+0x12>
	...

08006e00 <_localeconv_r>:
 8006e00:	4800      	ldr	r0, [pc, #0]	; (8006e04 <_localeconv_r+0x4>)
 8006e02:	4770      	bx	lr
 8006e04:	20000160 	.word	0x20000160

08006e08 <__retarget_lock_init_recursive>:
 8006e08:	4770      	bx	lr

08006e0a <__retarget_lock_acquire_recursive>:
 8006e0a:	4770      	bx	lr

08006e0c <__retarget_lock_release_recursive>:
 8006e0c:	4770      	bx	lr
	...

08006e10 <malloc>:
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <malloc+0xc>)
 8006e12:	4601      	mov	r1, r0
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f000 bc17 	b.w	8007648 <_malloc_r>
 8006e1a:	bf00      	nop
 8006e1c:	2000000c 	.word	0x2000000c

08006e20 <memcpy>:
 8006e20:	440a      	add	r2, r1
 8006e22:	4291      	cmp	r1, r2
 8006e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e28:	d100      	bne.n	8006e2c <memcpy+0xc>
 8006e2a:	4770      	bx	lr
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e36:	4291      	cmp	r1, r2
 8006e38:	d1f9      	bne.n	8006e2e <memcpy+0xe>
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <_Balloc>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	b976      	cbnz	r6, 8006e64 <_Balloc+0x28>
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ffe2 	bl	8006e10 <malloc>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e50:	b920      	cbnz	r0, 8006e5c <_Balloc+0x20>
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <_Balloc+0x78>)
 8006e54:	4818      	ldr	r0, [pc, #96]	; (8006eb8 <_Balloc+0x7c>)
 8006e56:	2166      	movs	r1, #102	; 0x66
 8006e58:	f000 feea 	bl	8007c30 <__assert_func>
 8006e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e60:	6006      	str	r6, [r0, #0]
 8006e62:	60c6      	str	r6, [r0, #12]
 8006e64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e66:	68f3      	ldr	r3, [r6, #12]
 8006e68:	b183      	cbz	r3, 8006e8c <_Balloc+0x50>
 8006e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e72:	b9b8      	cbnz	r0, 8006ea4 <_Balloc+0x68>
 8006e74:	2101      	movs	r1, #1
 8006e76:	fa01 f605 	lsl.w	r6, r1, r5
 8006e7a:	1d72      	adds	r2, r6, #5
 8006e7c:	0092      	lsls	r2, r2, #2
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fb60 	bl	8007544 <_calloc_r>
 8006e84:	b160      	cbz	r0, 8006ea0 <_Balloc+0x64>
 8006e86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e8a:	e00e      	b.n	8006eaa <_Balloc+0x6e>
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fb57 	bl	8007544 <_calloc_r>
 8006e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e98:	60f0      	str	r0, [r6, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e4      	bne.n	8006e6a <_Balloc+0x2e>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	6802      	ldr	r2, [r0, #0]
 8006ea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006eb0:	e7f7      	b.n	8006ea2 <_Balloc+0x66>
 8006eb2:	bf00      	nop
 8006eb4:	0800810d 	.word	0x0800810d
 8006eb8:	080081f0 	.word	0x080081f0

08006ebc <_Bfree>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	b976      	cbnz	r6, 8006ee4 <_Bfree+0x28>
 8006ec6:	2010      	movs	r0, #16
 8006ec8:	f7ff ffa2 	bl	8006e10 <malloc>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6268      	str	r0, [r5, #36]	; 0x24
 8006ed0:	b920      	cbnz	r0, 8006edc <_Bfree+0x20>
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <_Bfree+0x3c>)
 8006ed4:	4809      	ldr	r0, [pc, #36]	; (8006efc <_Bfree+0x40>)
 8006ed6:	218a      	movs	r1, #138	; 0x8a
 8006ed8:	f000 feaa 	bl	8007c30 <__assert_func>
 8006edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee0:	6006      	str	r6, [r0, #0]
 8006ee2:	60c6      	str	r6, [r0, #12]
 8006ee4:	b13c      	cbz	r4, 8006ef6 <_Bfree+0x3a>
 8006ee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ef0:	6021      	str	r1, [r4, #0]
 8006ef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	0800810d 	.word	0x0800810d
 8006efc:	080081f0 	.word	0x080081f0

08006f00 <__multadd>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	690d      	ldr	r5, [r1, #16]
 8006f06:	4607      	mov	r7, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	461e      	mov	r6, r3
 8006f0c:	f101 0c14 	add.w	ip, r1, #20
 8006f10:	2000      	movs	r0, #0
 8006f12:	f8dc 3000 	ldr.w	r3, [ip]
 8006f16:	b299      	uxth	r1, r3
 8006f18:	fb02 6101 	mla	r1, r2, r1, r6
 8006f1c:	0c1e      	lsrs	r6, r3, #16
 8006f1e:	0c0b      	lsrs	r3, r1, #16
 8006f20:	fb02 3306 	mla	r3, r2, r6, r3
 8006f24:	b289      	uxth	r1, r1
 8006f26:	3001      	adds	r0, #1
 8006f28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f2c:	4285      	cmp	r5, r0
 8006f2e:	f84c 1b04 	str.w	r1, [ip], #4
 8006f32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f36:	dcec      	bgt.n	8006f12 <__multadd+0x12>
 8006f38:	b30e      	cbz	r6, 8006f7e <__multadd+0x7e>
 8006f3a:	68a3      	ldr	r3, [r4, #8]
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dc19      	bgt.n	8006f74 <__multadd+0x74>
 8006f40:	6861      	ldr	r1, [r4, #4]
 8006f42:	4638      	mov	r0, r7
 8006f44:	3101      	adds	r1, #1
 8006f46:	f7ff ff79 	bl	8006e3c <_Balloc>
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	b928      	cbnz	r0, 8006f5a <__multadd+0x5a>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <__multadd+0x84>)
 8006f52:	480d      	ldr	r0, [pc, #52]	; (8006f88 <__multadd+0x88>)
 8006f54:	21b5      	movs	r1, #181	; 0xb5
 8006f56:	f000 fe6b 	bl	8007c30 <__assert_func>
 8006f5a:	6922      	ldr	r2, [r4, #16]
 8006f5c:	3202      	adds	r2, #2
 8006f5e:	f104 010c 	add.w	r1, r4, #12
 8006f62:	0092      	lsls	r2, r2, #2
 8006f64:	300c      	adds	r0, #12
 8006f66:	f7ff ff5b 	bl	8006e20 <memcpy>
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f7ff ffa5 	bl	8006ebc <_Bfree>
 8006f72:	4644      	mov	r4, r8
 8006f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f78:	3501      	adds	r5, #1
 8006f7a:	615e      	str	r6, [r3, #20]
 8006f7c:	6125      	str	r5, [r4, #16]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f84:	0800817f 	.word	0x0800817f
 8006f88:	080081f0 	.word	0x080081f0

08006f8c <__hi0bits>:
 8006f8c:	0c03      	lsrs	r3, r0, #16
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	b9d3      	cbnz	r3, 8006fc8 <__hi0bits+0x3c>
 8006f92:	0400      	lsls	r0, r0, #16
 8006f94:	2310      	movs	r3, #16
 8006f96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f9a:	bf04      	itt	eq
 8006f9c:	0200      	lsleq	r0, r0, #8
 8006f9e:	3308      	addeq	r3, #8
 8006fa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fa4:	bf04      	itt	eq
 8006fa6:	0100      	lsleq	r0, r0, #4
 8006fa8:	3304      	addeq	r3, #4
 8006faa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fae:	bf04      	itt	eq
 8006fb0:	0080      	lsleq	r0, r0, #2
 8006fb2:	3302      	addeq	r3, #2
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	db05      	blt.n	8006fc4 <__hi0bits+0x38>
 8006fb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fbc:	f103 0301 	add.w	r3, r3, #1
 8006fc0:	bf08      	it	eq
 8006fc2:	2320      	moveq	r3, #32
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	4770      	bx	lr
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e7e4      	b.n	8006f96 <__hi0bits+0xa>

08006fcc <__lo0bits>:
 8006fcc:	6803      	ldr	r3, [r0, #0]
 8006fce:	f013 0207 	ands.w	r2, r3, #7
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	d00b      	beq.n	8006fee <__lo0bits+0x22>
 8006fd6:	07da      	lsls	r2, r3, #31
 8006fd8:	d423      	bmi.n	8007022 <__lo0bits+0x56>
 8006fda:	0798      	lsls	r0, r3, #30
 8006fdc:	bf49      	itett	mi
 8006fde:	085b      	lsrmi	r3, r3, #1
 8006fe0:	089b      	lsrpl	r3, r3, #2
 8006fe2:	2001      	movmi	r0, #1
 8006fe4:	600b      	strmi	r3, [r1, #0]
 8006fe6:	bf5c      	itt	pl
 8006fe8:	600b      	strpl	r3, [r1, #0]
 8006fea:	2002      	movpl	r0, #2
 8006fec:	4770      	bx	lr
 8006fee:	b298      	uxth	r0, r3
 8006ff0:	b9a8      	cbnz	r0, 800701e <__lo0bits+0x52>
 8006ff2:	0c1b      	lsrs	r3, r3, #16
 8006ff4:	2010      	movs	r0, #16
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	b90a      	cbnz	r2, 8006ffe <__lo0bits+0x32>
 8006ffa:	3008      	adds	r0, #8
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	071a      	lsls	r2, r3, #28
 8007000:	bf04      	itt	eq
 8007002:	091b      	lsreq	r3, r3, #4
 8007004:	3004      	addeq	r0, #4
 8007006:	079a      	lsls	r2, r3, #30
 8007008:	bf04      	itt	eq
 800700a:	089b      	lsreq	r3, r3, #2
 800700c:	3002      	addeq	r0, #2
 800700e:	07da      	lsls	r2, r3, #31
 8007010:	d403      	bmi.n	800701a <__lo0bits+0x4e>
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	f100 0001 	add.w	r0, r0, #1
 8007018:	d005      	beq.n	8007026 <__lo0bits+0x5a>
 800701a:	600b      	str	r3, [r1, #0]
 800701c:	4770      	bx	lr
 800701e:	4610      	mov	r0, r2
 8007020:	e7e9      	b.n	8006ff6 <__lo0bits+0x2a>
 8007022:	2000      	movs	r0, #0
 8007024:	4770      	bx	lr
 8007026:	2020      	movs	r0, #32
 8007028:	4770      	bx	lr
	...

0800702c <__i2b>:
 800702c:	b510      	push	{r4, lr}
 800702e:	460c      	mov	r4, r1
 8007030:	2101      	movs	r1, #1
 8007032:	f7ff ff03 	bl	8006e3c <_Balloc>
 8007036:	4602      	mov	r2, r0
 8007038:	b928      	cbnz	r0, 8007046 <__i2b+0x1a>
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <__i2b+0x24>)
 800703c:	4805      	ldr	r0, [pc, #20]	; (8007054 <__i2b+0x28>)
 800703e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007042:	f000 fdf5 	bl	8007c30 <__assert_func>
 8007046:	2301      	movs	r3, #1
 8007048:	6144      	str	r4, [r0, #20]
 800704a:	6103      	str	r3, [r0, #16]
 800704c:	bd10      	pop	{r4, pc}
 800704e:	bf00      	nop
 8007050:	0800817f 	.word	0x0800817f
 8007054:	080081f0 	.word	0x080081f0

08007058 <__multiply>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	4691      	mov	r9, r2
 800705e:	690a      	ldr	r2, [r1, #16]
 8007060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007064:	429a      	cmp	r2, r3
 8007066:	bfb8      	it	lt
 8007068:	460b      	movlt	r3, r1
 800706a:	460c      	mov	r4, r1
 800706c:	bfbc      	itt	lt
 800706e:	464c      	movlt	r4, r9
 8007070:	4699      	movlt	r9, r3
 8007072:	6927      	ldr	r7, [r4, #16]
 8007074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	6861      	ldr	r1, [r4, #4]
 800707c:	eb07 060a 	add.w	r6, r7, sl
 8007080:	42b3      	cmp	r3, r6
 8007082:	b085      	sub	sp, #20
 8007084:	bfb8      	it	lt
 8007086:	3101      	addlt	r1, #1
 8007088:	f7ff fed8 	bl	8006e3c <_Balloc>
 800708c:	b930      	cbnz	r0, 800709c <__multiply+0x44>
 800708e:	4602      	mov	r2, r0
 8007090:	4b44      	ldr	r3, [pc, #272]	; (80071a4 <__multiply+0x14c>)
 8007092:	4845      	ldr	r0, [pc, #276]	; (80071a8 <__multiply+0x150>)
 8007094:	f240 115d 	movw	r1, #349	; 0x15d
 8007098:	f000 fdca 	bl	8007c30 <__assert_func>
 800709c:	f100 0514 	add.w	r5, r0, #20
 80070a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070a4:	462b      	mov	r3, r5
 80070a6:	2200      	movs	r2, #0
 80070a8:	4543      	cmp	r3, r8
 80070aa:	d321      	bcc.n	80070f0 <__multiply+0x98>
 80070ac:	f104 0314 	add.w	r3, r4, #20
 80070b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070b4:	f109 0314 	add.w	r3, r9, #20
 80070b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070bc:	9202      	str	r2, [sp, #8]
 80070be:	1b3a      	subs	r2, r7, r4
 80070c0:	3a15      	subs	r2, #21
 80070c2:	f022 0203 	bic.w	r2, r2, #3
 80070c6:	3204      	adds	r2, #4
 80070c8:	f104 0115 	add.w	r1, r4, #21
 80070cc:	428f      	cmp	r7, r1
 80070ce:	bf38      	it	cc
 80070d0:	2204      	movcc	r2, #4
 80070d2:	9201      	str	r2, [sp, #4]
 80070d4:	9a02      	ldr	r2, [sp, #8]
 80070d6:	9303      	str	r3, [sp, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d80c      	bhi.n	80070f6 <__multiply+0x9e>
 80070dc:	2e00      	cmp	r6, #0
 80070de:	dd03      	ble.n	80070e8 <__multiply+0x90>
 80070e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d05a      	beq.n	800719e <__multiply+0x146>
 80070e8:	6106      	str	r6, [r0, #16]
 80070ea:	b005      	add	sp, #20
 80070ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f0:	f843 2b04 	str.w	r2, [r3], #4
 80070f4:	e7d8      	b.n	80070a8 <__multiply+0x50>
 80070f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80070fa:	f1ba 0f00 	cmp.w	sl, #0
 80070fe:	d024      	beq.n	800714a <__multiply+0xf2>
 8007100:	f104 0e14 	add.w	lr, r4, #20
 8007104:	46a9      	mov	r9, r5
 8007106:	f04f 0c00 	mov.w	ip, #0
 800710a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800710e:	f8d9 1000 	ldr.w	r1, [r9]
 8007112:	fa1f fb82 	uxth.w	fp, r2
 8007116:	b289      	uxth	r1, r1
 8007118:	fb0a 110b 	mla	r1, sl, fp, r1
 800711c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007120:	f8d9 2000 	ldr.w	r2, [r9]
 8007124:	4461      	add	r1, ip
 8007126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800712a:	fb0a c20b 	mla	r2, sl, fp, ip
 800712e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007132:	b289      	uxth	r1, r1
 8007134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007138:	4577      	cmp	r7, lr
 800713a:	f849 1b04 	str.w	r1, [r9], #4
 800713e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007142:	d8e2      	bhi.n	800710a <__multiply+0xb2>
 8007144:	9a01      	ldr	r2, [sp, #4]
 8007146:	f845 c002 	str.w	ip, [r5, r2]
 800714a:	9a03      	ldr	r2, [sp, #12]
 800714c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007150:	3304      	adds	r3, #4
 8007152:	f1b9 0f00 	cmp.w	r9, #0
 8007156:	d020      	beq.n	800719a <__multiply+0x142>
 8007158:	6829      	ldr	r1, [r5, #0]
 800715a:	f104 0c14 	add.w	ip, r4, #20
 800715e:	46ae      	mov	lr, r5
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	f8bc b000 	ldrh.w	fp, [ip]
 8007168:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800716c:	fb09 220b 	mla	r2, r9, fp, r2
 8007170:	4492      	add	sl, r2
 8007172:	b289      	uxth	r1, r1
 8007174:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007178:	f84e 1b04 	str.w	r1, [lr], #4
 800717c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007180:	f8be 1000 	ldrh.w	r1, [lr]
 8007184:	0c12      	lsrs	r2, r2, #16
 8007186:	fb09 1102 	mla	r1, r9, r2, r1
 800718a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800718e:	4567      	cmp	r7, ip
 8007190:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007194:	d8e6      	bhi.n	8007164 <__multiply+0x10c>
 8007196:	9a01      	ldr	r2, [sp, #4]
 8007198:	50a9      	str	r1, [r5, r2]
 800719a:	3504      	adds	r5, #4
 800719c:	e79a      	b.n	80070d4 <__multiply+0x7c>
 800719e:	3e01      	subs	r6, #1
 80071a0:	e79c      	b.n	80070dc <__multiply+0x84>
 80071a2:	bf00      	nop
 80071a4:	0800817f 	.word	0x0800817f
 80071a8:	080081f0 	.word	0x080081f0

080071ac <__pow5mult>:
 80071ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b0:	4615      	mov	r5, r2
 80071b2:	f012 0203 	ands.w	r2, r2, #3
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	d007      	beq.n	80071cc <__pow5mult+0x20>
 80071bc:	4c25      	ldr	r4, [pc, #148]	; (8007254 <__pow5mult+0xa8>)
 80071be:	3a01      	subs	r2, #1
 80071c0:	2300      	movs	r3, #0
 80071c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071c6:	f7ff fe9b 	bl	8006f00 <__multadd>
 80071ca:	4607      	mov	r7, r0
 80071cc:	10ad      	asrs	r5, r5, #2
 80071ce:	d03d      	beq.n	800724c <__pow5mult+0xa0>
 80071d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071d2:	b97c      	cbnz	r4, 80071f4 <__pow5mult+0x48>
 80071d4:	2010      	movs	r0, #16
 80071d6:	f7ff fe1b 	bl	8006e10 <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	6270      	str	r0, [r6, #36]	; 0x24
 80071de:	b928      	cbnz	r0, 80071ec <__pow5mult+0x40>
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <__pow5mult+0xac>)
 80071e2:	481e      	ldr	r0, [pc, #120]	; (800725c <__pow5mult+0xb0>)
 80071e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071e8:	f000 fd22 	bl	8007c30 <__assert_func>
 80071ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071f0:	6004      	str	r4, [r0, #0]
 80071f2:	60c4      	str	r4, [r0, #12]
 80071f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071fc:	b94c      	cbnz	r4, 8007212 <__pow5mult+0x66>
 80071fe:	f240 2171 	movw	r1, #625	; 0x271
 8007202:	4630      	mov	r0, r6
 8007204:	f7ff ff12 	bl	800702c <__i2b>
 8007208:	2300      	movs	r3, #0
 800720a:	f8c8 0008 	str.w	r0, [r8, #8]
 800720e:	4604      	mov	r4, r0
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	f04f 0900 	mov.w	r9, #0
 8007216:	07eb      	lsls	r3, r5, #31
 8007218:	d50a      	bpl.n	8007230 <__pow5mult+0x84>
 800721a:	4639      	mov	r1, r7
 800721c:	4622      	mov	r2, r4
 800721e:	4630      	mov	r0, r6
 8007220:	f7ff ff1a 	bl	8007058 <__multiply>
 8007224:	4639      	mov	r1, r7
 8007226:	4680      	mov	r8, r0
 8007228:	4630      	mov	r0, r6
 800722a:	f7ff fe47 	bl	8006ebc <_Bfree>
 800722e:	4647      	mov	r7, r8
 8007230:	106d      	asrs	r5, r5, #1
 8007232:	d00b      	beq.n	800724c <__pow5mult+0xa0>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	b938      	cbnz	r0, 8007248 <__pow5mult+0x9c>
 8007238:	4622      	mov	r2, r4
 800723a:	4621      	mov	r1, r4
 800723c:	4630      	mov	r0, r6
 800723e:	f7ff ff0b 	bl	8007058 <__multiply>
 8007242:	6020      	str	r0, [r4, #0]
 8007244:	f8c0 9000 	str.w	r9, [r0]
 8007248:	4604      	mov	r4, r0
 800724a:	e7e4      	b.n	8007216 <__pow5mult+0x6a>
 800724c:	4638      	mov	r0, r7
 800724e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007252:	bf00      	nop
 8007254:	08008340 	.word	0x08008340
 8007258:	0800810d 	.word	0x0800810d
 800725c:	080081f0 	.word	0x080081f0

08007260 <__lshift>:
 8007260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	460c      	mov	r4, r1
 8007266:	6849      	ldr	r1, [r1, #4]
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800726e:	68a3      	ldr	r3, [r4, #8]
 8007270:	4607      	mov	r7, r0
 8007272:	4691      	mov	r9, r2
 8007274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007278:	f108 0601 	add.w	r6, r8, #1
 800727c:	42b3      	cmp	r3, r6
 800727e:	db0b      	blt.n	8007298 <__lshift+0x38>
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff fddb 	bl	8006e3c <_Balloc>
 8007286:	4605      	mov	r5, r0
 8007288:	b948      	cbnz	r0, 800729e <__lshift+0x3e>
 800728a:	4602      	mov	r2, r0
 800728c:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <__lshift+0xd8>)
 800728e:	482b      	ldr	r0, [pc, #172]	; (800733c <__lshift+0xdc>)
 8007290:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007294:	f000 fccc 	bl	8007c30 <__assert_func>
 8007298:	3101      	adds	r1, #1
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	e7ee      	b.n	800727c <__lshift+0x1c>
 800729e:	2300      	movs	r3, #0
 80072a0:	f100 0114 	add.w	r1, r0, #20
 80072a4:	f100 0210 	add.w	r2, r0, #16
 80072a8:	4618      	mov	r0, r3
 80072aa:	4553      	cmp	r3, sl
 80072ac:	db37      	blt.n	800731e <__lshift+0xbe>
 80072ae:	6920      	ldr	r0, [r4, #16]
 80072b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072b4:	f104 0314 	add.w	r3, r4, #20
 80072b8:	f019 091f 	ands.w	r9, r9, #31
 80072bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072c4:	d02f      	beq.n	8007326 <__lshift+0xc6>
 80072c6:	f1c9 0e20 	rsb	lr, r9, #32
 80072ca:	468a      	mov	sl, r1
 80072cc:	f04f 0c00 	mov.w	ip, #0
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	fa02 f209 	lsl.w	r2, r2, r9
 80072d6:	ea42 020c 	orr.w	r2, r2, ip
 80072da:	f84a 2b04 	str.w	r2, [sl], #4
 80072de:	f853 2b04 	ldr.w	r2, [r3], #4
 80072e2:	4298      	cmp	r0, r3
 80072e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80072e8:	d8f2      	bhi.n	80072d0 <__lshift+0x70>
 80072ea:	1b03      	subs	r3, r0, r4
 80072ec:	3b15      	subs	r3, #21
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	3304      	adds	r3, #4
 80072f4:	f104 0215 	add.w	r2, r4, #21
 80072f8:	4290      	cmp	r0, r2
 80072fa:	bf38      	it	cc
 80072fc:	2304      	movcc	r3, #4
 80072fe:	f841 c003 	str.w	ip, [r1, r3]
 8007302:	f1bc 0f00 	cmp.w	ip, #0
 8007306:	d001      	beq.n	800730c <__lshift+0xac>
 8007308:	f108 0602 	add.w	r6, r8, #2
 800730c:	3e01      	subs	r6, #1
 800730e:	4638      	mov	r0, r7
 8007310:	612e      	str	r6, [r5, #16]
 8007312:	4621      	mov	r1, r4
 8007314:	f7ff fdd2 	bl	8006ebc <_Bfree>
 8007318:	4628      	mov	r0, r5
 800731a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007322:	3301      	adds	r3, #1
 8007324:	e7c1      	b.n	80072aa <__lshift+0x4a>
 8007326:	3904      	subs	r1, #4
 8007328:	f853 2b04 	ldr.w	r2, [r3], #4
 800732c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007330:	4298      	cmp	r0, r3
 8007332:	d8f9      	bhi.n	8007328 <__lshift+0xc8>
 8007334:	e7ea      	b.n	800730c <__lshift+0xac>
 8007336:	bf00      	nop
 8007338:	0800817f 	.word	0x0800817f
 800733c:	080081f0 	.word	0x080081f0

08007340 <__mcmp>:
 8007340:	b530      	push	{r4, r5, lr}
 8007342:	6902      	ldr	r2, [r0, #16]
 8007344:	690c      	ldr	r4, [r1, #16]
 8007346:	1b12      	subs	r2, r2, r4
 8007348:	d10e      	bne.n	8007368 <__mcmp+0x28>
 800734a:	f100 0314 	add.w	r3, r0, #20
 800734e:	3114      	adds	r1, #20
 8007350:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007354:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007358:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800735c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007360:	42a5      	cmp	r5, r4
 8007362:	d003      	beq.n	800736c <__mcmp+0x2c>
 8007364:	d305      	bcc.n	8007372 <__mcmp+0x32>
 8007366:	2201      	movs	r2, #1
 8007368:	4610      	mov	r0, r2
 800736a:	bd30      	pop	{r4, r5, pc}
 800736c:	4283      	cmp	r3, r0
 800736e:	d3f3      	bcc.n	8007358 <__mcmp+0x18>
 8007370:	e7fa      	b.n	8007368 <__mcmp+0x28>
 8007372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007376:	e7f7      	b.n	8007368 <__mcmp+0x28>

08007378 <__mdiff>:
 8007378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	460c      	mov	r4, r1
 800737e:	4606      	mov	r6, r0
 8007380:	4611      	mov	r1, r2
 8007382:	4620      	mov	r0, r4
 8007384:	4690      	mov	r8, r2
 8007386:	f7ff ffdb 	bl	8007340 <__mcmp>
 800738a:	1e05      	subs	r5, r0, #0
 800738c:	d110      	bne.n	80073b0 <__mdiff+0x38>
 800738e:	4629      	mov	r1, r5
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff fd53 	bl	8006e3c <_Balloc>
 8007396:	b930      	cbnz	r0, 80073a6 <__mdiff+0x2e>
 8007398:	4b3a      	ldr	r3, [pc, #232]	; (8007484 <__mdiff+0x10c>)
 800739a:	4602      	mov	r2, r0
 800739c:	f240 2132 	movw	r1, #562	; 0x232
 80073a0:	4839      	ldr	r0, [pc, #228]	; (8007488 <__mdiff+0x110>)
 80073a2:	f000 fc45 	bl	8007c30 <__assert_func>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	bfa4      	itt	ge
 80073b2:	4643      	movge	r3, r8
 80073b4:	46a0      	movge	r8, r4
 80073b6:	4630      	mov	r0, r6
 80073b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073bc:	bfa6      	itte	ge
 80073be:	461c      	movge	r4, r3
 80073c0:	2500      	movge	r5, #0
 80073c2:	2501      	movlt	r5, #1
 80073c4:	f7ff fd3a 	bl	8006e3c <_Balloc>
 80073c8:	b920      	cbnz	r0, 80073d4 <__mdiff+0x5c>
 80073ca:	4b2e      	ldr	r3, [pc, #184]	; (8007484 <__mdiff+0x10c>)
 80073cc:	4602      	mov	r2, r0
 80073ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073d2:	e7e5      	b.n	80073a0 <__mdiff+0x28>
 80073d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073d8:	6926      	ldr	r6, [r4, #16]
 80073da:	60c5      	str	r5, [r0, #12]
 80073dc:	f104 0914 	add.w	r9, r4, #20
 80073e0:	f108 0514 	add.w	r5, r8, #20
 80073e4:	f100 0e14 	add.w	lr, r0, #20
 80073e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80073ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073f0:	f108 0210 	add.w	r2, r8, #16
 80073f4:	46f2      	mov	sl, lr
 80073f6:	2100      	movs	r1, #0
 80073f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007400:	fa1f f883 	uxth.w	r8, r3
 8007404:	fa11 f18b 	uxtah	r1, r1, fp
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	eba1 0808 	sub.w	r8, r1, r8
 800740e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007412:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007416:	fa1f f888 	uxth.w	r8, r8
 800741a:	1419      	asrs	r1, r3, #16
 800741c:	454e      	cmp	r6, r9
 800741e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007422:	f84a 3b04 	str.w	r3, [sl], #4
 8007426:	d8e7      	bhi.n	80073f8 <__mdiff+0x80>
 8007428:	1b33      	subs	r3, r6, r4
 800742a:	3b15      	subs	r3, #21
 800742c:	f023 0303 	bic.w	r3, r3, #3
 8007430:	3304      	adds	r3, #4
 8007432:	3415      	adds	r4, #21
 8007434:	42a6      	cmp	r6, r4
 8007436:	bf38      	it	cc
 8007438:	2304      	movcc	r3, #4
 800743a:	441d      	add	r5, r3
 800743c:	4473      	add	r3, lr
 800743e:	469e      	mov	lr, r3
 8007440:	462e      	mov	r6, r5
 8007442:	4566      	cmp	r6, ip
 8007444:	d30e      	bcc.n	8007464 <__mdiff+0xec>
 8007446:	f10c 0203 	add.w	r2, ip, #3
 800744a:	1b52      	subs	r2, r2, r5
 800744c:	f022 0203 	bic.w	r2, r2, #3
 8007450:	3d03      	subs	r5, #3
 8007452:	45ac      	cmp	ip, r5
 8007454:	bf38      	it	cc
 8007456:	2200      	movcc	r2, #0
 8007458:	441a      	add	r2, r3
 800745a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800745e:	b17b      	cbz	r3, 8007480 <__mdiff+0x108>
 8007460:	6107      	str	r7, [r0, #16]
 8007462:	e7a3      	b.n	80073ac <__mdiff+0x34>
 8007464:	f856 8b04 	ldr.w	r8, [r6], #4
 8007468:	fa11 f288 	uxtah	r2, r1, r8
 800746c:	1414      	asrs	r4, r2, #16
 800746e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007472:	b292      	uxth	r2, r2
 8007474:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007478:	f84e 2b04 	str.w	r2, [lr], #4
 800747c:	1421      	asrs	r1, r4, #16
 800747e:	e7e0      	b.n	8007442 <__mdiff+0xca>
 8007480:	3f01      	subs	r7, #1
 8007482:	e7ea      	b.n	800745a <__mdiff+0xe2>
 8007484:	0800817f 	.word	0x0800817f
 8007488:	080081f0 	.word	0x080081f0

0800748c <__d2b>:
 800748c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007490:	4689      	mov	r9, r1
 8007492:	2101      	movs	r1, #1
 8007494:	ec57 6b10 	vmov	r6, r7, d0
 8007498:	4690      	mov	r8, r2
 800749a:	f7ff fccf 	bl	8006e3c <_Balloc>
 800749e:	4604      	mov	r4, r0
 80074a0:	b930      	cbnz	r0, 80074b0 <__d2b+0x24>
 80074a2:	4602      	mov	r2, r0
 80074a4:	4b25      	ldr	r3, [pc, #148]	; (800753c <__d2b+0xb0>)
 80074a6:	4826      	ldr	r0, [pc, #152]	; (8007540 <__d2b+0xb4>)
 80074a8:	f240 310a 	movw	r1, #778	; 0x30a
 80074ac:	f000 fbc0 	bl	8007c30 <__assert_func>
 80074b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074b8:	bb35      	cbnz	r5, 8007508 <__d2b+0x7c>
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	d028      	beq.n	8007512 <__d2b+0x86>
 80074c0:	4668      	mov	r0, sp
 80074c2:	9600      	str	r6, [sp, #0]
 80074c4:	f7ff fd82 	bl	8006fcc <__lo0bits>
 80074c8:	9900      	ldr	r1, [sp, #0]
 80074ca:	b300      	cbz	r0, 800750e <__d2b+0x82>
 80074cc:	9a01      	ldr	r2, [sp, #4]
 80074ce:	f1c0 0320 	rsb	r3, r0, #32
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	430b      	orrs	r3, r1
 80074d8:	40c2      	lsrs	r2, r0
 80074da:	6163      	str	r3, [r4, #20]
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	61a3      	str	r3, [r4, #24]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf14      	ite	ne
 80074e6:	2202      	movne	r2, #2
 80074e8:	2201      	moveq	r2, #1
 80074ea:	6122      	str	r2, [r4, #16]
 80074ec:	b1d5      	cbz	r5, 8007524 <__d2b+0x98>
 80074ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074f2:	4405      	add	r5, r0
 80074f4:	f8c9 5000 	str.w	r5, [r9]
 80074f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074fc:	f8c8 0000 	str.w	r0, [r8]
 8007500:	4620      	mov	r0, r4
 8007502:	b003      	add	sp, #12
 8007504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800750c:	e7d5      	b.n	80074ba <__d2b+0x2e>
 800750e:	6161      	str	r1, [r4, #20]
 8007510:	e7e5      	b.n	80074de <__d2b+0x52>
 8007512:	a801      	add	r0, sp, #4
 8007514:	f7ff fd5a 	bl	8006fcc <__lo0bits>
 8007518:	9b01      	ldr	r3, [sp, #4]
 800751a:	6163      	str	r3, [r4, #20]
 800751c:	2201      	movs	r2, #1
 800751e:	6122      	str	r2, [r4, #16]
 8007520:	3020      	adds	r0, #32
 8007522:	e7e3      	b.n	80074ec <__d2b+0x60>
 8007524:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007528:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800752c:	f8c9 0000 	str.w	r0, [r9]
 8007530:	6918      	ldr	r0, [r3, #16]
 8007532:	f7ff fd2b 	bl	8006f8c <__hi0bits>
 8007536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800753a:	e7df      	b.n	80074fc <__d2b+0x70>
 800753c:	0800817f 	.word	0x0800817f
 8007540:	080081f0 	.word	0x080081f0

08007544 <_calloc_r>:
 8007544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007546:	fba1 2402 	umull	r2, r4, r1, r2
 800754a:	b94c      	cbnz	r4, 8007560 <_calloc_r+0x1c>
 800754c:	4611      	mov	r1, r2
 800754e:	9201      	str	r2, [sp, #4]
 8007550:	f000 f87a 	bl	8007648 <_malloc_r>
 8007554:	9a01      	ldr	r2, [sp, #4]
 8007556:	4605      	mov	r5, r0
 8007558:	b930      	cbnz	r0, 8007568 <_calloc_r+0x24>
 800755a:	4628      	mov	r0, r5
 800755c:	b003      	add	sp, #12
 800755e:	bd30      	pop	{r4, r5, pc}
 8007560:	220c      	movs	r2, #12
 8007562:	6002      	str	r2, [r0, #0]
 8007564:	2500      	movs	r5, #0
 8007566:	e7f8      	b.n	800755a <_calloc_r+0x16>
 8007568:	4621      	mov	r1, r4
 800756a:	f7fe f867 	bl	800563c <memset>
 800756e:	e7f4      	b.n	800755a <_calloc_r+0x16>

08007570 <_free_r>:
 8007570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007572:	2900      	cmp	r1, #0
 8007574:	d044      	beq.n	8007600 <_free_r+0x90>
 8007576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800757a:	9001      	str	r0, [sp, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f1a1 0404 	sub.w	r4, r1, #4
 8007582:	bfb8      	it	lt
 8007584:	18e4      	addlt	r4, r4, r3
 8007586:	f000 fcdf 	bl	8007f48 <__malloc_lock>
 800758a:	4a1e      	ldr	r2, [pc, #120]	; (8007604 <_free_r+0x94>)
 800758c:	9801      	ldr	r0, [sp, #4]
 800758e:	6813      	ldr	r3, [r2, #0]
 8007590:	b933      	cbnz	r3, 80075a0 <_free_r+0x30>
 8007592:	6063      	str	r3, [r4, #4]
 8007594:	6014      	str	r4, [r2, #0]
 8007596:	b003      	add	sp, #12
 8007598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800759c:	f000 bcda 	b.w	8007f54 <__malloc_unlock>
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	d908      	bls.n	80075b6 <_free_r+0x46>
 80075a4:	6825      	ldr	r5, [r4, #0]
 80075a6:	1961      	adds	r1, r4, r5
 80075a8:	428b      	cmp	r3, r1
 80075aa:	bf01      	itttt	eq
 80075ac:	6819      	ldreq	r1, [r3, #0]
 80075ae:	685b      	ldreq	r3, [r3, #4]
 80075b0:	1949      	addeq	r1, r1, r5
 80075b2:	6021      	streq	r1, [r4, #0]
 80075b4:	e7ed      	b.n	8007592 <_free_r+0x22>
 80075b6:	461a      	mov	r2, r3
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	b10b      	cbz	r3, 80075c0 <_free_r+0x50>
 80075bc:	42a3      	cmp	r3, r4
 80075be:	d9fa      	bls.n	80075b6 <_free_r+0x46>
 80075c0:	6811      	ldr	r1, [r2, #0]
 80075c2:	1855      	adds	r5, r2, r1
 80075c4:	42a5      	cmp	r5, r4
 80075c6:	d10b      	bne.n	80075e0 <_free_r+0x70>
 80075c8:	6824      	ldr	r4, [r4, #0]
 80075ca:	4421      	add	r1, r4
 80075cc:	1854      	adds	r4, r2, r1
 80075ce:	42a3      	cmp	r3, r4
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	d1e0      	bne.n	8007596 <_free_r+0x26>
 80075d4:	681c      	ldr	r4, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	6053      	str	r3, [r2, #4]
 80075da:	4421      	add	r1, r4
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	e7da      	b.n	8007596 <_free_r+0x26>
 80075e0:	d902      	bls.n	80075e8 <_free_r+0x78>
 80075e2:	230c      	movs	r3, #12
 80075e4:	6003      	str	r3, [r0, #0]
 80075e6:	e7d6      	b.n	8007596 <_free_r+0x26>
 80075e8:	6825      	ldr	r5, [r4, #0]
 80075ea:	1961      	adds	r1, r4, r5
 80075ec:	428b      	cmp	r3, r1
 80075ee:	bf04      	itt	eq
 80075f0:	6819      	ldreq	r1, [r3, #0]
 80075f2:	685b      	ldreq	r3, [r3, #4]
 80075f4:	6063      	str	r3, [r4, #4]
 80075f6:	bf04      	itt	eq
 80075f8:	1949      	addeq	r1, r1, r5
 80075fa:	6021      	streq	r1, [r4, #0]
 80075fc:	6054      	str	r4, [r2, #4]
 80075fe:	e7ca      	b.n	8007596 <_free_r+0x26>
 8007600:	b003      	add	sp, #12
 8007602:	bd30      	pop	{r4, r5, pc}
 8007604:	20000374 	.word	0x20000374

08007608 <sbrk_aligned>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	4e0e      	ldr	r6, [pc, #56]	; (8007644 <sbrk_aligned+0x3c>)
 800760c:	460c      	mov	r4, r1
 800760e:	6831      	ldr	r1, [r6, #0]
 8007610:	4605      	mov	r5, r0
 8007612:	b911      	cbnz	r1, 800761a <sbrk_aligned+0x12>
 8007614:	f000 f9e6 	bl	80079e4 <_sbrk_r>
 8007618:	6030      	str	r0, [r6, #0]
 800761a:	4621      	mov	r1, r4
 800761c:	4628      	mov	r0, r5
 800761e:	f000 f9e1 	bl	80079e4 <_sbrk_r>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d00a      	beq.n	800763c <sbrk_aligned+0x34>
 8007626:	1cc4      	adds	r4, r0, #3
 8007628:	f024 0403 	bic.w	r4, r4, #3
 800762c:	42a0      	cmp	r0, r4
 800762e:	d007      	beq.n	8007640 <sbrk_aligned+0x38>
 8007630:	1a21      	subs	r1, r4, r0
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f9d6 	bl	80079e4 <_sbrk_r>
 8007638:	3001      	adds	r0, #1
 800763a:	d101      	bne.n	8007640 <sbrk_aligned+0x38>
 800763c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	20000378 	.word	0x20000378

08007648 <_malloc_r>:
 8007648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764c:	1ccd      	adds	r5, r1, #3
 800764e:	f025 0503 	bic.w	r5, r5, #3
 8007652:	3508      	adds	r5, #8
 8007654:	2d0c      	cmp	r5, #12
 8007656:	bf38      	it	cc
 8007658:	250c      	movcc	r5, #12
 800765a:	2d00      	cmp	r5, #0
 800765c:	4607      	mov	r7, r0
 800765e:	db01      	blt.n	8007664 <_malloc_r+0x1c>
 8007660:	42a9      	cmp	r1, r5
 8007662:	d905      	bls.n	8007670 <_malloc_r+0x28>
 8007664:	230c      	movs	r3, #12
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	2600      	movs	r6, #0
 800766a:	4630      	mov	r0, r6
 800766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007670:	4e2e      	ldr	r6, [pc, #184]	; (800772c <_malloc_r+0xe4>)
 8007672:	f000 fc69 	bl	8007f48 <__malloc_lock>
 8007676:	6833      	ldr	r3, [r6, #0]
 8007678:	461c      	mov	r4, r3
 800767a:	bb34      	cbnz	r4, 80076ca <_malloc_r+0x82>
 800767c:	4629      	mov	r1, r5
 800767e:	4638      	mov	r0, r7
 8007680:	f7ff ffc2 	bl	8007608 <sbrk_aligned>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	4604      	mov	r4, r0
 8007688:	d14d      	bne.n	8007726 <_malloc_r+0xde>
 800768a:	6834      	ldr	r4, [r6, #0]
 800768c:	4626      	mov	r6, r4
 800768e:	2e00      	cmp	r6, #0
 8007690:	d140      	bne.n	8007714 <_malloc_r+0xcc>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	4631      	mov	r1, r6
 8007696:	4638      	mov	r0, r7
 8007698:	eb04 0803 	add.w	r8, r4, r3
 800769c:	f000 f9a2 	bl	80079e4 <_sbrk_r>
 80076a0:	4580      	cmp	r8, r0
 80076a2:	d13a      	bne.n	800771a <_malloc_r+0xd2>
 80076a4:	6821      	ldr	r1, [r4, #0]
 80076a6:	3503      	adds	r5, #3
 80076a8:	1a6d      	subs	r5, r5, r1
 80076aa:	f025 0503 	bic.w	r5, r5, #3
 80076ae:	3508      	adds	r5, #8
 80076b0:	2d0c      	cmp	r5, #12
 80076b2:	bf38      	it	cc
 80076b4:	250c      	movcc	r5, #12
 80076b6:	4629      	mov	r1, r5
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff ffa5 	bl	8007608 <sbrk_aligned>
 80076be:	3001      	adds	r0, #1
 80076c0:	d02b      	beq.n	800771a <_malloc_r+0xd2>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	442b      	add	r3, r5
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	e00e      	b.n	80076e8 <_malloc_r+0xa0>
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	1b52      	subs	r2, r2, r5
 80076ce:	d41e      	bmi.n	800770e <_malloc_r+0xc6>
 80076d0:	2a0b      	cmp	r2, #11
 80076d2:	d916      	bls.n	8007702 <_malloc_r+0xba>
 80076d4:	1961      	adds	r1, r4, r5
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	6025      	str	r5, [r4, #0]
 80076da:	bf18      	it	ne
 80076dc:	6059      	strne	r1, [r3, #4]
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	bf08      	it	eq
 80076e2:	6031      	streq	r1, [r6, #0]
 80076e4:	5162      	str	r2, [r4, r5]
 80076e6:	604b      	str	r3, [r1, #4]
 80076e8:	4638      	mov	r0, r7
 80076ea:	f104 060b 	add.w	r6, r4, #11
 80076ee:	f000 fc31 	bl	8007f54 <__malloc_unlock>
 80076f2:	f026 0607 	bic.w	r6, r6, #7
 80076f6:	1d23      	adds	r3, r4, #4
 80076f8:	1af2      	subs	r2, r6, r3
 80076fa:	d0b6      	beq.n	800766a <_malloc_r+0x22>
 80076fc:	1b9b      	subs	r3, r3, r6
 80076fe:	50a3      	str	r3, [r4, r2]
 8007700:	e7b3      	b.n	800766a <_malloc_r+0x22>
 8007702:	6862      	ldr	r2, [r4, #4]
 8007704:	42a3      	cmp	r3, r4
 8007706:	bf0c      	ite	eq
 8007708:	6032      	streq	r2, [r6, #0]
 800770a:	605a      	strne	r2, [r3, #4]
 800770c:	e7ec      	b.n	80076e8 <_malloc_r+0xa0>
 800770e:	4623      	mov	r3, r4
 8007710:	6864      	ldr	r4, [r4, #4]
 8007712:	e7b2      	b.n	800767a <_malloc_r+0x32>
 8007714:	4634      	mov	r4, r6
 8007716:	6876      	ldr	r6, [r6, #4]
 8007718:	e7b9      	b.n	800768e <_malloc_r+0x46>
 800771a:	230c      	movs	r3, #12
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	4638      	mov	r0, r7
 8007720:	f000 fc18 	bl	8007f54 <__malloc_unlock>
 8007724:	e7a1      	b.n	800766a <_malloc_r+0x22>
 8007726:	6025      	str	r5, [r4, #0]
 8007728:	e7de      	b.n	80076e8 <_malloc_r+0xa0>
 800772a:	bf00      	nop
 800772c:	20000374 	.word	0x20000374

08007730 <__sfputc_r>:
 8007730:	6893      	ldr	r3, [r2, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	b410      	push	{r4}
 8007738:	6093      	str	r3, [r2, #8]
 800773a:	da08      	bge.n	800774e <__sfputc_r+0x1e>
 800773c:	6994      	ldr	r4, [r2, #24]
 800773e:	42a3      	cmp	r3, r4
 8007740:	db01      	blt.n	8007746 <__sfputc_r+0x16>
 8007742:	290a      	cmp	r1, #10
 8007744:	d103      	bne.n	800774e <__sfputc_r+0x1e>
 8007746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800774a:	f000 b99f 	b.w	8007a8c <__swbuf_r>
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	1c58      	adds	r0, r3, #1
 8007752:	6010      	str	r0, [r2, #0]
 8007754:	7019      	strb	r1, [r3, #0]
 8007756:	4608      	mov	r0, r1
 8007758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800775c:	4770      	bx	lr

0800775e <__sfputs_r>:
 800775e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007760:	4606      	mov	r6, r0
 8007762:	460f      	mov	r7, r1
 8007764:	4614      	mov	r4, r2
 8007766:	18d5      	adds	r5, r2, r3
 8007768:	42ac      	cmp	r4, r5
 800776a:	d101      	bne.n	8007770 <__sfputs_r+0x12>
 800776c:	2000      	movs	r0, #0
 800776e:	e007      	b.n	8007780 <__sfputs_r+0x22>
 8007770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007774:	463a      	mov	r2, r7
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ffda 	bl	8007730 <__sfputc_r>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d1f3      	bne.n	8007768 <__sfputs_r+0xa>
 8007780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007784 <_vfiprintf_r>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	460d      	mov	r5, r1
 800778a:	b09d      	sub	sp, #116	; 0x74
 800778c:	4614      	mov	r4, r2
 800778e:	4698      	mov	r8, r3
 8007790:	4606      	mov	r6, r0
 8007792:	b118      	cbz	r0, 800779c <_vfiprintf_r+0x18>
 8007794:	6983      	ldr	r3, [r0, #24]
 8007796:	b90b      	cbnz	r3, 800779c <_vfiprintf_r+0x18>
 8007798:	f7ff fa94 	bl	8006cc4 <__sinit>
 800779c:	4b89      	ldr	r3, [pc, #548]	; (80079c4 <_vfiprintf_r+0x240>)
 800779e:	429d      	cmp	r5, r3
 80077a0:	d11b      	bne.n	80077da <_vfiprintf_r+0x56>
 80077a2:	6875      	ldr	r5, [r6, #4]
 80077a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077a6:	07d9      	lsls	r1, r3, #31
 80077a8:	d405      	bmi.n	80077b6 <_vfiprintf_r+0x32>
 80077aa:	89ab      	ldrh	r3, [r5, #12]
 80077ac:	059a      	lsls	r2, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_vfiprintf_r+0x32>
 80077b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077b2:	f7ff fb2a 	bl	8006e0a <__retarget_lock_acquire_recursive>
 80077b6:	89ab      	ldrh	r3, [r5, #12]
 80077b8:	071b      	lsls	r3, r3, #28
 80077ba:	d501      	bpl.n	80077c0 <_vfiprintf_r+0x3c>
 80077bc:	692b      	ldr	r3, [r5, #16]
 80077be:	b9eb      	cbnz	r3, 80077fc <_vfiprintf_r+0x78>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4630      	mov	r0, r6
 80077c4:	f000 f9c6 	bl	8007b54 <__swsetup_r>
 80077c8:	b1c0      	cbz	r0, 80077fc <_vfiprintf_r+0x78>
 80077ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077cc:	07dc      	lsls	r4, r3, #31
 80077ce:	d50e      	bpl.n	80077ee <_vfiprintf_r+0x6a>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077d4:	b01d      	add	sp, #116	; 0x74
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	4b7b      	ldr	r3, [pc, #492]	; (80079c8 <_vfiprintf_r+0x244>)
 80077dc:	429d      	cmp	r5, r3
 80077de:	d101      	bne.n	80077e4 <_vfiprintf_r+0x60>
 80077e0:	68b5      	ldr	r5, [r6, #8]
 80077e2:	e7df      	b.n	80077a4 <_vfiprintf_r+0x20>
 80077e4:	4b79      	ldr	r3, [pc, #484]	; (80079cc <_vfiprintf_r+0x248>)
 80077e6:	429d      	cmp	r5, r3
 80077e8:	bf08      	it	eq
 80077ea:	68f5      	ldreq	r5, [r6, #12]
 80077ec:	e7da      	b.n	80077a4 <_vfiprintf_r+0x20>
 80077ee:	89ab      	ldrh	r3, [r5, #12]
 80077f0:	0598      	lsls	r0, r3, #22
 80077f2:	d4ed      	bmi.n	80077d0 <_vfiprintf_r+0x4c>
 80077f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077f6:	f7ff fb09 	bl	8006e0c <__retarget_lock_release_recursive>
 80077fa:	e7e9      	b.n	80077d0 <_vfiprintf_r+0x4c>
 80077fc:	2300      	movs	r3, #0
 80077fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007800:	2320      	movs	r3, #32
 8007802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007806:	f8cd 800c 	str.w	r8, [sp, #12]
 800780a:	2330      	movs	r3, #48	; 0x30
 800780c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079d0 <_vfiprintf_r+0x24c>
 8007810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007814:	f04f 0901 	mov.w	r9, #1
 8007818:	4623      	mov	r3, r4
 800781a:	469a      	mov	sl, r3
 800781c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007820:	b10a      	cbz	r2, 8007826 <_vfiprintf_r+0xa2>
 8007822:	2a25      	cmp	r2, #37	; 0x25
 8007824:	d1f9      	bne.n	800781a <_vfiprintf_r+0x96>
 8007826:	ebba 0b04 	subs.w	fp, sl, r4
 800782a:	d00b      	beq.n	8007844 <_vfiprintf_r+0xc0>
 800782c:	465b      	mov	r3, fp
 800782e:	4622      	mov	r2, r4
 8007830:	4629      	mov	r1, r5
 8007832:	4630      	mov	r0, r6
 8007834:	f7ff ff93 	bl	800775e <__sfputs_r>
 8007838:	3001      	adds	r0, #1
 800783a:	f000 80aa 	beq.w	8007992 <_vfiprintf_r+0x20e>
 800783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007840:	445a      	add	r2, fp
 8007842:	9209      	str	r2, [sp, #36]	; 0x24
 8007844:	f89a 3000 	ldrb.w	r3, [sl]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80a2 	beq.w	8007992 <_vfiprintf_r+0x20e>
 800784e:	2300      	movs	r3, #0
 8007850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007858:	f10a 0a01 	add.w	sl, sl, #1
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	9307      	str	r3, [sp, #28]
 8007860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007864:	931a      	str	r3, [sp, #104]	; 0x68
 8007866:	4654      	mov	r4, sl
 8007868:	2205      	movs	r2, #5
 800786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786e:	4858      	ldr	r0, [pc, #352]	; (80079d0 <_vfiprintf_r+0x24c>)
 8007870:	f7f8 fcbe 	bl	80001f0 <memchr>
 8007874:	9a04      	ldr	r2, [sp, #16]
 8007876:	b9d8      	cbnz	r0, 80078b0 <_vfiprintf_r+0x12c>
 8007878:	06d1      	lsls	r1, r2, #27
 800787a:	bf44      	itt	mi
 800787c:	2320      	movmi	r3, #32
 800787e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007882:	0713      	lsls	r3, r2, #28
 8007884:	bf44      	itt	mi
 8007886:	232b      	movmi	r3, #43	; 0x2b
 8007888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788c:	f89a 3000 	ldrb.w	r3, [sl]
 8007890:	2b2a      	cmp	r3, #42	; 0x2a
 8007892:	d015      	beq.n	80078c0 <_vfiprintf_r+0x13c>
 8007894:	9a07      	ldr	r2, [sp, #28]
 8007896:	4654      	mov	r4, sl
 8007898:	2000      	movs	r0, #0
 800789a:	f04f 0c0a 	mov.w	ip, #10
 800789e:	4621      	mov	r1, r4
 80078a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a4:	3b30      	subs	r3, #48	; 0x30
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d94e      	bls.n	8007948 <_vfiprintf_r+0x1c4>
 80078aa:	b1b0      	cbz	r0, 80078da <_vfiprintf_r+0x156>
 80078ac:	9207      	str	r2, [sp, #28]
 80078ae:	e014      	b.n	80078da <_vfiprintf_r+0x156>
 80078b0:	eba0 0308 	sub.w	r3, r0, r8
 80078b4:	fa09 f303 	lsl.w	r3, r9, r3
 80078b8:	4313      	orrs	r3, r2
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	46a2      	mov	sl, r4
 80078be:	e7d2      	b.n	8007866 <_vfiprintf_r+0xe2>
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	1d19      	adds	r1, r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	9103      	str	r1, [sp, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bfbb      	ittet	lt
 80078cc:	425b      	neglt	r3, r3
 80078ce:	f042 0202 	orrlt.w	r2, r2, #2
 80078d2:	9307      	strge	r3, [sp, #28]
 80078d4:	9307      	strlt	r3, [sp, #28]
 80078d6:	bfb8      	it	lt
 80078d8:	9204      	strlt	r2, [sp, #16]
 80078da:	7823      	ldrb	r3, [r4, #0]
 80078dc:	2b2e      	cmp	r3, #46	; 0x2e
 80078de:	d10c      	bne.n	80078fa <_vfiprintf_r+0x176>
 80078e0:	7863      	ldrb	r3, [r4, #1]
 80078e2:	2b2a      	cmp	r3, #42	; 0x2a
 80078e4:	d135      	bne.n	8007952 <_vfiprintf_r+0x1ce>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	1d1a      	adds	r2, r3, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	9203      	str	r2, [sp, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfb8      	it	lt
 80078f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078f6:	3402      	adds	r4, #2
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079e0 <_vfiprintf_r+0x25c>
 80078fe:	7821      	ldrb	r1, [r4, #0]
 8007900:	2203      	movs	r2, #3
 8007902:	4650      	mov	r0, sl
 8007904:	f7f8 fc74 	bl	80001f0 <memchr>
 8007908:	b140      	cbz	r0, 800791c <_vfiprintf_r+0x198>
 800790a:	2340      	movs	r3, #64	; 0x40
 800790c:	eba0 000a 	sub.w	r0, r0, sl
 8007910:	fa03 f000 	lsl.w	r0, r3, r0
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	4303      	orrs	r3, r0
 8007918:	3401      	adds	r4, #1
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	482c      	ldr	r0, [pc, #176]	; (80079d4 <_vfiprintf_r+0x250>)
 8007922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007926:	2206      	movs	r2, #6
 8007928:	f7f8 fc62 	bl	80001f0 <memchr>
 800792c:	2800      	cmp	r0, #0
 800792e:	d03f      	beq.n	80079b0 <_vfiprintf_r+0x22c>
 8007930:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <_vfiprintf_r+0x254>)
 8007932:	bb1b      	cbnz	r3, 800797c <_vfiprintf_r+0x1f8>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	3307      	adds	r3, #7
 8007938:	f023 0307 	bic.w	r3, r3, #7
 800793c:	3308      	adds	r3, #8
 800793e:	9303      	str	r3, [sp, #12]
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	443b      	add	r3, r7
 8007944:	9309      	str	r3, [sp, #36]	; 0x24
 8007946:	e767      	b.n	8007818 <_vfiprintf_r+0x94>
 8007948:	fb0c 3202 	mla	r2, ip, r2, r3
 800794c:	460c      	mov	r4, r1
 800794e:	2001      	movs	r0, #1
 8007950:	e7a5      	b.n	800789e <_vfiprintf_r+0x11a>
 8007952:	2300      	movs	r3, #0
 8007954:	3401      	adds	r4, #1
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	4619      	mov	r1, r3
 800795a:	f04f 0c0a 	mov.w	ip, #10
 800795e:	4620      	mov	r0, r4
 8007960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007964:	3a30      	subs	r2, #48	; 0x30
 8007966:	2a09      	cmp	r2, #9
 8007968:	d903      	bls.n	8007972 <_vfiprintf_r+0x1ee>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c5      	beq.n	80078fa <_vfiprintf_r+0x176>
 800796e:	9105      	str	r1, [sp, #20]
 8007970:	e7c3      	b.n	80078fa <_vfiprintf_r+0x176>
 8007972:	fb0c 2101 	mla	r1, ip, r1, r2
 8007976:	4604      	mov	r4, r0
 8007978:	2301      	movs	r3, #1
 800797a:	e7f0      	b.n	800795e <_vfiprintf_r+0x1da>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	462a      	mov	r2, r5
 8007982:	4b16      	ldr	r3, [pc, #88]	; (80079dc <_vfiprintf_r+0x258>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4630      	mov	r0, r6
 8007988:	f7fd ff00 	bl	800578c <_printf_float>
 800798c:	4607      	mov	r7, r0
 800798e:	1c78      	adds	r0, r7, #1
 8007990:	d1d6      	bne.n	8007940 <_vfiprintf_r+0x1bc>
 8007992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	d405      	bmi.n	80079a4 <_vfiprintf_r+0x220>
 8007998:	89ab      	ldrh	r3, [r5, #12]
 800799a:	059a      	lsls	r2, r3, #22
 800799c:	d402      	bmi.n	80079a4 <_vfiprintf_r+0x220>
 800799e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079a0:	f7ff fa34 	bl	8006e0c <__retarget_lock_release_recursive>
 80079a4:	89ab      	ldrh	r3, [r5, #12]
 80079a6:	065b      	lsls	r3, r3, #25
 80079a8:	f53f af12 	bmi.w	80077d0 <_vfiprintf_r+0x4c>
 80079ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ae:	e711      	b.n	80077d4 <_vfiprintf_r+0x50>
 80079b0:	ab03      	add	r3, sp, #12
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	462a      	mov	r2, r5
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <_vfiprintf_r+0x258>)
 80079b8:	a904      	add	r1, sp, #16
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7fe f98a 	bl	8005cd4 <_printf_i>
 80079c0:	e7e4      	b.n	800798c <_vfiprintf_r+0x208>
 80079c2:	bf00      	nop
 80079c4:	080081b0 	.word	0x080081b0
 80079c8:	080081d0 	.word	0x080081d0
 80079cc:	08008190 	.word	0x08008190
 80079d0:	0800834c 	.word	0x0800834c
 80079d4:	08008356 	.word	0x08008356
 80079d8:	0800578d 	.word	0x0800578d
 80079dc:	0800775f 	.word	0x0800775f
 80079e0:	08008352 	.word	0x08008352

080079e4 <_sbrk_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	; (8007a00 <_sbrk_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7f9 fd8a 	bl	8001508 <_sbrk>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_sbrk_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_sbrk_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	2000037c 	.word	0x2000037c

08007a04 <__sread>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	460c      	mov	r4, r1
 8007a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0c:	f000 faa8 	bl	8007f60 <_read_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	bfab      	itete	ge
 8007a14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a16:	89a3      	ldrhlt	r3, [r4, #12]
 8007a18:	181b      	addge	r3, r3, r0
 8007a1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a1e:	bfac      	ite	ge
 8007a20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a22:	81a3      	strhlt	r3, [r4, #12]
 8007a24:	bd10      	pop	{r4, pc}

08007a26 <__swrite>:
 8007a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	898b      	ldrh	r3, [r1, #12]
 8007a2e:	05db      	lsls	r3, r3, #23
 8007a30:	4605      	mov	r5, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	4616      	mov	r6, r2
 8007a36:	d505      	bpl.n	8007a44 <__swrite+0x1e>
 8007a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f000 f9f8 	bl	8007e34 <_lseek_r>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	4632      	mov	r2, r6
 8007a52:	463b      	mov	r3, r7
 8007a54:	4628      	mov	r0, r5
 8007a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5a:	f000 b869 	b.w	8007b30 <_write_r>

08007a5e <__sseek>:
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	460c      	mov	r4, r1
 8007a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a66:	f000 f9e5 	bl	8007e34 <_lseek_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	bf15      	itete	ne
 8007a70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a7a:	81a3      	strheq	r3, [r4, #12]
 8007a7c:	bf18      	it	ne
 8007a7e:	81a3      	strhne	r3, [r4, #12]
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <__sclose>:
 8007a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a86:	f000 b8f1 	b.w	8007c6c <_close_r>
	...

08007a8c <__swbuf_r>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	460e      	mov	r6, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	4605      	mov	r5, r0
 8007a94:	b118      	cbz	r0, 8007a9e <__swbuf_r+0x12>
 8007a96:	6983      	ldr	r3, [r0, #24]
 8007a98:	b90b      	cbnz	r3, 8007a9e <__swbuf_r+0x12>
 8007a9a:	f7ff f913 	bl	8006cc4 <__sinit>
 8007a9e:	4b21      	ldr	r3, [pc, #132]	; (8007b24 <__swbuf_r+0x98>)
 8007aa0:	429c      	cmp	r4, r3
 8007aa2:	d12b      	bne.n	8007afc <__swbuf_r+0x70>
 8007aa4:	686c      	ldr	r4, [r5, #4]
 8007aa6:	69a3      	ldr	r3, [r4, #24]
 8007aa8:	60a3      	str	r3, [r4, #8]
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	071a      	lsls	r2, r3, #28
 8007aae:	d52f      	bpl.n	8007b10 <__swbuf_r+0x84>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	b36b      	cbz	r3, 8007b10 <__swbuf_r+0x84>
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1ac0      	subs	r0, r0, r3
 8007aba:	6963      	ldr	r3, [r4, #20]
 8007abc:	b2f6      	uxtb	r6, r6
 8007abe:	4283      	cmp	r3, r0
 8007ac0:	4637      	mov	r7, r6
 8007ac2:	dc04      	bgt.n	8007ace <__swbuf_r+0x42>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f966 	bl	8007d98 <_fflush_r>
 8007acc:	bb30      	cbnz	r0, 8007b1c <__swbuf_r+0x90>
 8007ace:	68a3      	ldr	r3, [r4, #8]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	6022      	str	r2, [r4, #0]
 8007ada:	701e      	strb	r6, [r3, #0]
 8007adc:	6963      	ldr	r3, [r4, #20]
 8007ade:	3001      	adds	r0, #1
 8007ae0:	4283      	cmp	r3, r0
 8007ae2:	d004      	beq.n	8007aee <__swbuf_r+0x62>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	07db      	lsls	r3, r3, #31
 8007ae8:	d506      	bpl.n	8007af8 <__swbuf_r+0x6c>
 8007aea:	2e0a      	cmp	r6, #10
 8007aec:	d104      	bne.n	8007af8 <__swbuf_r+0x6c>
 8007aee:	4621      	mov	r1, r4
 8007af0:	4628      	mov	r0, r5
 8007af2:	f000 f951 	bl	8007d98 <_fflush_r>
 8007af6:	b988      	cbnz	r0, 8007b1c <__swbuf_r+0x90>
 8007af8:	4638      	mov	r0, r7
 8007afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afc:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <__swbuf_r+0x9c>)
 8007afe:	429c      	cmp	r4, r3
 8007b00:	d101      	bne.n	8007b06 <__swbuf_r+0x7a>
 8007b02:	68ac      	ldr	r4, [r5, #8]
 8007b04:	e7cf      	b.n	8007aa6 <__swbuf_r+0x1a>
 8007b06:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <__swbuf_r+0xa0>)
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	bf08      	it	eq
 8007b0c:	68ec      	ldreq	r4, [r5, #12]
 8007b0e:	e7ca      	b.n	8007aa6 <__swbuf_r+0x1a>
 8007b10:	4621      	mov	r1, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 f81e 	bl	8007b54 <__swsetup_r>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d0cb      	beq.n	8007ab4 <__swbuf_r+0x28>
 8007b1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007b20:	e7ea      	b.n	8007af8 <__swbuf_r+0x6c>
 8007b22:	bf00      	nop
 8007b24:	080081b0 	.word	0x080081b0
 8007b28:	080081d0 	.word	0x080081d0
 8007b2c:	08008190 	.word	0x08008190

08007b30 <_write_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	; (8007b50 <_write_r+0x20>)
 8007b34:	4604      	mov	r4, r0
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	602a      	str	r2, [r5, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f7f9 fc91 	bl	8001466 <_write>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_write_r+0x1e>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_write_r+0x1e>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	2000037c 	.word	0x2000037c

08007b54 <__swsetup_r>:
 8007b54:	4b32      	ldr	r3, [pc, #200]	; (8007c20 <__swsetup_r+0xcc>)
 8007b56:	b570      	push	{r4, r5, r6, lr}
 8007b58:	681d      	ldr	r5, [r3, #0]
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	b125      	cbz	r5, 8007b6a <__swsetup_r+0x16>
 8007b60:	69ab      	ldr	r3, [r5, #24]
 8007b62:	b913      	cbnz	r3, 8007b6a <__swsetup_r+0x16>
 8007b64:	4628      	mov	r0, r5
 8007b66:	f7ff f8ad 	bl	8006cc4 <__sinit>
 8007b6a:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <__swsetup_r+0xd0>)
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	d10f      	bne.n	8007b90 <__swsetup_r+0x3c>
 8007b70:	686c      	ldr	r4, [r5, #4]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b78:	0719      	lsls	r1, r3, #28
 8007b7a:	d42c      	bmi.n	8007bd6 <__swsetup_r+0x82>
 8007b7c:	06dd      	lsls	r5, r3, #27
 8007b7e:	d411      	bmi.n	8007ba4 <__swsetup_r+0x50>
 8007b80:	2309      	movs	r3, #9
 8007b82:	6033      	str	r3, [r6, #0]
 8007b84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b8e:	e03e      	b.n	8007c0e <__swsetup_r+0xba>
 8007b90:	4b25      	ldr	r3, [pc, #148]	; (8007c28 <__swsetup_r+0xd4>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	d101      	bne.n	8007b9a <__swsetup_r+0x46>
 8007b96:	68ac      	ldr	r4, [r5, #8]
 8007b98:	e7eb      	b.n	8007b72 <__swsetup_r+0x1e>
 8007b9a:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <__swsetup_r+0xd8>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	bf08      	it	eq
 8007ba0:	68ec      	ldreq	r4, [r5, #12]
 8007ba2:	e7e6      	b.n	8007b72 <__swsetup_r+0x1e>
 8007ba4:	0758      	lsls	r0, r3, #29
 8007ba6:	d512      	bpl.n	8007bce <__swsetup_r+0x7a>
 8007ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007baa:	b141      	cbz	r1, 8007bbe <__swsetup_r+0x6a>
 8007bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	d002      	beq.n	8007bba <__swsetup_r+0x66>
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7ff fcdb 	bl	8007570 <_free_r>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6063      	str	r3, [r4, #4]
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f043 0308 	orr.w	r3, r3, #8
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	b94b      	cbnz	r3, 8007bee <__swsetup_r+0x9a>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be4:	d003      	beq.n	8007bee <__swsetup_r+0x9a>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4630      	mov	r0, r6
 8007bea:	f000 f95b 	bl	8007ea4 <__smakebuf_r>
 8007bee:	89a0      	ldrh	r0, [r4, #12]
 8007bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bf4:	f010 0301 	ands.w	r3, r0, #1
 8007bf8:	d00a      	beq.n	8007c10 <__swsetup_r+0xbc>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60a3      	str	r3, [r4, #8]
 8007bfe:	6963      	ldr	r3, [r4, #20]
 8007c00:	425b      	negs	r3, r3
 8007c02:	61a3      	str	r3, [r4, #24]
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	b943      	cbnz	r3, 8007c1a <__swsetup_r+0xc6>
 8007c08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c0c:	d1ba      	bne.n	8007b84 <__swsetup_r+0x30>
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	0781      	lsls	r1, r0, #30
 8007c12:	bf58      	it	pl
 8007c14:	6963      	ldrpl	r3, [r4, #20]
 8007c16:	60a3      	str	r3, [r4, #8]
 8007c18:	e7f4      	b.n	8007c04 <__swsetup_r+0xb0>
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	e7f7      	b.n	8007c0e <__swsetup_r+0xba>
 8007c1e:	bf00      	nop
 8007c20:	2000000c 	.word	0x2000000c
 8007c24:	080081b0 	.word	0x080081b0
 8007c28:	080081d0 	.word	0x080081d0
 8007c2c:	08008190 	.word	0x08008190

08007c30 <__assert_func>:
 8007c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c32:	4614      	mov	r4, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <__assert_func+0x2c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	68d8      	ldr	r0, [r3, #12]
 8007c3e:	b14c      	cbz	r4, 8007c54 <__assert_func+0x24>
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <__assert_func+0x30>)
 8007c42:	9100      	str	r1, [sp, #0]
 8007c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c48:	4906      	ldr	r1, [pc, #24]	; (8007c64 <__assert_func+0x34>)
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f000 f8e0 	bl	8007e10 <fiprintf>
 8007c50:	f000 f9a5 	bl	8007f9e <abort>
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <__assert_func+0x38>)
 8007c56:	461c      	mov	r4, r3
 8007c58:	e7f3      	b.n	8007c42 <__assert_func+0x12>
 8007c5a:	bf00      	nop
 8007c5c:	2000000c 	.word	0x2000000c
 8007c60:	0800835d 	.word	0x0800835d
 8007c64:	0800836a 	.word	0x0800836a
 8007c68:	08008398 	.word	0x08008398

08007c6c <_close_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d06      	ldr	r5, [pc, #24]	; (8007c88 <_close_r+0x1c>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	602b      	str	r3, [r5, #0]
 8007c78:	f7f9 fc11 	bl	800149e <_close>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_close_r+0x1a>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_close_r+0x1a>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	2000037c 	.word	0x2000037c

08007c8c <__sflush_r>:
 8007c8c:	898a      	ldrh	r2, [r1, #12]
 8007c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c92:	4605      	mov	r5, r0
 8007c94:	0710      	lsls	r0, r2, #28
 8007c96:	460c      	mov	r4, r1
 8007c98:	d458      	bmi.n	8007d4c <__sflush_r+0xc0>
 8007c9a:	684b      	ldr	r3, [r1, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dc05      	bgt.n	8007cac <__sflush_r+0x20>
 8007ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dc02      	bgt.n	8007cac <__sflush_r+0x20>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	d0f9      	beq.n	8007ca6 <__sflush_r+0x1a>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cb8:	682f      	ldr	r7, [r5, #0]
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	d032      	beq.n	8007d24 <__sflush_r+0x98>
 8007cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	075a      	lsls	r2, r3, #29
 8007cc4:	d505      	bpl.n	8007cd2 <__sflush_r+0x46>
 8007cc6:	6863      	ldr	r3, [r4, #4]
 8007cc8:	1ac0      	subs	r0, r0, r3
 8007cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ccc:	b10b      	cbz	r3, 8007cd2 <__sflush_r+0x46>
 8007cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cd8:	6a21      	ldr	r1, [r4, #32]
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b0      	blx	r6
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	d106      	bne.n	8007cf2 <__sflush_r+0x66>
 8007ce4:	6829      	ldr	r1, [r5, #0]
 8007ce6:	291d      	cmp	r1, #29
 8007ce8:	d82c      	bhi.n	8007d44 <__sflush_r+0xb8>
 8007cea:	4a2a      	ldr	r2, [pc, #168]	; (8007d94 <__sflush_r+0x108>)
 8007cec:	40ca      	lsrs	r2, r1
 8007cee:	07d6      	lsls	r6, r2, #31
 8007cf0:	d528      	bpl.n	8007d44 <__sflush_r+0xb8>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	6062      	str	r2, [r4, #4]
 8007cf6:	04d9      	lsls	r1, r3, #19
 8007cf8:	6922      	ldr	r2, [r4, #16]
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	d504      	bpl.n	8007d08 <__sflush_r+0x7c>
 8007cfe:	1c42      	adds	r2, r0, #1
 8007d00:	d101      	bne.n	8007d06 <__sflush_r+0x7a>
 8007d02:	682b      	ldr	r3, [r5, #0]
 8007d04:	b903      	cbnz	r3, 8007d08 <__sflush_r+0x7c>
 8007d06:	6560      	str	r0, [r4, #84]	; 0x54
 8007d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d0a:	602f      	str	r7, [r5, #0]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d0ca      	beq.n	8007ca6 <__sflush_r+0x1a>
 8007d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d14:	4299      	cmp	r1, r3
 8007d16:	d002      	beq.n	8007d1e <__sflush_r+0x92>
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f7ff fc29 	bl	8007570 <_free_r>
 8007d1e:	2000      	movs	r0, #0
 8007d20:	6360      	str	r0, [r4, #52]	; 0x34
 8007d22:	e7c1      	b.n	8007ca8 <__sflush_r+0x1c>
 8007d24:	6a21      	ldr	r1, [r4, #32]
 8007d26:	2301      	movs	r3, #1
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b0      	blx	r6
 8007d2c:	1c41      	adds	r1, r0, #1
 8007d2e:	d1c7      	bne.n	8007cc0 <__sflush_r+0x34>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0c4      	beq.n	8007cc0 <__sflush_r+0x34>
 8007d36:	2b1d      	cmp	r3, #29
 8007d38:	d001      	beq.n	8007d3e <__sflush_r+0xb2>
 8007d3a:	2b16      	cmp	r3, #22
 8007d3c:	d101      	bne.n	8007d42 <__sflush_r+0xb6>
 8007d3e:	602f      	str	r7, [r5, #0]
 8007d40:	e7b1      	b.n	8007ca6 <__sflush_r+0x1a>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	e7ad      	b.n	8007ca8 <__sflush_r+0x1c>
 8007d4c:	690f      	ldr	r7, [r1, #16]
 8007d4e:	2f00      	cmp	r7, #0
 8007d50:	d0a9      	beq.n	8007ca6 <__sflush_r+0x1a>
 8007d52:	0793      	lsls	r3, r2, #30
 8007d54:	680e      	ldr	r6, [r1, #0]
 8007d56:	bf08      	it	eq
 8007d58:	694b      	ldreq	r3, [r1, #20]
 8007d5a:	600f      	str	r7, [r1, #0]
 8007d5c:	bf18      	it	ne
 8007d5e:	2300      	movne	r3, #0
 8007d60:	eba6 0807 	sub.w	r8, r6, r7
 8007d64:	608b      	str	r3, [r1, #8]
 8007d66:	f1b8 0f00 	cmp.w	r8, #0
 8007d6a:	dd9c      	ble.n	8007ca6 <__sflush_r+0x1a>
 8007d6c:	6a21      	ldr	r1, [r4, #32]
 8007d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d70:	4643      	mov	r3, r8
 8007d72:	463a      	mov	r2, r7
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b0      	blx	r6
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	dc06      	bgt.n	8007d8a <__sflush_r+0xfe>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d88:	e78e      	b.n	8007ca8 <__sflush_r+0x1c>
 8007d8a:	4407      	add	r7, r0
 8007d8c:	eba8 0800 	sub.w	r8, r8, r0
 8007d90:	e7e9      	b.n	8007d66 <__sflush_r+0xda>
 8007d92:	bf00      	nop
 8007d94:	20400001 	.word	0x20400001

08007d98 <_fflush_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b913      	cbnz	r3, 8007da8 <_fflush_r+0x10>
 8007da2:	2500      	movs	r5, #0
 8007da4:	4628      	mov	r0, r5
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	b118      	cbz	r0, 8007db2 <_fflush_r+0x1a>
 8007daa:	6983      	ldr	r3, [r0, #24]
 8007dac:	b90b      	cbnz	r3, 8007db2 <_fflush_r+0x1a>
 8007dae:	f7fe ff89 	bl	8006cc4 <__sinit>
 8007db2:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <_fflush_r+0x6c>)
 8007db4:	429c      	cmp	r4, r3
 8007db6:	d11b      	bne.n	8007df0 <_fflush_r+0x58>
 8007db8:	686c      	ldr	r4, [r5, #4]
 8007dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0ef      	beq.n	8007da2 <_fflush_r+0xa>
 8007dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dc4:	07d0      	lsls	r0, r2, #31
 8007dc6:	d404      	bmi.n	8007dd2 <_fflush_r+0x3a>
 8007dc8:	0599      	lsls	r1, r3, #22
 8007dca:	d402      	bmi.n	8007dd2 <_fflush_r+0x3a>
 8007dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dce:	f7ff f81c 	bl	8006e0a <__retarget_lock_acquire_recursive>
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	f7ff ff59 	bl	8007c8c <__sflush_r>
 8007dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ddc:	07da      	lsls	r2, r3, #31
 8007dde:	4605      	mov	r5, r0
 8007de0:	d4e0      	bmi.n	8007da4 <_fflush_r+0xc>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	059b      	lsls	r3, r3, #22
 8007de6:	d4dd      	bmi.n	8007da4 <_fflush_r+0xc>
 8007de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dea:	f7ff f80f 	bl	8006e0c <__retarget_lock_release_recursive>
 8007dee:	e7d9      	b.n	8007da4 <_fflush_r+0xc>
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <_fflush_r+0x70>)
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d101      	bne.n	8007dfa <_fflush_r+0x62>
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	e7df      	b.n	8007dba <_fflush_r+0x22>
 8007dfa:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <_fflush_r+0x74>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	bf08      	it	eq
 8007e00:	68ec      	ldreq	r4, [r5, #12]
 8007e02:	e7da      	b.n	8007dba <_fflush_r+0x22>
 8007e04:	080081b0 	.word	0x080081b0
 8007e08:	080081d0 	.word	0x080081d0
 8007e0c:	08008190 	.word	0x08008190

08007e10 <fiprintf>:
 8007e10:	b40e      	push	{r1, r2, r3}
 8007e12:	b503      	push	{r0, r1, lr}
 8007e14:	4601      	mov	r1, r0
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	4805      	ldr	r0, [pc, #20]	; (8007e30 <fiprintf+0x20>)
 8007e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1e:	6800      	ldr	r0, [r0, #0]
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	f7ff fcaf 	bl	8007784 <_vfiprintf_r>
 8007e26:	b002      	add	sp, #8
 8007e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e2c:	b003      	add	sp, #12
 8007e2e:	4770      	bx	lr
 8007e30:	2000000c 	.word	0x2000000c

08007e34 <_lseek_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_lseek_r+0x20>)
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7f9 fb52 	bl	80014ec <_lseek>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_lseek_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_lseek_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	2000037c 	.word	0x2000037c

08007e58 <__swhatbuf_r>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	2900      	cmp	r1, #0
 8007e62:	b096      	sub	sp, #88	; 0x58
 8007e64:	4614      	mov	r4, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	da08      	bge.n	8007e7c <__swhatbuf_r+0x24>
 8007e6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	602a      	str	r2, [r5, #0]
 8007e72:	061a      	lsls	r2, r3, #24
 8007e74:	d410      	bmi.n	8007e98 <__swhatbuf_r+0x40>
 8007e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e7a:	e00e      	b.n	8007e9a <__swhatbuf_r+0x42>
 8007e7c:	466a      	mov	r2, sp
 8007e7e:	f000 f895 	bl	8007fac <_fstat_r>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	dbf1      	blt.n	8007e6a <__swhatbuf_r+0x12>
 8007e86:	9a01      	ldr	r2, [sp, #4]
 8007e88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e90:	425a      	negs	r2, r3
 8007e92:	415a      	adcs	r2, r3
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	e7ee      	b.n	8007e76 <__swhatbuf_r+0x1e>
 8007e98:	2340      	movs	r3, #64	; 0x40
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	b016      	add	sp, #88	; 0x58
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ea4 <__smakebuf_r>:
 8007ea4:	898b      	ldrh	r3, [r1, #12]
 8007ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ea8:	079d      	lsls	r5, r3, #30
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	d507      	bpl.n	8007ec0 <__smakebuf_r+0x1c>
 8007eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	6163      	str	r3, [r4, #20]
 8007ebc:	b002      	add	sp, #8
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	ab01      	add	r3, sp, #4
 8007ec2:	466a      	mov	r2, sp
 8007ec4:	f7ff ffc8 	bl	8007e58 <__swhatbuf_r>
 8007ec8:	9900      	ldr	r1, [sp, #0]
 8007eca:	4605      	mov	r5, r0
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff fbbb 	bl	8007648 <_malloc_r>
 8007ed2:	b948      	cbnz	r0, 8007ee8 <__smakebuf_r+0x44>
 8007ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed8:	059a      	lsls	r2, r3, #22
 8007eda:	d4ef      	bmi.n	8007ebc <__smakebuf_r+0x18>
 8007edc:	f023 0303 	bic.w	r3, r3, #3
 8007ee0:	f043 0302 	orr.w	r3, r3, #2
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	e7e3      	b.n	8007eb0 <__smakebuf_r+0xc>
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <__smakebuf_r+0x7c>)
 8007eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	6020      	str	r0, [r4, #0]
 8007ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	6163      	str	r3, [r4, #20]
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	6120      	str	r0, [r4, #16]
 8007efe:	b15b      	cbz	r3, 8007f18 <__smakebuf_r+0x74>
 8007f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f04:	4630      	mov	r0, r6
 8007f06:	f000 f863 	bl	8007fd0 <_isatty_r>
 8007f0a:	b128      	cbz	r0, 8007f18 <__smakebuf_r+0x74>
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f023 0303 	bic.w	r3, r3, #3
 8007f12:	f043 0301 	orr.w	r3, r3, #1
 8007f16:	81a3      	strh	r3, [r4, #12]
 8007f18:	89a0      	ldrh	r0, [r4, #12]
 8007f1a:	4305      	orrs	r5, r0
 8007f1c:	81a5      	strh	r5, [r4, #12]
 8007f1e:	e7cd      	b.n	8007ebc <__smakebuf_r+0x18>
 8007f20:	08006c5d 	.word	0x08006c5d

08007f24 <__ascii_mbtowc>:
 8007f24:	b082      	sub	sp, #8
 8007f26:	b901      	cbnz	r1, 8007f2a <__ascii_mbtowc+0x6>
 8007f28:	a901      	add	r1, sp, #4
 8007f2a:	b142      	cbz	r2, 8007f3e <__ascii_mbtowc+0x1a>
 8007f2c:	b14b      	cbz	r3, 8007f42 <__ascii_mbtowc+0x1e>
 8007f2e:	7813      	ldrb	r3, [r2, #0]
 8007f30:	600b      	str	r3, [r1, #0]
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	1e10      	subs	r0, r2, #0
 8007f36:	bf18      	it	ne
 8007f38:	2001      	movne	r0, #1
 8007f3a:	b002      	add	sp, #8
 8007f3c:	4770      	bx	lr
 8007f3e:	4610      	mov	r0, r2
 8007f40:	e7fb      	b.n	8007f3a <__ascii_mbtowc+0x16>
 8007f42:	f06f 0001 	mvn.w	r0, #1
 8007f46:	e7f8      	b.n	8007f3a <__ascii_mbtowc+0x16>

08007f48 <__malloc_lock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__malloc_lock+0x8>)
 8007f4a:	f7fe bf5e 	b.w	8006e0a <__retarget_lock_acquire_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000370 	.word	0x20000370

08007f54 <__malloc_unlock>:
 8007f54:	4801      	ldr	r0, [pc, #4]	; (8007f5c <__malloc_unlock+0x8>)
 8007f56:	f7fe bf59 	b.w	8006e0c <__retarget_lock_release_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	20000370 	.word	0x20000370

08007f60 <_read_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_read_r+0x20>)
 8007f64:	4604      	mov	r4, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 fa5c 	bl	800142c <_read>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_read_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_read_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	2000037c 	.word	0x2000037c

08007f84 <__ascii_wctomb>:
 8007f84:	b149      	cbz	r1, 8007f9a <__ascii_wctomb+0x16>
 8007f86:	2aff      	cmp	r2, #255	; 0xff
 8007f88:	bf85      	ittet	hi
 8007f8a:	238a      	movhi	r3, #138	; 0x8a
 8007f8c:	6003      	strhi	r3, [r0, #0]
 8007f8e:	700a      	strbls	r2, [r1, #0]
 8007f90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f94:	bf98      	it	ls
 8007f96:	2001      	movls	r0, #1
 8007f98:	4770      	bx	lr
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	4770      	bx	lr

08007f9e <abort>:
 8007f9e:	b508      	push	{r3, lr}
 8007fa0:	2006      	movs	r0, #6
 8007fa2:	f000 f84d 	bl	8008040 <raise>
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	f7f9 fa36 	bl	8001418 <_exit>

08007fac <_fstat_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d07      	ldr	r5, [pc, #28]	; (8007fcc <_fstat_r+0x20>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	f7f9 fa7c 	bl	80014b6 <_fstat>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	d102      	bne.n	8007fc8 <_fstat_r+0x1c>
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	b103      	cbz	r3, 8007fc8 <_fstat_r+0x1c>
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	bf00      	nop
 8007fcc:	2000037c 	.word	0x2000037c

08007fd0 <_isatty_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d06      	ldr	r5, [pc, #24]	; (8007fec <_isatty_r+0x1c>)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	f7f9 fa7b 	bl	80014d6 <_isatty>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_isatty_r+0x1a>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_isatty_r+0x1a>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	2000037c 	.word	0x2000037c

08007ff0 <_raise_r>:
 8007ff0:	291f      	cmp	r1, #31
 8007ff2:	b538      	push	{r3, r4, r5, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	d904      	bls.n	8008004 <_raise_r+0x14>
 8007ffa:	2316      	movs	r3, #22
 8007ffc:	6003      	str	r3, [r0, #0]
 8007ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008006:	b112      	cbz	r2, 800800e <_raise_r+0x1e>
 8008008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800800c:	b94b      	cbnz	r3, 8008022 <_raise_r+0x32>
 800800e:	4620      	mov	r0, r4
 8008010:	f000 f830 	bl	8008074 <_getpid_r>
 8008014:	462a      	mov	r2, r5
 8008016:	4601      	mov	r1, r0
 8008018:	4620      	mov	r0, r4
 800801a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800801e:	f000 b817 	b.w	8008050 <_kill_r>
 8008022:	2b01      	cmp	r3, #1
 8008024:	d00a      	beq.n	800803c <_raise_r+0x4c>
 8008026:	1c59      	adds	r1, r3, #1
 8008028:	d103      	bne.n	8008032 <_raise_r+0x42>
 800802a:	2316      	movs	r3, #22
 800802c:	6003      	str	r3, [r0, #0]
 800802e:	2001      	movs	r0, #1
 8008030:	e7e7      	b.n	8008002 <_raise_r+0x12>
 8008032:	2400      	movs	r4, #0
 8008034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008038:	4628      	mov	r0, r5
 800803a:	4798      	blx	r3
 800803c:	2000      	movs	r0, #0
 800803e:	e7e0      	b.n	8008002 <_raise_r+0x12>

08008040 <raise>:
 8008040:	4b02      	ldr	r3, [pc, #8]	; (800804c <raise+0xc>)
 8008042:	4601      	mov	r1, r0
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	f7ff bfd3 	b.w	8007ff0 <_raise_r>
 800804a:	bf00      	nop
 800804c:	2000000c 	.word	0x2000000c

08008050 <_kill_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d07      	ldr	r5, [pc, #28]	; (8008070 <_kill_r+0x20>)
 8008054:	2300      	movs	r3, #0
 8008056:	4604      	mov	r4, r0
 8008058:	4608      	mov	r0, r1
 800805a:	4611      	mov	r1, r2
 800805c:	602b      	str	r3, [r5, #0]
 800805e:	f7f9 f9cb 	bl	80013f8 <_kill>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	d102      	bne.n	800806c <_kill_r+0x1c>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	b103      	cbz	r3, 800806c <_kill_r+0x1c>
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	bf00      	nop
 8008070:	2000037c 	.word	0x2000037c

08008074 <_getpid_r>:
 8008074:	f7f9 b9b8 	b.w	80013e8 <_getpid>

08008078 <_init>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	bf00      	nop
 800807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807e:	bc08      	pop	{r3}
 8008080:	469e      	mov	lr, r3
 8008082:	4770      	bx	lr

08008084 <_fini>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr
