
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000833c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080084e0  080084e0  000184e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800893c  0800893c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800893c  0800893c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800893c  0800893c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00000198  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaa8  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca7  00000000  00000000  0002ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00030980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c18  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216c3  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd39  00000000  00000000  0005392b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb87e  00000000  00000000  00063664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012eee2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047ec  00000000  00000000  0012ef34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084c4 	.word	0x080084c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	080084c4 	.word	0x080084c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f004 f8d3 	bl	8004d80 <HAL_UART_Transmit>

  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200002b0 	.word	0x200002b0

08000be8 <printDebugMessage>:

void printDebugMessage(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

	memset(message, 0, sizeof message);
 8000bec:	2232      	movs	r2, #50	; 0x32
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <printDebugMessage+0x30>)
 8000bf2:	f004 fd63 	bl	80056bc <memset>
	sprintf((char *)message, "%.1f cm.\n", fSonicRead_Value);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <printDebugMessage+0x34>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fcac 	bl	8000558 <__aeabi_f2d>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4906      	ldr	r1, [pc, #24]	; (8000c20 <printDebugMessage+0x38>)
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <printDebugMessage+0x30>)
 8000c08:	f005 f9e2 	bl	8005fd0 <siprintf>
	printf((char *)message);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <printDebugMessage+0x30>)
 8000c0e:	f005 f9c7 	bl	8005fa0 <iprintf>

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000344 	.word	0x20000344
 8000c1c:	20000340 	.word	0x20000340
 8000c20:	080084e0 	.word	0x080084e0

08000c24 <readSonicSensor>:

void readSonicSensor(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	ulSonicRead_Start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	480f      	ldr	r0, [pc, #60]	; (8000c68 <readSonicSensor+0x44>)
 8000c2c:	f003 fa02 	bl	8004034 <HAL_TIM_ReadCapturedValue>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <readSonicSensor+0x48>)
 8000c34:	6013      	str	r3, [r2, #0]
	ulSonicRead_Stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8000c36:	2104      	movs	r1, #4
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <readSonicSensor+0x44>)
 8000c3a:	f003 f9fb 	bl	8004034 <HAL_TIM_ReadCapturedValue>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <readSonicSensor+0x4c>)
 8000c42:	6013      	str	r3, [r2, #0]
	fSonicRead_Value = (float)((ulSonicRead_Stop - ulSonicRead_Start))/ 58.0;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <readSonicSensor+0x4c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <readSonicSensor+0x48>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c56:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000c74 <readSonicSensor+0x50>
 8000c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <readSonicSensor+0x54>)
 8000c60:	edc3 7a00 	vstr	s15, [r3]

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000218 	.word	0x20000218
 8000c6c:	20000338 	.word	0x20000338
 8000c70:	2000033c 	.word	0x2000033c
 8000c74:	42680000 	.word	0x42680000
 8000c78:	20000340 	.word	0x20000340

08000c7c <vSignalDistanceValue>:

void vSignalDistanceValue(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0


	unsigned long int array_size = sizeof(LED_array) / sizeof(LED_array[0]);
 8000c82:	2308      	movs	r3, #8
 8000c84:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < array_size; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e03b      	b.n	8000d04 <vSignalDistanceValue+0x88>
		if (fSonicRead_Value < valueArray[i]){
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <vSignalDistanceValue+0x9c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	ed93 7a00 	vldr	s14, [r3]
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <vSignalDistanceValue+0xa0>)
 8000c9a:	edd3 7a00 	vldr	s15, [r3]
 8000c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	dd1d      	ble.n	8000ce4 <vSignalDistanceValue+0x68>
			  HAL_GPIO_WritePin(LED_array[i].port, LED_array[i].pin, GPIO_PIN_SET);
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <vSignalDistanceValue+0xa4>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <vSignalDistanceValue+0xa4>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	889b      	ldrh	r3, [r3, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f000 ff67 	bl	8001b90 <HAL_GPIO_WritePin>
			  if (i ==  array_size - 1) {
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d105      	bne.n	8000cd8 <vSignalDistanceValue+0x5c>
				HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4814      	ldr	r0, [pc, #80]	; (8000d24 <vSignalDistanceValue+0xa8>)
 8000cd2:	f000 ff5d 	bl	8001b90 <HAL_GPIO_WritePin>
 8000cd6:	e012      	b.n	8000cfe <vSignalDistanceValue+0x82>
			} else {
				HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <vSignalDistanceValue+0xa8>)
 8000cde:	f000 ff57 	bl	8001b90 <HAL_GPIO_WritePin>
 8000ce2:	e00c      	b.n	8000cfe <vSignalDistanceValue+0x82>
			}
		}
		else {
			HAL_GPIO_WritePin(LED_array[i].port, LED_array[i].pin, GPIO_PIN_RESET);
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <vSignalDistanceValue+0xa4>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <vSignalDistanceValue+0xa4>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	889b      	ldrh	r3, [r3, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f000 ff49 	bl	8001b90 <HAL_GPIO_WritePin>
	for (int i = 0; i < array_size; i++){
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8bf      	bhi.n	8000c8c <vSignalDistanceValue+0x10>
		}
	}

}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000340 	.word	0x20000340
 8000d20:	080084ec 	.word	0x080084ec
 8000d24:	48000400 	.word	0x48000400

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f000 fc5a 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f834 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d34:	f000 f9a2 	bl	800107c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d38:	f000 f970 	bl	800101c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d3c:	f000 f892 	bl	8000e64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d40:	f000 f91e 	bl	8000f80 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000d44:	2100      	movs	r1, #0
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <main+0x68>)
 8000d48:	f002 fdfe 	bl	8003948 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <main+0x68>)
 8000d50:	f002 fdfa 	bl	8003948 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d54:	2108      	movs	r1, #8
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <main+0x68>)
 8000d58:	f002 fc92 	bl	8003680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <main+0x6c>)
 8000d60:	f002 fc8e 	bl	8003680 <HAL_TIM_PWM_Start>
  //  tick_start = HAL_GetTick();
  while (1)
  {

	  if (HAL_GetTick() - tick_start > 500){
 8000d64:	f000 fc98 	bl	8001698 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <main+0x70>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d74:	d9f6      	bls.n	8000d64 <main+0x3c>

		  readSonicSensor();
 8000d76:	f7ff ff55 	bl	8000c24 <readSonicSensor>
		  vSignalDistanceValue();
 8000d7a:	f7ff ff7f 	bl	8000c7c <vSignalDistanceValue>
		  printDebugMessage();
 8000d7e:	f7ff ff33 	bl	8000be8 <printDebugMessage>
		  tick_start = HAL_GetTick();
 8000d82:	f000 fc89 	bl	8001698 <HAL_GetTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <main+0x70>)
 8000d8a:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - tick_start > 500){
 8000d8c:	e7ea      	b.n	8000d64 <main+0x3c>
 8000d8e:	bf00      	nop
 8000d90:	20000218 	.word	0x20000218
 8000d94:	20000264 	.word	0x20000264
 8000d98:	20000378 	.word	0x20000378

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0a6      	sub	sp, #152	; 0x98
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000da6:	2228      	movs	r2, #40	; 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 fc86 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2258      	movs	r2, #88	; 0x58
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fc78 	bl	80056bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fee0 	bl	8001bc0 <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e06:	f000 f9bf 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e24:	2102      	movs	r1, #2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 ff1e 	bl	8002c68 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e32:	f000 f9a9 	bl	8001188 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <SystemClock_Config+0xc4>)
 8000e38:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f943 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000e54:	f000 f998 	bl	8001188 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3798      	adds	r7, #152	; 0x98
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	00300002 	.word	0x00300002

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000ea0:	2248      	movs	r2, #72	; 0x48
 8000ea2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000eac:	4a33      	ldr	r2, [pc, #204]	; (8000f7c <MX_TIM2_Init+0x118>)
 8000eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ebc:	482e      	ldr	r0, [pc, #184]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000ebe:	f002 fceb 	bl	8003898 <HAL_TIM_IC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ec8:	f000 f95e 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ecc:	482a      	ldr	r0, [pc, #168]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000ece:	f002 fb76 	bl	80035be <HAL_TIM_PWM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ed8:	f000 f956 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4823      	ldr	r0, [pc, #140]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000eec:	f003 fe6e 	bl	8004bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ef6:	f000 f947 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000f14:	f002 fe14 	bl	8003b40 <HAL_TIM_IC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000f1e:	f000 f933 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4811      	ldr	r0, [pc, #68]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000f34:	f002 fe04 	bl	8003b40 <HAL_TIM_IC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000f3e:	f000 f923 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000f46:	230a      	movs	r3, #10
 8000f48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	2208      	movs	r2, #8
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000f5a:	f002 fe8d 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000f64:	f000 f910 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <MX_TIM2_Init+0x114>)
 8000f6a:	f000 f997 	bl	800129c <HAL_TIM_MspPostInit>

}
 8000f6e:	bf00      	nop
 8000f70:	3738      	adds	r7, #56	; 0x38
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000218 	.word	0x20000218
 8000f7c:	000f4240 	.word	0x000f4240

08000f80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <MX_TIM3_Init+0x98>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1107-1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fa6:	f240 4252 	movw	r2, #1106	; 0x452
 8000faa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fb4:	22fe      	movs	r2, #254	; 0xfe
 8000fb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fc6:	f002 faa3 	bl	8003510 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fd0:	f000 f8da 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_TIM3_Init+0x94>)
 8000fe2:	f002 ff5d 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fec:	f000 f8cc 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_TIM3_Init+0x94>)
 8000ffe:	f003 fde5 	bl	8004bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001008:	f000 f8be 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000264 	.word	0x20000264
 8001018:	40000400 	.word	0x40000400

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <MX_USART2_UART_Init+0x5c>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001060:	f003 fe40 	bl	8004ce4 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800106a:	f000 f88d 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002b0 	.word	0x200002b0
 8001078:	40004400 	.word	0x40004400

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <MX_GPIO_Init+0x100>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a39      	ldr	r2, [pc, #228]	; (800117c <MX_GPIO_Init+0x100>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <MX_GPIO_Init+0x100>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <MX_GPIO_Init+0x100>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a33      	ldr	r2, [pc, #204]	; (800117c <MX_GPIO_Init+0x100>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <MX_GPIO_Init+0x100>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <MX_GPIO_Init+0x100>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <MX_GPIO_Init+0x100>)
 80010c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_GPIO_Init+0x100>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|BUZZER_digital_Pin
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f000 fd54 	bl	8001b90 <HAL_GPIO_WritePin>
                          |RED_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_7_GPIO_Port, RED_7_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	4824      	ldr	r0, [pc, #144]	; (8001180 <MX_GPIO_Init+0x104>)
 80010ee:	f000 fd4f 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_pin_Pin|YELLOW_6_Pin|BLUE_1_Pin|BLUE_2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7154 	mov.w	r1, #848	; 0x350
 80010f8:	4822      	ldr	r0, [pc, #136]	; (8001184 <MX_GPIO_Init+0x108>)
 80010fa:	f000 fd49 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SERVO_analog_Pin */
  GPIO_InitStruct.Pin = SERVO_analog_Pin;
 80010fe:	2310      	movs	r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SERVO_analog_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f000 fbb2 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_3_Pin GREEN_4_Pin YELLOW_5_Pin BUZZER_digital_Pin
                           RED_8_Pin */
  GPIO_InitStruct.Pin = GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|BUZZER_digital_Pin
 8001118:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800111c:	60fb      	str	r3, [r7, #12]
                          |RED_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f000 fba2 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_7_Pin */
  GPIO_InitStruct.Pin = RED_7_Pin;
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_7_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_GPIO_Init+0x104>)
 8001150:	f000 fb94 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_pin_Pin YELLOW_6_Pin BLUE_1_Pin BLUE_2_Pin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin|YELLOW_6_Pin|BLUE_1_Pin|BLUE_2_Pin;
 8001154:	f44f 7354 	mov.w	r3, #848	; 0x350
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_GPIO_Init+0x108>)
 800116e:	f000 fb85 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	48000800 	.word	0x48000800
 8001184:	48000400 	.word	0x48000400

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x44>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x44>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x44>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fc:	d128      	bne.n	8001250 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_TIM_IC_MspInit+0x7c>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <HAL_TIM_IC_MspInit+0x7c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_TIM_IC_MspInit+0x7c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_TIM_IC_MspInit+0x7c>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_TIM_IC_MspInit+0x7c>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_TIM_IC_MspInit+0x7c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800123e:	2301      	movs	r3, #1
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f000 fb16 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_TIM_Base_MspInit+0x38>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10b      	bne.n	8001286 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_TIM_Base_MspInit+0x3c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_TIM_Base_MspInit+0x3c>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_TIM_Base_MspInit+0x3c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40000400 	.word	0x40000400
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012bc:	d11c      	bne.n	80012f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_TIM_MspPostInit+0x64>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <HAL_TIM_MspPostInit+0x64>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_TIM_MspPostInit+0x64>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <HAL_TIM_MspPostInit+0x68>)
 80012f4:	f000 fac2 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_UART_MspInit+0x7c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d128      	bne.n	800137c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_UART_MspInit+0x80>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a16      	ldr	r2, [pc, #88]	; (8001388 <HAL_UART_MspInit+0x80>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_UART_MspInit+0x80>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_UART_MspInit+0x80>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_UART_MspInit+0x80>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_UART_MspInit+0x80>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800135a:	230c      	movs	r3, #12
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136a:	2307      	movs	r3, #7
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f000 fa80 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40004400 	.word	0x40004400
 8001388:	40021000 	.word	0x40021000

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f94a 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_kill>:

int _kill(int pid, int sig)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013fa:	f004 f935 	bl	8005668 <__errno>
 80013fe:	4603      	mov	r3, r0
 8001400:	2216      	movs	r2, #22
 8001402:	601a      	str	r2, [r3, #0]
  return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_exit>:

void _exit (int status)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ffe7 	bl	80013f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001422:	e7fe      	b.n	8001422 <_exit+0x12>

08001424 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00a      	b.n	800144c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001436:	f3af 8000 	nop.w
 800143a:	4601      	mov	r1, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf0      	blt.n	8001436 <_read+0x12>
  }

  return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e009      	b.n	8001484 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb9d 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbf1      	blt.n	8001470 <_write+0x12>
  }
  return len;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_close>:

int _close(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014be:	605a      	str	r2, [r3, #4]
  return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_isatty>:

int _isatty(int file)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f004 f89a 	bl	8005668 <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20010000 	.word	0x20010000
 8001560:	00000400 	.word	0x00000400
 8001564:	2000037c 	.word	0x2000037c
 8001568:	20000398 	.word	0x20000398

0800156c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff ffea 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f004 f859 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c2:	f7ff fbb1 	bl	8000d28 <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80015d4:	08008944 	.word	0x08008944
  ldr r2, =_sbss
 80015d8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80015dc:	20000394 	.word	0x20000394

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x28>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x28>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f90d 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fdc8 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f917 	bl	8001862 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f8ed 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000020 	.word	0x20000020
 8001668:	20000028 	.word	0x20000028
 800166c:	20000024 	.word	0x20000024

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000028 	.word	0x20000028
 8001694:	20000380 	.word	0x20000380

08001698 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;  
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000380 	.word	0x20000380

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff47 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff5c 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffb0 	bl	80017d0 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e160      	b.n	8001b4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8152 	beq.w	8001b48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x40>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 0201 	and.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80ac 	beq.w	8001b48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b5e      	ldr	r3, [pc, #376]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a5d      	ldr	r2, [pc, #372]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a08:	4a59      	ldr	r2, [pc, #356]	; (8001b70 <HAL_GPIO_Init+0x2f4>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a32:	d025      	beq.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_GPIO_Init+0x2f8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d01f      	beq.n	8001a7c <HAL_GPIO_Init+0x200>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4e      	ldr	r2, [pc, #312]	; (8001b78 <HAL_GPIO_Init+0x2fc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d019      	beq.n	8001a78 <HAL_GPIO_Init+0x1fc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x1f8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1f4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4b      	ldr	r2, [pc, #300]	; (8001b84 <HAL_GPIO_Init+0x308>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_GPIO_Init+0x30c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1ec>
 8001a64:	2306      	movs	r3, #6
 8001a66:	e00c      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a68:	2307      	movs	r3, #7
 8001a6a:	e00a      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	e008      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a70:	2304      	movs	r3, #4
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x206>
 8001a80:	2300      	movs	r3, #0
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a92:	4937      	ldr	r1, [pc, #220]	; (8001b70 <HAL_GPIO_Init+0x2f4>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ac4:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aee:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_GPIO_Init+0x310>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f47f ae97 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	48001000 	.word	0x48001000
 8001b84:	48001400 	.word	0x48001400
 8001b88:	48001800 	.word	0x48001800
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f001 b83a 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 816f 	beq.w	8001eda <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bfc:	4bb5      	ldr	r3, [pc, #724]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c08:	4bb2      	ldr	r3, [pc, #712]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d15c      	bne.n	8001cce <HAL_RCC_OscConfig+0x10e>
 8001c14:	4baf      	ldr	r3, [pc, #700]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d155      	bne.n	8001cce <HAL_RCC_OscConfig+0x10e>
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0x94>
 8001c4e:	4ba1      	ldr	r3, [pc, #644]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	e015      	b.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c70:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c7c:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c84:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c88:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c8c:	fa92 f2a2 	rbit	r2, r2
 8001c90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c98:	fab2 f282 	clz	r2, r2
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f002 021f 	and.w	r2, r2, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8111 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x318>
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8108 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f000 bfc6 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x12e>
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e036      	b.n	8001d5c <HAL_RCC_OscConfig+0x19c>
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x158>
 8001cfe:	4b75      	ldr	r3, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a74      	ldr	r2, [pc, #464]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e021      	b.n	8001d5c <HAL_RCC_OscConfig+0x19c>
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x184>
 8001d2a:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x19c>
 8001d44:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a62      	ldr	r2, [pc, #392]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a5f      	ldr	r2, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d059      	beq.n	8001e20 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc94 	bl	8001698 <HAL_GetTick>
 8001d70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff fc8f 	bl	8001698 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d902      	bls.n	8001d8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	f000 bf67 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
 8001d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001da0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x1fe>
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x22a>
 8001dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001df2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001dfe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ab      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b6>
 8001e1e:	e05c      	b.n	8001eda <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc3a 	bl	8001698 <HAL_GetTick>
 8001e24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fc35 	bl	8001698 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d902      	bls.n	8001e40 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f000 bf0d 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
 8001e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e44:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001e54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2b2>
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x2de>
 8001e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x314>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001ea6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001eb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ab      	bne.n	8001e2a <HAL_RCC_OscConfig+0x26a>
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_OscConfig+0x31a>
 8001ed4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 817f 	beq.w	80021ee <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef0:	4ba7      	ldr	r3, [pc, #668]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001efc:	4ba4      	ldr	r3, [pc, #656]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d173      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x430>
 8001f08:	4ba1      	ldr	r3, [pc, #644]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f14:	d16c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x430>
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f28:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x386>
 8001f40:	4b93      	ldr	r3, [pc, #588]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e013      	b.n	8001f6e <HAL_RCC_OscConfig+0x3ae>
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f6a:	4b89      	ldr	r3, [pc, #548]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f74:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f78:	fa92 f2a2 	rbit	r2, r2
 8001f7c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f80:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f84:	fab2 f282 	clz	r2, r2
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f002 021f 	and.w	r2, r2, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3f6>
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d002      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f000 be52 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b76      	ldr	r3, [pc, #472]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	21f8      	movs	r1, #248	; 0xf8
 8001fcc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001fd4:	fa91 f1a1 	rbit	r1, r1
 8001fd8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001fdc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fe0:	fab1 f181 	clz	r1, r1
 8001fe4:	b2c9      	uxtb	r1, r1
 8001fe6:	408b      	lsls	r3, r1
 8001fe8:	4969      	ldr	r1, [pc, #420]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e0fe      	b.n	80021ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8088 	beq.w	8002112 <HAL_RCC_OscConfig+0x552>
 8002002:	2301      	movs	r3, #1
 8002004:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002014:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002022:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	461a      	mov	r2, r3
 800202a:	2301      	movs	r3, #1
 800202c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fb33 	bl	8001698 <HAL_GetTick>
 8002032:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fb2e 	bl	8001698 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d902      	bls.n	800204e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	f000 be06 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
 800204e:	2302      	movs	r3, #2
 8002050:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002060:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_RCC_OscConfig+0x4be>
 8002078:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e013      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e6>
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002096:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2202      	movs	r2, #2
 80020a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80020ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80020b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f042 0220 	orr.w	r2, r2, #32
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f002 021f 	and.w	r2, r2, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0af      	beq.n	8002038 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	21f8      	movs	r1, #248	; 0xf8
 80020ee:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80020f6:	fa91 f1a1 	rbit	r1, r1
 80020fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80020fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002102:	fab1 f181 	clz	r1, r1
 8002106:	b2c9      	uxtb	r1, r1
 8002108:	408b      	lsls	r3, r1
 800210a:	4921      	ldr	r1, [pc, #132]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e06d      	b.n	80021ee <HAL_RCC_OscConfig+0x62e>
 8002112:	2301      	movs	r3, #1
 8002114:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002124:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002132:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	461a      	mov	r2, r3
 800213a:	2300      	movs	r3, #0
 800213c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff faab 	bl	8001698 <HAL_GetTick>
 8002142:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff faa6 	bl	8001698 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d902      	bls.n	800215e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	f000 bd7e 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002170:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x5d4>
 8002188:	4b01      	ldr	r3, [pc, #4]	; (8002190 <HAL_RCC_OscConfig+0x5d0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	e016      	b.n	80021bc <HAL_RCC_OscConfig+0x5fc>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021b8:	4bbf      	ldr	r3, [pc, #764]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2202      	movs	r2, #2
 80021be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80021c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80021ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f042 0220 	orr.w	r2, r2, #32
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f002 021f 	and.w	r2, r2, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ac      	bne.n	8002148 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8113 	beq.w	800242a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d07c      	beq.n	800230e <HAL_RCC_OscConfig+0x74e>
 8002214:	2301      	movs	r3, #1
 8002216:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002226:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	4ba2      	ldr	r3, [pc, #648]	; (80024bc <HAL_RCC_OscConfig+0x8fc>)
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	461a      	mov	r2, r3
 800223a:	2301      	movs	r3, #1
 800223c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff fa2b 	bl	8001698 <HAL_GetTick>
 8002242:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002248:	f7ff fa26 	bl	8001698 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d902      	bls.n	800225e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	f000 bcfe 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002270:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 80022c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022ca:	2102      	movs	r1, #2
 80022cc:	6019      	str	r1, [r3, #0]
 80022ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f1a3 	rbit	r1, r3
 80022dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022e4:	6019      	str	r1, [r3, #0]
  return result;
 80022e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d09d      	beq.n	8002248 <HAL_RCC_OscConfig+0x688>
 800230c:	e08d      	b.n	800242a <HAL_RCC_OscConfig+0x86a>
 800230e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002312:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002330:	601a      	str	r2, [r3, #0]
  return result;
 8002332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002336:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800233a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x8fc>)
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	461a      	mov	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff f9a2 	bl	8001698 <HAL_GetTick>
 8002354:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff f99d 	bl	8001698 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d902      	bls.n	8002370 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	f000 bc75 	b.w	8002c5a <HAL_RCC_OscConfig+0x109a>
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002378:	2202      	movs	r2, #2
 800237a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002380:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800239c:	2202      	movs	r2, #2
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 80023de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023e8:	2102      	movs	r1, #2
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f1a3 	rbit	r1, r3
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002402:	6019      	str	r1, [r3, #0]
  return result;
 8002404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002408:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d197      	bne.n	800235a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 81a5 	beq.w	800278a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_RCC_OscConfig+0x8f8>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002478:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_RCC_OscConfig+0x900>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d121      	bne.n	80024d0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_OscConfig+0x900>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_RCC_OscConfig+0x900>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002498:	f7ff f8fe 	bl	8001698 <HAL_GetTick>
 800249c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e010      	b.n	80024c4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7ff f8f9 	bl	8001698 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d908      	bls.n	80024c4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e3d1      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	10908120 	.word	0x10908120
 80024c0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <HAL_RCC_OscConfig+0xb3c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0e8      	beq.n	80024a2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x92e>
 80024e0:	4b87      	ldr	r3, [pc, #540]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a86      	ldr	r2, [pc, #536]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	e035      	b.n	800255a <HAL_RCC_OscConfig+0x99a>
 80024ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x958>
 80024fe:	4b80      	ldr	r3, [pc, #512]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a7f      	ldr	r2, [pc, #508]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	e020      	b.n	800255a <HAL_RCC_OscConfig+0x99a>
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x982>
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a74      	ldr	r2, [pc, #464]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	4b72      	ldr	r3, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a71      	ldr	r2, [pc, #452]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x99a>
 8002542:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a6b      	ldr	r2, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8081 	beq.w	800266e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff f894 	bl	8001698 <HAL_GetTick>
 8002570:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff f88f 	bl	8001698 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e365      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
 800258e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002592:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002596:	2202      	movs	r2, #2
 8002598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025ba:	2202      	movs	r2, #2
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025d4:	601a      	str	r2, [r3, #0]
  return result;
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_OscConfig+0xa3a>
 80025f4:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	e013      	b.n	8002622 <HAL_RCC_OscConfig+0xa62>
 80025fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002626:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800262a:	2102      	movs	r1, #2
 800262c:	6011      	str	r1, [r2, #0]
 800262e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002632:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	fa92 f1a2 	rbit	r1, r2
 800263c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002640:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002644:	6011      	str	r1, [r2, #0]
  return result;
 8002646:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800264a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f002 021f 	and.w	r2, r2, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d084      	beq.n	8002576 <HAL_RCC_OscConfig+0x9b6>
 800266c:	e083      	b.n	8002776 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff f813 	bl	8001698 <HAL_GetTick>
 8002672:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7ff f80e 	bl	8001698 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e2e4      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
 8002690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002694:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026bc:	2202      	movs	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f2a3 	rbit	r2, r3
 80026ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026d6:	601a      	str	r2, [r3, #0]
  return result;
 80026d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026dc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0xb44>
 80026f6:	4b02      	ldr	r3, [pc, #8]	; (8002700 <HAL_RCC_OscConfig+0xb40>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	e017      	b.n	800272c <HAL_RCC_OscConfig+0xb6c>
 80026fc:	40007000 	.word	0x40007000
 8002700:	40021000 	.word	0x40021000
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800270c:	2202      	movs	r2, #2
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002722:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4bb3      	ldr	r3, [pc, #716]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002730:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002734:	2102      	movs	r1, #2
 8002736:	6011      	str	r1, [r2, #0]
 8002738:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800273c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	fa92 f1a2 	rbit	r1, r2
 8002746:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800274a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800274e:	6011      	str	r1, [r2, #0]
  return result;
 8002750:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002754:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d180      	bne.n	8002678 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002776:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b9e      	ldr	r3, [pc, #632]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a9d      	ldr	r2, [pc, #628]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 825e 	beq.w	8002c58 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279c:	4b96      	ldr	r3, [pc, #600]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f000 821f 	beq.w	8002be8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 8170 	bne.w	8002a9c <HAL_RCC_OscConfig+0xedc>
 80027bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027e0:	601a      	str	r2, [r3, #0]
  return result;
 80027e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027ea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	461a      	mov	r2, r3
 80027fe:	2300      	movs	r3, #0
 8002800:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe ff49 	bl	8001698 <HAL_GetTick>
 8002806:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	e009      	b.n	8002820 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe ff44 	bl	8001698 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e21c      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
 8002820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002824:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002832:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002840:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002844:	601a      	str	r2, [r3, #0]
  return result;
 8002846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800284a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800284e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0xcaa>
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e027      	b.n	80028ba <HAL_RCC_OscConfig+0xcfa>
 800286a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002894:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028c6:	6011      	str	r1, [r2, #0]
 80028c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	fa92 f1a2 	rbit	r1, r2
 80028d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028da:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80028de:	6011      	str	r1, [r2, #0]
  return result;
 80028e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028e4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	fab2 f282 	clz	r2, r2
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	f042 0220 	orr.w	r2, r2, #32
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f002 021f 	and.w	r2, r2, #31
 80028fa:	2101      	movs	r1, #1
 80028fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d182      	bne.n	800280c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002906:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002912:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 800291c:	4313      	orrs	r3, r2
 800291e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002920:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a19      	ldr	r1, [r3, #32]
 8002934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002938:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	430b      	orrs	r3, r1
 8002942:	492d      	ldr	r1, [pc, #180]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002968:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800296c:	601a      	str	r2, [r3, #0]
  return result;
 800296e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002972:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002976:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fe83 	bl	8001698 <HAL_GetTick>
 8002992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002996:	e009      	b.n	80029ac <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fe7e 	bl	8001698 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e156      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
 80029ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029be:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029d0:	601a      	str	r2, [r3, #0]
  return result;
 80029d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0xe3c>
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <HAL_RCC_OscConfig+0xe38>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	e02a      	b.n	8002a4c <HAL_RCC_OscConfig+0xe8c>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a34:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a42:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x10a4>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a58:	6011      	str	r1, [r2, #0]
 8002a5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fa92 f1a2 	rbit	r1, r2
 8002a68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a6c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a70:	6011      	str	r1, [r2, #0]
  return result;
 8002a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a76:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f43f af7f 	beq.w	8002998 <HAL_RCC_OscConfig+0xdd8>
 8002a9a:	e0dd      	b.n	8002c58 <HAL_RCC_OscConfig+0x1098>
 8002a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002abc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ac0:	601a      	str	r2, [r3, #0]
  return result;
 8002ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002aca:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	461a      	mov	r2, r3
 8002ade:	2300      	movs	r3, #0
 8002ae0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fdd9 	bl	8001698 <HAL_GetTick>
 8002ae6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aea:	e009      	b.n	8002b00 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fdd4 	bl	8001698 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0ac      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
 8002b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b24:	601a      	str	r2, [r3, #0]
  return result;
 8002b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d102      	bne.n	8002b4a <HAL_RCC_OscConfig+0xf8a>
 8002b44:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_OscConfig+0x10a4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	e027      	b.n	8002b9a <HAL_RCC_OscConfig+0xfda>
 8002b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b74:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	fa93 f2a3 	rbit	r2, r3
 8002b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b90:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_OscConfig+0x10a4>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b9e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ba2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba6:	6011      	str	r1, [r2, #0]
 8002ba8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	fa92 f1a2 	rbit	r1, r2
 8002bb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bba:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002bbe:	6011      	str	r1, [r2, #0]
  return result;
 8002bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bc4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d182      	bne.n	8002aec <HAL_RCC_OscConfig+0xf2c>
 8002be6:	e037      	b.n	8002c58 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e02e      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x10a4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_RCC_OscConfig+0x10a4>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c10:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d117      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002c28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09e      	sub	sp, #120	; 0x78
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e162      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b90      	ldr	r3, [pc, #576]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b8d      	ldr	r3, [pc, #564]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	498b      	ldr	r1, [pc, #556]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e14a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	497f      	ldr	r1, [pc, #508]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80dc 	beq.w	8002e94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d13c      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xf6>
 8002ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xa6>
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	e00f      	b.n	8002d2e <HAL_RCC_ClockConfig+0xc6>
 8002d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d20:	663b      	str	r3, [r7, #96]	; 0x60
 8002d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d32:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d36:	fa92 f2a2 	rbit	r2, r2
 8002d3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f002 021f 	and.w	r2, r2, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d17b      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0f3      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d13c      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x178>
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x128>
 8002d8a:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_ClockConfig+0x148>
 8002d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
 8002da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d13a      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b2      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
 8002de0:	2302      	movs	r3, #2
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x1a0>
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e00d      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1bc>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	2302      	movs	r3, #2
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2202      	movs	r2, #2
 8002e26:	61ba      	str	r2, [r7, #24]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	617a      	str	r2, [r7, #20]
  return result;
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f042 0220 	orr.w	r2, r2, #32
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f002 021f 	and.w	r2, r2, #31
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e079      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	491a      	ldr	r1, [pc, #104]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e64:	f7fe fc18 	bl	8001698 <HAL_GetTick>
 8002e68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fe fc14 	bl	8001698 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e061      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d214      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	4906      	ldr	r1, [pc, #24]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e040      	b.n	8002f46 <HAL_RCC_ClockConfig+0x2de>
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_ClockConfig+0x2e8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	491a      	ldr	r1, [pc, #104]	; (8002f50 <HAL_RCC_ClockConfig+0x2e8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_RCC_ClockConfig+0x2e8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4912      	ldr	r1, [pc, #72]	; (8002f50 <HAL_RCC_ClockConfig+0x2e8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f0a:	f000 f829 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4601      	mov	r1, r0
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCC_ClockConfig+0x2e8>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f18:	22f0      	movs	r2, #240	; 0xf0
 8002f1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	fa92 f2a2 	rbit	r2, r2
 8002f22:	60fa      	str	r2, [r7, #12]
  return result;
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	fab2 f282 	clz	r2, r2
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	40d3      	lsrs	r3, r2
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x2ec>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	fa21 f303 	lsr.w	r3, r1, r3
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <HAL_RCC_ClockConfig+0x2f0>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCC_ClockConfig+0x2f4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fb66 	bl	8001610 <HAL_InitTick>
  
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3778      	adds	r7, #120	; 0x78
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	0800852c 	.word	0x0800852c
 8002f58:	20000020 	.word	0x20000020
 8002f5c:	20000024 	.word	0x20000024

08002f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b08b      	sub	sp, #44	; 0x2c
 8002f64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d002      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x30>
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x36>
 8002f8e:	e03f      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f92:	623b      	str	r3, [r7, #32]
      break;
 8002f94:	e03f      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fa0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	fa92 f2a2 	rbit	r2, r2
 8002fa8:	607a      	str	r2, [r7, #4]
  return result;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	40d3      	lsrs	r3, r2
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fba:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	fa92 f2a2 	rbit	r2, r2
 8002fcc:	60fa      	str	r2, [r7, #12]
  return result;
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	40d3      	lsrs	r3, r2
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fda:	5cd3      	ldrb	r3, [r2, r3]
 8002fdc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e007      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	623b      	str	r3, [r7, #32]
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003012:	623b      	str	r3, [r7, #32]
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6a3b      	ldr	r3, [r7, #32]
}
 8003018:	4618      	mov	r0, r3
 800301a:	372c      	adds	r7, #44	; 0x2c
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40021000 	.word	0x40021000
 8003028:	007a1200 	.word	0x007a1200
 800302c:	08008544 	.word	0x08008544
 8003030:	08008554 	.word	0x08008554

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000020 	.word	0x20000020

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003052:	f7ff ffef 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003056:	4601      	mov	r1, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003060:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003064:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	fa92 f2a2 	rbit	r2, r2
 800306c:	603a      	str	r2, [r7, #0]
  return result;
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	40d3      	lsrs	r3, r2
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_RCC_GetPCLK1Freq+0x40>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	0800853c 	.word	0x0800853c

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003096:	f7ff ffcd 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800309a:	4601      	mov	r1, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	603a      	str	r2, [r7, #0]
  return result;
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	40d3      	lsrs	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	0800853c 	.word	0x0800853c

080030d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b092      	sub	sp, #72	; 0x48
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80d4 	beq.w	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10e      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003104:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4a4a      	ldr	r2, [pc, #296]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310e:	61d3      	str	r3, [r2, #28]
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b45      	ldr	r3, [pc, #276]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d118      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312e:	4b42      	ldr	r3, [pc, #264]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a41      	ldr	r2, [pc, #260]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7fe faad 	bl	8001698 <HAL_GetTick>
 800313e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fe faa9 	bl	8001698 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e1d6      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	4b38      	ldr	r3, [pc, #224]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003160:	4b34      	ldr	r3, [pc, #208]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800316a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8084 	beq.w	800327a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800317c:	429a      	cmp	r2, r3
 800317e:	d07c      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	461a      	mov	r2, r3
 80031aa:	2301      	movs	r3, #1
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	461a      	mov	r2, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031d2:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d04b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe fa59 	bl	8001698 <HAL_GetTick>
 80031e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe fa55 	bl	8001698 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e180      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003200:	2302      	movs	r3, #2
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	2302      	movs	r3, #2
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	61fb      	str	r3, [r7, #28]
  return result;
 8003218:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d108      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800322e:	4b01      	ldr	r3, [pc, #4]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	e00d      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
 800323c:	10908100 	.word	0x10908100
 8003240:	2302      	movs	r3, #2
 8003242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	4b9a      	ldr	r3, [pc, #616]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2202      	movs	r2, #2
 8003252:	613a      	str	r2, [r7, #16]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	fa92 f2a2 	rbit	r2, r2
 800325a:	60fa      	str	r2, [r7, #12]
  return result;
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	fab2 f282 	clz	r2, r2
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	f002 021f 	and.w	r2, r2, #31
 800326e:	2101      	movs	r1, #1
 8003270:	fa01 f202 	lsl.w	r2, r1, r2
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0b7      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800327a:	4b8f      	ldr	r3, [pc, #572]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	498c      	ldr	r1, [pc, #560]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800328c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a87      	ldr	r2, [pc, #540]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ac:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f023 0203 	bic.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	497f      	ldr	r1, [pc, #508]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ca:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4978      	ldr	r1, [pc, #480]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	4970      	ldr	r1, [pc, #448]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003306:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f023 0210 	bic.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4969      	ldr	r1, [pc, #420]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	4961      	ldr	r1, [pc, #388]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003342:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f023 0220 	bic.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	495a      	ldr	r1, [pc, #360]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003360:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	4952      	ldr	r1, [pc, #328]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800337e:	4b4e      	ldr	r3, [pc, #312]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	494b      	ldr	r1, [pc, #300]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	4943      	ldr	r1, [pc, #268]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	493c      	ldr	r1, [pc, #240]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033d8:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	4934      	ldr	r1, [pc, #208]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	492d      	ldr	r1, [pc, #180]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	4925      	ldr	r1, [pc, #148]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	491e      	ldr	r1, [pc, #120]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	4916      	ldr	r1, [pc, #88]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	490f      	ldr	r1, [pc, #60]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80034aa:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	e002      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034be:	4913      	ldr	r1, [pc, #76]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034dc:	490b      	ldr	r1, [pc, #44]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	4904      	ldr	r1, [pc, #16]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3748      	adds	r7, #72	; 0x48
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e049      	b.n	80035b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fe90 	bl	800125c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fdb4 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e049      	b.n	8003664 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f841 	bl	800366c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 fd5d 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_TIM_PWM_Start+0x24>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e03c      	b.n	800371e <HAL_TIM_PWM_Start+0x9e>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d109      	bne.n	80036be <HAL_TIM_PWM_Start+0x3e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e02f      	b.n	800371e <HAL_TIM_PWM_Start+0x9e>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d109      	bne.n	80036d8 <HAL_TIM_PWM_Start+0x58>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e022      	b.n	800371e <HAL_TIM_PWM_Start+0x9e>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d109      	bne.n	80036f2 <HAL_TIM_PWM_Start+0x72>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	bf14      	ite	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	2300      	moveq	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	e015      	b.n	800371e <HAL_TIM_PWM_Start+0x9e>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d109      	bne.n	800370c <HAL_TIM_PWM_Start+0x8c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e008      	b.n	800371e <HAL_TIM_PWM_Start+0x9e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0a1      	b.n	800386a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0xb6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	e023      	b.n	800377e <HAL_TIM_PWM_Start+0xfe>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d104      	bne.n	8003746 <HAL_TIM_PWM_Start+0xc6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003744:	e01b      	b.n	800377e <HAL_TIM_PWM_Start+0xfe>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d104      	bne.n	8003756 <HAL_TIM_PWM_Start+0xd6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	e013      	b.n	800377e <HAL_TIM_PWM_Start+0xfe>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d104      	bne.n	8003766 <HAL_TIM_PWM_Start+0xe6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003764:	e00b      	b.n	800377e <HAL_TIM_PWM_Start+0xfe>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b10      	cmp	r3, #16
 800376a:	d104      	bne.n	8003776 <HAL_TIM_PWM_Start+0xf6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	e003      	b.n	800377e <HAL_TIM_PWM_Start+0xfe>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2201      	movs	r2, #1
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f001 f9fa 	bl	8004b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a38      	ldr	r2, [pc, #224]	; (8003874 <HAL_TIM_PWM_Start+0x1f4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_TIM_PWM_Start+0x148>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a37      	ldr	r2, [pc, #220]	; (8003878 <HAL_TIM_PWM_Start+0x1f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_TIM_PWM_Start+0x148>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a35      	ldr	r2, [pc, #212]	; (800387c <HAL_TIM_PWM_Start+0x1fc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_TIM_PWM_Start+0x148>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <HAL_TIM_PWM_Start+0x200>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_TIM_PWM_Start+0x148>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a32      	ldr	r2, [pc, #200]	; (8003884 <HAL_TIM_PWM_Start+0x204>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIM_PWM_Start+0x148>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a31      	ldr	r2, [pc, #196]	; (8003888 <HAL_TIM_PWM_Start+0x208>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_TIM_PWM_Start+0x14c>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_TIM_PWM_Start+0x14e>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a23      	ldr	r2, [pc, #140]	; (8003874 <HAL_TIM_PWM_Start+0x1f4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d01d      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d018      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <HAL_TIM_PWM_Start+0x20c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_TIM_PWM_Start+0x210>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <HAL_TIM_PWM_Start+0x1f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_TIM_PWM_Start+0x1fc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_TIM_PWM_Start+0x208>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d115      	bne.n	8003854 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_TIM_PWM_Start+0x214>)
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d015      	beq.n	8003866 <HAL_TIM_PWM_Start+0x1e6>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d011      	beq.n	8003866 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0201 	orr.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003852:	e008      	b.n	8003866 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e000      	b.n	8003868 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40013400 	.word	0x40013400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800
 8003888:	40015000 	.word	0x40015000
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800
 8003894:	00010007 	.word	0x00010007

08003898 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e049      	b.n	800393e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fc8c 	bl	80011dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fbf0 	bl	80040bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_TIM_IC_Start+0x1a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e023      	b.n	80039aa <HAL_TIM_IC_Start+0x62>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d104      	bne.n	8003972 <HAL_TIM_IC_Start+0x2a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800396e:	b2db      	uxtb	r3, r3
 8003970:	e01b      	b.n	80039aa <HAL_TIM_IC_Start+0x62>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start+0x3a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e013      	b.n	80039aa <HAL_TIM_IC_Start+0x62>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start+0x4a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	e00b      	b.n	80039aa <HAL_TIM_IC_Start+0x62>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start+0x5a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	e003      	b.n	80039aa <HAL_TIM_IC_Start+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_TIM_IC_Start+0x74>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e013      	b.n	80039e4 <HAL_TIM_IC_Start+0x9c>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d104      	bne.n	80039cc <HAL_TIM_IC_Start+0x84>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e00b      	b.n	80039e4 <HAL_TIM_IC_Start+0x9c>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d104      	bne.n	80039dc <HAL_TIM_IC_Start+0x94>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e003      	b.n	80039e4 <HAL_TIM_IC_Start+0x9c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039ec:	7bbb      	ldrb	r3, [r7, #14]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e092      	b.n	8003b1c <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_IC_Start+0xbe>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a04:	e023      	b.n	8003a4e <HAL_TIM_IC_Start+0x106>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_IC_Start+0xce>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	e01b      	b.n	8003a4e <HAL_TIM_IC_Start+0x106>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_IC_Start+0xde>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a24:	e013      	b.n	8003a4e <HAL_TIM_IC_Start+0x106>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_IC_Start+0xee>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a34:	e00b      	b.n	8003a4e <HAL_TIM_IC_Start+0x106>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d104      	bne.n	8003a46 <HAL_TIM_IC_Start+0xfe>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a44:	e003      	b.n	8003a4e <HAL_TIM_IC_Start+0x106>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_IC_Start+0x116>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5c:	e013      	b.n	8003a86 <HAL_TIM_IC_Start+0x13e>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_IC_Start+0x126>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a6c:	e00b      	b.n	8003a86 <HAL_TIM_IC_Start+0x13e>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_IC_Start+0x136>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a7c:	e003      	b.n	8003a86 <HAL_TIM_IC_Start+0x13e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f876 	bl	8004b80 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <HAL_TIM_IC_Start+0x1dc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <HAL_TIM_IC_Start+0x192>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d018      	beq.n	8003ada <HAL_TIM_IC_Start+0x192>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_TIM_IC_Start+0x1e0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_TIM_IC_Start+0x192>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_TIM_IC_Start+0x1e4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_TIM_IC_Start+0x192>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIM_IC_Start+0x1e8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_TIM_IC_Start+0x192>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_TIM_IC_Start+0x1ec>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_TIM_IC_Start+0x192>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIM_IC_Start+0x1f0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d115      	bne.n	8003b06 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_TIM_IC_Start+0x1f4>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d015      	beq.n	8003b18 <HAL_TIM_IC_Start+0x1d0>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d011      	beq.n	8003b18 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	e008      	b.n	8003b18 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40015000 	.word	0x40015000
 8003b3c:	00010007 	.word	0x00010007

08003b40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e088      	b.n	8003c70 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f000 fe42 	bl	8004804 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 020c 	bic.w	r2, r2, #12
 8003b8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	619a      	str	r2, [r3, #24]
 8003ba2:	e060      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d11c      	bne.n	8003be4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f000 fec0 	bl	800493e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bcc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6999      	ldr	r1, [r3, #24]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	021a      	lsls	r2, r3, #8
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	619a      	str	r2, [r3, #24]
 8003be2:	e040      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11b      	bne.n	8003c22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 ff0d 	bl	8004a18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 020c 	bic.w	r2, r2, #12
 8003c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	61da      	str	r2, [r3, #28]
 8003c20:	e021      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d11c      	bne.n	8003c62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f000 ff2a 	bl	8004a90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69d9      	ldr	r1, [r3, #28]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	61da      	str	r2, [r3, #28]
 8003c60:	e001      	b.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0ff      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b14      	cmp	r3, #20
 8003ca2:	f200 80f0 	bhi.w	8003e86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003e87 	.word	0x08003e87
 8003cb4:	08003e87 	.word	0x08003e87
 8003cb8:	08003e87 	.word	0x08003e87
 8003cbc:	08003d41 	.word	0x08003d41
 8003cc0:	08003e87 	.word	0x08003e87
 8003cc4:	08003e87 	.word	0x08003e87
 8003cc8:	08003e87 	.word	0x08003e87
 8003ccc:	08003d83 	.word	0x08003d83
 8003cd0:	08003e87 	.word	0x08003e87
 8003cd4:	08003e87 	.word	0x08003e87
 8003cd8:	08003e87 	.word	0x08003e87
 8003cdc:	08003dc3 	.word	0x08003dc3
 8003ce0:	08003e87 	.word	0x08003e87
 8003ce4:	08003e87 	.word	0x08003e87
 8003ce8:	08003e87 	.word	0x08003e87
 8003cec:	08003e05 	.word	0x08003e05
 8003cf0:	08003e87 	.word	0x08003e87
 8003cf4:	08003e87 	.word	0x08003e87
 8003cf8:	08003e87 	.word	0x08003e87
 8003cfc:	08003e45 	.word	0x08003e45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa76 	bl	80041f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e0a5      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 faf0 	bl	800432c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e084      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fb63 	bl	8004454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e064      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fbd5 	bl	8004578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e043      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fc24 	bl	8004658 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0208 	orr.w	r2, r2, #8
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e42:	e023      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc6e 	bl	800472c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e84:	e002      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop

08003ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b6      	b.n	800402a <HAL_TIM_ConfigClockSource+0x18a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d03e      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0xd8>
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efe:	f200 8087 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	f000 8086 	beq.w	8004016 <HAL_TIM_ConfigClockSource+0x176>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d87f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d01a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xaa>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d87b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f18:	2b60      	cmp	r3, #96	; 0x60
 8003f1a:	d050      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x11e>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d877      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d03c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xfe>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d873      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d058      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x13e>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d86f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d064      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d86b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d060      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d867      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d05a      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f48:	e062      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f000 fdf1 	bl	8004b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e04f      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 fdda 	bl	8004b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e03c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fc98 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	; 0x50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fda7 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e02c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fcf4 	bl	80049b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fd97 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e01c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fc78 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd87 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e00c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fd7e 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 800400e:	e003      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e000      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d831      	bhi.n	80040ac <HAL_TIM_ReadCapturedValue+0x78>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <HAL_TIM_ReadCapturedValue+0x1c>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004085 	.word	0x08004085
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040ad 	.word	0x080040ad
 800405c:	080040ad 	.word	0x080040ad
 8004060:	0800408f 	.word	0x0800408f
 8004064:	080040ad 	.word	0x080040ad
 8004068:	080040ad 	.word	0x080040ad
 800406c:	080040ad 	.word	0x080040ad
 8004070:	08004099 	.word	0x08004099
 8004074:	080040ad 	.word	0x080040ad
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040ad 	.word	0x080040ad
 8004080:	080040a3 	.word	0x080040a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	60fb      	str	r3, [r7, #12]

      break;
 800408c:	e00f      	b.n	80040ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	60fb      	str	r3, [r7, #12]

      break;
 8004096:	e00a      	b.n	80040ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	60fb      	str	r3, [r7, #12]

      break;
 80040a0:	e005      	b.n	80040ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	60fb      	str	r3, [r7, #12]

      break;
 80040aa:	e000      	b.n	80040ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80040ac:	bf00      	nop
  }

  return tmpreg;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a42      	ldr	r2, [pc, #264]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d00f      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3f      	ldr	r2, [pc, #252]	; (80041dc <TIM_Base_SetConfig+0x120>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3c      	ldr	r2, [pc, #240]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a31      	ldr	r2, [pc, #196]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01f      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d01b      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <TIM_Base_SetConfig+0x120>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d017      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2d      	ldr	r2, [pc, #180]	; (80041e0 <TIM_Base_SetConfig+0x124>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00f      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <TIM_Base_SetConfig+0x130>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00b      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d108      	bne.n	8004168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <TIM_Base_SetConfig+0x11c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <TIM_Base_SetConfig+0x100>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <TIM_Base_SetConfig+0x128>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00f      	beq.n	80041bc <TIM_Base_SetConfig+0x100>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a13      	ldr	r2, [pc, #76]	; (80041ec <TIM_Base_SetConfig+0x130>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00b      	beq.n	80041bc <TIM_Base_SetConfig+0x100>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <TIM_Base_SetConfig+0x134>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x100>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <TIM_Base_SetConfig+0x138>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x100>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <TIM_Base_SetConfig+0x12c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40013400 	.word	0x40013400
 80041e8:	40015000 	.word	0x40015000
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800

080041f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0201 	bic.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 0302 	bic.w	r3, r3, #2
 8004244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a30      	ldr	r2, [pc, #192]	; (8004314 <TIM_OC1_SetConfig+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d013      	beq.n	8004280 <TIM_OC1_SetConfig+0x88>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <TIM_OC1_SetConfig+0x120>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00f      	beq.n	8004280 <TIM_OC1_SetConfig+0x88>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2e      	ldr	r2, [pc, #184]	; (800431c <TIM_OC1_SetConfig+0x124>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00b      	beq.n	8004280 <TIM_OC1_SetConfig+0x88>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a2d      	ldr	r2, [pc, #180]	; (8004320 <TIM_OC1_SetConfig+0x128>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d007      	beq.n	8004280 <TIM_OC1_SetConfig+0x88>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <TIM_OC1_SetConfig+0x12c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC1_SetConfig+0x88>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <TIM_OC1_SetConfig+0x130>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10c      	bne.n	800429a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0308 	bic.w	r3, r3, #8
 8004286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <TIM_OC1_SetConfig+0x11c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_OC1_SetConfig+0xd2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <TIM_OC1_SetConfig+0x120>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_OC1_SetConfig+0xd2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <TIM_OC1_SetConfig+0x124>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_OC1_SetConfig+0xd2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <TIM_OC1_SetConfig+0x128>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_OC1_SetConfig+0xd2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <TIM_OC1_SetConfig+0x12c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_OC1_SetConfig+0xd2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a18      	ldr	r2, [pc, #96]	; (8004328 <TIM_OC1_SetConfig+0x130>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d111      	bne.n	80042ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	621a      	str	r2, [r3, #32]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800
 8004328:	40015000 	.word	0x40015000

0800432c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0210 	bic.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0320 	bic.w	r3, r3, #32
 800437a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <TIM_OC2_SetConfig+0x110>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_OC2_SetConfig+0x74>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <TIM_OC2_SetConfig+0x114>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_OC2_SetConfig+0x74>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <TIM_OC2_SetConfig+0x118>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10d      	bne.n	80043bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <TIM_OC2_SetConfig+0x110>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <TIM_OC2_SetConfig+0xc0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <TIM_OC2_SetConfig+0x114>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <TIM_OC2_SetConfig+0xc0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <TIM_OC2_SetConfig+0x11c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <TIM_OC2_SetConfig+0xc0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <TIM_OC2_SetConfig+0x120>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_OC2_SetConfig+0xc0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <TIM_OC2_SetConfig+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC2_SetConfig+0xc0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <TIM_OC2_SetConfig+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d113      	bne.n	8004414 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40013400 	.word	0x40013400
 8004444:	40015000 	.word	0x40015000
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <TIM_OC3_SetConfig+0x10c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_OC3_SetConfig+0x72>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <TIM_OC3_SetConfig+0x110>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_OC3_SetConfig+0x72>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <TIM_OC3_SetConfig+0x114>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10d      	bne.n	80044e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <TIM_OC3_SetConfig+0x10c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <TIM_OC3_SetConfig+0xbe>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <TIM_OC3_SetConfig+0x110>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <TIM_OC3_SetConfig+0xbe>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <TIM_OC3_SetConfig+0x118>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_OC3_SetConfig+0xbe>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <TIM_OC3_SetConfig+0x11c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_OC3_SetConfig+0xbe>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <TIM_OC3_SetConfig+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC3_SetConfig+0xbe>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a16      	ldr	r2, [pc, #88]	; (8004568 <TIM_OC3_SetConfig+0x114>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d113      	bne.n	800453a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40013400 	.word	0x40013400
 8004568:	40015000 	.word	0x40015000
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	031b      	lsls	r3, r3, #12
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <TIM_OC4_SetConfig+0xc8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d013      	beq.n	8004604 <TIM_OC4_SetConfig+0x8c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <TIM_OC4_SetConfig+0xcc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00f      	beq.n	8004604 <TIM_OC4_SetConfig+0x8c>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <TIM_OC4_SetConfig+0xd0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00b      	beq.n	8004604 <TIM_OC4_SetConfig+0x8c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a17      	ldr	r2, [pc, #92]	; (800464c <TIM_OC4_SetConfig+0xd4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d007      	beq.n	8004604 <TIM_OC4_SetConfig+0x8c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a16      	ldr	r2, [pc, #88]	; (8004650 <TIM_OC4_SetConfig+0xd8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_OC4_SetConfig+0x8c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <TIM_OC4_SetConfig+0xdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d109      	bne.n	8004618 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	019b      	lsls	r3, r3, #6
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40013400 	.word	0x40013400
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800
 8004654:	40015000 	.word	0x40015000

08004658 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800469c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a19      	ldr	r2, [pc, #100]	; (8004714 <TIM_OC5_SetConfig+0xbc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <TIM_OC5_SetConfig+0x82>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <TIM_OC5_SetConfig+0xc0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00f      	beq.n	80046da <TIM_OC5_SetConfig+0x82>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <TIM_OC5_SetConfig+0xc4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00b      	beq.n	80046da <TIM_OC5_SetConfig+0x82>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <TIM_OC5_SetConfig+0xc8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d007      	beq.n	80046da <TIM_OC5_SetConfig+0x82>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <TIM_OC5_SetConfig+0xcc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC5_SetConfig+0x82>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC5_SetConfig+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d109      	bne.n	80046ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800
 8004728:	40015000 	.word	0x40015000

0800472c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	051b      	lsls	r3, r3, #20
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <TIM_OC6_SetConfig+0xc0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <TIM_OC6_SetConfig+0x84>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <TIM_OC6_SetConfig+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00f      	beq.n	80047b0 <TIM_OC6_SetConfig+0x84>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <TIM_OC6_SetConfig+0xc8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00b      	beq.n	80047b0 <TIM_OC6_SetConfig+0x84>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <TIM_OC6_SetConfig+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_OC6_SetConfig+0x84>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a16      	ldr	r2, [pc, #88]	; (80047fc <TIM_OC6_SetConfig+0xd0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC6_SetConfig+0x84>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a15      	ldr	r2, [pc, #84]	; (8004800 <TIM_OC6_SetConfig+0xd4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d109      	bne.n	80047c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40012c00 	.word	0x40012c00
 80047f0:	40013400 	.word	0x40013400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800
 8004800:	40015000 	.word	0x40015000

08004804 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <TIM_TI1_SetConfig+0xc4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d017      	beq.n	8004862 <TIM_TI1_SetConfig+0x5e>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d013      	beq.n	8004862 <TIM_TI1_SetConfig+0x5e>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a23      	ldr	r2, [pc, #140]	; (80048cc <TIM_TI1_SetConfig+0xc8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00f      	beq.n	8004862 <TIM_TI1_SetConfig+0x5e>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <TIM_TI1_SetConfig+0xcc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_TI1_SetConfig+0x5e>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <TIM_TI1_SetConfig+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_TI1_SetConfig+0x5e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a20      	ldr	r2, [pc, #128]	; (80048d8 <TIM_TI1_SetConfig+0xd4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_TI1_SetConfig+0x5e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <TIM_TI1_SetConfig+0xd8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <TIM_TI1_SetConfig+0x62>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <TIM_TI1_SetConfig+0x64>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0303 	bic.w	r3, r3, #3
 8004872:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e003      	b.n	8004886 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	b2db      	uxtb	r3, r3
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f023 030a 	bic.w	r3, r3, #10
 80048a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 030a 	and.w	r3, r3, #10
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40015000 	.word	0x40015000

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f023 0210 	bic.w	r2, r3, #16
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800497c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	b29b      	uxth	r3, r3
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004990:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f023 0210 	bic.w	r2, r3, #16
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	031b      	lsls	r3, r3, #12
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0303 	bic.w	r3, r3, #3
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	031b      	lsls	r3, r3, #12
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	031b      	lsls	r3, r3, #12
 8004ae8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f043 0307 	orr.w	r3, r3, #7
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2201      	movs	r2, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1a      	ldr	r2, [r3, #32]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1a      	ldr	r2, [r3, #32]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e06d      	b.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d018      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10c      	bne.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40015000 	.word	0x40015000
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40014000 	.word	0x40014000

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e040      	b.n	8004d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fafe 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	; 0x24
 8004d10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f8b6 	bl	8004e94 <UART_SetConfig>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e022      	b.n	8004d78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa7e 	bl	800523c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb05 	bl	8005380 <UART_CheckIdleState>
 8004d76:	4603      	mov	r3, r0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d178      	bne.n	8004e8a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Transmit+0x24>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e071      	b.n	8004e8c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2221      	movs	r2, #33	; 0x21
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fc fc6f 	bl	8001698 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x68>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df0:	e030      	b.n	8004e54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fb67 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e03c      	b.n	8004e8c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	b292      	uxth	r2, r2
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e008      	b.n	8004e42 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1c8      	bne.n	8004df2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2140      	movs	r1, #64	; 0x40
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fb30 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e005      	b.n	8004e8c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e000      	b.n	8004e8c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b92      	ldr	r3, [pc, #584]	; (8005108 <UART_SetConfig+0x274>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a80      	ldr	r2, [pc, #512]	; (800510c <UART_SetConfig+0x278>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d120      	bne.n	8004f52 <UART_SetConfig+0xbe>
 8004f10:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <UART_SetConfig+0x27c>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d817      	bhi.n	8004f4c <UART_SetConfig+0xb8>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x90>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f41 	.word	0x08004f41
 8004f2c:	08004f47 	.word	0x08004f47
 8004f30:	08004f3b 	.word	0x08004f3b
 8004f34:	2301      	movs	r3, #1
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e0b5      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e0b2      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f40:	2304      	movs	r3, #4
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e0af      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f46:	2308      	movs	r3, #8
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e0ac      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e0a9      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a6f      	ldr	r2, [pc, #444]	; (8005114 <UART_SetConfig+0x280>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d124      	bne.n	8004fa6 <UART_SetConfig+0x112>
 8004f5c:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <UART_SetConfig+0x27c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f68:	d011      	beq.n	8004f8e <UART_SetConfig+0xfa>
 8004f6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f6e:	d817      	bhi.n	8004fa0 <UART_SetConfig+0x10c>
 8004f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f74:	d011      	beq.n	8004f9a <UART_SetConfig+0x106>
 8004f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f7a:	d811      	bhi.n	8004fa0 <UART_SetConfig+0x10c>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <UART_SetConfig+0xf4>
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d006      	beq.n	8004f94 <UART_SetConfig+0x100>
 8004f86:	e00b      	b.n	8004fa0 <UART_SetConfig+0x10c>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e08b      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e088      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f94:	2304      	movs	r3, #4
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e085      	b.n	80050a6 <UART_SetConfig+0x212>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e082      	b.n	80050a6 <UART_SetConfig+0x212>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e07f      	b.n	80050a6 <UART_SetConfig+0x212>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a5b      	ldr	r2, [pc, #364]	; (8005118 <UART_SetConfig+0x284>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d124      	bne.n	8004ffa <UART_SetConfig+0x166>
 8004fb0:	4b57      	ldr	r3, [pc, #348]	; (8005110 <UART_SetConfig+0x27c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fbc:	d011      	beq.n	8004fe2 <UART_SetConfig+0x14e>
 8004fbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fc2:	d817      	bhi.n	8004ff4 <UART_SetConfig+0x160>
 8004fc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc8:	d011      	beq.n	8004fee <UART_SetConfig+0x15a>
 8004fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fce:	d811      	bhi.n	8004ff4 <UART_SetConfig+0x160>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <UART_SetConfig+0x148>
 8004fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fd8:	d006      	beq.n	8004fe8 <UART_SetConfig+0x154>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x160>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e061      	b.n	80050a6 <UART_SetConfig+0x212>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e05e      	b.n	80050a6 <UART_SetConfig+0x212>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e05b      	b.n	80050a6 <UART_SetConfig+0x212>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e058      	b.n	80050a6 <UART_SetConfig+0x212>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e055      	b.n	80050a6 <UART_SetConfig+0x212>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a47      	ldr	r2, [pc, #284]	; (800511c <UART_SetConfig+0x288>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d124      	bne.n	800504e <UART_SetConfig+0x1ba>
 8005004:	4b42      	ldr	r3, [pc, #264]	; (8005110 <UART_SetConfig+0x27c>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800500c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005010:	d011      	beq.n	8005036 <UART_SetConfig+0x1a2>
 8005012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005016:	d817      	bhi.n	8005048 <UART_SetConfig+0x1b4>
 8005018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501c:	d011      	beq.n	8005042 <UART_SetConfig+0x1ae>
 800501e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005022:	d811      	bhi.n	8005048 <UART_SetConfig+0x1b4>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x19c>
 8005028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800502c:	d006      	beq.n	800503c <UART_SetConfig+0x1a8>
 800502e:	e00b      	b.n	8005048 <UART_SetConfig+0x1b4>
 8005030:	2300      	movs	r3, #0
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e037      	b.n	80050a6 <UART_SetConfig+0x212>
 8005036:	2302      	movs	r3, #2
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e034      	b.n	80050a6 <UART_SetConfig+0x212>
 800503c:	2304      	movs	r3, #4
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e031      	b.n	80050a6 <UART_SetConfig+0x212>
 8005042:	2308      	movs	r3, #8
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e02e      	b.n	80050a6 <UART_SetConfig+0x212>
 8005048:	2310      	movs	r3, #16
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e02b      	b.n	80050a6 <UART_SetConfig+0x212>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a33      	ldr	r2, [pc, #204]	; (8005120 <UART_SetConfig+0x28c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d124      	bne.n	80050a2 <UART_SetConfig+0x20e>
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <UART_SetConfig+0x27c>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005060:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005064:	d011      	beq.n	800508a <UART_SetConfig+0x1f6>
 8005066:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800506a:	d817      	bhi.n	800509c <UART_SetConfig+0x208>
 800506c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005070:	d011      	beq.n	8005096 <UART_SetConfig+0x202>
 8005072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005076:	d811      	bhi.n	800509c <UART_SetConfig+0x208>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <UART_SetConfig+0x1f0>
 800507c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005080:	d006      	beq.n	8005090 <UART_SetConfig+0x1fc>
 8005082:	e00b      	b.n	800509c <UART_SetConfig+0x208>
 8005084:	2300      	movs	r3, #0
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e00d      	b.n	80050a6 <UART_SetConfig+0x212>
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e00a      	b.n	80050a6 <UART_SetConfig+0x212>
 8005090:	2304      	movs	r3, #4
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e007      	b.n	80050a6 <UART_SetConfig+0x212>
 8005096:	2308      	movs	r3, #8
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e004      	b.n	80050a6 <UART_SetConfig+0x212>
 800509c:	2310      	movs	r3, #16
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e001      	b.n	80050a6 <UART_SetConfig+0x212>
 80050a2:	2310      	movs	r3, #16
 80050a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d16b      	bne.n	8005188 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80050b0:	7ffb      	ldrb	r3, [r7, #31]
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d838      	bhi.n	8005128 <UART_SetConfig+0x294>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <UART_SetConfig+0x228>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050e1 	.word	0x080050e1
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	08005129 	.word	0x08005129
 80050cc:	080050f7 	.word	0x080050f7
 80050d0:	08005129 	.word	0x08005129
 80050d4:	08005129 	.word	0x08005129
 80050d8:	08005129 	.word	0x08005129
 80050dc:	080050ff 	.word	0x080050ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e0:	f7fd ffb4 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80050e4:	61b8      	str	r0, [r7, #24]
        break;
 80050e6:	e024      	b.n	8005132 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7fd ffd2 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 80050ec:	61b8      	str	r0, [r7, #24]
        break;
 80050ee:	e020      	b.n	8005132 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <UART_SetConfig+0x290>)
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e01d      	b.n	8005132 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7fd ff33 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80050fa:	61b8      	str	r0, [r7, #24]
        break;
 80050fc:	e019      	b.n	8005132 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005102:	61bb      	str	r3, [r7, #24]
        break;
 8005104:	e015      	b.n	8005132 <UART_SetConfig+0x29e>
 8005106:	bf00      	nop
 8005108:	efff69f3 	.word	0xefff69f3
 800510c:	40013800 	.word	0x40013800
 8005110:	40021000 	.word	0x40021000
 8005114:	40004400 	.word	0x40004400
 8005118:	40004800 	.word	0x40004800
 800511c:	40004c00 	.word	0x40004c00
 8005120:	40005000 	.word	0x40005000
 8005124:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	77bb      	strb	r3, [r7, #30]
        break;
 8005130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d073      	beq.n	8005220 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	005a      	lsls	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	441a      	add	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d916      	bls.n	8005182 <UART_SetConfig+0x2ee>
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d212      	bcs.n	8005182 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f023 030f 	bic.w	r3, r3, #15
 8005164:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	b29b      	uxth	r3, r3
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	b29a      	uxth	r2, r3
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	4313      	orrs	r3, r2
 8005176:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	89fa      	ldrh	r2, [r7, #14]
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	e04e      	b.n	8005220 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	77bb      	strb	r3, [r7, #30]
 8005186:	e04b      	b.n	8005220 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005188:	7ffb      	ldrb	r3, [r7, #31]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d827      	bhi.n	80051de <UART_SetConfig+0x34a>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x300>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051df 	.word	0x080051df
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fd ff48 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80051bc:	61b8      	str	r0, [r7, #24]
        break;
 80051be:	e013      	b.n	80051e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fd ff66 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 80051c4:	61b8      	str	r0, [r7, #24]
        break;
 80051c6:	e00f      	b.n	80051e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <UART_SetConfig+0x3a4>)
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e00c      	b.n	80051e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fd fec7 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80051d2:	61b8      	str	r0, [r7, #24]
        break;
 80051d4:	e008      	b.n	80051e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	61bb      	str	r3, [r7, #24]
        break;
 80051dc:	e004      	b.n	80051e8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	77bb      	strb	r3, [r7, #30]
        break;
 80051e6:	bf00      	nop
    }

    if (pclk != 0U)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085a      	lsrs	r2, r3, #1
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b0f      	cmp	r3, #15
 8005206:	d909      	bls.n	800521c <UART_SetConfig+0x388>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d205      	bcs.n	800521c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e001      	b.n	8005220 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800522c:	7fbb      	ldrb	r3, [r7, #30]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	007a1200 	.word	0x007a1200

0800523c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01a      	beq.n	8005352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533a:	d10a      	bne.n	8005352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b098      	sub	sp, #96	; 0x60
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005390:	f7fc f982 	bl	8001698 <HAL_GetTick>
 8005394:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d12e      	bne.n	8005402 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f88c 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e062      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d149      	bne.n	80054a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f856 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d03c      	beq.n	80054a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	623b      	str	r3, [r7, #32]
   return(result);
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60fb      	str	r3, [r7, #12]
   return(result);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	617b      	str	r3, [r7, #20]
   return(result);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e011      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3758      	adds	r7, #88	; 0x58
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e049      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d045      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fc f8d5 	bl	8001698 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e048      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d031      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d110      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f838 	bl	800559e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2208      	movs	r2, #8
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e029      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005550:	d111      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f81e 	bl	800559e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0a6      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800559e:	b480      	push	{r7}
 80055a0:	b095      	sub	sp, #84	; 0x54
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	643b      	str	r3, [r7, #64]	; 0x40
 80055c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d118      	bne.n	8005646 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	647b      	str	r3, [r7, #68]	; 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	669a      	str	r2, [r3, #104]	; 0x68
}
 800565a:	bf00      	nop
 800565c:	3754      	adds	r7, #84	; 0x54
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <__errno>:
 8005668:	4b01      	ldr	r3, [pc, #4]	; (8005670 <__errno+0x8>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	2000002c 	.word	0x2000002c

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4d0d      	ldr	r5, [pc, #52]	; (80056ac <__libc_init_array+0x38>)
 8005678:	4c0d      	ldr	r4, [pc, #52]	; (80056b0 <__libc_init_array+0x3c>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	2600      	movs	r6, #0
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	4d0b      	ldr	r5, [pc, #44]	; (80056b4 <__libc_init_array+0x40>)
 8005686:	4c0c      	ldr	r4, [pc, #48]	; (80056b8 <__libc_init_array+0x44>)
 8005688:	f002 ff1c 	bl	80084c4 <_init>
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	2600      	movs	r6, #0
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	0800893c 	.word	0x0800893c
 80056b0:	0800893c 	.word	0x0800893c
 80056b4:	0800893c 	.word	0x0800893c
 80056b8:	08008940 	.word	0x08008940

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <__cvt>:
 80056cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	ec55 4b10 	vmov	r4, r5, d0
 80056d4:	2d00      	cmp	r5, #0
 80056d6:	460e      	mov	r6, r1
 80056d8:	4619      	mov	r1, r3
 80056da:	462b      	mov	r3, r5
 80056dc:	bfbb      	ittet	lt
 80056de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056e2:	461d      	movlt	r5, r3
 80056e4:	2300      	movge	r3, #0
 80056e6:	232d      	movlt	r3, #45	; 0x2d
 80056e8:	700b      	strb	r3, [r1, #0]
 80056ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056f0:	4691      	mov	r9, r2
 80056f2:	f023 0820 	bic.w	r8, r3, #32
 80056f6:	bfbc      	itt	lt
 80056f8:	4622      	movlt	r2, r4
 80056fa:	4614      	movlt	r4, r2
 80056fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005700:	d005      	beq.n	800570e <__cvt+0x42>
 8005702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005706:	d100      	bne.n	800570a <__cvt+0x3e>
 8005708:	3601      	adds	r6, #1
 800570a:	2102      	movs	r1, #2
 800570c:	e000      	b.n	8005710 <__cvt+0x44>
 800570e:	2103      	movs	r1, #3
 8005710:	ab03      	add	r3, sp, #12
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	ab02      	add	r3, sp, #8
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	ec45 4b10 	vmov	d0, r4, r5
 800571c:	4653      	mov	r3, sl
 800571e:	4632      	mov	r2, r6
 8005720:	f000 fd02 	bl	8006128 <_dtoa_r>
 8005724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005728:	4607      	mov	r7, r0
 800572a:	d102      	bne.n	8005732 <__cvt+0x66>
 800572c:	f019 0f01 	tst.w	r9, #1
 8005730:	d022      	beq.n	8005778 <__cvt+0xac>
 8005732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005736:	eb07 0906 	add.w	r9, r7, r6
 800573a:	d110      	bne.n	800575e <__cvt+0x92>
 800573c:	783b      	ldrb	r3, [r7, #0]
 800573e:	2b30      	cmp	r3, #48	; 0x30
 8005740:	d10a      	bne.n	8005758 <__cvt+0x8c>
 8005742:	2200      	movs	r2, #0
 8005744:	2300      	movs	r3, #0
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fb f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800574e:	b918      	cbnz	r0, 8005758 <__cvt+0x8c>
 8005750:	f1c6 0601 	rsb	r6, r6, #1
 8005754:	f8ca 6000 	str.w	r6, [sl]
 8005758:	f8da 3000 	ldr.w	r3, [sl]
 800575c:	4499      	add	r9, r3
 800575e:	2200      	movs	r2, #0
 8005760:	2300      	movs	r3, #0
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fb f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800576a:	b108      	cbz	r0, 8005770 <__cvt+0xa4>
 800576c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005770:	2230      	movs	r2, #48	; 0x30
 8005772:	9b03      	ldr	r3, [sp, #12]
 8005774:	454b      	cmp	r3, r9
 8005776:	d307      	bcc.n	8005788 <__cvt+0xbc>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800577c:	1bdb      	subs	r3, r3, r7
 800577e:	4638      	mov	r0, r7
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	b004      	add	sp, #16
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	9103      	str	r1, [sp, #12]
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e7f0      	b.n	8005772 <__cvt+0xa6>

08005790 <__exponent>:
 8005790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005792:	4603      	mov	r3, r0
 8005794:	2900      	cmp	r1, #0
 8005796:	bfb8      	it	lt
 8005798:	4249      	neglt	r1, r1
 800579a:	f803 2b02 	strb.w	r2, [r3], #2
 800579e:	bfb4      	ite	lt
 80057a0:	222d      	movlt	r2, #45	; 0x2d
 80057a2:	222b      	movge	r2, #43	; 0x2b
 80057a4:	2909      	cmp	r1, #9
 80057a6:	7042      	strb	r2, [r0, #1]
 80057a8:	dd2a      	ble.n	8005800 <__exponent+0x70>
 80057aa:	f10d 0407 	add.w	r4, sp, #7
 80057ae:	46a4      	mov	ip, r4
 80057b0:	270a      	movs	r7, #10
 80057b2:	46a6      	mov	lr, r4
 80057b4:	460a      	mov	r2, r1
 80057b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80057ba:	fb07 1516 	mls	r5, r7, r6, r1
 80057be:	3530      	adds	r5, #48	; 0x30
 80057c0:	2a63      	cmp	r2, #99	; 0x63
 80057c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80057c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057ca:	4631      	mov	r1, r6
 80057cc:	dcf1      	bgt.n	80057b2 <__exponent+0x22>
 80057ce:	3130      	adds	r1, #48	; 0x30
 80057d0:	f1ae 0502 	sub.w	r5, lr, #2
 80057d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057d8:	1c44      	adds	r4, r0, #1
 80057da:	4629      	mov	r1, r5
 80057dc:	4561      	cmp	r1, ip
 80057de:	d30a      	bcc.n	80057f6 <__exponent+0x66>
 80057e0:	f10d 0209 	add.w	r2, sp, #9
 80057e4:	eba2 020e 	sub.w	r2, r2, lr
 80057e8:	4565      	cmp	r5, ip
 80057ea:	bf88      	it	hi
 80057ec:	2200      	movhi	r2, #0
 80057ee:	4413      	add	r3, r2
 80057f0:	1a18      	subs	r0, r3, r0
 80057f2:	b003      	add	sp, #12
 80057f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057fe:	e7ed      	b.n	80057dc <__exponent+0x4c>
 8005800:	2330      	movs	r3, #48	; 0x30
 8005802:	3130      	adds	r1, #48	; 0x30
 8005804:	7083      	strb	r3, [r0, #2]
 8005806:	70c1      	strb	r1, [r0, #3]
 8005808:	1d03      	adds	r3, r0, #4
 800580a:	e7f1      	b.n	80057f0 <__exponent+0x60>

0800580c <_printf_float>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	ed2d 8b02 	vpush	{d8}
 8005814:	b08d      	sub	sp, #52	; 0x34
 8005816:	460c      	mov	r4, r1
 8005818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800581c:	4616      	mov	r6, r2
 800581e:	461f      	mov	r7, r3
 8005820:	4605      	mov	r5, r0
 8005822:	f001 fb65 	bl	8006ef0 <_localeconv_r>
 8005826:	f8d0 a000 	ldr.w	sl, [r0]
 800582a:	4650      	mov	r0, sl
 800582c:	f7fa fcd8 	bl	80001e0 <strlen>
 8005830:	2300      	movs	r3, #0
 8005832:	930a      	str	r3, [sp, #40]	; 0x28
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	f8d8 3000 	ldr.w	r3, [r8]
 800583c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005840:	3307      	adds	r3, #7
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	f103 0208 	add.w	r2, r3, #8
 800584a:	f8c8 2000 	str.w	r2, [r8]
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005856:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800585a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	f8cd 8018 	str.w	r8, [sp, #24]
 8005864:	ee08 0a10 	vmov	s16, r0
 8005868:	4b9f      	ldr	r3, [pc, #636]	; (8005ae8 <_printf_float+0x2dc>)
 800586a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800586e:	f04f 32ff 	mov.w	r2, #4294967295
 8005872:	f7fb f963 	bl	8000b3c <__aeabi_dcmpun>
 8005876:	bb88      	cbnz	r0, 80058dc <_printf_float+0xd0>
 8005878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800587c:	4b9a      	ldr	r3, [pc, #616]	; (8005ae8 <_printf_float+0x2dc>)
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	f7fb f93d 	bl	8000b00 <__aeabi_dcmple>
 8005886:	bb48      	cbnz	r0, 80058dc <_printf_float+0xd0>
 8005888:	2200      	movs	r2, #0
 800588a:	2300      	movs	r3, #0
 800588c:	4640      	mov	r0, r8
 800588e:	4649      	mov	r1, r9
 8005890:	f7fb f92c 	bl	8000aec <__aeabi_dcmplt>
 8005894:	b110      	cbz	r0, 800589c <_printf_float+0x90>
 8005896:	232d      	movs	r3, #45	; 0x2d
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	4b93      	ldr	r3, [pc, #588]	; (8005aec <_printf_float+0x2e0>)
 800589e:	4894      	ldr	r0, [pc, #592]	; (8005af0 <_printf_float+0x2e4>)
 80058a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058a4:	bf94      	ite	ls
 80058a6:	4698      	movls	r8, r3
 80058a8:	4680      	movhi	r8, r0
 80058aa:	2303      	movs	r3, #3
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	9b05      	ldr	r3, [sp, #20]
 80058b0:	f023 0204 	bic.w	r2, r3, #4
 80058b4:	6022      	str	r2, [r4, #0]
 80058b6:	f04f 0900 	mov.w	r9, #0
 80058ba:	9700      	str	r7, [sp, #0]
 80058bc:	4633      	mov	r3, r6
 80058be:	aa0b      	add	r2, sp, #44	; 0x2c
 80058c0:	4621      	mov	r1, r4
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 f9d8 	bl	8005c78 <_printf_common>
 80058c8:	3001      	adds	r0, #1
 80058ca:	f040 8090 	bne.w	80059ee <_printf_float+0x1e2>
 80058ce:	f04f 30ff 	mov.w	r0, #4294967295
 80058d2:	b00d      	add	sp, #52	; 0x34
 80058d4:	ecbd 8b02 	vpop	{d8}
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fb f92a 	bl	8000b3c <__aeabi_dcmpun>
 80058e8:	b140      	cbz	r0, 80058fc <_printf_float+0xf0>
 80058ea:	464b      	mov	r3, r9
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bfbc      	itt	lt
 80058f0:	232d      	movlt	r3, #45	; 0x2d
 80058f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058f6:	487f      	ldr	r0, [pc, #508]	; (8005af4 <_printf_float+0x2e8>)
 80058f8:	4b7f      	ldr	r3, [pc, #508]	; (8005af8 <_printf_float+0x2ec>)
 80058fa:	e7d1      	b.n	80058a0 <_printf_float+0x94>
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005902:	9206      	str	r2, [sp, #24]
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	d13f      	bne.n	8005988 <_printf_float+0x17c>
 8005908:	2306      	movs	r3, #6
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	9b05      	ldr	r3, [sp, #20]
 800590e:	6861      	ldr	r1, [r4, #4]
 8005910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005914:	2300      	movs	r3, #0
 8005916:	9303      	str	r3, [sp, #12]
 8005918:	ab0a      	add	r3, sp, #40	; 0x28
 800591a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800591e:	ab09      	add	r3, sp, #36	; 0x24
 8005920:	ec49 8b10 	vmov	d0, r8, r9
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	6022      	str	r2, [r4, #0]
 8005928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800592c:	4628      	mov	r0, r5
 800592e:	f7ff fecd 	bl	80056cc <__cvt>
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005936:	2b47      	cmp	r3, #71	; 0x47
 8005938:	4680      	mov	r8, r0
 800593a:	d108      	bne.n	800594e <_printf_float+0x142>
 800593c:	1cc8      	adds	r0, r1, #3
 800593e:	db02      	blt.n	8005946 <_printf_float+0x13a>
 8005940:	6863      	ldr	r3, [r4, #4]
 8005942:	4299      	cmp	r1, r3
 8005944:	dd41      	ble.n	80059ca <_printf_float+0x1be>
 8005946:	f1ab 0b02 	sub.w	fp, fp, #2
 800594a:	fa5f fb8b 	uxtb.w	fp, fp
 800594e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005952:	d820      	bhi.n	8005996 <_printf_float+0x18a>
 8005954:	3901      	subs	r1, #1
 8005956:	465a      	mov	r2, fp
 8005958:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800595c:	9109      	str	r1, [sp, #36]	; 0x24
 800595e:	f7ff ff17 	bl	8005790 <__exponent>
 8005962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005964:	1813      	adds	r3, r2, r0
 8005966:	2a01      	cmp	r2, #1
 8005968:	4681      	mov	r9, r0
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	dc02      	bgt.n	8005974 <_printf_float+0x168>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	07d2      	lsls	r2, r2, #31
 8005972:	d501      	bpl.n	8005978 <_printf_float+0x16c>
 8005974:	3301      	adds	r3, #1
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800597c:	2b00      	cmp	r3, #0
 800597e:	d09c      	beq.n	80058ba <_printf_float+0xae>
 8005980:	232d      	movs	r3, #45	; 0x2d
 8005982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005986:	e798      	b.n	80058ba <_printf_float+0xae>
 8005988:	9a06      	ldr	r2, [sp, #24]
 800598a:	2a47      	cmp	r2, #71	; 0x47
 800598c:	d1be      	bne.n	800590c <_printf_float+0x100>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1bc      	bne.n	800590c <_printf_float+0x100>
 8005992:	2301      	movs	r3, #1
 8005994:	e7b9      	b.n	800590a <_printf_float+0xfe>
 8005996:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800599a:	d118      	bne.n	80059ce <_printf_float+0x1c2>
 800599c:	2900      	cmp	r1, #0
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	dd0b      	ble.n	80059ba <_printf_float+0x1ae>
 80059a2:	6121      	str	r1, [r4, #16]
 80059a4:	b913      	cbnz	r3, 80059ac <_printf_float+0x1a0>
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	07d0      	lsls	r0, r2, #31
 80059aa:	d502      	bpl.n	80059b2 <_printf_float+0x1a6>
 80059ac:	3301      	adds	r3, #1
 80059ae:	440b      	add	r3, r1
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80059b4:	f04f 0900 	mov.w	r9, #0
 80059b8:	e7de      	b.n	8005978 <_printf_float+0x16c>
 80059ba:	b913      	cbnz	r3, 80059c2 <_printf_float+0x1b6>
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	07d2      	lsls	r2, r2, #31
 80059c0:	d501      	bpl.n	80059c6 <_printf_float+0x1ba>
 80059c2:	3302      	adds	r3, #2
 80059c4:	e7f4      	b.n	80059b0 <_printf_float+0x1a4>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e7f2      	b.n	80059b0 <_printf_float+0x1a4>
 80059ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	4299      	cmp	r1, r3
 80059d2:	db05      	blt.n	80059e0 <_printf_float+0x1d4>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	6121      	str	r1, [r4, #16]
 80059d8:	07d8      	lsls	r0, r3, #31
 80059da:	d5ea      	bpl.n	80059b2 <_printf_float+0x1a6>
 80059dc:	1c4b      	adds	r3, r1, #1
 80059de:	e7e7      	b.n	80059b0 <_printf_float+0x1a4>
 80059e0:	2900      	cmp	r1, #0
 80059e2:	bfd4      	ite	le
 80059e4:	f1c1 0202 	rsble	r2, r1, #2
 80059e8:	2201      	movgt	r2, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	e7e0      	b.n	80059b0 <_printf_float+0x1a4>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	055a      	lsls	r2, r3, #21
 80059f2:	d407      	bmi.n	8005a04 <_printf_float+0x1f8>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	4642      	mov	r2, r8
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	d12c      	bne.n	8005a5c <_printf_float+0x250>
 8005a02:	e764      	b.n	80058ce <_printf_float+0xc2>
 8005a04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a08:	f240 80e0 	bls.w	8005bcc <_printf_float+0x3c0>
 8005a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a10:	2200      	movs	r2, #0
 8005a12:	2300      	movs	r3, #0
 8005a14:	f7fb f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d034      	beq.n	8005a86 <_printf_float+0x27a>
 8005a1c:	4a37      	ldr	r2, [pc, #220]	; (8005afc <_printf_float+0x2f0>)
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f af51 	beq.w	80058ce <_printf_float+0xc2>
 8005a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a30:	429a      	cmp	r2, r3
 8005a32:	db02      	blt.n	8005a3a <_printf_float+0x22e>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07d8      	lsls	r0, r3, #31
 8005a38:	d510      	bpl.n	8005a5c <_printf_float+0x250>
 8005a3a:	ee18 3a10 	vmov	r3, s16
 8005a3e:	4652      	mov	r2, sl
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af41 	beq.w	80058ce <_printf_float+0xc2>
 8005a4c:	f04f 0800 	mov.w	r8, #0
 8005a50:	f104 091a 	add.w	r9, r4, #26
 8005a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a56:	3b01      	subs	r3, #1
 8005a58:	4543      	cmp	r3, r8
 8005a5a:	dc09      	bgt.n	8005a70 <_printf_float+0x264>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	079b      	lsls	r3, r3, #30
 8005a60:	f100 8105 	bmi.w	8005c6e <_printf_float+0x462>
 8005a64:	68e0      	ldr	r0, [r4, #12]
 8005a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a68:	4298      	cmp	r0, r3
 8005a6a:	bfb8      	it	lt
 8005a6c:	4618      	movlt	r0, r3
 8005a6e:	e730      	b.n	80058d2 <_printf_float+0xc6>
 8005a70:	2301      	movs	r3, #1
 8005a72:	464a      	mov	r2, r9
 8005a74:	4631      	mov	r1, r6
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b8      	blx	r7
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f43f af27 	beq.w	80058ce <_printf_float+0xc2>
 8005a80:	f108 0801 	add.w	r8, r8, #1
 8005a84:	e7e6      	b.n	8005a54 <_printf_float+0x248>
 8005a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc39      	bgt.n	8005b00 <_printf_float+0x2f4>
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <_printf_float+0x2f0>)
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af19 	beq.w	80058ce <_printf_float+0xc2>
 8005a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d102      	bne.n	8005aaa <_printf_float+0x29e>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	07d9      	lsls	r1, r3, #31
 8005aa8:	d5d8      	bpl.n	8005a5c <_printf_float+0x250>
 8005aaa:	ee18 3a10 	vmov	r3, s16
 8005aae:	4652      	mov	r2, sl
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af09 	beq.w	80058ce <_printf_float+0xc2>
 8005abc:	f04f 0900 	mov.w	r9, #0
 8005ac0:	f104 0a1a 	add.w	sl, r4, #26
 8005ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac6:	425b      	negs	r3, r3
 8005ac8:	454b      	cmp	r3, r9
 8005aca:	dc01      	bgt.n	8005ad0 <_printf_float+0x2c4>
 8005acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ace:	e792      	b.n	80059f6 <_printf_float+0x1ea>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4652      	mov	r2, sl
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f aef7 	beq.w	80058ce <_printf_float+0xc2>
 8005ae0:	f109 0901 	add.w	r9, r9, #1
 8005ae4:	e7ee      	b.n	8005ac4 <_printf_float+0x2b8>
 8005ae6:	bf00      	nop
 8005ae8:	7fefffff 	.word	0x7fefffff
 8005aec:	08008568 	.word	0x08008568
 8005af0:	0800856c 	.word	0x0800856c
 8005af4:	08008574 	.word	0x08008574
 8005af8:	08008570 	.word	0x08008570
 8005afc:	08008578 	.word	0x08008578
 8005b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b04:	429a      	cmp	r2, r3
 8005b06:	bfa8      	it	ge
 8005b08:	461a      	movge	r2, r3
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	4691      	mov	r9, r2
 8005b0e:	dc37      	bgt.n	8005b80 <_printf_float+0x374>
 8005b10:	f04f 0b00 	mov.w	fp, #0
 8005b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b18:	f104 021a 	add.w	r2, r4, #26
 8005b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b1e:	9305      	str	r3, [sp, #20]
 8005b20:	eba3 0309 	sub.w	r3, r3, r9
 8005b24:	455b      	cmp	r3, fp
 8005b26:	dc33      	bgt.n	8005b90 <_printf_float+0x384>
 8005b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	db3b      	blt.n	8005ba8 <_printf_float+0x39c>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	07da      	lsls	r2, r3, #31
 8005b34:	d438      	bmi.n	8005ba8 <_printf_float+0x39c>
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	9a05      	ldr	r2, [sp, #20]
 8005b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b3c:	1a9a      	subs	r2, r3, r2
 8005b3e:	eba3 0901 	sub.w	r9, r3, r1
 8005b42:	4591      	cmp	r9, r2
 8005b44:	bfa8      	it	ge
 8005b46:	4691      	movge	r9, r2
 8005b48:	f1b9 0f00 	cmp.w	r9, #0
 8005b4c:	dc35      	bgt.n	8005bba <_printf_float+0x3ae>
 8005b4e:	f04f 0800 	mov.w	r8, #0
 8005b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b56:	f104 0a1a 	add.w	sl, r4, #26
 8005b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	eba3 0309 	sub.w	r3, r3, r9
 8005b64:	4543      	cmp	r3, r8
 8005b66:	f77f af79 	ble.w	8005a5c <_printf_float+0x250>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f aeaa 	beq.w	80058ce <_printf_float+0xc2>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	e7ec      	b.n	8005b5a <_printf_float+0x34e>
 8005b80:	4613      	mov	r3, r2
 8005b82:	4631      	mov	r1, r6
 8005b84:	4642      	mov	r2, r8
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d1c0      	bne.n	8005b10 <_printf_float+0x304>
 8005b8e:	e69e      	b.n	80058ce <_printf_float+0xc2>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	9205      	str	r2, [sp, #20]
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f ae97 	beq.w	80058ce <_printf_float+0xc2>
 8005ba0:	9a05      	ldr	r2, [sp, #20]
 8005ba2:	f10b 0b01 	add.w	fp, fp, #1
 8005ba6:	e7b9      	b.n	8005b1c <_printf_float+0x310>
 8005ba8:	ee18 3a10 	vmov	r3, s16
 8005bac:	4652      	mov	r2, sl
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d1be      	bne.n	8005b36 <_printf_float+0x32a>
 8005bb8:	e689      	b.n	80058ce <_printf_float+0xc2>
 8005bba:	9a05      	ldr	r2, [sp, #20]
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	4442      	add	r2, r8
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d1c1      	bne.n	8005b4e <_printf_float+0x342>
 8005bca:	e680      	b.n	80058ce <_printf_float+0xc2>
 8005bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bce:	2a01      	cmp	r2, #1
 8005bd0:	dc01      	bgt.n	8005bd6 <_printf_float+0x3ca>
 8005bd2:	07db      	lsls	r3, r3, #31
 8005bd4:	d538      	bpl.n	8005c48 <_printf_float+0x43c>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f ae74 	beq.w	80058ce <_printf_float+0xc2>
 8005be6:	ee18 3a10 	vmov	r3, s16
 8005bea:	4652      	mov	r2, sl
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f ae6b 	beq.w	80058ce <_printf_float+0xc2>
 8005bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f7fa ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c04:	b9d8      	cbnz	r0, 8005c3e <_printf_float+0x432>
 8005c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c08:	f108 0201 	add.w	r2, r8, #1
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	d10e      	bne.n	8005c36 <_printf_float+0x42a>
 8005c18:	e659      	b.n	80058ce <_printf_float+0xc2>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f ae52 	beq.w	80058ce <_printf_float+0xc2>
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	3b01      	subs	r3, #1
 8005c32:	4543      	cmp	r3, r8
 8005c34:	dcf1      	bgt.n	8005c1a <_printf_float+0x40e>
 8005c36:	464b      	mov	r3, r9
 8005c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c3c:	e6dc      	b.n	80059f8 <_printf_float+0x1ec>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0a1a 	add.w	sl, r4, #26
 8005c46:	e7f2      	b.n	8005c2e <_printf_float+0x422>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	e7df      	b.n	8005c0e <_printf_float+0x402>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	464a      	mov	r2, r9
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f ae38 	beq.w	80058ce <_printf_float+0xc2>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	68e3      	ldr	r3, [r4, #12]
 8005c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c66:	1a5b      	subs	r3, r3, r1
 8005c68:	4543      	cmp	r3, r8
 8005c6a:	dcf0      	bgt.n	8005c4e <_printf_float+0x442>
 8005c6c:	e6fa      	b.n	8005a64 <_printf_float+0x258>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	f104 0919 	add.w	r9, r4, #25
 8005c76:	e7f4      	b.n	8005c62 <_printf_float+0x456>

08005c78 <_printf_common>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	4699      	mov	r9, r3
 8005c80:	688a      	ldr	r2, [r1, #8]
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bfb8      	it	lt
 8005c8c:	4613      	movlt	r3, r2
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c94:	4607      	mov	r7, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	b10a      	cbz	r2, 8005c9e <_printf_common+0x26>
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	6033      	str	r3, [r6, #0]
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	0699      	lsls	r1, r3, #26
 8005ca2:	bf42      	ittt	mi
 8005ca4:	6833      	ldrmi	r3, [r6, #0]
 8005ca6:	3302      	addmi	r3, #2
 8005ca8:	6033      	strmi	r3, [r6, #0]
 8005caa:	6825      	ldr	r5, [r4, #0]
 8005cac:	f015 0506 	ands.w	r5, r5, #6
 8005cb0:	d106      	bne.n	8005cc0 <_printf_common+0x48>
 8005cb2:	f104 0a19 	add.w	sl, r4, #25
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	6832      	ldr	r2, [r6, #0]
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	42ab      	cmp	r3, r5
 8005cbe:	dc26      	bgt.n	8005d0e <_printf_common+0x96>
 8005cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc4:	1e13      	subs	r3, r2, #0
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	bf18      	it	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	0692      	lsls	r2, r2, #26
 8005cce:	d42b      	bmi.n	8005d28 <_printf_common+0xb0>
 8005cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c0      	blx	r8
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d01e      	beq.n	8005d1c <_printf_common+0xa4>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	68e5      	ldr	r5, [r4, #12]
 8005ce2:	6832      	ldr	r2, [r6, #0]
 8005ce4:	f003 0306 	and.w	r3, r3, #6
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	bf08      	it	eq
 8005cec:	1aad      	subeq	r5, r5, r2
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	bf0c      	ite	eq
 8005cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf8:	2500      	movne	r5, #0
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	bfc4      	itt	gt
 8005cfe:	1a9b      	subgt	r3, r3, r2
 8005d00:	18ed      	addgt	r5, r5, r3
 8005d02:	2600      	movs	r6, #0
 8005d04:	341a      	adds	r4, #26
 8005d06:	42b5      	cmp	r5, r6
 8005d08:	d11a      	bne.n	8005d40 <_printf_common+0xc8>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e008      	b.n	8005d20 <_printf_common+0xa8>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4649      	mov	r1, r9
 8005d14:	4638      	mov	r0, r7
 8005d16:	47c0      	blx	r8
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d103      	bne.n	8005d24 <_printf_common+0xac>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d24:	3501      	adds	r5, #1
 8005d26:	e7c6      	b.n	8005cb6 <_printf_common+0x3e>
 8005d28:	18e1      	adds	r1, r4, r3
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	2030      	movs	r0, #48	; 0x30
 8005d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d32:	4422      	add	r2, r4
 8005d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	e7c7      	b.n	8005cd0 <_printf_common+0x58>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4622      	mov	r2, r4
 8005d44:	4649      	mov	r1, r9
 8005d46:	4638      	mov	r0, r7
 8005d48:	47c0      	blx	r8
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d0e6      	beq.n	8005d1c <_printf_common+0xa4>
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7d9      	b.n	8005d06 <_printf_common+0x8e>
	...

08005d54 <_printf_i>:
 8005d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	7e0f      	ldrb	r7, [r1, #24]
 8005d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d5c:	2f78      	cmp	r7, #120	; 0x78
 8005d5e:	4691      	mov	r9, r2
 8005d60:	4680      	mov	r8, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	469a      	mov	sl, r3
 8005d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6a:	d807      	bhi.n	8005d7c <_printf_i+0x28>
 8005d6c:	2f62      	cmp	r7, #98	; 0x62
 8005d6e:	d80a      	bhi.n	8005d86 <_printf_i+0x32>
 8005d70:	2f00      	cmp	r7, #0
 8005d72:	f000 80d8 	beq.w	8005f26 <_printf_i+0x1d2>
 8005d76:	2f58      	cmp	r7, #88	; 0x58
 8005d78:	f000 80a3 	beq.w	8005ec2 <_printf_i+0x16e>
 8005d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d84:	e03a      	b.n	8005dfc <_printf_i+0xa8>
 8005d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8a:	2b15      	cmp	r3, #21
 8005d8c:	d8f6      	bhi.n	8005d7c <_printf_i+0x28>
 8005d8e:	a101      	add	r1, pc, #4	; (adr r1, 8005d94 <_printf_i+0x40>)
 8005d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d94:	08005ded 	.word	0x08005ded
 8005d98:	08005e01 	.word	0x08005e01
 8005d9c:	08005d7d 	.word	0x08005d7d
 8005da0:	08005d7d 	.word	0x08005d7d
 8005da4:	08005d7d 	.word	0x08005d7d
 8005da8:	08005d7d 	.word	0x08005d7d
 8005dac:	08005e01 	.word	0x08005e01
 8005db0:	08005d7d 	.word	0x08005d7d
 8005db4:	08005d7d 	.word	0x08005d7d
 8005db8:	08005d7d 	.word	0x08005d7d
 8005dbc:	08005d7d 	.word	0x08005d7d
 8005dc0:	08005f0d 	.word	0x08005f0d
 8005dc4:	08005e31 	.word	0x08005e31
 8005dc8:	08005eef 	.word	0x08005eef
 8005dcc:	08005d7d 	.word	0x08005d7d
 8005dd0:	08005d7d 	.word	0x08005d7d
 8005dd4:	08005f2f 	.word	0x08005f2f
 8005dd8:	08005d7d 	.word	0x08005d7d
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005d7d 	.word	0x08005d7d
 8005de4:	08005d7d 	.word	0x08005d7d
 8005de8:	08005ef7 	.word	0x08005ef7
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	602a      	str	r2, [r5, #0]
 8005df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0a3      	b.n	8005f48 <_printf_i+0x1f4>
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	6829      	ldr	r1, [r5, #0]
 8005e04:	0606      	lsls	r6, r0, #24
 8005e06:	f101 0304 	add.w	r3, r1, #4
 8005e0a:	d50a      	bpl.n	8005e22 <_printf_i+0xce>
 8005e0c:	680e      	ldr	r6, [r1, #0]
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	da03      	bge.n	8005e1c <_printf_i+0xc8>
 8005e14:	232d      	movs	r3, #45	; 0x2d
 8005e16:	4276      	negs	r6, r6
 8005e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e1c:	485e      	ldr	r0, [pc, #376]	; (8005f98 <_printf_i+0x244>)
 8005e1e:	230a      	movs	r3, #10
 8005e20:	e019      	b.n	8005e56 <_printf_i+0x102>
 8005e22:	680e      	ldr	r6, [r1, #0]
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e2a:	bf18      	it	ne
 8005e2c:	b236      	sxthne	r6, r6
 8005e2e:	e7ef      	b.n	8005e10 <_printf_i+0xbc>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1d19      	adds	r1, r3, #4
 8005e36:	6029      	str	r1, [r5, #0]
 8005e38:	0601      	lsls	r1, r0, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xec>
 8005e3c:	681e      	ldr	r6, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <_printf_i+0xf2>
 8005e40:	0646      	lsls	r6, r0, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xe8>
 8005e44:	881e      	ldrh	r6, [r3, #0]
 8005e46:	4854      	ldr	r0, [pc, #336]	; (8005f98 <_printf_i+0x244>)
 8005e48:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2308      	moveq	r3, #8
 8005e4e:	230a      	movne	r3, #10
 8005e50:	2100      	movs	r1, #0
 8005e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e56:	6865      	ldr	r5, [r4, #4]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	bfa2      	ittt	ge
 8005e5e:	6821      	ldrge	r1, [r4, #0]
 8005e60:	f021 0104 	bicge.w	r1, r1, #4
 8005e64:	6021      	strge	r1, [r4, #0]
 8005e66:	b90e      	cbnz	r6, 8005e6c <_printf_i+0x118>
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d04d      	beq.n	8005f08 <_printf_i+0x1b4>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e72:	fb03 6711 	mls	r7, r3, r1, r6
 8005e76:	5dc7      	ldrb	r7, [r0, r7]
 8005e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	42bb      	cmp	r3, r7
 8005e80:	460e      	mov	r6, r1
 8005e82:	d9f4      	bls.n	8005e6e <_printf_i+0x11a>
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d10b      	bne.n	8005ea0 <_printf_i+0x14c>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07de      	lsls	r6, r3, #31
 8005e8c:	d508      	bpl.n	8005ea0 <_printf_i+0x14c>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4299      	cmp	r1, r3
 8005e94:	bfde      	ittt	le
 8005e96:	2330      	movle	r3, #48	; 0x30
 8005e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea0:	1b52      	subs	r2, r2, r5
 8005ea2:	6122      	str	r2, [r4, #16]
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	aa03      	add	r2, sp, #12
 8005eac:	4621      	mov	r1, r4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7ff fee2 	bl	8005c78 <_printf_common>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d14c      	bne.n	8005f52 <_printf_i+0x1fe>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	b004      	add	sp, #16
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	4835      	ldr	r0, [pc, #212]	; (8005f98 <_printf_i+0x244>)
 8005ec4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ec8:	6829      	ldr	r1, [r5, #0]
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed0:	6029      	str	r1, [r5, #0]
 8005ed2:	061d      	lsls	r5, r3, #24
 8005ed4:	d514      	bpl.n	8005f00 <_printf_i+0x1ac>
 8005ed6:	07df      	lsls	r7, r3, #31
 8005ed8:	bf44      	itt	mi
 8005eda:	f043 0320 	orrmi.w	r3, r3, #32
 8005ede:	6023      	strmi	r3, [r4, #0]
 8005ee0:	b91e      	cbnz	r6, 8005eea <_printf_i+0x196>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	f023 0320 	bic.w	r3, r3, #32
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	2310      	movs	r3, #16
 8005eec:	e7b0      	b.n	8005e50 <_printf_i+0xfc>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	f043 0320 	orr.w	r3, r3, #32
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	2378      	movs	r3, #120	; 0x78
 8005ef8:	4828      	ldr	r0, [pc, #160]	; (8005f9c <_printf_i+0x248>)
 8005efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005efe:	e7e3      	b.n	8005ec8 <_printf_i+0x174>
 8005f00:	0659      	lsls	r1, r3, #25
 8005f02:	bf48      	it	mi
 8005f04:	b2b6      	uxthmi	r6, r6
 8005f06:	e7e6      	b.n	8005ed6 <_printf_i+0x182>
 8005f08:	4615      	mov	r5, r2
 8005f0a:	e7bb      	b.n	8005e84 <_printf_i+0x130>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	6826      	ldr	r6, [r4, #0]
 8005f10:	6961      	ldr	r1, [r4, #20]
 8005f12:	1d18      	adds	r0, r3, #4
 8005f14:	6028      	str	r0, [r5, #0]
 8005f16:	0635      	lsls	r5, r6, #24
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	d501      	bpl.n	8005f20 <_printf_i+0x1cc>
 8005f1c:	6019      	str	r1, [r3, #0]
 8005f1e:	e002      	b.n	8005f26 <_printf_i+0x1d2>
 8005f20:	0670      	lsls	r0, r6, #25
 8005f22:	d5fb      	bpl.n	8005f1c <_printf_i+0x1c8>
 8005f24:	8019      	strh	r1, [r3, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	4615      	mov	r5, r2
 8005f2c:	e7ba      	b.n	8005ea4 <_printf_i+0x150>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	1d1a      	adds	r2, r3, #4
 8005f32:	602a      	str	r2, [r5, #0]
 8005f34:	681d      	ldr	r5, [r3, #0]
 8005f36:	6862      	ldr	r2, [r4, #4]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f7fa f958 	bl	80001f0 <memchr>
 8005f40:	b108      	cbz	r0, 8005f46 <_printf_i+0x1f2>
 8005f42:	1b40      	subs	r0, r0, r5
 8005f44:	6060      	str	r0, [r4, #4]
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f50:	e7a8      	b.n	8005ea4 <_printf_i+0x150>
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	462a      	mov	r2, r5
 8005f56:	4649      	mov	r1, r9
 8005f58:	4640      	mov	r0, r8
 8005f5a:	47d0      	blx	sl
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d0ab      	beq.n	8005eb8 <_printf_i+0x164>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	079b      	lsls	r3, r3, #30
 8005f64:	d413      	bmi.n	8005f8e <_printf_i+0x23a>
 8005f66:	68e0      	ldr	r0, [r4, #12]
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	bfb8      	it	lt
 8005f6e:	4618      	movlt	r0, r3
 8005f70:	e7a4      	b.n	8005ebc <_printf_i+0x168>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4632      	mov	r2, r6
 8005f76:	4649      	mov	r1, r9
 8005f78:	4640      	mov	r0, r8
 8005f7a:	47d0      	blx	sl
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d09b      	beq.n	8005eb8 <_printf_i+0x164>
 8005f80:	3501      	adds	r5, #1
 8005f82:	68e3      	ldr	r3, [r4, #12]
 8005f84:	9903      	ldr	r1, [sp, #12]
 8005f86:	1a5b      	subs	r3, r3, r1
 8005f88:	42ab      	cmp	r3, r5
 8005f8a:	dcf2      	bgt.n	8005f72 <_printf_i+0x21e>
 8005f8c:	e7eb      	b.n	8005f66 <_printf_i+0x212>
 8005f8e:	2500      	movs	r5, #0
 8005f90:	f104 0619 	add.w	r6, r4, #25
 8005f94:	e7f5      	b.n	8005f82 <_printf_i+0x22e>
 8005f96:	bf00      	nop
 8005f98:	0800857a 	.word	0x0800857a
 8005f9c:	0800858b 	.word	0x0800858b

08005fa0 <iprintf>:
 8005fa0:	b40f      	push	{r0, r1, r2, r3}
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <iprintf+0x2c>)
 8005fa4:	b513      	push	{r0, r1, r4, lr}
 8005fa6:	681c      	ldr	r4, [r3, #0]
 8005fa8:	b124      	cbz	r4, 8005fb4 <iprintf+0x14>
 8005faa:	69a3      	ldr	r3, [r4, #24]
 8005fac:	b913      	cbnz	r3, 8005fb4 <iprintf+0x14>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 ff00 	bl	8006db4 <__sinit>
 8005fb4:	ab05      	add	r3, sp, #20
 8005fb6:	9a04      	ldr	r2, [sp, #16]
 8005fb8:	68a1      	ldr	r1, [r4, #8]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f001 fdb5 	bl	8007b2c <_vfiprintf_r>
 8005fc2:	b002      	add	sp, #8
 8005fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr
 8005fcc:	2000002c 	.word	0x2000002c

08005fd0 <siprintf>:
 8005fd0:	b40e      	push	{r1, r2, r3}
 8005fd2:	b500      	push	{lr}
 8005fd4:	b09c      	sub	sp, #112	; 0x70
 8005fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fd8:	9002      	str	r0, [sp, #8]
 8005fda:	9006      	str	r0, [sp, #24]
 8005fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fe0:	4809      	ldr	r0, [pc, #36]	; (8006008 <siprintf+0x38>)
 8005fe2:	9107      	str	r1, [sp, #28]
 8005fe4:	9104      	str	r1, [sp, #16]
 8005fe6:	4909      	ldr	r1, [pc, #36]	; (800600c <siprintf+0x3c>)
 8005fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	6800      	ldr	r0, [r0, #0]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	a902      	add	r1, sp, #8
 8005ff4:	f001 fc70 	bl	80078d8 <_svfiprintf_r>
 8005ff8:	9b02      	ldr	r3, [sp, #8]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	b01c      	add	sp, #112	; 0x70
 8006000:	f85d eb04 	ldr.w	lr, [sp], #4
 8006004:	b003      	add	sp, #12
 8006006:	4770      	bx	lr
 8006008:	2000002c 	.word	0x2000002c
 800600c:	ffff0208 	.word	0xffff0208

08006010 <quorem>:
 8006010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	6903      	ldr	r3, [r0, #16]
 8006016:	690c      	ldr	r4, [r1, #16]
 8006018:	42a3      	cmp	r3, r4
 800601a:	4607      	mov	r7, r0
 800601c:	f2c0 8081 	blt.w	8006122 <quorem+0x112>
 8006020:	3c01      	subs	r4, #1
 8006022:	f101 0814 	add.w	r8, r1, #20
 8006026:	f100 0514 	add.w	r5, r0, #20
 800602a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006038:	3301      	adds	r3, #1
 800603a:	429a      	cmp	r2, r3
 800603c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006044:	fbb2 f6f3 	udiv	r6, r2, r3
 8006048:	d331      	bcc.n	80060ae <quorem+0x9e>
 800604a:	f04f 0e00 	mov.w	lr, #0
 800604e:	4640      	mov	r0, r8
 8006050:	46ac      	mov	ip, r5
 8006052:	46f2      	mov	sl, lr
 8006054:	f850 2b04 	ldr.w	r2, [r0], #4
 8006058:	b293      	uxth	r3, r2
 800605a:	fb06 e303 	mla	r3, r6, r3, lr
 800605e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006062:	b29b      	uxth	r3, r3
 8006064:	ebaa 0303 	sub.w	r3, sl, r3
 8006068:	f8dc a000 	ldr.w	sl, [ip]
 800606c:	0c12      	lsrs	r2, r2, #16
 800606e:	fa13 f38a 	uxtah	r3, r3, sl
 8006072:	fb06 e202 	mla	r2, r6, r2, lr
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800607e:	b292      	uxth	r2, r2
 8006080:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006088:	f8bd 3000 	ldrh.w	r3, [sp]
 800608c:	4581      	cmp	r9, r0
 800608e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006092:	f84c 3b04 	str.w	r3, [ip], #4
 8006096:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800609a:	d2db      	bcs.n	8006054 <quorem+0x44>
 800609c:	f855 300b 	ldr.w	r3, [r5, fp]
 80060a0:	b92b      	cbnz	r3, 80060ae <quorem+0x9e>
 80060a2:	9b01      	ldr	r3, [sp, #4]
 80060a4:	3b04      	subs	r3, #4
 80060a6:	429d      	cmp	r5, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	d32e      	bcc.n	800610a <quorem+0xfa>
 80060ac:	613c      	str	r4, [r7, #16]
 80060ae:	4638      	mov	r0, r7
 80060b0:	f001 f9be 	bl	8007430 <__mcmp>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	db24      	blt.n	8006102 <quorem+0xf2>
 80060b8:	3601      	adds	r6, #1
 80060ba:	4628      	mov	r0, r5
 80060bc:	f04f 0c00 	mov.w	ip, #0
 80060c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80060c4:	f8d0 e000 	ldr.w	lr, [r0]
 80060c8:	b293      	uxth	r3, r2
 80060ca:	ebac 0303 	sub.w	r3, ip, r3
 80060ce:	0c12      	lsrs	r2, r2, #16
 80060d0:	fa13 f38e 	uxtah	r3, r3, lr
 80060d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060dc:	b29b      	uxth	r3, r3
 80060de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060e2:	45c1      	cmp	r9, r8
 80060e4:	f840 3b04 	str.w	r3, [r0], #4
 80060e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060ec:	d2e8      	bcs.n	80060c0 <quorem+0xb0>
 80060ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f6:	b922      	cbnz	r2, 8006102 <quorem+0xf2>
 80060f8:	3b04      	subs	r3, #4
 80060fa:	429d      	cmp	r5, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	d30a      	bcc.n	8006116 <quorem+0x106>
 8006100:	613c      	str	r4, [r7, #16]
 8006102:	4630      	mov	r0, r6
 8006104:	b003      	add	sp, #12
 8006106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	3b04      	subs	r3, #4
 800610e:	2a00      	cmp	r2, #0
 8006110:	d1cc      	bne.n	80060ac <quorem+0x9c>
 8006112:	3c01      	subs	r4, #1
 8006114:	e7c7      	b.n	80060a6 <quorem+0x96>
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	3b04      	subs	r3, #4
 800611a:	2a00      	cmp	r2, #0
 800611c:	d1f0      	bne.n	8006100 <quorem+0xf0>
 800611e:	3c01      	subs	r4, #1
 8006120:	e7eb      	b.n	80060fa <quorem+0xea>
 8006122:	2000      	movs	r0, #0
 8006124:	e7ee      	b.n	8006104 <quorem+0xf4>
	...

08006128 <_dtoa_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	ed2d 8b04 	vpush	{d8-d9}
 8006130:	ec57 6b10 	vmov	r6, r7, d0
 8006134:	b093      	sub	sp, #76	; 0x4c
 8006136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800613c:	9106      	str	r1, [sp, #24]
 800613e:	ee10 aa10 	vmov	sl, s0
 8006142:	4604      	mov	r4, r0
 8006144:	9209      	str	r2, [sp, #36]	; 0x24
 8006146:	930c      	str	r3, [sp, #48]	; 0x30
 8006148:	46bb      	mov	fp, r7
 800614a:	b975      	cbnz	r5, 800616a <_dtoa_r+0x42>
 800614c:	2010      	movs	r0, #16
 800614e:	f000 fed7 	bl	8006f00 <malloc>
 8006152:	4602      	mov	r2, r0
 8006154:	6260      	str	r0, [r4, #36]	; 0x24
 8006156:	b920      	cbnz	r0, 8006162 <_dtoa_r+0x3a>
 8006158:	4ba7      	ldr	r3, [pc, #668]	; (80063f8 <_dtoa_r+0x2d0>)
 800615a:	21ea      	movs	r1, #234	; 0xea
 800615c:	48a7      	ldr	r0, [pc, #668]	; (80063fc <_dtoa_r+0x2d4>)
 800615e:	f001 ff3b 	bl	8007fd8 <__assert_func>
 8006162:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006166:	6005      	str	r5, [r0, #0]
 8006168:	60c5      	str	r5, [r0, #12]
 800616a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800616c:	6819      	ldr	r1, [r3, #0]
 800616e:	b151      	cbz	r1, 8006186 <_dtoa_r+0x5e>
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	604a      	str	r2, [r1, #4]
 8006174:	2301      	movs	r3, #1
 8006176:	4093      	lsls	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
 800617a:	4620      	mov	r0, r4
 800617c:	f000 ff16 	bl	8006fac <_Bfree>
 8006180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	1e3b      	subs	r3, r7, #0
 8006188:	bfaa      	itet	ge
 800618a:	2300      	movge	r3, #0
 800618c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006190:	f8c8 3000 	strge.w	r3, [r8]
 8006194:	4b9a      	ldr	r3, [pc, #616]	; (8006400 <_dtoa_r+0x2d8>)
 8006196:	bfbc      	itt	lt
 8006198:	2201      	movlt	r2, #1
 800619a:	f8c8 2000 	strlt.w	r2, [r8]
 800619e:	ea33 030b 	bics.w	r3, r3, fp
 80061a2:	d11b      	bne.n	80061dc <_dtoa_r+0xb4>
 80061a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061b0:	4333      	orrs	r3, r6
 80061b2:	f000 8592 	beq.w	8006cda <_dtoa_r+0xbb2>
 80061b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061b8:	b963      	cbnz	r3, 80061d4 <_dtoa_r+0xac>
 80061ba:	4b92      	ldr	r3, [pc, #584]	; (8006404 <_dtoa_r+0x2dc>)
 80061bc:	e022      	b.n	8006204 <_dtoa_r+0xdc>
 80061be:	4b92      	ldr	r3, [pc, #584]	; (8006408 <_dtoa_r+0x2e0>)
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	3308      	adds	r3, #8
 80061c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	9801      	ldr	r0, [sp, #4]
 80061ca:	b013      	add	sp, #76	; 0x4c
 80061cc:	ecbd 8b04 	vpop	{d8-d9}
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	4b8b      	ldr	r3, [pc, #556]	; (8006404 <_dtoa_r+0x2dc>)
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	3303      	adds	r3, #3
 80061da:	e7f3      	b.n	80061c4 <_dtoa_r+0x9c>
 80061dc:	2200      	movs	r2, #0
 80061de:	2300      	movs	r3, #0
 80061e0:	4650      	mov	r0, sl
 80061e2:	4659      	mov	r1, fp
 80061e4:	f7fa fc78 	bl	8000ad8 <__aeabi_dcmpeq>
 80061e8:	ec4b ab19 	vmov	d9, sl, fp
 80061ec:	4680      	mov	r8, r0
 80061ee:	b158      	cbz	r0, 8006208 <_dtoa_r+0xe0>
 80061f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f2:	2301      	movs	r3, #1
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 856b 	beq.w	8006cd4 <_dtoa_r+0xbac>
 80061fe:	4883      	ldr	r0, [pc, #524]	; (800640c <_dtoa_r+0x2e4>)
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	1e43      	subs	r3, r0, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	e7df      	b.n	80061c8 <_dtoa_r+0xa0>
 8006208:	ec4b ab10 	vmov	d0, sl, fp
 800620c:	aa10      	add	r2, sp, #64	; 0x40
 800620e:	a911      	add	r1, sp, #68	; 0x44
 8006210:	4620      	mov	r0, r4
 8006212:	f001 f9b3 	bl	800757c <__d2b>
 8006216:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800621a:	ee08 0a10 	vmov	s16, r0
 800621e:	2d00      	cmp	r5, #0
 8006220:	f000 8084 	beq.w	800632c <_dtoa_r+0x204>
 8006224:	ee19 3a90 	vmov	r3, s19
 8006228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800622c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006230:	4656      	mov	r6, sl
 8006232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800623a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800623e:	4b74      	ldr	r3, [pc, #464]	; (8006410 <_dtoa_r+0x2e8>)
 8006240:	2200      	movs	r2, #0
 8006242:	4630      	mov	r0, r6
 8006244:	4639      	mov	r1, r7
 8006246:	f7fa f827 	bl	8000298 <__aeabi_dsub>
 800624a:	a365      	add	r3, pc, #404	; (adr r3, 80063e0 <_dtoa_r+0x2b8>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f9da 	bl	8000608 <__aeabi_dmul>
 8006254:	a364      	add	r3, pc, #400	; (adr r3, 80063e8 <_dtoa_r+0x2c0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f81f 	bl	800029c <__adddf3>
 800625e:	4606      	mov	r6, r0
 8006260:	4628      	mov	r0, r5
 8006262:	460f      	mov	r7, r1
 8006264:	f7fa f966 	bl	8000534 <__aeabi_i2d>
 8006268:	a361      	add	r3, pc, #388	; (adr r3, 80063f0 <_dtoa_r+0x2c8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f9cb 	bl	8000608 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4630      	mov	r0, r6
 8006278:	4639      	mov	r1, r7
 800627a:	f7fa f80f 	bl	800029c <__adddf3>
 800627e:	4606      	mov	r6, r0
 8006280:	460f      	mov	r7, r1
 8006282:	f7fa fc71 	bl	8000b68 <__aeabi_d2iz>
 8006286:	2200      	movs	r2, #0
 8006288:	9000      	str	r0, [sp, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	4630      	mov	r0, r6
 800628e:	4639      	mov	r1, r7
 8006290:	f7fa fc2c 	bl	8000aec <__aeabi_dcmplt>
 8006294:	b150      	cbz	r0, 80062ac <_dtoa_r+0x184>
 8006296:	9800      	ldr	r0, [sp, #0]
 8006298:	f7fa f94c 	bl	8000534 <__aeabi_i2d>
 800629c:	4632      	mov	r2, r6
 800629e:	463b      	mov	r3, r7
 80062a0:	f7fa fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80062a4:	b910      	cbnz	r0, 80062ac <_dtoa_r+0x184>
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	2b16      	cmp	r3, #22
 80062b0:	d85a      	bhi.n	8006368 <_dtoa_r+0x240>
 80062b2:	9a00      	ldr	r2, [sp, #0]
 80062b4:	4b57      	ldr	r3, [pc, #348]	; (8006414 <_dtoa_r+0x2ec>)
 80062b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	ec51 0b19 	vmov	r0, r1, d9
 80062c2:	f7fa fc13 	bl	8000aec <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d050      	beq.n	800636c <_dtoa_r+0x244>
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062d6:	1b5d      	subs	r5, r3, r5
 80062d8:	1e6b      	subs	r3, r5, #1
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	bf45      	ittet	mi
 80062de:	f1c5 0301 	rsbmi	r3, r5, #1
 80062e2:	9304      	strmi	r3, [sp, #16]
 80062e4:	2300      	movpl	r3, #0
 80062e6:	2300      	movmi	r3, #0
 80062e8:	bf4c      	ite	mi
 80062ea:	9305      	strmi	r3, [sp, #20]
 80062ec:	9304      	strpl	r3, [sp, #16]
 80062ee:	9b00      	ldr	r3, [sp, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	db3d      	blt.n	8006370 <_dtoa_r+0x248>
 80062f4:	9b05      	ldr	r3, [sp, #20]
 80062f6:	9a00      	ldr	r2, [sp, #0]
 80062f8:	920a      	str	r2, [sp, #40]	; 0x28
 80062fa:	4413      	add	r3, r2
 80062fc:	9305      	str	r3, [sp, #20]
 80062fe:	2300      	movs	r3, #0
 8006300:	9307      	str	r3, [sp, #28]
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	2b09      	cmp	r3, #9
 8006306:	f200 8089 	bhi.w	800641c <_dtoa_r+0x2f4>
 800630a:	2b05      	cmp	r3, #5
 800630c:	bfc4      	itt	gt
 800630e:	3b04      	subgt	r3, #4
 8006310:	9306      	strgt	r3, [sp, #24]
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	f1a3 0302 	sub.w	r3, r3, #2
 8006318:	bfcc      	ite	gt
 800631a:	2500      	movgt	r5, #0
 800631c:	2501      	movle	r5, #1
 800631e:	2b03      	cmp	r3, #3
 8006320:	f200 8087 	bhi.w	8006432 <_dtoa_r+0x30a>
 8006324:	e8df f003 	tbb	[pc, r3]
 8006328:	59383a2d 	.word	0x59383a2d
 800632c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006330:	441d      	add	r5, r3
 8006332:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006336:	2b20      	cmp	r3, #32
 8006338:	bfc1      	itttt	gt
 800633a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800633e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006342:	fa0b f303 	lslgt.w	r3, fp, r3
 8006346:	fa26 f000 	lsrgt.w	r0, r6, r0
 800634a:	bfda      	itte	le
 800634c:	f1c3 0320 	rsble	r3, r3, #32
 8006350:	fa06 f003 	lslle.w	r0, r6, r3
 8006354:	4318      	orrgt	r0, r3
 8006356:	f7fa f8dd 	bl	8000514 <__aeabi_ui2d>
 800635a:	2301      	movs	r3, #1
 800635c:	4606      	mov	r6, r0
 800635e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006362:	3d01      	subs	r5, #1
 8006364:	930e      	str	r3, [sp, #56]	; 0x38
 8006366:	e76a      	b.n	800623e <_dtoa_r+0x116>
 8006368:	2301      	movs	r3, #1
 800636a:	e7b2      	b.n	80062d2 <_dtoa_r+0x1aa>
 800636c:	900b      	str	r0, [sp, #44]	; 0x2c
 800636e:	e7b1      	b.n	80062d4 <_dtoa_r+0x1ac>
 8006370:	9b04      	ldr	r3, [sp, #16]
 8006372:	9a00      	ldr	r2, [sp, #0]
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	4253      	negs	r3, r2
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	2300      	movs	r3, #0
 800637e:	930a      	str	r3, [sp, #40]	; 0x28
 8006380:	e7bf      	b.n	8006302 <_dtoa_r+0x1da>
 8006382:	2300      	movs	r3, #0
 8006384:	9308      	str	r3, [sp, #32]
 8006386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	dc55      	bgt.n	8006438 <_dtoa_r+0x310>
 800638c:	2301      	movs	r3, #1
 800638e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006392:	461a      	mov	r2, r3
 8006394:	9209      	str	r2, [sp, #36]	; 0x24
 8006396:	e00c      	b.n	80063b2 <_dtoa_r+0x28a>
 8006398:	2301      	movs	r3, #1
 800639a:	e7f3      	b.n	8006384 <_dtoa_r+0x25c>
 800639c:	2300      	movs	r3, #0
 800639e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	9b00      	ldr	r3, [sp, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	3301      	adds	r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	bfb8      	it	lt
 80063b0:	2301      	movlt	r3, #1
 80063b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063b4:	2200      	movs	r2, #0
 80063b6:	6042      	str	r2, [r0, #4]
 80063b8:	2204      	movs	r2, #4
 80063ba:	f102 0614 	add.w	r6, r2, #20
 80063be:	429e      	cmp	r6, r3
 80063c0:	6841      	ldr	r1, [r0, #4]
 80063c2:	d93d      	bls.n	8006440 <_dtoa_r+0x318>
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fdb1 	bl	8006f2c <_Balloc>
 80063ca:	9001      	str	r0, [sp, #4]
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d13b      	bne.n	8006448 <_dtoa_r+0x320>
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <_dtoa_r+0x2f0>)
 80063d2:	4602      	mov	r2, r0
 80063d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063d8:	e6c0      	b.n	800615c <_dtoa_r+0x34>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7df      	b.n	800639e <_dtoa_r+0x276>
 80063de:	bf00      	nop
 80063e0:	636f4361 	.word	0x636f4361
 80063e4:	3fd287a7 	.word	0x3fd287a7
 80063e8:	8b60c8b3 	.word	0x8b60c8b3
 80063ec:	3fc68a28 	.word	0x3fc68a28
 80063f0:	509f79fb 	.word	0x509f79fb
 80063f4:	3fd34413 	.word	0x3fd34413
 80063f8:	080085a9 	.word	0x080085a9
 80063fc:	080085c0 	.word	0x080085c0
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	080085a5 	.word	0x080085a5
 8006408:	0800859c 	.word	0x0800859c
 800640c:	08008579 	.word	0x08008579
 8006410:	3ff80000 	.word	0x3ff80000
 8006414:	08008710 	.word	0x08008710
 8006418:	0800861b 	.word	0x0800861b
 800641c:	2501      	movs	r5, #1
 800641e:	2300      	movs	r3, #0
 8006420:	9306      	str	r3, [sp, #24]
 8006422:	9508      	str	r5, [sp, #32]
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800642c:	2200      	movs	r2, #0
 800642e:	2312      	movs	r3, #18
 8006430:	e7b0      	b.n	8006394 <_dtoa_r+0x26c>
 8006432:	2301      	movs	r3, #1
 8006434:	9308      	str	r3, [sp, #32]
 8006436:	e7f5      	b.n	8006424 <_dtoa_r+0x2fc>
 8006438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800643e:	e7b8      	b.n	80063b2 <_dtoa_r+0x28a>
 8006440:	3101      	adds	r1, #1
 8006442:	6041      	str	r1, [r0, #4]
 8006444:	0052      	lsls	r2, r2, #1
 8006446:	e7b8      	b.n	80063ba <_dtoa_r+0x292>
 8006448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644a:	9a01      	ldr	r2, [sp, #4]
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	2b0e      	cmp	r3, #14
 8006452:	f200 809d 	bhi.w	8006590 <_dtoa_r+0x468>
 8006456:	2d00      	cmp	r5, #0
 8006458:	f000 809a 	beq.w	8006590 <_dtoa_r+0x468>
 800645c:	9b00      	ldr	r3, [sp, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd32      	ble.n	80064c8 <_dtoa_r+0x3a0>
 8006462:	4ab7      	ldr	r2, [pc, #732]	; (8006740 <_dtoa_r+0x618>)
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800646c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006470:	9b00      	ldr	r3, [sp, #0]
 8006472:	05d8      	lsls	r0, r3, #23
 8006474:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006478:	d516      	bpl.n	80064a8 <_dtoa_r+0x380>
 800647a:	4bb2      	ldr	r3, [pc, #712]	; (8006744 <_dtoa_r+0x61c>)
 800647c:	ec51 0b19 	vmov	r0, r1, d9
 8006480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006484:	f7fa f9ea 	bl	800085c <__aeabi_ddiv>
 8006488:	f007 070f 	and.w	r7, r7, #15
 800648c:	4682      	mov	sl, r0
 800648e:	468b      	mov	fp, r1
 8006490:	2503      	movs	r5, #3
 8006492:	4eac      	ldr	r6, [pc, #688]	; (8006744 <_dtoa_r+0x61c>)
 8006494:	b957      	cbnz	r7, 80064ac <_dtoa_r+0x384>
 8006496:	4642      	mov	r2, r8
 8006498:	464b      	mov	r3, r9
 800649a:	4650      	mov	r0, sl
 800649c:	4659      	mov	r1, fp
 800649e:	f7fa f9dd 	bl	800085c <__aeabi_ddiv>
 80064a2:	4682      	mov	sl, r0
 80064a4:	468b      	mov	fp, r1
 80064a6:	e028      	b.n	80064fa <_dtoa_r+0x3d2>
 80064a8:	2502      	movs	r5, #2
 80064aa:	e7f2      	b.n	8006492 <_dtoa_r+0x36a>
 80064ac:	07f9      	lsls	r1, r7, #31
 80064ae:	d508      	bpl.n	80064c2 <_dtoa_r+0x39a>
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064b8:	f7fa f8a6 	bl	8000608 <__aeabi_dmul>
 80064bc:	3501      	adds	r5, #1
 80064be:	4680      	mov	r8, r0
 80064c0:	4689      	mov	r9, r1
 80064c2:	107f      	asrs	r7, r7, #1
 80064c4:	3608      	adds	r6, #8
 80064c6:	e7e5      	b.n	8006494 <_dtoa_r+0x36c>
 80064c8:	f000 809b 	beq.w	8006602 <_dtoa_r+0x4da>
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	4f9d      	ldr	r7, [pc, #628]	; (8006744 <_dtoa_r+0x61c>)
 80064d0:	425e      	negs	r6, r3
 80064d2:	4b9b      	ldr	r3, [pc, #620]	; (8006740 <_dtoa_r+0x618>)
 80064d4:	f006 020f 	and.w	r2, r6, #15
 80064d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	ec51 0b19 	vmov	r0, r1, d9
 80064e4:	f7fa f890 	bl	8000608 <__aeabi_dmul>
 80064e8:	1136      	asrs	r6, r6, #4
 80064ea:	4682      	mov	sl, r0
 80064ec:	468b      	mov	fp, r1
 80064ee:	2300      	movs	r3, #0
 80064f0:	2502      	movs	r5, #2
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d17a      	bne.n	80065ec <_dtoa_r+0x4c4>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d3      	bne.n	80064a2 <_dtoa_r+0x37a>
 80064fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8082 	beq.w	8006606 <_dtoa_r+0x4de>
 8006502:	4b91      	ldr	r3, [pc, #580]	; (8006748 <_dtoa_r+0x620>)
 8006504:	2200      	movs	r2, #0
 8006506:	4650      	mov	r0, sl
 8006508:	4659      	mov	r1, fp
 800650a:	f7fa faef 	bl	8000aec <__aeabi_dcmplt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d079      	beq.n	8006606 <_dtoa_r+0x4de>
 8006512:	9b03      	ldr	r3, [sp, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d076      	beq.n	8006606 <_dtoa_r+0x4de>
 8006518:	9b02      	ldr	r3, [sp, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd36      	ble.n	800658c <_dtoa_r+0x464>
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	4650      	mov	r0, sl
 8006522:	4659      	mov	r1, fp
 8006524:	1e5f      	subs	r7, r3, #1
 8006526:	2200      	movs	r2, #0
 8006528:	4b88      	ldr	r3, [pc, #544]	; (800674c <_dtoa_r+0x624>)
 800652a:	f7fa f86d 	bl	8000608 <__aeabi_dmul>
 800652e:	9e02      	ldr	r6, [sp, #8]
 8006530:	4682      	mov	sl, r0
 8006532:	468b      	mov	fp, r1
 8006534:	3501      	adds	r5, #1
 8006536:	4628      	mov	r0, r5
 8006538:	f7f9 fffc 	bl	8000534 <__aeabi_i2d>
 800653c:	4652      	mov	r2, sl
 800653e:	465b      	mov	r3, fp
 8006540:	f7fa f862 	bl	8000608 <__aeabi_dmul>
 8006544:	4b82      	ldr	r3, [pc, #520]	; (8006750 <_dtoa_r+0x628>)
 8006546:	2200      	movs	r2, #0
 8006548:	f7f9 fea8 	bl	800029c <__adddf3>
 800654c:	46d0      	mov	r8, sl
 800654e:	46d9      	mov	r9, fp
 8006550:	4682      	mov	sl, r0
 8006552:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006556:	2e00      	cmp	r6, #0
 8006558:	d158      	bne.n	800660c <_dtoa_r+0x4e4>
 800655a:	4b7e      	ldr	r3, [pc, #504]	; (8006754 <_dtoa_r+0x62c>)
 800655c:	2200      	movs	r2, #0
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7f9 fe99 	bl	8000298 <__aeabi_dsub>
 8006566:	4652      	mov	r2, sl
 8006568:	465b      	mov	r3, fp
 800656a:	4680      	mov	r8, r0
 800656c:	4689      	mov	r9, r1
 800656e:	f7fa fadb 	bl	8000b28 <__aeabi_dcmpgt>
 8006572:	2800      	cmp	r0, #0
 8006574:	f040 8295 	bne.w	8006aa2 <_dtoa_r+0x97a>
 8006578:	4652      	mov	r2, sl
 800657a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa fab3 	bl	8000aec <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f040 8289 	bne.w	8006a9e <_dtoa_r+0x976>
 800658c:	ec5b ab19 	vmov	sl, fp, d9
 8006590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006592:	2b00      	cmp	r3, #0
 8006594:	f2c0 8148 	blt.w	8006828 <_dtoa_r+0x700>
 8006598:	9a00      	ldr	r2, [sp, #0]
 800659a:	2a0e      	cmp	r2, #14
 800659c:	f300 8144 	bgt.w	8006828 <_dtoa_r+0x700>
 80065a0:	4b67      	ldr	r3, [pc, #412]	; (8006740 <_dtoa_r+0x618>)
 80065a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f280 80d5 	bge.w	800675c <_dtoa_r+0x634>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f300 80d1 	bgt.w	800675c <_dtoa_r+0x634>
 80065ba:	f040 826f 	bne.w	8006a9c <_dtoa_r+0x974>
 80065be:	4b65      	ldr	r3, [pc, #404]	; (8006754 <_dtoa_r+0x62c>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7fa faa1 	bl	8000b14 <__aeabi_dcmpge>
 80065d2:	9e03      	ldr	r6, [sp, #12]
 80065d4:	4637      	mov	r7, r6
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 8245 	bne.w	8006a66 <_dtoa_r+0x93e>
 80065dc:	9d01      	ldr	r5, [sp, #4]
 80065de:	2331      	movs	r3, #49	; 0x31
 80065e0:	f805 3b01 	strb.w	r3, [r5], #1
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	e240      	b.n	8006a6e <_dtoa_r+0x946>
 80065ec:	07f2      	lsls	r2, r6, #31
 80065ee:	d505      	bpl.n	80065fc <_dtoa_r+0x4d4>
 80065f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f4:	f7fa f808 	bl	8000608 <__aeabi_dmul>
 80065f8:	3501      	adds	r5, #1
 80065fa:	2301      	movs	r3, #1
 80065fc:	1076      	asrs	r6, r6, #1
 80065fe:	3708      	adds	r7, #8
 8006600:	e777      	b.n	80064f2 <_dtoa_r+0x3ca>
 8006602:	2502      	movs	r5, #2
 8006604:	e779      	b.n	80064fa <_dtoa_r+0x3d2>
 8006606:	9f00      	ldr	r7, [sp, #0]
 8006608:	9e03      	ldr	r6, [sp, #12]
 800660a:	e794      	b.n	8006536 <_dtoa_r+0x40e>
 800660c:	9901      	ldr	r1, [sp, #4]
 800660e:	4b4c      	ldr	r3, [pc, #304]	; (8006740 <_dtoa_r+0x618>)
 8006610:	4431      	add	r1, r6
 8006612:	910d      	str	r1, [sp, #52]	; 0x34
 8006614:	9908      	ldr	r1, [sp, #32]
 8006616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800661a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800661e:	2900      	cmp	r1, #0
 8006620:	d043      	beq.n	80066aa <_dtoa_r+0x582>
 8006622:	494d      	ldr	r1, [pc, #308]	; (8006758 <_dtoa_r+0x630>)
 8006624:	2000      	movs	r0, #0
 8006626:	f7fa f919 	bl	800085c <__aeabi_ddiv>
 800662a:	4652      	mov	r2, sl
 800662c:	465b      	mov	r3, fp
 800662e:	f7f9 fe33 	bl	8000298 <__aeabi_dsub>
 8006632:	9d01      	ldr	r5, [sp, #4]
 8006634:	4682      	mov	sl, r0
 8006636:	468b      	mov	fp, r1
 8006638:	4649      	mov	r1, r9
 800663a:	4640      	mov	r0, r8
 800663c:	f7fa fa94 	bl	8000b68 <__aeabi_d2iz>
 8006640:	4606      	mov	r6, r0
 8006642:	f7f9 ff77 	bl	8000534 <__aeabi_i2d>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7f9 fe23 	bl	8000298 <__aeabi_dsub>
 8006652:	3630      	adds	r6, #48	; 0x30
 8006654:	f805 6b01 	strb.w	r6, [r5], #1
 8006658:	4652      	mov	r2, sl
 800665a:	465b      	mov	r3, fp
 800665c:	4680      	mov	r8, r0
 800665e:	4689      	mov	r9, r1
 8006660:	f7fa fa44 	bl	8000aec <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d163      	bne.n	8006730 <_dtoa_r+0x608>
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	4936      	ldr	r1, [pc, #216]	; (8006748 <_dtoa_r+0x620>)
 800666e:	2000      	movs	r0, #0
 8006670:	f7f9 fe12 	bl	8000298 <__aeabi_dsub>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	f7fa fa38 	bl	8000aec <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f040 80b5 	bne.w	80067ec <_dtoa_r+0x6c4>
 8006682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006684:	429d      	cmp	r5, r3
 8006686:	d081      	beq.n	800658c <_dtoa_r+0x464>
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <_dtoa_r+0x624>)
 800668a:	2200      	movs	r2, #0
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 ffba 	bl	8000608 <__aeabi_dmul>
 8006694:	4b2d      	ldr	r3, [pc, #180]	; (800674c <_dtoa_r+0x624>)
 8006696:	4682      	mov	sl, r0
 8006698:	468b      	mov	fp, r1
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	2200      	movs	r2, #0
 80066a0:	f7f9 ffb2 	bl	8000608 <__aeabi_dmul>
 80066a4:	4680      	mov	r8, r0
 80066a6:	4689      	mov	r9, r1
 80066a8:	e7c6      	b.n	8006638 <_dtoa_r+0x510>
 80066aa:	4650      	mov	r0, sl
 80066ac:	4659      	mov	r1, fp
 80066ae:	f7f9 ffab 	bl	8000608 <__aeabi_dmul>
 80066b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066b4:	9d01      	ldr	r5, [sp, #4]
 80066b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066b8:	4682      	mov	sl, r0
 80066ba:	468b      	mov	fp, r1
 80066bc:	4649      	mov	r1, r9
 80066be:	4640      	mov	r0, r8
 80066c0:	f7fa fa52 	bl	8000b68 <__aeabi_d2iz>
 80066c4:	4606      	mov	r6, r0
 80066c6:	f7f9 ff35 	bl	8000534 <__aeabi_i2d>
 80066ca:	3630      	adds	r6, #48	; 0x30
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7f9 fde0 	bl	8000298 <__aeabi_dsub>
 80066d8:	f805 6b01 	strb.w	r6, [r5], #1
 80066dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066de:	429d      	cmp	r5, r3
 80066e0:	4680      	mov	r8, r0
 80066e2:	4689      	mov	r9, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	d124      	bne.n	8006734 <_dtoa_r+0x60c>
 80066ea:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <_dtoa_r+0x630>)
 80066ec:	4650      	mov	r0, sl
 80066ee:	4659      	mov	r1, fp
 80066f0:	f7f9 fdd4 	bl	800029c <__adddf3>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4640      	mov	r0, r8
 80066fa:	4649      	mov	r1, r9
 80066fc:	f7fa fa14 	bl	8000b28 <__aeabi_dcmpgt>
 8006700:	2800      	cmp	r0, #0
 8006702:	d173      	bne.n	80067ec <_dtoa_r+0x6c4>
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	4913      	ldr	r1, [pc, #76]	; (8006758 <_dtoa_r+0x630>)
 800670a:	2000      	movs	r0, #0
 800670c:	f7f9 fdc4 	bl	8000298 <__aeabi_dsub>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4640      	mov	r0, r8
 8006716:	4649      	mov	r1, r9
 8006718:	f7fa f9e8 	bl	8000aec <__aeabi_dcmplt>
 800671c:	2800      	cmp	r0, #0
 800671e:	f43f af35 	beq.w	800658c <_dtoa_r+0x464>
 8006722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006724:	1e6b      	subs	r3, r5, #1
 8006726:	930f      	str	r3, [sp, #60]	; 0x3c
 8006728:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800672c:	2b30      	cmp	r3, #48	; 0x30
 800672e:	d0f8      	beq.n	8006722 <_dtoa_r+0x5fa>
 8006730:	9700      	str	r7, [sp, #0]
 8006732:	e049      	b.n	80067c8 <_dtoa_r+0x6a0>
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <_dtoa_r+0x624>)
 8006736:	f7f9 ff67 	bl	8000608 <__aeabi_dmul>
 800673a:	4680      	mov	r8, r0
 800673c:	4689      	mov	r9, r1
 800673e:	e7bd      	b.n	80066bc <_dtoa_r+0x594>
 8006740:	08008710 	.word	0x08008710
 8006744:	080086e8 	.word	0x080086e8
 8006748:	3ff00000 	.word	0x3ff00000
 800674c:	40240000 	.word	0x40240000
 8006750:	401c0000 	.word	0x401c0000
 8006754:	40140000 	.word	0x40140000
 8006758:	3fe00000 	.word	0x3fe00000
 800675c:	9d01      	ldr	r5, [sp, #4]
 800675e:	4656      	mov	r6, sl
 8006760:	465f      	mov	r7, fp
 8006762:	4642      	mov	r2, r8
 8006764:	464b      	mov	r3, r9
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7fa f877 	bl	800085c <__aeabi_ddiv>
 800676e:	f7fa f9fb 	bl	8000b68 <__aeabi_d2iz>
 8006772:	4682      	mov	sl, r0
 8006774:	f7f9 fede 	bl	8000534 <__aeabi_i2d>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	f7f9 ff44 	bl	8000608 <__aeabi_dmul>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800678c:	f7f9 fd84 	bl	8000298 <__aeabi_dsub>
 8006790:	f805 6b01 	strb.w	r6, [r5], #1
 8006794:	9e01      	ldr	r6, [sp, #4]
 8006796:	9f03      	ldr	r7, [sp, #12]
 8006798:	1bae      	subs	r6, r5, r6
 800679a:	42b7      	cmp	r7, r6
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	d135      	bne.n	800680e <_dtoa_r+0x6e6>
 80067a2:	f7f9 fd7b 	bl	800029c <__adddf3>
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	f7fa f9bb 	bl	8000b28 <__aeabi_dcmpgt>
 80067b2:	b9d0      	cbnz	r0, 80067ea <_dtoa_r+0x6c2>
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c0:	b110      	cbz	r0, 80067c8 <_dtoa_r+0x6a0>
 80067c2:	f01a 0f01 	tst.w	sl, #1
 80067c6:	d110      	bne.n	80067ea <_dtoa_r+0x6c2>
 80067c8:	4620      	mov	r0, r4
 80067ca:	ee18 1a10 	vmov	r1, s16
 80067ce:	f000 fbed 	bl	8006fac <_Bfree>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9800      	ldr	r0, [sp, #0]
 80067d6:	702b      	strb	r3, [r5, #0]
 80067d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067da:	3001      	adds	r0, #1
 80067dc:	6018      	str	r0, [r3, #0]
 80067de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f43f acf1 	beq.w	80061c8 <_dtoa_r+0xa0>
 80067e6:	601d      	str	r5, [r3, #0]
 80067e8:	e4ee      	b.n	80061c8 <_dtoa_r+0xa0>
 80067ea:	9f00      	ldr	r7, [sp, #0]
 80067ec:	462b      	mov	r3, r5
 80067ee:	461d      	mov	r5, r3
 80067f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067f4:	2a39      	cmp	r2, #57	; 0x39
 80067f6:	d106      	bne.n	8006806 <_dtoa_r+0x6de>
 80067f8:	9a01      	ldr	r2, [sp, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d1f7      	bne.n	80067ee <_dtoa_r+0x6c6>
 80067fe:	9901      	ldr	r1, [sp, #4]
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	3701      	adds	r7, #1
 8006804:	700a      	strb	r2, [r1, #0]
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	3201      	adds	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e790      	b.n	8006730 <_dtoa_r+0x608>
 800680e:	4ba6      	ldr	r3, [pc, #664]	; (8006aa8 <_dtoa_r+0x980>)
 8006810:	2200      	movs	r2, #0
 8006812:	f7f9 fef9 	bl	8000608 <__aeabi_dmul>
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	4606      	mov	r6, r0
 800681c:	460f      	mov	r7, r1
 800681e:	f7fa f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006822:	2800      	cmp	r0, #0
 8006824:	d09d      	beq.n	8006762 <_dtoa_r+0x63a>
 8006826:	e7cf      	b.n	80067c8 <_dtoa_r+0x6a0>
 8006828:	9a08      	ldr	r2, [sp, #32]
 800682a:	2a00      	cmp	r2, #0
 800682c:	f000 80d7 	beq.w	80069de <_dtoa_r+0x8b6>
 8006830:	9a06      	ldr	r2, [sp, #24]
 8006832:	2a01      	cmp	r2, #1
 8006834:	f300 80ba 	bgt.w	80069ac <_dtoa_r+0x884>
 8006838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800683a:	2a00      	cmp	r2, #0
 800683c:	f000 80b2 	beq.w	80069a4 <_dtoa_r+0x87c>
 8006840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006844:	9e07      	ldr	r6, [sp, #28]
 8006846:	9d04      	ldr	r5, [sp, #16]
 8006848:	9a04      	ldr	r2, [sp, #16]
 800684a:	441a      	add	r2, r3
 800684c:	9204      	str	r2, [sp, #16]
 800684e:	9a05      	ldr	r2, [sp, #20]
 8006850:	2101      	movs	r1, #1
 8006852:	441a      	add	r2, r3
 8006854:	4620      	mov	r0, r4
 8006856:	9205      	str	r2, [sp, #20]
 8006858:	f000 fc60 	bl	800711c <__i2b>
 800685c:	4607      	mov	r7, r0
 800685e:	2d00      	cmp	r5, #0
 8006860:	dd0c      	ble.n	800687c <_dtoa_r+0x754>
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd09      	ble.n	800687c <_dtoa_r+0x754>
 8006868:	42ab      	cmp	r3, r5
 800686a:	9a04      	ldr	r2, [sp, #16]
 800686c:	bfa8      	it	ge
 800686e:	462b      	movge	r3, r5
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	9204      	str	r2, [sp, #16]
 8006874:	9a05      	ldr	r2, [sp, #20]
 8006876:	1aed      	subs	r5, r5, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	b31b      	cbz	r3, 80068c8 <_dtoa_r+0x7a0>
 8006880:	9b08      	ldr	r3, [sp, #32]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80af 	beq.w	80069e6 <_dtoa_r+0x8be>
 8006888:	2e00      	cmp	r6, #0
 800688a:	dd13      	ble.n	80068b4 <_dtoa_r+0x78c>
 800688c:	4639      	mov	r1, r7
 800688e:	4632      	mov	r2, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fd03 	bl	800729c <__pow5mult>
 8006896:	ee18 2a10 	vmov	r2, s16
 800689a:	4601      	mov	r1, r0
 800689c:	4607      	mov	r7, r0
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fc52 	bl	8007148 <__multiply>
 80068a4:	ee18 1a10 	vmov	r1, s16
 80068a8:	4680      	mov	r8, r0
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fb7e 	bl	8006fac <_Bfree>
 80068b0:	ee08 8a10 	vmov	s16, r8
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	1b9a      	subs	r2, r3, r6
 80068b8:	d006      	beq.n	80068c8 <_dtoa_r+0x7a0>
 80068ba:	ee18 1a10 	vmov	r1, s16
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fcec 	bl	800729c <__pow5mult>
 80068c4:	ee08 0a10 	vmov	s16, r0
 80068c8:	2101      	movs	r1, #1
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fc26 	bl	800711c <__i2b>
 80068d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	4606      	mov	r6, r0
 80068d6:	f340 8088 	ble.w	80069ea <_dtoa_r+0x8c2>
 80068da:	461a      	mov	r2, r3
 80068dc:	4601      	mov	r1, r0
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fcdc 	bl	800729c <__pow5mult>
 80068e4:	9b06      	ldr	r3, [sp, #24]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	4606      	mov	r6, r0
 80068ea:	f340 8081 	ble.w	80069f0 <_dtoa_r+0x8c8>
 80068ee:	f04f 0800 	mov.w	r8, #0
 80068f2:	6933      	ldr	r3, [r6, #16]
 80068f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068f8:	6918      	ldr	r0, [r3, #16]
 80068fa:	f000 fbbf 	bl	800707c <__hi0bits>
 80068fe:	f1c0 0020 	rsb	r0, r0, #32
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	4418      	add	r0, r3
 8006906:	f010 001f 	ands.w	r0, r0, #31
 800690a:	f000 8092 	beq.w	8006a32 <_dtoa_r+0x90a>
 800690e:	f1c0 0320 	rsb	r3, r0, #32
 8006912:	2b04      	cmp	r3, #4
 8006914:	f340 808a 	ble.w	8006a2c <_dtoa_r+0x904>
 8006918:	f1c0 001c 	rsb	r0, r0, #28
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	4403      	add	r3, r0
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	4403      	add	r3, r0
 8006926:	4405      	add	r5, r0
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd07      	ble.n	8006940 <_dtoa_r+0x818>
 8006930:	ee18 1a10 	vmov	r1, s16
 8006934:	461a      	mov	r2, r3
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fd0a 	bl	8007350 <__lshift>
 800693c:	ee08 0a10 	vmov	s16, r0
 8006940:	9b05      	ldr	r3, [sp, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	dd05      	ble.n	8006952 <_dtoa_r+0x82a>
 8006946:	4631      	mov	r1, r6
 8006948:	461a      	mov	r2, r3
 800694a:	4620      	mov	r0, r4
 800694c:	f000 fd00 	bl	8007350 <__lshift>
 8006950:	4606      	mov	r6, r0
 8006952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d06e      	beq.n	8006a36 <_dtoa_r+0x90e>
 8006958:	ee18 0a10 	vmov	r0, s16
 800695c:	4631      	mov	r1, r6
 800695e:	f000 fd67 	bl	8007430 <__mcmp>
 8006962:	2800      	cmp	r0, #0
 8006964:	da67      	bge.n	8006a36 <_dtoa_r+0x90e>
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	3b01      	subs	r3, #1
 800696a:	ee18 1a10 	vmov	r1, s16
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	220a      	movs	r2, #10
 8006972:	2300      	movs	r3, #0
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fb3b 	bl	8006ff0 <__multadd>
 800697a:	9b08      	ldr	r3, [sp, #32]
 800697c:	ee08 0a10 	vmov	s16, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 81b1 	beq.w	8006ce8 <_dtoa_r+0xbc0>
 8006986:	2300      	movs	r3, #0
 8006988:	4639      	mov	r1, r7
 800698a:	220a      	movs	r2, #10
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fb2f 	bl	8006ff0 <__multadd>
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	4607      	mov	r7, r0
 8006998:	f300 808e 	bgt.w	8006ab8 <_dtoa_r+0x990>
 800699c:	9b06      	ldr	r3, [sp, #24]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	dc51      	bgt.n	8006a46 <_dtoa_r+0x91e>
 80069a2:	e089      	b.n	8006ab8 <_dtoa_r+0x990>
 80069a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069aa:	e74b      	b.n	8006844 <_dtoa_r+0x71c>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	1e5e      	subs	r6, r3, #1
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	42b3      	cmp	r3, r6
 80069b4:	bfbf      	itttt	lt
 80069b6:	9b07      	ldrlt	r3, [sp, #28]
 80069b8:	9607      	strlt	r6, [sp, #28]
 80069ba:	1af2      	sublt	r2, r6, r3
 80069bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069be:	bfb6      	itet	lt
 80069c0:	189b      	addlt	r3, r3, r2
 80069c2:	1b9e      	subge	r6, r3, r6
 80069c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	bfb8      	it	lt
 80069ca:	2600      	movlt	r6, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bfb7      	itett	lt
 80069d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069d8:	1a9d      	sublt	r5, r3, r2
 80069da:	2300      	movlt	r3, #0
 80069dc:	e734      	b.n	8006848 <_dtoa_r+0x720>
 80069de:	9e07      	ldr	r6, [sp, #28]
 80069e0:	9d04      	ldr	r5, [sp, #16]
 80069e2:	9f08      	ldr	r7, [sp, #32]
 80069e4:	e73b      	b.n	800685e <_dtoa_r+0x736>
 80069e6:	9a07      	ldr	r2, [sp, #28]
 80069e8:	e767      	b.n	80068ba <_dtoa_r+0x792>
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	dc18      	bgt.n	8006a22 <_dtoa_r+0x8fa>
 80069f0:	f1ba 0f00 	cmp.w	sl, #0
 80069f4:	d115      	bne.n	8006a22 <_dtoa_r+0x8fa>
 80069f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069fa:	b993      	cbnz	r3, 8006a22 <_dtoa_r+0x8fa>
 80069fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	b183      	cbz	r3, 8006a28 <_dtoa_r+0x900>
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	9b05      	ldr	r3, [sp, #20]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	f04f 0801 	mov.w	r8, #1
 8006a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f47f af6a 	bne.w	80068f2 <_dtoa_r+0x7ca>
 8006a1e:	2001      	movs	r0, #1
 8006a20:	e76f      	b.n	8006902 <_dtoa_r+0x7da>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	e7f6      	b.n	8006a16 <_dtoa_r+0x8ee>
 8006a28:	4698      	mov	r8, r3
 8006a2a:	e7f4      	b.n	8006a16 <_dtoa_r+0x8ee>
 8006a2c:	f43f af7d 	beq.w	800692a <_dtoa_r+0x802>
 8006a30:	4618      	mov	r0, r3
 8006a32:	301c      	adds	r0, #28
 8006a34:	e772      	b.n	800691c <_dtoa_r+0x7f4>
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dc37      	bgt.n	8006aac <_dtoa_r+0x984>
 8006a3c:	9b06      	ldr	r3, [sp, #24]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dd34      	ble.n	8006aac <_dtoa_r+0x984>
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	9b02      	ldr	r3, [sp, #8]
 8006a48:	b96b      	cbnz	r3, 8006a66 <_dtoa_r+0x93e>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 face 	bl	8006ff0 <__multadd>
 8006a54:	4601      	mov	r1, r0
 8006a56:	4606      	mov	r6, r0
 8006a58:	ee18 0a10 	vmov	r0, s16
 8006a5c:	f000 fce8 	bl	8007430 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f73f adbb 	bgt.w	80065dc <_dtoa_r+0x4b4>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	9d01      	ldr	r5, [sp, #4]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	4631      	mov	r1, r6
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fa99 	bl	8006fac <_Bfree>
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	f43f aea4 	beq.w	80067c8 <_dtoa_r+0x6a0>
 8006a80:	f1b8 0f00 	cmp.w	r8, #0
 8006a84:	d005      	beq.n	8006a92 <_dtoa_r+0x96a>
 8006a86:	45b8      	cmp	r8, r7
 8006a88:	d003      	beq.n	8006a92 <_dtoa_r+0x96a>
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fa8d 	bl	8006fac <_Bfree>
 8006a92:	4639      	mov	r1, r7
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fa89 	bl	8006fac <_Bfree>
 8006a9a:	e695      	b.n	80067c8 <_dtoa_r+0x6a0>
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	4637      	mov	r7, r6
 8006aa0:	e7e1      	b.n	8006a66 <_dtoa_r+0x93e>
 8006aa2:	9700      	str	r7, [sp, #0]
 8006aa4:	4637      	mov	r7, r6
 8006aa6:	e599      	b.n	80065dc <_dtoa_r+0x4b4>
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	9b08      	ldr	r3, [sp, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80ca 	beq.w	8006c48 <_dtoa_r+0xb20>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	9302      	str	r3, [sp, #8]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x9a0>
 8006abc:	4639      	mov	r1, r7
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fc45 	bl	8007350 <__lshift>
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	f1b8 0f00 	cmp.w	r8, #0
 8006acc:	d05b      	beq.n	8006b86 <_dtoa_r+0xa5e>
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fa2b 	bl	8006f2c <_Balloc>
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	b928      	cbnz	r0, 8006ae6 <_dtoa_r+0x9be>
 8006ada:	4b87      	ldr	r3, [pc, #540]	; (8006cf8 <_dtoa_r+0xbd0>)
 8006adc:	4602      	mov	r2, r0
 8006ade:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ae2:	f7ff bb3b 	b.w	800615c <_dtoa_r+0x34>
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	3202      	adds	r2, #2
 8006aea:	0092      	lsls	r2, r2, #2
 8006aec:	f107 010c 	add.w	r1, r7, #12
 8006af0:	300c      	adds	r0, #12
 8006af2:	f000 fa0d 	bl	8006f10 <memcpy>
 8006af6:	2201      	movs	r2, #1
 8006af8:	4629      	mov	r1, r5
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fc28 	bl	8007350 <__lshift>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	f103 0901 	add.w	r9, r3, #1
 8006b06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	9305      	str	r3, [sp, #20]
 8006b0e:	f00a 0301 	and.w	r3, sl, #1
 8006b12:	46b8      	mov	r8, r7
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	4607      	mov	r7, r0
 8006b18:	4631      	mov	r1, r6
 8006b1a:	ee18 0a10 	vmov	r0, s16
 8006b1e:	f7ff fa77 	bl	8006010 <quorem>
 8006b22:	4641      	mov	r1, r8
 8006b24:	9002      	str	r0, [sp, #8]
 8006b26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b2a:	ee18 0a10 	vmov	r0, s16
 8006b2e:	f000 fc7f 	bl	8007430 <__mcmp>
 8006b32:	463a      	mov	r2, r7
 8006b34:	9003      	str	r0, [sp, #12]
 8006b36:	4631      	mov	r1, r6
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fc95 	bl	8007468 <__mdiff>
 8006b3e:	68c2      	ldr	r2, [r0, #12]
 8006b40:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b44:	4605      	mov	r5, r0
 8006b46:	bb02      	cbnz	r2, 8006b8a <_dtoa_r+0xa62>
 8006b48:	4601      	mov	r1, r0
 8006b4a:	ee18 0a10 	vmov	r0, s16
 8006b4e:	f000 fc6f 	bl	8007430 <__mcmp>
 8006b52:	4602      	mov	r2, r0
 8006b54:	4629      	mov	r1, r5
 8006b56:	4620      	mov	r0, r4
 8006b58:	9207      	str	r2, [sp, #28]
 8006b5a:	f000 fa27 	bl	8006fac <_Bfree>
 8006b5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b62:	ea43 0102 	orr.w	r1, r3, r2
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	464d      	mov	r5, r9
 8006b6c:	d10f      	bne.n	8006b8e <_dtoa_r+0xa66>
 8006b6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b72:	d02a      	beq.n	8006bca <_dtoa_r+0xaa2>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dd02      	ble.n	8006b80 <_dtoa_r+0xa58>
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b80:	f88b a000 	strb.w	sl, [fp]
 8006b84:	e775      	b.n	8006a72 <_dtoa_r+0x94a>
 8006b86:	4638      	mov	r0, r7
 8006b88:	e7ba      	b.n	8006b00 <_dtoa_r+0x9d8>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	e7e2      	b.n	8006b54 <_dtoa_r+0xa2c>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db04      	blt.n	8006b9e <_dtoa_r+0xa76>
 8006b94:	9906      	ldr	r1, [sp, #24]
 8006b96:	430b      	orrs	r3, r1
 8006b98:	9904      	ldr	r1, [sp, #16]
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	d122      	bne.n	8006be4 <_dtoa_r+0xabc>
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	ddee      	ble.n	8006b80 <_dtoa_r+0xa58>
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fbd1 	bl	8007350 <__lshift>
 8006bae:	4631      	mov	r1, r6
 8006bb0:	ee08 0a10 	vmov	s16, r0
 8006bb4:	f000 fc3c 	bl	8007430 <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dc03      	bgt.n	8006bc4 <_dtoa_r+0xa9c>
 8006bbc:	d1e0      	bne.n	8006b80 <_dtoa_r+0xa58>
 8006bbe:	f01a 0f01 	tst.w	sl, #1
 8006bc2:	d0dd      	beq.n	8006b80 <_dtoa_r+0xa58>
 8006bc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bc8:	d1d7      	bne.n	8006b7a <_dtoa_r+0xa52>
 8006bca:	2339      	movs	r3, #57	; 0x39
 8006bcc:	f88b 3000 	strb.w	r3, [fp]
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bda:	2a39      	cmp	r2, #57	; 0x39
 8006bdc:	d071      	beq.n	8006cc2 <_dtoa_r+0xb9a>
 8006bde:	3201      	adds	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e746      	b.n	8006a72 <_dtoa_r+0x94a>
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	dd07      	ble.n	8006bf8 <_dtoa_r+0xad0>
 8006be8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bec:	d0ed      	beq.n	8006bca <_dtoa_r+0xaa2>
 8006bee:	f10a 0301 	add.w	r3, sl, #1
 8006bf2:	f88b 3000 	strb.w	r3, [fp]
 8006bf6:	e73c      	b.n	8006a72 <_dtoa_r+0x94a>
 8006bf8:	9b05      	ldr	r3, [sp, #20]
 8006bfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006bfe:	4599      	cmp	r9, r3
 8006c00:	d047      	beq.n	8006c92 <_dtoa_r+0xb6a>
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	2300      	movs	r3, #0
 8006c08:	220a      	movs	r2, #10
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 f9f0 	bl	8006ff0 <__multadd>
 8006c10:	45b8      	cmp	r8, r7
 8006c12:	ee08 0a10 	vmov	s16, r0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	f04f 020a 	mov.w	r2, #10
 8006c1e:	4641      	mov	r1, r8
 8006c20:	4620      	mov	r0, r4
 8006c22:	d106      	bne.n	8006c32 <_dtoa_r+0xb0a>
 8006c24:	f000 f9e4 	bl	8006ff0 <__multadd>
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	f109 0901 	add.w	r9, r9, #1
 8006c30:	e772      	b.n	8006b18 <_dtoa_r+0x9f0>
 8006c32:	f000 f9dd 	bl	8006ff0 <__multadd>
 8006c36:	4639      	mov	r1, r7
 8006c38:	4680      	mov	r8, r0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f9d6 	bl	8006ff0 <__multadd>
 8006c44:	4607      	mov	r7, r0
 8006c46:	e7f1      	b.n	8006c2c <_dtoa_r+0xb04>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	9d01      	ldr	r5, [sp, #4]
 8006c4e:	ee18 0a10 	vmov	r0, s16
 8006c52:	4631      	mov	r1, r6
 8006c54:	f7ff f9dc 	bl	8006010 <quorem>
 8006c58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006c62:	1aea      	subs	r2, r5, r3
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	4293      	cmp	r3, r2
 8006c68:	dd09      	ble.n	8006c7e <_dtoa_r+0xb56>
 8006c6a:	ee18 1a10 	vmov	r1, s16
 8006c6e:	2300      	movs	r3, #0
 8006c70:	220a      	movs	r2, #10
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f9bc 	bl	8006ff0 <__multadd>
 8006c78:	ee08 0a10 	vmov	s16, r0
 8006c7c:	e7e7      	b.n	8006c4e <_dtoa_r+0xb26>
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfc8      	it	gt
 8006c84:	461d      	movgt	r5, r3
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	bfd8      	it	le
 8006c8a:	2501      	movle	r5, #1
 8006c8c:	441d      	add	r5, r3
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	ee18 1a10 	vmov	r1, s16
 8006c96:	2201      	movs	r2, #1
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fb59 	bl	8007350 <__lshift>
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	ee08 0a10 	vmov	s16, r0
 8006ca4:	f000 fbc4 	bl	8007430 <__mcmp>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dc91      	bgt.n	8006bd0 <_dtoa_r+0xaa8>
 8006cac:	d102      	bne.n	8006cb4 <_dtoa_r+0xb8c>
 8006cae:	f01a 0f01 	tst.w	sl, #1
 8006cb2:	d18d      	bne.n	8006bd0 <_dtoa_r+0xaa8>
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbc:	2a30      	cmp	r2, #48	; 0x30
 8006cbe:	d0fa      	beq.n	8006cb6 <_dtoa_r+0xb8e>
 8006cc0:	e6d7      	b.n	8006a72 <_dtoa_r+0x94a>
 8006cc2:	9a01      	ldr	r2, [sp, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d184      	bne.n	8006bd2 <_dtoa_r+0xaaa>
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2331      	movs	r3, #49	; 0x31
 8006cd0:	7013      	strb	r3, [r2, #0]
 8006cd2:	e6ce      	b.n	8006a72 <_dtoa_r+0x94a>
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <_dtoa_r+0xbd4>)
 8006cd6:	f7ff ba95 	b.w	8006204 <_dtoa_r+0xdc>
 8006cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f47f aa6e 	bne.w	80061be <_dtoa_r+0x96>
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <_dtoa_r+0xbd8>)
 8006ce4:	f7ff ba8e 	b.w	8006204 <_dtoa_r+0xdc>
 8006ce8:	9b02      	ldr	r3, [sp, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dcae      	bgt.n	8006c4c <_dtoa_r+0xb24>
 8006cee:	9b06      	ldr	r3, [sp, #24]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	f73f aea8 	bgt.w	8006a46 <_dtoa_r+0x91e>
 8006cf6:	e7a9      	b.n	8006c4c <_dtoa_r+0xb24>
 8006cf8:	0800861b 	.word	0x0800861b
 8006cfc:	08008578 	.word	0x08008578
 8006d00:	0800859c 	.word	0x0800859c

08006d04 <std>:
 8006d04:	2300      	movs	r3, #0
 8006d06:	b510      	push	{r4, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d12:	6083      	str	r3, [r0, #8]
 8006d14:	8181      	strh	r1, [r0, #12]
 8006d16:	6643      	str	r3, [r0, #100]	; 0x64
 8006d18:	81c2      	strh	r2, [r0, #14]
 8006d1a:	6183      	str	r3, [r0, #24]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	2208      	movs	r2, #8
 8006d20:	305c      	adds	r0, #92	; 0x5c
 8006d22:	f7fe fccb 	bl	80056bc <memset>
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x38>)
 8006d28:	6263      	str	r3, [r4, #36]	; 0x24
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <std+0x3c>)
 8006d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <std+0x40>)
 8006d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d32:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <std+0x44>)
 8006d34:	6224      	str	r4, [r4, #32]
 8006d36:	6323      	str	r3, [r4, #48]	; 0x30
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08007dad 	.word	0x08007dad
 8006d40:	08007dcf 	.word	0x08007dcf
 8006d44:	08007e07 	.word	0x08007e07
 8006d48:	08007e2b 	.word	0x08007e2b

08006d4c <_cleanup_r>:
 8006d4c:	4901      	ldr	r1, [pc, #4]	; (8006d54 <_cleanup_r+0x8>)
 8006d4e:	f000 b8af 	b.w	8006eb0 <_fwalk_reent>
 8006d52:	bf00      	nop
 8006d54:	08008141 	.word	0x08008141

08006d58 <__sfmoreglue>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	2268      	movs	r2, #104	; 0x68
 8006d5c:	1e4d      	subs	r5, r1, #1
 8006d5e:	4355      	muls	r5, r2
 8006d60:	460e      	mov	r6, r1
 8006d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d66:	f000 fce7 	bl	8007738 <_malloc_r>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	b140      	cbz	r0, 8006d80 <__sfmoreglue+0x28>
 8006d6e:	2100      	movs	r1, #0
 8006d70:	e9c0 1600 	strd	r1, r6, [r0]
 8006d74:	300c      	adds	r0, #12
 8006d76:	60a0      	str	r0, [r4, #8]
 8006d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d7c:	f7fe fc9e 	bl	80056bc <memset>
 8006d80:	4620      	mov	r0, r4
 8006d82:	bd70      	pop	{r4, r5, r6, pc}

08006d84 <__sfp_lock_acquire>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__sfp_lock_acquire+0x8>)
 8006d86:	f000 b8b8 	b.w	8006efa <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000385 	.word	0x20000385

08006d90 <__sfp_lock_release>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__sfp_lock_release+0x8>)
 8006d92:	f000 b8b3 	b.w	8006efc <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	20000385 	.word	0x20000385

08006d9c <__sinit_lock_acquire>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__sinit_lock_acquire+0x8>)
 8006d9e:	f000 b8ac 	b.w	8006efa <__retarget_lock_acquire_recursive>
 8006da2:	bf00      	nop
 8006da4:	20000386 	.word	0x20000386

08006da8 <__sinit_lock_release>:
 8006da8:	4801      	ldr	r0, [pc, #4]	; (8006db0 <__sinit_lock_release+0x8>)
 8006daa:	f000 b8a7 	b.w	8006efc <__retarget_lock_release_recursive>
 8006dae:	bf00      	nop
 8006db0:	20000386 	.word	0x20000386

08006db4 <__sinit>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4604      	mov	r4, r0
 8006db8:	f7ff fff0 	bl	8006d9c <__sinit_lock_acquire>
 8006dbc:	69a3      	ldr	r3, [r4, #24]
 8006dbe:	b11b      	cbz	r3, 8006dc8 <__sinit+0x14>
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f7ff bff0 	b.w	8006da8 <__sinit_lock_release>
 8006dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <__sinit+0x68>)
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <__sinit+0x6c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	bf04      	itt	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	61a3      	streq	r3, [r4, #24]
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 f820 	bl	8006e24 <__sfp>
 8006de4:	6060      	str	r0, [r4, #4]
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 f81c 	bl	8006e24 <__sfp>
 8006dec:	60a0      	str	r0, [r4, #8]
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f818 	bl	8006e24 <__sfp>
 8006df4:	2200      	movs	r2, #0
 8006df6:	60e0      	str	r0, [r4, #12]
 8006df8:	2104      	movs	r1, #4
 8006dfa:	6860      	ldr	r0, [r4, #4]
 8006dfc:	f7ff ff82 	bl	8006d04 <std>
 8006e00:	68a0      	ldr	r0, [r4, #8]
 8006e02:	2201      	movs	r2, #1
 8006e04:	2109      	movs	r1, #9
 8006e06:	f7ff ff7d 	bl	8006d04 <std>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	2112      	movs	r1, #18
 8006e10:	f7ff ff78 	bl	8006d04 <std>
 8006e14:	2301      	movs	r3, #1
 8006e16:	61a3      	str	r3, [r4, #24]
 8006e18:	e7d2      	b.n	8006dc0 <__sinit+0xc>
 8006e1a:	bf00      	nop
 8006e1c:	08008564 	.word	0x08008564
 8006e20:	08006d4d 	.word	0x08006d4d

08006e24 <__sfp>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	4607      	mov	r7, r0
 8006e28:	f7ff ffac 	bl	8006d84 <__sfp_lock_acquire>
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <__sfp+0x84>)
 8006e2e:	681e      	ldr	r6, [r3, #0]
 8006e30:	69b3      	ldr	r3, [r6, #24]
 8006e32:	b913      	cbnz	r3, 8006e3a <__sfp+0x16>
 8006e34:	4630      	mov	r0, r6
 8006e36:	f7ff ffbd 	bl	8006db4 <__sinit>
 8006e3a:	3648      	adds	r6, #72	; 0x48
 8006e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	d503      	bpl.n	8006e4c <__sfp+0x28>
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	b30b      	cbz	r3, 8006e8c <__sfp+0x68>
 8006e48:	6836      	ldr	r6, [r6, #0]
 8006e4a:	e7f7      	b.n	8006e3c <__sfp+0x18>
 8006e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e50:	b9d5      	cbnz	r5, 8006e88 <__sfp+0x64>
 8006e52:	4b16      	ldr	r3, [pc, #88]	; (8006eac <__sfp+0x88>)
 8006e54:	60e3      	str	r3, [r4, #12]
 8006e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e5c:	f000 f84c 	bl	8006ef8 <__retarget_lock_init_recursive>
 8006e60:	f7ff ff96 	bl	8006d90 <__sfp_lock_release>
 8006e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e6c:	6025      	str	r5, [r4, #0]
 8006e6e:	61a5      	str	r5, [r4, #24]
 8006e70:	2208      	movs	r2, #8
 8006e72:	4629      	mov	r1, r5
 8006e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e78:	f7fe fc20 	bl	80056bc <memset>
 8006e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e84:	4620      	mov	r0, r4
 8006e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e88:	3468      	adds	r4, #104	; 0x68
 8006e8a:	e7d9      	b.n	8006e40 <__sfp+0x1c>
 8006e8c:	2104      	movs	r1, #4
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f7ff ff62 	bl	8006d58 <__sfmoreglue>
 8006e94:	4604      	mov	r4, r0
 8006e96:	6030      	str	r0, [r6, #0]
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1d5      	bne.n	8006e48 <__sfp+0x24>
 8006e9c:	f7ff ff78 	bl	8006d90 <__sfp_lock_release>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	e7ee      	b.n	8006e84 <__sfp+0x60>
 8006ea6:	bf00      	nop
 8006ea8:	08008564 	.word	0x08008564
 8006eac:	ffff0001 	.word	0xffff0001

08006eb0 <_fwalk_reent>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	4688      	mov	r8, r1
 8006eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ebc:	2700      	movs	r7, #0
 8006ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ec6:	d505      	bpl.n	8006ed4 <_fwalk_reent+0x24>
 8006ec8:	6824      	ldr	r4, [r4, #0]
 8006eca:	2c00      	cmp	r4, #0
 8006ecc:	d1f7      	bne.n	8006ebe <_fwalk_reent+0xe>
 8006ece:	4638      	mov	r0, r7
 8006ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed4:	89ab      	ldrh	r3, [r5, #12]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d907      	bls.n	8006eea <_fwalk_reent+0x3a>
 8006eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	d003      	beq.n	8006eea <_fwalk_reent+0x3a>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	47c0      	blx	r8
 8006ee8:	4307      	orrs	r7, r0
 8006eea:	3568      	adds	r5, #104	; 0x68
 8006eec:	e7e9      	b.n	8006ec2 <_fwalk_reent+0x12>
	...

08006ef0 <_localeconv_r>:
 8006ef0:	4800      	ldr	r0, [pc, #0]	; (8006ef4 <_localeconv_r+0x4>)
 8006ef2:	4770      	bx	lr
 8006ef4:	20000180 	.word	0x20000180

08006ef8 <__retarget_lock_init_recursive>:
 8006ef8:	4770      	bx	lr

08006efa <__retarget_lock_acquire_recursive>:
 8006efa:	4770      	bx	lr

08006efc <__retarget_lock_release_recursive>:
 8006efc:	4770      	bx	lr
	...

08006f00 <malloc>:
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <malloc+0xc>)
 8006f02:	4601      	mov	r1, r0
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	f000 bc17 	b.w	8007738 <_malloc_r>
 8006f0a:	bf00      	nop
 8006f0c:	2000002c 	.word	0x2000002c

08006f10 <memcpy>:
 8006f10:	440a      	add	r2, r1
 8006f12:	4291      	cmp	r1, r2
 8006f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f18:	d100      	bne.n	8006f1c <memcpy+0xc>
 8006f1a:	4770      	bx	lr
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f26:	4291      	cmp	r1, r2
 8006f28:	d1f9      	bne.n	8006f1e <memcpy+0xe>
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <_Balloc>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	b976      	cbnz	r6, 8006f54 <_Balloc+0x28>
 8006f36:	2010      	movs	r0, #16
 8006f38:	f7ff ffe2 	bl	8006f00 <malloc>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f40:	b920      	cbnz	r0, 8006f4c <_Balloc+0x20>
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <_Balloc+0x78>)
 8006f44:	4818      	ldr	r0, [pc, #96]	; (8006fa8 <_Balloc+0x7c>)
 8006f46:	2166      	movs	r1, #102	; 0x66
 8006f48:	f001 f846 	bl	8007fd8 <__assert_func>
 8006f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f50:	6006      	str	r6, [r0, #0]
 8006f52:	60c6      	str	r6, [r0, #12]
 8006f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f56:	68f3      	ldr	r3, [r6, #12]
 8006f58:	b183      	cbz	r3, 8006f7c <_Balloc+0x50>
 8006f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f62:	b9b8      	cbnz	r0, 8006f94 <_Balloc+0x68>
 8006f64:	2101      	movs	r1, #1
 8006f66:	fa01 f605 	lsl.w	r6, r1, r5
 8006f6a:	1d72      	adds	r2, r6, #5
 8006f6c:	0092      	lsls	r2, r2, #2
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 fb60 	bl	8007634 <_calloc_r>
 8006f74:	b160      	cbz	r0, 8006f90 <_Balloc+0x64>
 8006f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f7a:	e00e      	b.n	8006f9a <_Balloc+0x6e>
 8006f7c:	2221      	movs	r2, #33	; 0x21
 8006f7e:	2104      	movs	r1, #4
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fb57 	bl	8007634 <_calloc_r>
 8006f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f88:	60f0      	str	r0, [r6, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e4      	bne.n	8006f5a <_Balloc+0x2e>
 8006f90:	2000      	movs	r0, #0
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	6802      	ldr	r2, [r0, #0]
 8006f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fa0:	e7f7      	b.n	8006f92 <_Balloc+0x66>
 8006fa2:	bf00      	nop
 8006fa4:	080085a9 	.word	0x080085a9
 8006fa8:	0800868c 	.word	0x0800868c

08006fac <_Bfree>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	b976      	cbnz	r6, 8006fd4 <_Bfree+0x28>
 8006fb6:	2010      	movs	r0, #16
 8006fb8:	f7ff ffa2 	bl	8006f00 <malloc>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8006fc0:	b920      	cbnz	r0, 8006fcc <_Bfree+0x20>
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <_Bfree+0x3c>)
 8006fc4:	4809      	ldr	r0, [pc, #36]	; (8006fec <_Bfree+0x40>)
 8006fc6:	218a      	movs	r1, #138	; 0x8a
 8006fc8:	f001 f806 	bl	8007fd8 <__assert_func>
 8006fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fd0:	6006      	str	r6, [r0, #0]
 8006fd2:	60c6      	str	r6, [r0, #12]
 8006fd4:	b13c      	cbz	r4, 8006fe6 <_Bfree+0x3a>
 8006fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fd8:	6862      	ldr	r2, [r4, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe0:	6021      	str	r1, [r4, #0]
 8006fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	080085a9 	.word	0x080085a9
 8006fec:	0800868c 	.word	0x0800868c

08006ff0 <__multadd>:
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	690d      	ldr	r5, [r1, #16]
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	461e      	mov	r6, r3
 8006ffc:	f101 0c14 	add.w	ip, r1, #20
 8007000:	2000      	movs	r0, #0
 8007002:	f8dc 3000 	ldr.w	r3, [ip]
 8007006:	b299      	uxth	r1, r3
 8007008:	fb02 6101 	mla	r1, r2, r1, r6
 800700c:	0c1e      	lsrs	r6, r3, #16
 800700e:	0c0b      	lsrs	r3, r1, #16
 8007010:	fb02 3306 	mla	r3, r2, r6, r3
 8007014:	b289      	uxth	r1, r1
 8007016:	3001      	adds	r0, #1
 8007018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800701c:	4285      	cmp	r5, r0
 800701e:	f84c 1b04 	str.w	r1, [ip], #4
 8007022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007026:	dcec      	bgt.n	8007002 <__multadd+0x12>
 8007028:	b30e      	cbz	r6, 800706e <__multadd+0x7e>
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	42ab      	cmp	r3, r5
 800702e:	dc19      	bgt.n	8007064 <__multadd+0x74>
 8007030:	6861      	ldr	r1, [r4, #4]
 8007032:	4638      	mov	r0, r7
 8007034:	3101      	adds	r1, #1
 8007036:	f7ff ff79 	bl	8006f2c <_Balloc>
 800703a:	4680      	mov	r8, r0
 800703c:	b928      	cbnz	r0, 800704a <__multadd+0x5a>
 800703e:	4602      	mov	r2, r0
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <__multadd+0x84>)
 8007042:	480d      	ldr	r0, [pc, #52]	; (8007078 <__multadd+0x88>)
 8007044:	21b5      	movs	r1, #181	; 0xb5
 8007046:	f000 ffc7 	bl	8007fd8 <__assert_func>
 800704a:	6922      	ldr	r2, [r4, #16]
 800704c:	3202      	adds	r2, #2
 800704e:	f104 010c 	add.w	r1, r4, #12
 8007052:	0092      	lsls	r2, r2, #2
 8007054:	300c      	adds	r0, #12
 8007056:	f7ff ff5b 	bl	8006f10 <memcpy>
 800705a:	4621      	mov	r1, r4
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ffa5 	bl	8006fac <_Bfree>
 8007062:	4644      	mov	r4, r8
 8007064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007068:	3501      	adds	r5, #1
 800706a:	615e      	str	r6, [r3, #20]
 800706c:	6125      	str	r5, [r4, #16]
 800706e:	4620      	mov	r0, r4
 8007070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007074:	0800861b 	.word	0x0800861b
 8007078:	0800868c 	.word	0x0800868c

0800707c <__hi0bits>:
 800707c:	0c03      	lsrs	r3, r0, #16
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	b9d3      	cbnz	r3, 80070b8 <__hi0bits+0x3c>
 8007082:	0400      	lsls	r0, r0, #16
 8007084:	2310      	movs	r3, #16
 8007086:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800708a:	bf04      	itt	eq
 800708c:	0200      	lsleq	r0, r0, #8
 800708e:	3308      	addeq	r3, #8
 8007090:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007094:	bf04      	itt	eq
 8007096:	0100      	lsleq	r0, r0, #4
 8007098:	3304      	addeq	r3, #4
 800709a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800709e:	bf04      	itt	eq
 80070a0:	0080      	lsleq	r0, r0, #2
 80070a2:	3302      	addeq	r3, #2
 80070a4:	2800      	cmp	r0, #0
 80070a6:	db05      	blt.n	80070b4 <__hi0bits+0x38>
 80070a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070ac:	f103 0301 	add.w	r3, r3, #1
 80070b0:	bf08      	it	eq
 80070b2:	2320      	moveq	r3, #32
 80070b4:	4618      	mov	r0, r3
 80070b6:	4770      	bx	lr
 80070b8:	2300      	movs	r3, #0
 80070ba:	e7e4      	b.n	8007086 <__hi0bits+0xa>

080070bc <__lo0bits>:
 80070bc:	6803      	ldr	r3, [r0, #0]
 80070be:	f013 0207 	ands.w	r2, r3, #7
 80070c2:	4601      	mov	r1, r0
 80070c4:	d00b      	beq.n	80070de <__lo0bits+0x22>
 80070c6:	07da      	lsls	r2, r3, #31
 80070c8:	d423      	bmi.n	8007112 <__lo0bits+0x56>
 80070ca:	0798      	lsls	r0, r3, #30
 80070cc:	bf49      	itett	mi
 80070ce:	085b      	lsrmi	r3, r3, #1
 80070d0:	089b      	lsrpl	r3, r3, #2
 80070d2:	2001      	movmi	r0, #1
 80070d4:	600b      	strmi	r3, [r1, #0]
 80070d6:	bf5c      	itt	pl
 80070d8:	600b      	strpl	r3, [r1, #0]
 80070da:	2002      	movpl	r0, #2
 80070dc:	4770      	bx	lr
 80070de:	b298      	uxth	r0, r3
 80070e0:	b9a8      	cbnz	r0, 800710e <__lo0bits+0x52>
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	2010      	movs	r0, #16
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	b90a      	cbnz	r2, 80070ee <__lo0bits+0x32>
 80070ea:	3008      	adds	r0, #8
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	071a      	lsls	r2, r3, #28
 80070f0:	bf04      	itt	eq
 80070f2:	091b      	lsreq	r3, r3, #4
 80070f4:	3004      	addeq	r0, #4
 80070f6:	079a      	lsls	r2, r3, #30
 80070f8:	bf04      	itt	eq
 80070fa:	089b      	lsreq	r3, r3, #2
 80070fc:	3002      	addeq	r0, #2
 80070fe:	07da      	lsls	r2, r3, #31
 8007100:	d403      	bmi.n	800710a <__lo0bits+0x4e>
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	f100 0001 	add.w	r0, r0, #1
 8007108:	d005      	beq.n	8007116 <__lo0bits+0x5a>
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	4770      	bx	lr
 800710e:	4610      	mov	r0, r2
 8007110:	e7e9      	b.n	80070e6 <__lo0bits+0x2a>
 8007112:	2000      	movs	r0, #0
 8007114:	4770      	bx	lr
 8007116:	2020      	movs	r0, #32
 8007118:	4770      	bx	lr
	...

0800711c <__i2b>:
 800711c:	b510      	push	{r4, lr}
 800711e:	460c      	mov	r4, r1
 8007120:	2101      	movs	r1, #1
 8007122:	f7ff ff03 	bl	8006f2c <_Balloc>
 8007126:	4602      	mov	r2, r0
 8007128:	b928      	cbnz	r0, 8007136 <__i2b+0x1a>
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <__i2b+0x24>)
 800712c:	4805      	ldr	r0, [pc, #20]	; (8007144 <__i2b+0x28>)
 800712e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007132:	f000 ff51 	bl	8007fd8 <__assert_func>
 8007136:	2301      	movs	r3, #1
 8007138:	6144      	str	r4, [r0, #20]
 800713a:	6103      	str	r3, [r0, #16]
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	0800861b 	.word	0x0800861b
 8007144:	0800868c 	.word	0x0800868c

08007148 <__multiply>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	4691      	mov	r9, r2
 800714e:	690a      	ldr	r2, [r1, #16]
 8007150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	bfb8      	it	lt
 8007158:	460b      	movlt	r3, r1
 800715a:	460c      	mov	r4, r1
 800715c:	bfbc      	itt	lt
 800715e:	464c      	movlt	r4, r9
 8007160:	4699      	movlt	r9, r3
 8007162:	6927      	ldr	r7, [r4, #16]
 8007164:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	6861      	ldr	r1, [r4, #4]
 800716c:	eb07 060a 	add.w	r6, r7, sl
 8007170:	42b3      	cmp	r3, r6
 8007172:	b085      	sub	sp, #20
 8007174:	bfb8      	it	lt
 8007176:	3101      	addlt	r1, #1
 8007178:	f7ff fed8 	bl	8006f2c <_Balloc>
 800717c:	b930      	cbnz	r0, 800718c <__multiply+0x44>
 800717e:	4602      	mov	r2, r0
 8007180:	4b44      	ldr	r3, [pc, #272]	; (8007294 <__multiply+0x14c>)
 8007182:	4845      	ldr	r0, [pc, #276]	; (8007298 <__multiply+0x150>)
 8007184:	f240 115d 	movw	r1, #349	; 0x15d
 8007188:	f000 ff26 	bl	8007fd8 <__assert_func>
 800718c:	f100 0514 	add.w	r5, r0, #20
 8007190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007194:	462b      	mov	r3, r5
 8007196:	2200      	movs	r2, #0
 8007198:	4543      	cmp	r3, r8
 800719a:	d321      	bcc.n	80071e0 <__multiply+0x98>
 800719c:	f104 0314 	add.w	r3, r4, #20
 80071a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071a4:	f109 0314 	add.w	r3, r9, #20
 80071a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	1b3a      	subs	r2, r7, r4
 80071b0:	3a15      	subs	r2, #21
 80071b2:	f022 0203 	bic.w	r2, r2, #3
 80071b6:	3204      	adds	r2, #4
 80071b8:	f104 0115 	add.w	r1, r4, #21
 80071bc:	428f      	cmp	r7, r1
 80071be:	bf38      	it	cc
 80071c0:	2204      	movcc	r2, #4
 80071c2:	9201      	str	r2, [sp, #4]
 80071c4:	9a02      	ldr	r2, [sp, #8]
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d80c      	bhi.n	80071e6 <__multiply+0x9e>
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	dd03      	ble.n	80071d8 <__multiply+0x90>
 80071d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d05a      	beq.n	800728e <__multiply+0x146>
 80071d8:	6106      	str	r6, [r0, #16]
 80071da:	b005      	add	sp, #20
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	f843 2b04 	str.w	r2, [r3], #4
 80071e4:	e7d8      	b.n	8007198 <__multiply+0x50>
 80071e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80071ea:	f1ba 0f00 	cmp.w	sl, #0
 80071ee:	d024      	beq.n	800723a <__multiply+0xf2>
 80071f0:	f104 0e14 	add.w	lr, r4, #20
 80071f4:	46a9      	mov	r9, r5
 80071f6:	f04f 0c00 	mov.w	ip, #0
 80071fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007202:	fa1f fb82 	uxth.w	fp, r2
 8007206:	b289      	uxth	r1, r1
 8007208:	fb0a 110b 	mla	r1, sl, fp, r1
 800720c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007210:	f8d9 2000 	ldr.w	r2, [r9]
 8007214:	4461      	add	r1, ip
 8007216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800721a:	fb0a c20b 	mla	r2, sl, fp, ip
 800721e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007222:	b289      	uxth	r1, r1
 8007224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007228:	4577      	cmp	r7, lr
 800722a:	f849 1b04 	str.w	r1, [r9], #4
 800722e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007232:	d8e2      	bhi.n	80071fa <__multiply+0xb2>
 8007234:	9a01      	ldr	r2, [sp, #4]
 8007236:	f845 c002 	str.w	ip, [r5, r2]
 800723a:	9a03      	ldr	r2, [sp, #12]
 800723c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007240:	3304      	adds	r3, #4
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	d020      	beq.n	800728a <__multiply+0x142>
 8007248:	6829      	ldr	r1, [r5, #0]
 800724a:	f104 0c14 	add.w	ip, r4, #20
 800724e:	46ae      	mov	lr, r5
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	f8bc b000 	ldrh.w	fp, [ip]
 8007258:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800725c:	fb09 220b 	mla	r2, r9, fp, r2
 8007260:	4492      	add	sl, r2
 8007262:	b289      	uxth	r1, r1
 8007264:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007268:	f84e 1b04 	str.w	r1, [lr], #4
 800726c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007270:	f8be 1000 	ldrh.w	r1, [lr]
 8007274:	0c12      	lsrs	r2, r2, #16
 8007276:	fb09 1102 	mla	r1, r9, r2, r1
 800727a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800727e:	4567      	cmp	r7, ip
 8007280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007284:	d8e6      	bhi.n	8007254 <__multiply+0x10c>
 8007286:	9a01      	ldr	r2, [sp, #4]
 8007288:	50a9      	str	r1, [r5, r2]
 800728a:	3504      	adds	r5, #4
 800728c:	e79a      	b.n	80071c4 <__multiply+0x7c>
 800728e:	3e01      	subs	r6, #1
 8007290:	e79c      	b.n	80071cc <__multiply+0x84>
 8007292:	bf00      	nop
 8007294:	0800861b 	.word	0x0800861b
 8007298:	0800868c 	.word	0x0800868c

0800729c <__pow5mult>:
 800729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	4615      	mov	r5, r2
 80072a2:	f012 0203 	ands.w	r2, r2, #3
 80072a6:	4606      	mov	r6, r0
 80072a8:	460f      	mov	r7, r1
 80072aa:	d007      	beq.n	80072bc <__pow5mult+0x20>
 80072ac:	4c25      	ldr	r4, [pc, #148]	; (8007344 <__pow5mult+0xa8>)
 80072ae:	3a01      	subs	r2, #1
 80072b0:	2300      	movs	r3, #0
 80072b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072b6:	f7ff fe9b 	bl	8006ff0 <__multadd>
 80072ba:	4607      	mov	r7, r0
 80072bc:	10ad      	asrs	r5, r5, #2
 80072be:	d03d      	beq.n	800733c <__pow5mult+0xa0>
 80072c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072c2:	b97c      	cbnz	r4, 80072e4 <__pow5mult+0x48>
 80072c4:	2010      	movs	r0, #16
 80072c6:	f7ff fe1b 	bl	8006f00 <malloc>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6270      	str	r0, [r6, #36]	; 0x24
 80072ce:	b928      	cbnz	r0, 80072dc <__pow5mult+0x40>
 80072d0:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <__pow5mult+0xac>)
 80072d2:	481e      	ldr	r0, [pc, #120]	; (800734c <__pow5mult+0xb0>)
 80072d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072d8:	f000 fe7e 	bl	8007fd8 <__assert_func>
 80072dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072e0:	6004      	str	r4, [r0, #0]
 80072e2:	60c4      	str	r4, [r0, #12]
 80072e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072ec:	b94c      	cbnz	r4, 8007302 <__pow5mult+0x66>
 80072ee:	f240 2171 	movw	r1, #625	; 0x271
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff ff12 	bl	800711c <__i2b>
 80072f8:	2300      	movs	r3, #0
 80072fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80072fe:	4604      	mov	r4, r0
 8007300:	6003      	str	r3, [r0, #0]
 8007302:	f04f 0900 	mov.w	r9, #0
 8007306:	07eb      	lsls	r3, r5, #31
 8007308:	d50a      	bpl.n	8007320 <__pow5mult+0x84>
 800730a:	4639      	mov	r1, r7
 800730c:	4622      	mov	r2, r4
 800730e:	4630      	mov	r0, r6
 8007310:	f7ff ff1a 	bl	8007148 <__multiply>
 8007314:	4639      	mov	r1, r7
 8007316:	4680      	mov	r8, r0
 8007318:	4630      	mov	r0, r6
 800731a:	f7ff fe47 	bl	8006fac <_Bfree>
 800731e:	4647      	mov	r7, r8
 8007320:	106d      	asrs	r5, r5, #1
 8007322:	d00b      	beq.n	800733c <__pow5mult+0xa0>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	b938      	cbnz	r0, 8007338 <__pow5mult+0x9c>
 8007328:	4622      	mov	r2, r4
 800732a:	4621      	mov	r1, r4
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff ff0b 	bl	8007148 <__multiply>
 8007332:	6020      	str	r0, [r4, #0]
 8007334:	f8c0 9000 	str.w	r9, [r0]
 8007338:	4604      	mov	r4, r0
 800733a:	e7e4      	b.n	8007306 <__pow5mult+0x6a>
 800733c:	4638      	mov	r0, r7
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	bf00      	nop
 8007344:	080087d8 	.word	0x080087d8
 8007348:	080085a9 	.word	0x080085a9
 800734c:	0800868c 	.word	0x0800868c

08007350 <__lshift>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	6849      	ldr	r1, [r1, #4]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	4607      	mov	r7, r0
 8007362:	4691      	mov	r9, r2
 8007364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007368:	f108 0601 	add.w	r6, r8, #1
 800736c:	42b3      	cmp	r3, r6
 800736e:	db0b      	blt.n	8007388 <__lshift+0x38>
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff fddb 	bl	8006f2c <_Balloc>
 8007376:	4605      	mov	r5, r0
 8007378:	b948      	cbnz	r0, 800738e <__lshift+0x3e>
 800737a:	4602      	mov	r2, r0
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <__lshift+0xd8>)
 800737e:	482b      	ldr	r0, [pc, #172]	; (800742c <__lshift+0xdc>)
 8007380:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007384:	f000 fe28 	bl	8007fd8 <__assert_func>
 8007388:	3101      	adds	r1, #1
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	e7ee      	b.n	800736c <__lshift+0x1c>
 800738e:	2300      	movs	r3, #0
 8007390:	f100 0114 	add.w	r1, r0, #20
 8007394:	f100 0210 	add.w	r2, r0, #16
 8007398:	4618      	mov	r0, r3
 800739a:	4553      	cmp	r3, sl
 800739c:	db37      	blt.n	800740e <__lshift+0xbe>
 800739e:	6920      	ldr	r0, [r4, #16]
 80073a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073a4:	f104 0314 	add.w	r3, r4, #20
 80073a8:	f019 091f 	ands.w	r9, r9, #31
 80073ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073b4:	d02f      	beq.n	8007416 <__lshift+0xc6>
 80073b6:	f1c9 0e20 	rsb	lr, r9, #32
 80073ba:	468a      	mov	sl, r1
 80073bc:	f04f 0c00 	mov.w	ip, #0
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	fa02 f209 	lsl.w	r2, r2, r9
 80073c6:	ea42 020c 	orr.w	r2, r2, ip
 80073ca:	f84a 2b04 	str.w	r2, [sl], #4
 80073ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d2:	4298      	cmp	r0, r3
 80073d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073d8:	d8f2      	bhi.n	80073c0 <__lshift+0x70>
 80073da:	1b03      	subs	r3, r0, r4
 80073dc:	3b15      	subs	r3, #21
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	3304      	adds	r3, #4
 80073e4:	f104 0215 	add.w	r2, r4, #21
 80073e8:	4290      	cmp	r0, r2
 80073ea:	bf38      	it	cc
 80073ec:	2304      	movcc	r3, #4
 80073ee:	f841 c003 	str.w	ip, [r1, r3]
 80073f2:	f1bc 0f00 	cmp.w	ip, #0
 80073f6:	d001      	beq.n	80073fc <__lshift+0xac>
 80073f8:	f108 0602 	add.w	r6, r8, #2
 80073fc:	3e01      	subs	r6, #1
 80073fe:	4638      	mov	r0, r7
 8007400:	612e      	str	r6, [r5, #16]
 8007402:	4621      	mov	r1, r4
 8007404:	f7ff fdd2 	bl	8006fac <_Bfree>
 8007408:	4628      	mov	r0, r5
 800740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007412:	3301      	adds	r3, #1
 8007414:	e7c1      	b.n	800739a <__lshift+0x4a>
 8007416:	3904      	subs	r1, #4
 8007418:	f853 2b04 	ldr.w	r2, [r3], #4
 800741c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007420:	4298      	cmp	r0, r3
 8007422:	d8f9      	bhi.n	8007418 <__lshift+0xc8>
 8007424:	e7ea      	b.n	80073fc <__lshift+0xac>
 8007426:	bf00      	nop
 8007428:	0800861b 	.word	0x0800861b
 800742c:	0800868c 	.word	0x0800868c

08007430 <__mcmp>:
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	6902      	ldr	r2, [r0, #16]
 8007434:	690c      	ldr	r4, [r1, #16]
 8007436:	1b12      	subs	r2, r2, r4
 8007438:	d10e      	bne.n	8007458 <__mcmp+0x28>
 800743a:	f100 0314 	add.w	r3, r0, #20
 800743e:	3114      	adds	r1, #20
 8007440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800744c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007450:	42a5      	cmp	r5, r4
 8007452:	d003      	beq.n	800745c <__mcmp+0x2c>
 8007454:	d305      	bcc.n	8007462 <__mcmp+0x32>
 8007456:	2201      	movs	r2, #1
 8007458:	4610      	mov	r0, r2
 800745a:	bd30      	pop	{r4, r5, pc}
 800745c:	4283      	cmp	r3, r0
 800745e:	d3f3      	bcc.n	8007448 <__mcmp+0x18>
 8007460:	e7fa      	b.n	8007458 <__mcmp+0x28>
 8007462:	f04f 32ff 	mov.w	r2, #4294967295
 8007466:	e7f7      	b.n	8007458 <__mcmp+0x28>

08007468 <__mdiff>:
 8007468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	460c      	mov	r4, r1
 800746e:	4606      	mov	r6, r0
 8007470:	4611      	mov	r1, r2
 8007472:	4620      	mov	r0, r4
 8007474:	4690      	mov	r8, r2
 8007476:	f7ff ffdb 	bl	8007430 <__mcmp>
 800747a:	1e05      	subs	r5, r0, #0
 800747c:	d110      	bne.n	80074a0 <__mdiff+0x38>
 800747e:	4629      	mov	r1, r5
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff fd53 	bl	8006f2c <_Balloc>
 8007486:	b930      	cbnz	r0, 8007496 <__mdiff+0x2e>
 8007488:	4b3a      	ldr	r3, [pc, #232]	; (8007574 <__mdiff+0x10c>)
 800748a:	4602      	mov	r2, r0
 800748c:	f240 2132 	movw	r1, #562	; 0x232
 8007490:	4839      	ldr	r0, [pc, #228]	; (8007578 <__mdiff+0x110>)
 8007492:	f000 fda1 	bl	8007fd8 <__assert_func>
 8007496:	2301      	movs	r3, #1
 8007498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800749c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	bfa4      	itt	ge
 80074a2:	4643      	movge	r3, r8
 80074a4:	46a0      	movge	r8, r4
 80074a6:	4630      	mov	r0, r6
 80074a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074ac:	bfa6      	itte	ge
 80074ae:	461c      	movge	r4, r3
 80074b0:	2500      	movge	r5, #0
 80074b2:	2501      	movlt	r5, #1
 80074b4:	f7ff fd3a 	bl	8006f2c <_Balloc>
 80074b8:	b920      	cbnz	r0, 80074c4 <__mdiff+0x5c>
 80074ba:	4b2e      	ldr	r3, [pc, #184]	; (8007574 <__mdiff+0x10c>)
 80074bc:	4602      	mov	r2, r0
 80074be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074c2:	e7e5      	b.n	8007490 <__mdiff+0x28>
 80074c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074c8:	6926      	ldr	r6, [r4, #16]
 80074ca:	60c5      	str	r5, [r0, #12]
 80074cc:	f104 0914 	add.w	r9, r4, #20
 80074d0:	f108 0514 	add.w	r5, r8, #20
 80074d4:	f100 0e14 	add.w	lr, r0, #20
 80074d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074e0:	f108 0210 	add.w	r2, r8, #16
 80074e4:	46f2      	mov	sl, lr
 80074e6:	2100      	movs	r1, #0
 80074e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80074ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074f0:	fa1f f883 	uxth.w	r8, r3
 80074f4:	fa11 f18b 	uxtah	r1, r1, fp
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	eba1 0808 	sub.w	r8, r1, r8
 80074fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007506:	fa1f f888 	uxth.w	r8, r8
 800750a:	1419      	asrs	r1, r3, #16
 800750c:	454e      	cmp	r6, r9
 800750e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007512:	f84a 3b04 	str.w	r3, [sl], #4
 8007516:	d8e7      	bhi.n	80074e8 <__mdiff+0x80>
 8007518:	1b33      	subs	r3, r6, r4
 800751a:	3b15      	subs	r3, #21
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	3304      	adds	r3, #4
 8007522:	3415      	adds	r4, #21
 8007524:	42a6      	cmp	r6, r4
 8007526:	bf38      	it	cc
 8007528:	2304      	movcc	r3, #4
 800752a:	441d      	add	r5, r3
 800752c:	4473      	add	r3, lr
 800752e:	469e      	mov	lr, r3
 8007530:	462e      	mov	r6, r5
 8007532:	4566      	cmp	r6, ip
 8007534:	d30e      	bcc.n	8007554 <__mdiff+0xec>
 8007536:	f10c 0203 	add.w	r2, ip, #3
 800753a:	1b52      	subs	r2, r2, r5
 800753c:	f022 0203 	bic.w	r2, r2, #3
 8007540:	3d03      	subs	r5, #3
 8007542:	45ac      	cmp	ip, r5
 8007544:	bf38      	it	cc
 8007546:	2200      	movcc	r2, #0
 8007548:	441a      	add	r2, r3
 800754a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800754e:	b17b      	cbz	r3, 8007570 <__mdiff+0x108>
 8007550:	6107      	str	r7, [r0, #16]
 8007552:	e7a3      	b.n	800749c <__mdiff+0x34>
 8007554:	f856 8b04 	ldr.w	r8, [r6], #4
 8007558:	fa11 f288 	uxtah	r2, r1, r8
 800755c:	1414      	asrs	r4, r2, #16
 800755e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007562:	b292      	uxth	r2, r2
 8007564:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007568:	f84e 2b04 	str.w	r2, [lr], #4
 800756c:	1421      	asrs	r1, r4, #16
 800756e:	e7e0      	b.n	8007532 <__mdiff+0xca>
 8007570:	3f01      	subs	r7, #1
 8007572:	e7ea      	b.n	800754a <__mdiff+0xe2>
 8007574:	0800861b 	.word	0x0800861b
 8007578:	0800868c 	.word	0x0800868c

0800757c <__d2b>:
 800757c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007580:	4689      	mov	r9, r1
 8007582:	2101      	movs	r1, #1
 8007584:	ec57 6b10 	vmov	r6, r7, d0
 8007588:	4690      	mov	r8, r2
 800758a:	f7ff fccf 	bl	8006f2c <_Balloc>
 800758e:	4604      	mov	r4, r0
 8007590:	b930      	cbnz	r0, 80075a0 <__d2b+0x24>
 8007592:	4602      	mov	r2, r0
 8007594:	4b25      	ldr	r3, [pc, #148]	; (800762c <__d2b+0xb0>)
 8007596:	4826      	ldr	r0, [pc, #152]	; (8007630 <__d2b+0xb4>)
 8007598:	f240 310a 	movw	r1, #778	; 0x30a
 800759c:	f000 fd1c 	bl	8007fd8 <__assert_func>
 80075a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075a8:	bb35      	cbnz	r5, 80075f8 <__d2b+0x7c>
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	d028      	beq.n	8007602 <__d2b+0x86>
 80075b0:	4668      	mov	r0, sp
 80075b2:	9600      	str	r6, [sp, #0]
 80075b4:	f7ff fd82 	bl	80070bc <__lo0bits>
 80075b8:	9900      	ldr	r1, [sp, #0]
 80075ba:	b300      	cbz	r0, 80075fe <__d2b+0x82>
 80075bc:	9a01      	ldr	r2, [sp, #4]
 80075be:	f1c0 0320 	rsb	r3, r0, #32
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	430b      	orrs	r3, r1
 80075c8:	40c2      	lsrs	r2, r0
 80075ca:	6163      	str	r3, [r4, #20]
 80075cc:	9201      	str	r2, [sp, #4]
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	61a3      	str	r3, [r4, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bf14      	ite	ne
 80075d6:	2202      	movne	r2, #2
 80075d8:	2201      	moveq	r2, #1
 80075da:	6122      	str	r2, [r4, #16]
 80075dc:	b1d5      	cbz	r5, 8007614 <__d2b+0x98>
 80075de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075e2:	4405      	add	r5, r0
 80075e4:	f8c9 5000 	str.w	r5, [r9]
 80075e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075ec:	f8c8 0000 	str.w	r0, [r8]
 80075f0:	4620      	mov	r0, r4
 80075f2:	b003      	add	sp, #12
 80075f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075fc:	e7d5      	b.n	80075aa <__d2b+0x2e>
 80075fe:	6161      	str	r1, [r4, #20]
 8007600:	e7e5      	b.n	80075ce <__d2b+0x52>
 8007602:	a801      	add	r0, sp, #4
 8007604:	f7ff fd5a 	bl	80070bc <__lo0bits>
 8007608:	9b01      	ldr	r3, [sp, #4]
 800760a:	6163      	str	r3, [r4, #20]
 800760c:	2201      	movs	r2, #1
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	3020      	adds	r0, #32
 8007612:	e7e3      	b.n	80075dc <__d2b+0x60>
 8007614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800761c:	f8c9 0000 	str.w	r0, [r9]
 8007620:	6918      	ldr	r0, [r3, #16]
 8007622:	f7ff fd2b 	bl	800707c <__hi0bits>
 8007626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800762a:	e7df      	b.n	80075ec <__d2b+0x70>
 800762c:	0800861b 	.word	0x0800861b
 8007630:	0800868c 	.word	0x0800868c

08007634 <_calloc_r>:
 8007634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007636:	fba1 2402 	umull	r2, r4, r1, r2
 800763a:	b94c      	cbnz	r4, 8007650 <_calloc_r+0x1c>
 800763c:	4611      	mov	r1, r2
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	f000 f87a 	bl	8007738 <_malloc_r>
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	4605      	mov	r5, r0
 8007648:	b930      	cbnz	r0, 8007658 <_calloc_r+0x24>
 800764a:	4628      	mov	r0, r5
 800764c:	b003      	add	sp, #12
 800764e:	bd30      	pop	{r4, r5, pc}
 8007650:	220c      	movs	r2, #12
 8007652:	6002      	str	r2, [r0, #0]
 8007654:	2500      	movs	r5, #0
 8007656:	e7f8      	b.n	800764a <_calloc_r+0x16>
 8007658:	4621      	mov	r1, r4
 800765a:	f7fe f82f 	bl	80056bc <memset>
 800765e:	e7f4      	b.n	800764a <_calloc_r+0x16>

08007660 <_free_r>:
 8007660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007662:	2900      	cmp	r1, #0
 8007664:	d044      	beq.n	80076f0 <_free_r+0x90>
 8007666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766a:	9001      	str	r0, [sp, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f1a1 0404 	sub.w	r4, r1, #4
 8007672:	bfb8      	it	lt
 8007674:	18e4      	addlt	r4, r4, r3
 8007676:	f000 fe55 	bl	8008324 <__malloc_lock>
 800767a:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <_free_r+0x94>)
 800767c:	9801      	ldr	r0, [sp, #4]
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	b933      	cbnz	r3, 8007690 <_free_r+0x30>
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	6014      	str	r4, [r2, #0]
 8007686:	b003      	add	sp, #12
 8007688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800768c:	f000 be50 	b.w	8008330 <__malloc_unlock>
 8007690:	42a3      	cmp	r3, r4
 8007692:	d908      	bls.n	80076a6 <_free_r+0x46>
 8007694:	6825      	ldr	r5, [r4, #0]
 8007696:	1961      	adds	r1, r4, r5
 8007698:	428b      	cmp	r3, r1
 800769a:	bf01      	itttt	eq
 800769c:	6819      	ldreq	r1, [r3, #0]
 800769e:	685b      	ldreq	r3, [r3, #4]
 80076a0:	1949      	addeq	r1, r1, r5
 80076a2:	6021      	streq	r1, [r4, #0]
 80076a4:	e7ed      	b.n	8007682 <_free_r+0x22>
 80076a6:	461a      	mov	r2, r3
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	b10b      	cbz	r3, 80076b0 <_free_r+0x50>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d9fa      	bls.n	80076a6 <_free_r+0x46>
 80076b0:	6811      	ldr	r1, [r2, #0]
 80076b2:	1855      	adds	r5, r2, r1
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d10b      	bne.n	80076d0 <_free_r+0x70>
 80076b8:	6824      	ldr	r4, [r4, #0]
 80076ba:	4421      	add	r1, r4
 80076bc:	1854      	adds	r4, r2, r1
 80076be:	42a3      	cmp	r3, r4
 80076c0:	6011      	str	r1, [r2, #0]
 80076c2:	d1e0      	bne.n	8007686 <_free_r+0x26>
 80076c4:	681c      	ldr	r4, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	4421      	add	r1, r4
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	e7da      	b.n	8007686 <_free_r+0x26>
 80076d0:	d902      	bls.n	80076d8 <_free_r+0x78>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	e7d6      	b.n	8007686 <_free_r+0x26>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf04      	itt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	bf04      	itt	eq
 80076e8:	1949      	addeq	r1, r1, r5
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	6054      	str	r4, [r2, #4]
 80076ee:	e7ca      	b.n	8007686 <_free_r+0x26>
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	20000388 	.word	0x20000388

080076f8 <sbrk_aligned>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4e0e      	ldr	r6, [pc, #56]	; (8007734 <sbrk_aligned+0x3c>)
 80076fc:	460c      	mov	r4, r1
 80076fe:	6831      	ldr	r1, [r6, #0]
 8007700:	4605      	mov	r5, r0
 8007702:	b911      	cbnz	r1, 800770a <sbrk_aligned+0x12>
 8007704:	f000 fb42 	bl	8007d8c <_sbrk_r>
 8007708:	6030      	str	r0, [r6, #0]
 800770a:	4621      	mov	r1, r4
 800770c:	4628      	mov	r0, r5
 800770e:	f000 fb3d 	bl	8007d8c <_sbrk_r>
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	d00a      	beq.n	800772c <sbrk_aligned+0x34>
 8007716:	1cc4      	adds	r4, r0, #3
 8007718:	f024 0403 	bic.w	r4, r4, #3
 800771c:	42a0      	cmp	r0, r4
 800771e:	d007      	beq.n	8007730 <sbrk_aligned+0x38>
 8007720:	1a21      	subs	r1, r4, r0
 8007722:	4628      	mov	r0, r5
 8007724:	f000 fb32 	bl	8007d8c <_sbrk_r>
 8007728:	3001      	adds	r0, #1
 800772a:	d101      	bne.n	8007730 <sbrk_aligned+0x38>
 800772c:	f04f 34ff 	mov.w	r4, #4294967295
 8007730:	4620      	mov	r0, r4
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	2000038c 	.word	0x2000038c

08007738 <_malloc_r>:
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	1ccd      	adds	r5, r1, #3
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	2d00      	cmp	r5, #0
 800774c:	4607      	mov	r7, r0
 800774e:	db01      	blt.n	8007754 <_malloc_r+0x1c>
 8007750:	42a9      	cmp	r1, r5
 8007752:	d905      	bls.n	8007760 <_malloc_r+0x28>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	2600      	movs	r6, #0
 800775a:	4630      	mov	r0, r6
 800775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007760:	4e2e      	ldr	r6, [pc, #184]	; (800781c <_malloc_r+0xe4>)
 8007762:	f000 fddf 	bl	8008324 <__malloc_lock>
 8007766:	6833      	ldr	r3, [r6, #0]
 8007768:	461c      	mov	r4, r3
 800776a:	bb34      	cbnz	r4, 80077ba <_malloc_r+0x82>
 800776c:	4629      	mov	r1, r5
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ffc2 	bl	80076f8 <sbrk_aligned>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	4604      	mov	r4, r0
 8007778:	d14d      	bne.n	8007816 <_malloc_r+0xde>
 800777a:	6834      	ldr	r4, [r6, #0]
 800777c:	4626      	mov	r6, r4
 800777e:	2e00      	cmp	r6, #0
 8007780:	d140      	bne.n	8007804 <_malloc_r+0xcc>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	4631      	mov	r1, r6
 8007786:	4638      	mov	r0, r7
 8007788:	eb04 0803 	add.w	r8, r4, r3
 800778c:	f000 fafe 	bl	8007d8c <_sbrk_r>
 8007790:	4580      	cmp	r8, r0
 8007792:	d13a      	bne.n	800780a <_malloc_r+0xd2>
 8007794:	6821      	ldr	r1, [r4, #0]
 8007796:	3503      	adds	r5, #3
 8007798:	1a6d      	subs	r5, r5, r1
 800779a:	f025 0503 	bic.w	r5, r5, #3
 800779e:	3508      	adds	r5, #8
 80077a0:	2d0c      	cmp	r5, #12
 80077a2:	bf38      	it	cc
 80077a4:	250c      	movcc	r5, #12
 80077a6:	4629      	mov	r1, r5
 80077a8:	4638      	mov	r0, r7
 80077aa:	f7ff ffa5 	bl	80076f8 <sbrk_aligned>
 80077ae:	3001      	adds	r0, #1
 80077b0:	d02b      	beq.n	800780a <_malloc_r+0xd2>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	442b      	add	r3, r5
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	e00e      	b.n	80077d8 <_malloc_r+0xa0>
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	1b52      	subs	r2, r2, r5
 80077be:	d41e      	bmi.n	80077fe <_malloc_r+0xc6>
 80077c0:	2a0b      	cmp	r2, #11
 80077c2:	d916      	bls.n	80077f2 <_malloc_r+0xba>
 80077c4:	1961      	adds	r1, r4, r5
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	6025      	str	r5, [r4, #0]
 80077ca:	bf18      	it	ne
 80077cc:	6059      	strne	r1, [r3, #4]
 80077ce:	6863      	ldr	r3, [r4, #4]
 80077d0:	bf08      	it	eq
 80077d2:	6031      	streq	r1, [r6, #0]
 80077d4:	5162      	str	r2, [r4, r5]
 80077d6:	604b      	str	r3, [r1, #4]
 80077d8:	4638      	mov	r0, r7
 80077da:	f104 060b 	add.w	r6, r4, #11
 80077de:	f000 fda7 	bl	8008330 <__malloc_unlock>
 80077e2:	f026 0607 	bic.w	r6, r6, #7
 80077e6:	1d23      	adds	r3, r4, #4
 80077e8:	1af2      	subs	r2, r6, r3
 80077ea:	d0b6      	beq.n	800775a <_malloc_r+0x22>
 80077ec:	1b9b      	subs	r3, r3, r6
 80077ee:	50a3      	str	r3, [r4, r2]
 80077f0:	e7b3      	b.n	800775a <_malloc_r+0x22>
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	bf0c      	ite	eq
 80077f8:	6032      	streq	r2, [r6, #0]
 80077fa:	605a      	strne	r2, [r3, #4]
 80077fc:	e7ec      	b.n	80077d8 <_malloc_r+0xa0>
 80077fe:	4623      	mov	r3, r4
 8007800:	6864      	ldr	r4, [r4, #4]
 8007802:	e7b2      	b.n	800776a <_malloc_r+0x32>
 8007804:	4634      	mov	r4, r6
 8007806:	6876      	ldr	r6, [r6, #4]
 8007808:	e7b9      	b.n	800777e <_malloc_r+0x46>
 800780a:	230c      	movs	r3, #12
 800780c:	603b      	str	r3, [r7, #0]
 800780e:	4638      	mov	r0, r7
 8007810:	f000 fd8e 	bl	8008330 <__malloc_unlock>
 8007814:	e7a1      	b.n	800775a <_malloc_r+0x22>
 8007816:	6025      	str	r5, [r4, #0]
 8007818:	e7de      	b.n	80077d8 <_malloc_r+0xa0>
 800781a:	bf00      	nop
 800781c:	20000388 	.word	0x20000388

08007820 <__ssputs_r>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	688e      	ldr	r6, [r1, #8]
 8007826:	429e      	cmp	r6, r3
 8007828:	4682      	mov	sl, r0
 800782a:	460c      	mov	r4, r1
 800782c:	4690      	mov	r8, r2
 800782e:	461f      	mov	r7, r3
 8007830:	d838      	bhi.n	80078a4 <__ssputs_r+0x84>
 8007832:	898a      	ldrh	r2, [r1, #12]
 8007834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007838:	d032      	beq.n	80078a0 <__ssputs_r+0x80>
 800783a:	6825      	ldr	r5, [r4, #0]
 800783c:	6909      	ldr	r1, [r1, #16]
 800783e:	eba5 0901 	sub.w	r9, r5, r1
 8007842:	6965      	ldr	r5, [r4, #20]
 8007844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800784c:	3301      	adds	r3, #1
 800784e:	444b      	add	r3, r9
 8007850:	106d      	asrs	r5, r5, #1
 8007852:	429d      	cmp	r5, r3
 8007854:	bf38      	it	cc
 8007856:	461d      	movcc	r5, r3
 8007858:	0553      	lsls	r3, r2, #21
 800785a:	d531      	bpl.n	80078c0 <__ssputs_r+0xa0>
 800785c:	4629      	mov	r1, r5
 800785e:	f7ff ff6b 	bl	8007738 <_malloc_r>
 8007862:	4606      	mov	r6, r0
 8007864:	b950      	cbnz	r0, 800787c <__ssputs_r+0x5c>
 8007866:	230c      	movs	r3, #12
 8007868:	f8ca 3000 	str.w	r3, [sl]
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787c:	6921      	ldr	r1, [r4, #16]
 800787e:	464a      	mov	r2, r9
 8007880:	f7ff fb46 	bl	8006f10 <memcpy>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	6126      	str	r6, [r4, #16]
 8007892:	6165      	str	r5, [r4, #20]
 8007894:	444e      	add	r6, r9
 8007896:	eba5 0509 	sub.w	r5, r5, r9
 800789a:	6026      	str	r6, [r4, #0]
 800789c:	60a5      	str	r5, [r4, #8]
 800789e:	463e      	mov	r6, r7
 80078a0:	42be      	cmp	r6, r7
 80078a2:	d900      	bls.n	80078a6 <__ssputs_r+0x86>
 80078a4:	463e      	mov	r6, r7
 80078a6:	6820      	ldr	r0, [r4, #0]
 80078a8:	4632      	mov	r2, r6
 80078aa:	4641      	mov	r1, r8
 80078ac:	f000 fd20 	bl	80082f0 <memmove>
 80078b0:	68a3      	ldr	r3, [r4, #8]
 80078b2:	1b9b      	subs	r3, r3, r6
 80078b4:	60a3      	str	r3, [r4, #8]
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	4433      	add	r3, r6
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	2000      	movs	r0, #0
 80078be:	e7db      	b.n	8007878 <__ssputs_r+0x58>
 80078c0:	462a      	mov	r2, r5
 80078c2:	f000 fd3b 	bl	800833c <_realloc_r>
 80078c6:	4606      	mov	r6, r0
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d1e1      	bne.n	8007890 <__ssputs_r+0x70>
 80078cc:	6921      	ldr	r1, [r4, #16]
 80078ce:	4650      	mov	r0, sl
 80078d0:	f7ff fec6 	bl	8007660 <_free_r>
 80078d4:	e7c7      	b.n	8007866 <__ssputs_r+0x46>
	...

080078d8 <_svfiprintf_r>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	4698      	mov	r8, r3
 80078de:	898b      	ldrh	r3, [r1, #12]
 80078e0:	061b      	lsls	r3, r3, #24
 80078e2:	b09d      	sub	sp, #116	; 0x74
 80078e4:	4607      	mov	r7, r0
 80078e6:	460d      	mov	r5, r1
 80078e8:	4614      	mov	r4, r2
 80078ea:	d50e      	bpl.n	800790a <_svfiprintf_r+0x32>
 80078ec:	690b      	ldr	r3, [r1, #16]
 80078ee:	b963      	cbnz	r3, 800790a <_svfiprintf_r+0x32>
 80078f0:	2140      	movs	r1, #64	; 0x40
 80078f2:	f7ff ff21 	bl	8007738 <_malloc_r>
 80078f6:	6028      	str	r0, [r5, #0]
 80078f8:	6128      	str	r0, [r5, #16]
 80078fa:	b920      	cbnz	r0, 8007906 <_svfiprintf_r+0x2e>
 80078fc:	230c      	movs	r3, #12
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	e0d1      	b.n	8007aaa <_svfiprintf_r+0x1d2>
 8007906:	2340      	movs	r3, #64	; 0x40
 8007908:	616b      	str	r3, [r5, #20]
 800790a:	2300      	movs	r3, #0
 800790c:	9309      	str	r3, [sp, #36]	; 0x24
 800790e:	2320      	movs	r3, #32
 8007910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007914:	f8cd 800c 	str.w	r8, [sp, #12]
 8007918:	2330      	movs	r3, #48	; 0x30
 800791a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ac4 <_svfiprintf_r+0x1ec>
 800791e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007922:	f04f 0901 	mov.w	r9, #1
 8007926:	4623      	mov	r3, r4
 8007928:	469a      	mov	sl, r3
 800792a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800792e:	b10a      	cbz	r2, 8007934 <_svfiprintf_r+0x5c>
 8007930:	2a25      	cmp	r2, #37	; 0x25
 8007932:	d1f9      	bne.n	8007928 <_svfiprintf_r+0x50>
 8007934:	ebba 0b04 	subs.w	fp, sl, r4
 8007938:	d00b      	beq.n	8007952 <_svfiprintf_r+0x7a>
 800793a:	465b      	mov	r3, fp
 800793c:	4622      	mov	r2, r4
 800793e:	4629      	mov	r1, r5
 8007940:	4638      	mov	r0, r7
 8007942:	f7ff ff6d 	bl	8007820 <__ssputs_r>
 8007946:	3001      	adds	r0, #1
 8007948:	f000 80aa 	beq.w	8007aa0 <_svfiprintf_r+0x1c8>
 800794c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794e:	445a      	add	r2, fp
 8007950:	9209      	str	r2, [sp, #36]	; 0x24
 8007952:	f89a 3000 	ldrb.w	r3, [sl]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80a2 	beq.w	8007aa0 <_svfiprintf_r+0x1c8>
 800795c:	2300      	movs	r3, #0
 800795e:	f04f 32ff 	mov.w	r2, #4294967295
 8007962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007966:	f10a 0a01 	add.w	sl, sl, #1
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	9307      	str	r3, [sp, #28]
 800796e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007972:	931a      	str	r3, [sp, #104]	; 0x68
 8007974:	4654      	mov	r4, sl
 8007976:	2205      	movs	r2, #5
 8007978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797c:	4851      	ldr	r0, [pc, #324]	; (8007ac4 <_svfiprintf_r+0x1ec>)
 800797e:	f7f8 fc37 	bl	80001f0 <memchr>
 8007982:	9a04      	ldr	r2, [sp, #16]
 8007984:	b9d8      	cbnz	r0, 80079be <_svfiprintf_r+0xe6>
 8007986:	06d0      	lsls	r0, r2, #27
 8007988:	bf44      	itt	mi
 800798a:	2320      	movmi	r3, #32
 800798c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007990:	0711      	lsls	r1, r2, #28
 8007992:	bf44      	itt	mi
 8007994:	232b      	movmi	r3, #43	; 0x2b
 8007996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800799a:	f89a 3000 	ldrb.w	r3, [sl]
 800799e:	2b2a      	cmp	r3, #42	; 0x2a
 80079a0:	d015      	beq.n	80079ce <_svfiprintf_r+0xf6>
 80079a2:	9a07      	ldr	r2, [sp, #28]
 80079a4:	4654      	mov	r4, sl
 80079a6:	2000      	movs	r0, #0
 80079a8:	f04f 0c0a 	mov.w	ip, #10
 80079ac:	4621      	mov	r1, r4
 80079ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079b2:	3b30      	subs	r3, #48	; 0x30
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d94e      	bls.n	8007a56 <_svfiprintf_r+0x17e>
 80079b8:	b1b0      	cbz	r0, 80079e8 <_svfiprintf_r+0x110>
 80079ba:	9207      	str	r2, [sp, #28]
 80079bc:	e014      	b.n	80079e8 <_svfiprintf_r+0x110>
 80079be:	eba0 0308 	sub.w	r3, r0, r8
 80079c2:	fa09 f303 	lsl.w	r3, r9, r3
 80079c6:	4313      	orrs	r3, r2
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	46a2      	mov	sl, r4
 80079cc:	e7d2      	b.n	8007974 <_svfiprintf_r+0x9c>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	1d19      	adds	r1, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9103      	str	r1, [sp, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfbb      	ittet	lt
 80079da:	425b      	neglt	r3, r3
 80079dc:	f042 0202 	orrlt.w	r2, r2, #2
 80079e0:	9307      	strge	r3, [sp, #28]
 80079e2:	9307      	strlt	r3, [sp, #28]
 80079e4:	bfb8      	it	lt
 80079e6:	9204      	strlt	r2, [sp, #16]
 80079e8:	7823      	ldrb	r3, [r4, #0]
 80079ea:	2b2e      	cmp	r3, #46	; 0x2e
 80079ec:	d10c      	bne.n	8007a08 <_svfiprintf_r+0x130>
 80079ee:	7863      	ldrb	r3, [r4, #1]
 80079f0:	2b2a      	cmp	r3, #42	; 0x2a
 80079f2:	d135      	bne.n	8007a60 <_svfiprintf_r+0x188>
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	9203      	str	r2, [sp, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bfb8      	it	lt
 8007a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a04:	3402      	adds	r4, #2
 8007a06:	9305      	str	r3, [sp, #20]
 8007a08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ad4 <_svfiprintf_r+0x1fc>
 8007a0c:	7821      	ldrb	r1, [r4, #0]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	4650      	mov	r0, sl
 8007a12:	f7f8 fbed 	bl	80001f0 <memchr>
 8007a16:	b140      	cbz	r0, 8007a2a <_svfiprintf_r+0x152>
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	eba0 000a 	sub.w	r0, r0, sl
 8007a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	4303      	orrs	r3, r0
 8007a26:	3401      	adds	r4, #1
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2e:	4826      	ldr	r0, [pc, #152]	; (8007ac8 <_svfiprintf_r+0x1f0>)
 8007a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a34:	2206      	movs	r2, #6
 8007a36:	f7f8 fbdb 	bl	80001f0 <memchr>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d038      	beq.n	8007ab0 <_svfiprintf_r+0x1d8>
 8007a3e:	4b23      	ldr	r3, [pc, #140]	; (8007acc <_svfiprintf_r+0x1f4>)
 8007a40:	bb1b      	cbnz	r3, 8007a8a <_svfiprintf_r+0x1b2>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	3307      	adds	r3, #7
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	4433      	add	r3, r6
 8007a52:	9309      	str	r3, [sp, #36]	; 0x24
 8007a54:	e767      	b.n	8007926 <_svfiprintf_r+0x4e>
 8007a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	e7a5      	b.n	80079ac <_svfiprintf_r+0xd4>
 8007a60:	2300      	movs	r3, #0
 8007a62:	3401      	adds	r4, #1
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	4619      	mov	r1, r3
 8007a68:	f04f 0c0a 	mov.w	ip, #10
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a72:	3a30      	subs	r2, #48	; 0x30
 8007a74:	2a09      	cmp	r2, #9
 8007a76:	d903      	bls.n	8007a80 <_svfiprintf_r+0x1a8>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0c5      	beq.n	8007a08 <_svfiprintf_r+0x130>
 8007a7c:	9105      	str	r1, [sp, #20]
 8007a7e:	e7c3      	b.n	8007a08 <_svfiprintf_r+0x130>
 8007a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a84:	4604      	mov	r4, r0
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7f0      	b.n	8007a6c <_svfiprintf_r+0x194>
 8007a8a:	ab03      	add	r3, sp, #12
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <_svfiprintf_r+0x1f8>)
 8007a92:	a904      	add	r1, sp, #16
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7fd feb9 	bl	800580c <_printf_float>
 8007a9a:	1c42      	adds	r2, r0, #1
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	d1d6      	bne.n	8007a4e <_svfiprintf_r+0x176>
 8007aa0:	89ab      	ldrh	r3, [r5, #12]
 8007aa2:	065b      	lsls	r3, r3, #25
 8007aa4:	f53f af2c 	bmi.w	8007900 <_svfiprintf_r+0x28>
 8007aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aaa:	b01d      	add	sp, #116	; 0x74
 8007aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	ab03      	add	r3, sp, #12
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <_svfiprintf_r+0x1f8>)
 8007ab8:	a904      	add	r1, sp, #16
 8007aba:	4638      	mov	r0, r7
 8007abc:	f7fe f94a 	bl	8005d54 <_printf_i>
 8007ac0:	e7eb      	b.n	8007a9a <_svfiprintf_r+0x1c2>
 8007ac2:	bf00      	nop
 8007ac4:	080087e4 	.word	0x080087e4
 8007ac8:	080087ee 	.word	0x080087ee
 8007acc:	0800580d 	.word	0x0800580d
 8007ad0:	08007821 	.word	0x08007821
 8007ad4:	080087ea 	.word	0x080087ea

08007ad8 <__sfputc_r>:
 8007ad8:	6893      	ldr	r3, [r2, #8]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	b410      	push	{r4}
 8007ae0:	6093      	str	r3, [r2, #8]
 8007ae2:	da08      	bge.n	8007af6 <__sfputc_r+0x1e>
 8007ae4:	6994      	ldr	r4, [r2, #24]
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	db01      	blt.n	8007aee <__sfputc_r+0x16>
 8007aea:	290a      	cmp	r1, #10
 8007aec:	d103      	bne.n	8007af6 <__sfputc_r+0x1e>
 8007aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007af2:	f000 b99f 	b.w	8007e34 <__swbuf_r>
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	1c58      	adds	r0, r3, #1
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	7019      	strb	r1, [r3, #0]
 8007afe:	4608      	mov	r0, r1
 8007b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <__sfputs_r>:
 8007b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	18d5      	adds	r5, r2, r3
 8007b10:	42ac      	cmp	r4, r5
 8007b12:	d101      	bne.n	8007b18 <__sfputs_r+0x12>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e007      	b.n	8007b28 <__sfputs_r+0x22>
 8007b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ffda 	bl	8007ad8 <__sfputc_r>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d1f3      	bne.n	8007b10 <__sfputs_r+0xa>
 8007b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b2c <_vfiprintf_r>:
 8007b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	460d      	mov	r5, r1
 8007b32:	b09d      	sub	sp, #116	; 0x74
 8007b34:	4614      	mov	r4, r2
 8007b36:	4698      	mov	r8, r3
 8007b38:	4606      	mov	r6, r0
 8007b3a:	b118      	cbz	r0, 8007b44 <_vfiprintf_r+0x18>
 8007b3c:	6983      	ldr	r3, [r0, #24]
 8007b3e:	b90b      	cbnz	r3, 8007b44 <_vfiprintf_r+0x18>
 8007b40:	f7ff f938 	bl	8006db4 <__sinit>
 8007b44:	4b89      	ldr	r3, [pc, #548]	; (8007d6c <_vfiprintf_r+0x240>)
 8007b46:	429d      	cmp	r5, r3
 8007b48:	d11b      	bne.n	8007b82 <_vfiprintf_r+0x56>
 8007b4a:	6875      	ldr	r5, [r6, #4]
 8007b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b4e:	07d9      	lsls	r1, r3, #31
 8007b50:	d405      	bmi.n	8007b5e <_vfiprintf_r+0x32>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	059a      	lsls	r2, r3, #22
 8007b56:	d402      	bmi.n	8007b5e <_vfiprintf_r+0x32>
 8007b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5a:	f7ff f9ce 	bl	8006efa <__retarget_lock_acquire_recursive>
 8007b5e:	89ab      	ldrh	r3, [r5, #12]
 8007b60:	071b      	lsls	r3, r3, #28
 8007b62:	d501      	bpl.n	8007b68 <_vfiprintf_r+0x3c>
 8007b64:	692b      	ldr	r3, [r5, #16]
 8007b66:	b9eb      	cbnz	r3, 8007ba4 <_vfiprintf_r+0x78>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 f9c6 	bl	8007efc <__swsetup_r>
 8007b70:	b1c0      	cbz	r0, 8007ba4 <_vfiprintf_r+0x78>
 8007b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b74:	07dc      	lsls	r4, r3, #31
 8007b76:	d50e      	bpl.n	8007b96 <_vfiprintf_r+0x6a>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	b01d      	add	sp, #116	; 0x74
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	4b7b      	ldr	r3, [pc, #492]	; (8007d70 <_vfiprintf_r+0x244>)
 8007b84:	429d      	cmp	r5, r3
 8007b86:	d101      	bne.n	8007b8c <_vfiprintf_r+0x60>
 8007b88:	68b5      	ldr	r5, [r6, #8]
 8007b8a:	e7df      	b.n	8007b4c <_vfiprintf_r+0x20>
 8007b8c:	4b79      	ldr	r3, [pc, #484]	; (8007d74 <_vfiprintf_r+0x248>)
 8007b8e:	429d      	cmp	r5, r3
 8007b90:	bf08      	it	eq
 8007b92:	68f5      	ldreq	r5, [r6, #12]
 8007b94:	e7da      	b.n	8007b4c <_vfiprintf_r+0x20>
 8007b96:	89ab      	ldrh	r3, [r5, #12]
 8007b98:	0598      	lsls	r0, r3, #22
 8007b9a:	d4ed      	bmi.n	8007b78 <_vfiprintf_r+0x4c>
 8007b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b9e:	f7ff f9ad 	bl	8006efc <__retarget_lock_release_recursive>
 8007ba2:	e7e9      	b.n	8007b78 <_vfiprintf_r+0x4c>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba8:	2320      	movs	r3, #32
 8007baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bb2:	2330      	movs	r3, #48	; 0x30
 8007bb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d78 <_vfiprintf_r+0x24c>
 8007bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bbc:	f04f 0901 	mov.w	r9, #1
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	469a      	mov	sl, r3
 8007bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bc8:	b10a      	cbz	r2, 8007bce <_vfiprintf_r+0xa2>
 8007bca:	2a25      	cmp	r2, #37	; 0x25
 8007bcc:	d1f9      	bne.n	8007bc2 <_vfiprintf_r+0x96>
 8007bce:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd2:	d00b      	beq.n	8007bec <_vfiprintf_r+0xc0>
 8007bd4:	465b      	mov	r3, fp
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff ff93 	bl	8007b06 <__sfputs_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	f000 80aa 	beq.w	8007d3a <_vfiprintf_r+0x20e>
 8007be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be8:	445a      	add	r2, fp
 8007bea:	9209      	str	r2, [sp, #36]	; 0x24
 8007bec:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80a2 	beq.w	8007d3a <_vfiprintf_r+0x20e>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c00:	f10a 0a01 	add.w	sl, sl, #1
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c0e:	4654      	mov	r4, sl
 8007c10:	2205      	movs	r2, #5
 8007c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c16:	4858      	ldr	r0, [pc, #352]	; (8007d78 <_vfiprintf_r+0x24c>)
 8007c18:	f7f8 faea 	bl	80001f0 <memchr>
 8007c1c:	9a04      	ldr	r2, [sp, #16]
 8007c1e:	b9d8      	cbnz	r0, 8007c58 <_vfiprintf_r+0x12c>
 8007c20:	06d1      	lsls	r1, r2, #27
 8007c22:	bf44      	itt	mi
 8007c24:	2320      	movmi	r3, #32
 8007c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c2a:	0713      	lsls	r3, r2, #28
 8007c2c:	bf44      	itt	mi
 8007c2e:	232b      	movmi	r3, #43	; 0x2b
 8007c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c34:	f89a 3000 	ldrb.w	r3, [sl]
 8007c38:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3a:	d015      	beq.n	8007c68 <_vfiprintf_r+0x13c>
 8007c3c:	9a07      	ldr	r2, [sp, #28]
 8007c3e:	4654      	mov	r4, sl
 8007c40:	2000      	movs	r0, #0
 8007c42:	f04f 0c0a 	mov.w	ip, #10
 8007c46:	4621      	mov	r1, r4
 8007c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c4c:	3b30      	subs	r3, #48	; 0x30
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d94e      	bls.n	8007cf0 <_vfiprintf_r+0x1c4>
 8007c52:	b1b0      	cbz	r0, 8007c82 <_vfiprintf_r+0x156>
 8007c54:	9207      	str	r2, [sp, #28]
 8007c56:	e014      	b.n	8007c82 <_vfiprintf_r+0x156>
 8007c58:	eba0 0308 	sub.w	r3, r0, r8
 8007c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c60:	4313      	orrs	r3, r2
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	46a2      	mov	sl, r4
 8007c66:	e7d2      	b.n	8007c0e <_vfiprintf_r+0xe2>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	1d19      	adds	r1, r3, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	9103      	str	r1, [sp, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfbb      	ittet	lt
 8007c74:	425b      	neglt	r3, r3
 8007c76:	f042 0202 	orrlt.w	r2, r2, #2
 8007c7a:	9307      	strge	r3, [sp, #28]
 8007c7c:	9307      	strlt	r3, [sp, #28]
 8007c7e:	bfb8      	it	lt
 8007c80:	9204      	strlt	r2, [sp, #16]
 8007c82:	7823      	ldrb	r3, [r4, #0]
 8007c84:	2b2e      	cmp	r3, #46	; 0x2e
 8007c86:	d10c      	bne.n	8007ca2 <_vfiprintf_r+0x176>
 8007c88:	7863      	ldrb	r3, [r4, #1]
 8007c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8c:	d135      	bne.n	8007cfa <_vfiprintf_r+0x1ce>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	9203      	str	r2, [sp, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bfb8      	it	lt
 8007c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c9e:	3402      	adds	r4, #2
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d88 <_vfiprintf_r+0x25c>
 8007ca6:	7821      	ldrb	r1, [r4, #0]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 faa0 	bl	80001f0 <memchr>
 8007cb0:	b140      	cbz	r0, 8007cc4 <_vfiprintf_r+0x198>
 8007cb2:	2340      	movs	r3, #64	; 0x40
 8007cb4:	eba0 000a 	sub.w	r0, r0, sl
 8007cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	4303      	orrs	r3, r0
 8007cc0:	3401      	adds	r4, #1
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc8:	482c      	ldr	r0, [pc, #176]	; (8007d7c <_vfiprintf_r+0x250>)
 8007cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cce:	2206      	movs	r2, #6
 8007cd0:	f7f8 fa8e 	bl	80001f0 <memchr>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d03f      	beq.n	8007d58 <_vfiprintf_r+0x22c>
 8007cd8:	4b29      	ldr	r3, [pc, #164]	; (8007d80 <_vfiprintf_r+0x254>)
 8007cda:	bb1b      	cbnz	r3, 8007d24 <_vfiprintf_r+0x1f8>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	3307      	adds	r3, #7
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cea:	443b      	add	r3, r7
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	e767      	b.n	8007bc0 <_vfiprintf_r+0x94>
 8007cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e7a5      	b.n	8007c46 <_vfiprintf_r+0x11a>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	3401      	adds	r4, #1
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	4619      	mov	r1, r3
 8007d02:	f04f 0c0a 	mov.w	ip, #10
 8007d06:	4620      	mov	r0, r4
 8007d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d0c:	3a30      	subs	r2, #48	; 0x30
 8007d0e:	2a09      	cmp	r2, #9
 8007d10:	d903      	bls.n	8007d1a <_vfiprintf_r+0x1ee>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0c5      	beq.n	8007ca2 <_vfiprintf_r+0x176>
 8007d16:	9105      	str	r1, [sp, #20]
 8007d18:	e7c3      	b.n	8007ca2 <_vfiprintf_r+0x176>
 8007d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d1e:	4604      	mov	r4, r0
 8007d20:	2301      	movs	r3, #1
 8007d22:	e7f0      	b.n	8007d06 <_vfiprintf_r+0x1da>
 8007d24:	ab03      	add	r3, sp, #12
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <_vfiprintf_r+0x258>)
 8007d2c:	a904      	add	r1, sp, #16
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7fd fd6c 	bl	800580c <_printf_float>
 8007d34:	4607      	mov	r7, r0
 8007d36:	1c78      	adds	r0, r7, #1
 8007d38:	d1d6      	bne.n	8007ce8 <_vfiprintf_r+0x1bc>
 8007d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d3c:	07d9      	lsls	r1, r3, #31
 8007d3e:	d405      	bmi.n	8007d4c <_vfiprintf_r+0x220>
 8007d40:	89ab      	ldrh	r3, [r5, #12]
 8007d42:	059a      	lsls	r2, r3, #22
 8007d44:	d402      	bmi.n	8007d4c <_vfiprintf_r+0x220>
 8007d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d48:	f7ff f8d8 	bl	8006efc <__retarget_lock_release_recursive>
 8007d4c:	89ab      	ldrh	r3, [r5, #12]
 8007d4e:	065b      	lsls	r3, r3, #25
 8007d50:	f53f af12 	bmi.w	8007b78 <_vfiprintf_r+0x4c>
 8007d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d56:	e711      	b.n	8007b7c <_vfiprintf_r+0x50>
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <_vfiprintf_r+0x258>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4630      	mov	r0, r6
 8007d64:	f7fd fff6 	bl	8005d54 <_printf_i>
 8007d68:	e7e4      	b.n	8007d34 <_vfiprintf_r+0x208>
 8007d6a:	bf00      	nop
 8007d6c:	0800864c 	.word	0x0800864c
 8007d70:	0800866c 	.word	0x0800866c
 8007d74:	0800862c 	.word	0x0800862c
 8007d78:	080087e4 	.word	0x080087e4
 8007d7c:	080087ee 	.word	0x080087ee
 8007d80:	0800580d 	.word	0x0800580d
 8007d84:	08007b07 	.word	0x08007b07
 8007d88:	080087ea 	.word	0x080087ea

08007d8c <_sbrk_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d06      	ldr	r5, [pc, #24]	; (8007da8 <_sbrk_r+0x1c>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7f9 fbb2 	bl	8001500 <_sbrk>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_sbrk_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_sbrk_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	20000390 	.word	0x20000390

08007dac <__sread>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	460c      	mov	r4, r1
 8007db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db4:	f000 faf2 	bl	800839c <_read_r>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	bfab      	itete	ge
 8007dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007dc0:	181b      	addge	r3, r3, r0
 8007dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dc6:	bfac      	ite	ge
 8007dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dca:	81a3      	strhlt	r3, [r4, #12]
 8007dcc:	bd10      	pop	{r4, pc}

08007dce <__swrite>:
 8007dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd2:	461f      	mov	r7, r3
 8007dd4:	898b      	ldrh	r3, [r1, #12]
 8007dd6:	05db      	lsls	r3, r3, #23
 8007dd8:	4605      	mov	r5, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	4616      	mov	r6, r2
 8007dde:	d505      	bpl.n	8007dec <__swrite+0x1e>
 8007de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de4:	2302      	movs	r3, #2
 8007de6:	2200      	movs	r2, #0
 8007de8:	f000 f9f8 	bl	80081dc <_lseek_r>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	4632      	mov	r2, r6
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e02:	f000 b869 	b.w	8007ed8 <_write_r>

08007e06 <__sseek>:
 8007e06:	b510      	push	{r4, lr}
 8007e08:	460c      	mov	r4, r1
 8007e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0e:	f000 f9e5 	bl	80081dc <_lseek_r>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	bf15      	itete	ne
 8007e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e22:	81a3      	strheq	r3, [r4, #12]
 8007e24:	bf18      	it	ne
 8007e26:	81a3      	strhne	r3, [r4, #12]
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <__sclose>:
 8007e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2e:	f000 b8f1 	b.w	8008014 <_close_r>
	...

08007e34 <__swbuf_r>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	460e      	mov	r6, r1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	b118      	cbz	r0, 8007e46 <__swbuf_r+0x12>
 8007e3e:	6983      	ldr	r3, [r0, #24]
 8007e40:	b90b      	cbnz	r3, 8007e46 <__swbuf_r+0x12>
 8007e42:	f7fe ffb7 	bl	8006db4 <__sinit>
 8007e46:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <__swbuf_r+0x98>)
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	d12b      	bne.n	8007ea4 <__swbuf_r+0x70>
 8007e4c:	686c      	ldr	r4, [r5, #4]
 8007e4e:	69a3      	ldr	r3, [r4, #24]
 8007e50:	60a3      	str	r3, [r4, #8]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	071a      	lsls	r2, r3, #28
 8007e56:	d52f      	bpl.n	8007eb8 <__swbuf_r+0x84>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	b36b      	cbz	r3, 8007eb8 <__swbuf_r+0x84>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	1ac0      	subs	r0, r0, r3
 8007e62:	6963      	ldr	r3, [r4, #20]
 8007e64:	b2f6      	uxtb	r6, r6
 8007e66:	4283      	cmp	r3, r0
 8007e68:	4637      	mov	r7, r6
 8007e6a:	dc04      	bgt.n	8007e76 <__swbuf_r+0x42>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 f966 	bl	8008140 <_fflush_r>
 8007e74:	bb30      	cbnz	r0, 8007ec4 <__swbuf_r+0x90>
 8007e76:	68a3      	ldr	r3, [r4, #8]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	60a3      	str	r3, [r4, #8]
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	6022      	str	r2, [r4, #0]
 8007e82:	701e      	strb	r6, [r3, #0]
 8007e84:	6963      	ldr	r3, [r4, #20]
 8007e86:	3001      	adds	r0, #1
 8007e88:	4283      	cmp	r3, r0
 8007e8a:	d004      	beq.n	8007e96 <__swbuf_r+0x62>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	07db      	lsls	r3, r3, #31
 8007e90:	d506      	bpl.n	8007ea0 <__swbuf_r+0x6c>
 8007e92:	2e0a      	cmp	r6, #10
 8007e94:	d104      	bne.n	8007ea0 <__swbuf_r+0x6c>
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 f951 	bl	8008140 <_fflush_r>
 8007e9e:	b988      	cbnz	r0, 8007ec4 <__swbuf_r+0x90>
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <__swbuf_r+0x9c>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d101      	bne.n	8007eae <__swbuf_r+0x7a>
 8007eaa:	68ac      	ldr	r4, [r5, #8]
 8007eac:	e7cf      	b.n	8007e4e <__swbuf_r+0x1a>
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <__swbuf_r+0xa0>)
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	bf08      	it	eq
 8007eb4:	68ec      	ldreq	r4, [r5, #12]
 8007eb6:	e7ca      	b.n	8007e4e <__swbuf_r+0x1a>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 f81e 	bl	8007efc <__swsetup_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d0cb      	beq.n	8007e5c <__swbuf_r+0x28>
 8007ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec8:	e7ea      	b.n	8007ea0 <__swbuf_r+0x6c>
 8007eca:	bf00      	nop
 8007ecc:	0800864c 	.word	0x0800864c
 8007ed0:	0800866c 	.word	0x0800866c
 8007ed4:	0800862c 	.word	0x0800862c

08007ed8 <_write_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d07      	ldr	r5, [pc, #28]	; (8007ef8 <_write_r+0x20>)
 8007edc:	4604      	mov	r4, r0
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	602a      	str	r2, [r5, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f7f9 fab9 	bl	800145e <_write>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_write_r+0x1e>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_write_r+0x1e>
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	20000390 	.word	0x20000390

08007efc <__swsetup_r>:
 8007efc:	4b32      	ldr	r3, [pc, #200]	; (8007fc8 <__swsetup_r+0xcc>)
 8007efe:	b570      	push	{r4, r5, r6, lr}
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	4606      	mov	r6, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	b125      	cbz	r5, 8007f12 <__swsetup_r+0x16>
 8007f08:	69ab      	ldr	r3, [r5, #24]
 8007f0a:	b913      	cbnz	r3, 8007f12 <__swsetup_r+0x16>
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f7fe ff51 	bl	8006db4 <__sinit>
 8007f12:	4b2e      	ldr	r3, [pc, #184]	; (8007fcc <__swsetup_r+0xd0>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	d10f      	bne.n	8007f38 <__swsetup_r+0x3c>
 8007f18:	686c      	ldr	r4, [r5, #4]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f20:	0719      	lsls	r1, r3, #28
 8007f22:	d42c      	bmi.n	8007f7e <__swsetup_r+0x82>
 8007f24:	06dd      	lsls	r5, r3, #27
 8007f26:	d411      	bmi.n	8007f4c <__swsetup_r+0x50>
 8007f28:	2309      	movs	r3, #9
 8007f2a:	6033      	str	r3, [r6, #0]
 8007f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	e03e      	b.n	8007fb6 <__swsetup_r+0xba>
 8007f38:	4b25      	ldr	r3, [pc, #148]	; (8007fd0 <__swsetup_r+0xd4>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d101      	bne.n	8007f42 <__swsetup_r+0x46>
 8007f3e:	68ac      	ldr	r4, [r5, #8]
 8007f40:	e7eb      	b.n	8007f1a <__swsetup_r+0x1e>
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <__swsetup_r+0xd8>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	bf08      	it	eq
 8007f48:	68ec      	ldreq	r4, [r5, #12]
 8007f4a:	e7e6      	b.n	8007f1a <__swsetup_r+0x1e>
 8007f4c:	0758      	lsls	r0, r3, #29
 8007f4e:	d512      	bpl.n	8007f76 <__swsetup_r+0x7a>
 8007f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f52:	b141      	cbz	r1, 8007f66 <__swsetup_r+0x6a>
 8007f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d002      	beq.n	8007f62 <__swsetup_r+0x66>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7ff fb7f 	bl	8007660 <_free_r>
 8007f62:	2300      	movs	r3, #0
 8007f64:	6363      	str	r3, [r4, #52]	; 0x34
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f043 0308 	orr.w	r3, r3, #8
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	b94b      	cbnz	r3, 8007f96 <__swsetup_r+0x9a>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f8c:	d003      	beq.n	8007f96 <__swsetup_r+0x9a>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f95b 	bl	800824c <__smakebuf_r>
 8007f96:	89a0      	ldrh	r0, [r4, #12]
 8007f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f9c:	f010 0301 	ands.w	r3, r0, #1
 8007fa0:	d00a      	beq.n	8007fb8 <__swsetup_r+0xbc>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6963      	ldr	r3, [r4, #20]
 8007fa8:	425b      	negs	r3, r3
 8007faa:	61a3      	str	r3, [r4, #24]
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	b943      	cbnz	r3, 8007fc2 <__swsetup_r+0xc6>
 8007fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fb4:	d1ba      	bne.n	8007f2c <__swsetup_r+0x30>
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	0781      	lsls	r1, r0, #30
 8007fba:	bf58      	it	pl
 8007fbc:	6963      	ldrpl	r3, [r4, #20]
 8007fbe:	60a3      	str	r3, [r4, #8]
 8007fc0:	e7f4      	b.n	8007fac <__swsetup_r+0xb0>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e7f7      	b.n	8007fb6 <__swsetup_r+0xba>
 8007fc6:	bf00      	nop
 8007fc8:	2000002c 	.word	0x2000002c
 8007fcc:	0800864c 	.word	0x0800864c
 8007fd0:	0800866c 	.word	0x0800866c
 8007fd4:	0800862c 	.word	0x0800862c

08007fd8 <__assert_func>:
 8007fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fda:	4614      	mov	r4, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <__assert_func+0x2c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	68d8      	ldr	r0, [r3, #12]
 8007fe6:	b14c      	cbz	r4, 8007ffc <__assert_func+0x24>
 8007fe8:	4b07      	ldr	r3, [pc, #28]	; (8008008 <__assert_func+0x30>)
 8007fea:	9100      	str	r1, [sp, #0]
 8007fec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ff0:	4906      	ldr	r1, [pc, #24]	; (800800c <__assert_func+0x34>)
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	f000 f8e0 	bl	80081b8 <fiprintf>
 8007ff8:	f000 f9ef 	bl	80083da <abort>
 8007ffc:	4b04      	ldr	r3, [pc, #16]	; (8008010 <__assert_func+0x38>)
 8007ffe:	461c      	mov	r4, r3
 8008000:	e7f3      	b.n	8007fea <__assert_func+0x12>
 8008002:	bf00      	nop
 8008004:	2000002c 	.word	0x2000002c
 8008008:	080087f5 	.word	0x080087f5
 800800c:	08008802 	.word	0x08008802
 8008010:	08008830 	.word	0x08008830

08008014 <_close_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d06      	ldr	r5, [pc, #24]	; (8008030 <_close_r+0x1c>)
 8008018:	2300      	movs	r3, #0
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	f7f9 fa39 	bl	8001496 <_close>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_close_r+0x1a>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_close_r+0x1a>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20000390 	.word	0x20000390

08008034 <__sflush_r>:
 8008034:	898a      	ldrh	r2, [r1, #12]
 8008036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803a:	4605      	mov	r5, r0
 800803c:	0710      	lsls	r0, r2, #28
 800803e:	460c      	mov	r4, r1
 8008040:	d458      	bmi.n	80080f4 <__sflush_r+0xc0>
 8008042:	684b      	ldr	r3, [r1, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dc05      	bgt.n	8008054 <__sflush_r+0x20>
 8008048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	dc02      	bgt.n	8008054 <__sflush_r+0x20>
 800804e:	2000      	movs	r0, #0
 8008050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008056:	2e00      	cmp	r6, #0
 8008058:	d0f9      	beq.n	800804e <__sflush_r+0x1a>
 800805a:	2300      	movs	r3, #0
 800805c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008060:	682f      	ldr	r7, [r5, #0]
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	d032      	beq.n	80080cc <__sflush_r+0x98>
 8008066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	075a      	lsls	r2, r3, #29
 800806c:	d505      	bpl.n	800807a <__sflush_r+0x46>
 800806e:	6863      	ldr	r3, [r4, #4]
 8008070:	1ac0      	subs	r0, r0, r3
 8008072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008074:	b10b      	cbz	r3, 800807a <__sflush_r+0x46>
 8008076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008078:	1ac0      	subs	r0, r0, r3
 800807a:	2300      	movs	r3, #0
 800807c:	4602      	mov	r2, r0
 800807e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008080:	6a21      	ldr	r1, [r4, #32]
 8008082:	4628      	mov	r0, r5
 8008084:	47b0      	blx	r6
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	d106      	bne.n	800809a <__sflush_r+0x66>
 800808c:	6829      	ldr	r1, [r5, #0]
 800808e:	291d      	cmp	r1, #29
 8008090:	d82c      	bhi.n	80080ec <__sflush_r+0xb8>
 8008092:	4a2a      	ldr	r2, [pc, #168]	; (800813c <__sflush_r+0x108>)
 8008094:	40ca      	lsrs	r2, r1
 8008096:	07d6      	lsls	r6, r2, #31
 8008098:	d528      	bpl.n	80080ec <__sflush_r+0xb8>
 800809a:	2200      	movs	r2, #0
 800809c:	6062      	str	r2, [r4, #4]
 800809e:	04d9      	lsls	r1, r3, #19
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	6022      	str	r2, [r4, #0]
 80080a4:	d504      	bpl.n	80080b0 <__sflush_r+0x7c>
 80080a6:	1c42      	adds	r2, r0, #1
 80080a8:	d101      	bne.n	80080ae <__sflush_r+0x7a>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	b903      	cbnz	r3, 80080b0 <__sflush_r+0x7c>
 80080ae:	6560      	str	r0, [r4, #84]	; 0x54
 80080b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b2:	602f      	str	r7, [r5, #0]
 80080b4:	2900      	cmp	r1, #0
 80080b6:	d0ca      	beq.n	800804e <__sflush_r+0x1a>
 80080b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080bc:	4299      	cmp	r1, r3
 80080be:	d002      	beq.n	80080c6 <__sflush_r+0x92>
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7ff facd 	bl	8007660 <_free_r>
 80080c6:	2000      	movs	r0, #0
 80080c8:	6360      	str	r0, [r4, #52]	; 0x34
 80080ca:	e7c1      	b.n	8008050 <__sflush_r+0x1c>
 80080cc:	6a21      	ldr	r1, [r4, #32]
 80080ce:	2301      	movs	r3, #1
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b0      	blx	r6
 80080d4:	1c41      	adds	r1, r0, #1
 80080d6:	d1c7      	bne.n	8008068 <__sflush_r+0x34>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0c4      	beq.n	8008068 <__sflush_r+0x34>
 80080de:	2b1d      	cmp	r3, #29
 80080e0:	d001      	beq.n	80080e6 <__sflush_r+0xb2>
 80080e2:	2b16      	cmp	r3, #22
 80080e4:	d101      	bne.n	80080ea <__sflush_r+0xb6>
 80080e6:	602f      	str	r7, [r5, #0]
 80080e8:	e7b1      	b.n	800804e <__sflush_r+0x1a>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	e7ad      	b.n	8008050 <__sflush_r+0x1c>
 80080f4:	690f      	ldr	r7, [r1, #16]
 80080f6:	2f00      	cmp	r7, #0
 80080f8:	d0a9      	beq.n	800804e <__sflush_r+0x1a>
 80080fa:	0793      	lsls	r3, r2, #30
 80080fc:	680e      	ldr	r6, [r1, #0]
 80080fe:	bf08      	it	eq
 8008100:	694b      	ldreq	r3, [r1, #20]
 8008102:	600f      	str	r7, [r1, #0]
 8008104:	bf18      	it	ne
 8008106:	2300      	movne	r3, #0
 8008108:	eba6 0807 	sub.w	r8, r6, r7
 800810c:	608b      	str	r3, [r1, #8]
 800810e:	f1b8 0f00 	cmp.w	r8, #0
 8008112:	dd9c      	ble.n	800804e <__sflush_r+0x1a>
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008118:	4643      	mov	r3, r8
 800811a:	463a      	mov	r2, r7
 800811c:	4628      	mov	r0, r5
 800811e:	47b0      	blx	r6
 8008120:	2800      	cmp	r0, #0
 8008122:	dc06      	bgt.n	8008132 <__sflush_r+0xfe>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	e78e      	b.n	8008050 <__sflush_r+0x1c>
 8008132:	4407      	add	r7, r0
 8008134:	eba8 0800 	sub.w	r8, r8, r0
 8008138:	e7e9      	b.n	800810e <__sflush_r+0xda>
 800813a:	bf00      	nop
 800813c:	20400001 	.word	0x20400001

08008140 <_fflush_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	690b      	ldr	r3, [r1, #16]
 8008144:	4605      	mov	r5, r0
 8008146:	460c      	mov	r4, r1
 8008148:	b913      	cbnz	r3, 8008150 <_fflush_r+0x10>
 800814a:	2500      	movs	r5, #0
 800814c:	4628      	mov	r0, r5
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	b118      	cbz	r0, 800815a <_fflush_r+0x1a>
 8008152:	6983      	ldr	r3, [r0, #24]
 8008154:	b90b      	cbnz	r3, 800815a <_fflush_r+0x1a>
 8008156:	f7fe fe2d 	bl	8006db4 <__sinit>
 800815a:	4b14      	ldr	r3, [pc, #80]	; (80081ac <_fflush_r+0x6c>)
 800815c:	429c      	cmp	r4, r3
 800815e:	d11b      	bne.n	8008198 <_fflush_r+0x58>
 8008160:	686c      	ldr	r4, [r5, #4]
 8008162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0ef      	beq.n	800814a <_fflush_r+0xa>
 800816a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800816c:	07d0      	lsls	r0, r2, #31
 800816e:	d404      	bmi.n	800817a <_fflush_r+0x3a>
 8008170:	0599      	lsls	r1, r3, #22
 8008172:	d402      	bmi.n	800817a <_fflush_r+0x3a>
 8008174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008176:	f7fe fec0 	bl	8006efa <__retarget_lock_acquire_recursive>
 800817a:	4628      	mov	r0, r5
 800817c:	4621      	mov	r1, r4
 800817e:	f7ff ff59 	bl	8008034 <__sflush_r>
 8008182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008184:	07da      	lsls	r2, r3, #31
 8008186:	4605      	mov	r5, r0
 8008188:	d4e0      	bmi.n	800814c <_fflush_r+0xc>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	059b      	lsls	r3, r3, #22
 800818e:	d4dd      	bmi.n	800814c <_fflush_r+0xc>
 8008190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008192:	f7fe feb3 	bl	8006efc <__retarget_lock_release_recursive>
 8008196:	e7d9      	b.n	800814c <_fflush_r+0xc>
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <_fflush_r+0x70>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d101      	bne.n	80081a2 <_fflush_r+0x62>
 800819e:	68ac      	ldr	r4, [r5, #8]
 80081a0:	e7df      	b.n	8008162 <_fflush_r+0x22>
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <_fflush_r+0x74>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	bf08      	it	eq
 80081a8:	68ec      	ldreq	r4, [r5, #12]
 80081aa:	e7da      	b.n	8008162 <_fflush_r+0x22>
 80081ac:	0800864c 	.word	0x0800864c
 80081b0:	0800866c 	.word	0x0800866c
 80081b4:	0800862c 	.word	0x0800862c

080081b8 <fiprintf>:
 80081b8:	b40e      	push	{r1, r2, r3}
 80081ba:	b503      	push	{r0, r1, lr}
 80081bc:	4601      	mov	r1, r0
 80081be:	ab03      	add	r3, sp, #12
 80081c0:	4805      	ldr	r0, [pc, #20]	; (80081d8 <fiprintf+0x20>)
 80081c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c6:	6800      	ldr	r0, [r0, #0]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	f7ff fcaf 	bl	8007b2c <_vfiprintf_r>
 80081ce:	b002      	add	sp, #8
 80081d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d4:	b003      	add	sp, #12
 80081d6:	4770      	bx	lr
 80081d8:	2000002c 	.word	0x2000002c

080081dc <_lseek_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	; (80081fc <_lseek_r+0x20>)
 80081e0:	4604      	mov	r4, r0
 80081e2:	4608      	mov	r0, r1
 80081e4:	4611      	mov	r1, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	602a      	str	r2, [r5, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	f7f9 f97a 	bl	80014e4 <_lseek>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_lseek_r+0x1e>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_lseek_r+0x1e>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20000390 	.word	0x20000390

08008200 <__swhatbuf_r>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	460e      	mov	r6, r1
 8008204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008208:	2900      	cmp	r1, #0
 800820a:	b096      	sub	sp, #88	; 0x58
 800820c:	4614      	mov	r4, r2
 800820e:	461d      	mov	r5, r3
 8008210:	da08      	bge.n	8008224 <__swhatbuf_r+0x24>
 8008212:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	602a      	str	r2, [r5, #0]
 800821a:	061a      	lsls	r2, r3, #24
 800821c:	d410      	bmi.n	8008240 <__swhatbuf_r+0x40>
 800821e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008222:	e00e      	b.n	8008242 <__swhatbuf_r+0x42>
 8008224:	466a      	mov	r2, sp
 8008226:	f000 f8df 	bl	80083e8 <_fstat_r>
 800822a:	2800      	cmp	r0, #0
 800822c:	dbf1      	blt.n	8008212 <__swhatbuf_r+0x12>
 800822e:	9a01      	ldr	r2, [sp, #4]
 8008230:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008234:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008238:	425a      	negs	r2, r3
 800823a:	415a      	adcs	r2, r3
 800823c:	602a      	str	r2, [r5, #0]
 800823e:	e7ee      	b.n	800821e <__swhatbuf_r+0x1e>
 8008240:	2340      	movs	r3, #64	; 0x40
 8008242:	2000      	movs	r0, #0
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	b016      	add	sp, #88	; 0x58
 8008248:	bd70      	pop	{r4, r5, r6, pc}
	...

0800824c <__smakebuf_r>:
 800824c:	898b      	ldrh	r3, [r1, #12]
 800824e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008250:	079d      	lsls	r5, r3, #30
 8008252:	4606      	mov	r6, r0
 8008254:	460c      	mov	r4, r1
 8008256:	d507      	bpl.n	8008268 <__smakebuf_r+0x1c>
 8008258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	2301      	movs	r3, #1
 8008262:	6163      	str	r3, [r4, #20]
 8008264:	b002      	add	sp, #8
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	ab01      	add	r3, sp, #4
 800826a:	466a      	mov	r2, sp
 800826c:	f7ff ffc8 	bl	8008200 <__swhatbuf_r>
 8008270:	9900      	ldr	r1, [sp, #0]
 8008272:	4605      	mov	r5, r0
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff fa5f 	bl	8007738 <_malloc_r>
 800827a:	b948      	cbnz	r0, 8008290 <__smakebuf_r+0x44>
 800827c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d4ef      	bmi.n	8008264 <__smakebuf_r+0x18>
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	e7e3      	b.n	8008258 <__smakebuf_r+0xc>
 8008290:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <__smakebuf_r+0x7c>)
 8008292:	62b3      	str	r3, [r6, #40]	; 0x28
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	6020      	str	r0, [r4, #0]
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	6163      	str	r3, [r4, #20]
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	6120      	str	r0, [r4, #16]
 80082a6:	b15b      	cbz	r3, 80082c0 <__smakebuf_r+0x74>
 80082a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 f8ad 	bl	800840c <_isatty_r>
 80082b2:	b128      	cbz	r0, 80082c0 <__smakebuf_r+0x74>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	89a0      	ldrh	r0, [r4, #12]
 80082c2:	4305      	orrs	r5, r0
 80082c4:	81a5      	strh	r5, [r4, #12]
 80082c6:	e7cd      	b.n	8008264 <__smakebuf_r+0x18>
 80082c8:	08006d4d 	.word	0x08006d4d

080082cc <__ascii_mbtowc>:
 80082cc:	b082      	sub	sp, #8
 80082ce:	b901      	cbnz	r1, 80082d2 <__ascii_mbtowc+0x6>
 80082d0:	a901      	add	r1, sp, #4
 80082d2:	b142      	cbz	r2, 80082e6 <__ascii_mbtowc+0x1a>
 80082d4:	b14b      	cbz	r3, 80082ea <__ascii_mbtowc+0x1e>
 80082d6:	7813      	ldrb	r3, [r2, #0]
 80082d8:	600b      	str	r3, [r1, #0]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	1e10      	subs	r0, r2, #0
 80082de:	bf18      	it	ne
 80082e0:	2001      	movne	r0, #1
 80082e2:	b002      	add	sp, #8
 80082e4:	4770      	bx	lr
 80082e6:	4610      	mov	r0, r2
 80082e8:	e7fb      	b.n	80082e2 <__ascii_mbtowc+0x16>
 80082ea:	f06f 0001 	mvn.w	r0, #1
 80082ee:	e7f8      	b.n	80082e2 <__ascii_mbtowc+0x16>

080082f0 <memmove>:
 80082f0:	4288      	cmp	r0, r1
 80082f2:	b510      	push	{r4, lr}
 80082f4:	eb01 0402 	add.w	r4, r1, r2
 80082f8:	d902      	bls.n	8008300 <memmove+0x10>
 80082fa:	4284      	cmp	r4, r0
 80082fc:	4623      	mov	r3, r4
 80082fe:	d807      	bhi.n	8008310 <memmove+0x20>
 8008300:	1e43      	subs	r3, r0, #1
 8008302:	42a1      	cmp	r1, r4
 8008304:	d008      	beq.n	8008318 <memmove+0x28>
 8008306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800830a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800830e:	e7f8      	b.n	8008302 <memmove+0x12>
 8008310:	4402      	add	r2, r0
 8008312:	4601      	mov	r1, r0
 8008314:	428a      	cmp	r2, r1
 8008316:	d100      	bne.n	800831a <memmove+0x2a>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800831e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008322:	e7f7      	b.n	8008314 <memmove+0x24>

08008324 <__malloc_lock>:
 8008324:	4801      	ldr	r0, [pc, #4]	; (800832c <__malloc_lock+0x8>)
 8008326:	f7fe bde8 	b.w	8006efa <__retarget_lock_acquire_recursive>
 800832a:	bf00      	nop
 800832c:	20000384 	.word	0x20000384

08008330 <__malloc_unlock>:
 8008330:	4801      	ldr	r0, [pc, #4]	; (8008338 <__malloc_unlock+0x8>)
 8008332:	f7fe bde3 	b.w	8006efc <__retarget_lock_release_recursive>
 8008336:	bf00      	nop
 8008338:	20000384 	.word	0x20000384

0800833c <_realloc_r>:
 800833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008340:	4680      	mov	r8, r0
 8008342:	4614      	mov	r4, r2
 8008344:	460e      	mov	r6, r1
 8008346:	b921      	cbnz	r1, 8008352 <_realloc_r+0x16>
 8008348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800834c:	4611      	mov	r1, r2
 800834e:	f7ff b9f3 	b.w	8007738 <_malloc_r>
 8008352:	b92a      	cbnz	r2, 8008360 <_realloc_r+0x24>
 8008354:	f7ff f984 	bl	8007660 <_free_r>
 8008358:	4625      	mov	r5, r4
 800835a:	4628      	mov	r0, r5
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	f000 f864 	bl	800842c <_malloc_usable_size_r>
 8008364:	4284      	cmp	r4, r0
 8008366:	4607      	mov	r7, r0
 8008368:	d802      	bhi.n	8008370 <_realloc_r+0x34>
 800836a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800836e:	d812      	bhi.n	8008396 <_realloc_r+0x5a>
 8008370:	4621      	mov	r1, r4
 8008372:	4640      	mov	r0, r8
 8008374:	f7ff f9e0 	bl	8007738 <_malloc_r>
 8008378:	4605      	mov	r5, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d0ed      	beq.n	800835a <_realloc_r+0x1e>
 800837e:	42bc      	cmp	r4, r7
 8008380:	4622      	mov	r2, r4
 8008382:	4631      	mov	r1, r6
 8008384:	bf28      	it	cs
 8008386:	463a      	movcs	r2, r7
 8008388:	f7fe fdc2 	bl	8006f10 <memcpy>
 800838c:	4631      	mov	r1, r6
 800838e:	4640      	mov	r0, r8
 8008390:	f7ff f966 	bl	8007660 <_free_r>
 8008394:	e7e1      	b.n	800835a <_realloc_r+0x1e>
 8008396:	4635      	mov	r5, r6
 8008398:	e7df      	b.n	800835a <_realloc_r+0x1e>
	...

0800839c <_read_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d07      	ldr	r5, [pc, #28]	; (80083bc <_read_r+0x20>)
 80083a0:	4604      	mov	r4, r0
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	602a      	str	r2, [r5, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f7f9 f83a 	bl	8001424 <_read>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_read_r+0x1e>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_read_r+0x1e>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20000390 	.word	0x20000390

080083c0 <__ascii_wctomb>:
 80083c0:	b149      	cbz	r1, 80083d6 <__ascii_wctomb+0x16>
 80083c2:	2aff      	cmp	r2, #255	; 0xff
 80083c4:	bf85      	ittet	hi
 80083c6:	238a      	movhi	r3, #138	; 0x8a
 80083c8:	6003      	strhi	r3, [r0, #0]
 80083ca:	700a      	strbls	r2, [r1, #0]
 80083cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80083d0:	bf98      	it	ls
 80083d2:	2001      	movls	r0, #1
 80083d4:	4770      	bx	lr
 80083d6:	4608      	mov	r0, r1
 80083d8:	4770      	bx	lr

080083da <abort>:
 80083da:	b508      	push	{r3, lr}
 80083dc:	2006      	movs	r0, #6
 80083de:	f000 f855 	bl	800848c <raise>
 80083e2:	2001      	movs	r0, #1
 80083e4:	f7f9 f814 	bl	8001410 <_exit>

080083e8 <_fstat_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	; (8008408 <_fstat_r+0x20>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	602b      	str	r3, [r5, #0]
 80083f6:	f7f9 f85a 	bl	80014ae <_fstat>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	d102      	bne.n	8008404 <_fstat_r+0x1c>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	b103      	cbz	r3, 8008404 <_fstat_r+0x1c>
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20000390 	.word	0x20000390

0800840c <_isatty_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d06      	ldr	r5, [pc, #24]	; (8008428 <_isatty_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	f7f9 f859 	bl	80014ce <_isatty>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_isatty_r+0x1a>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_isatty_r+0x1a>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20000390 	.word	0x20000390

0800842c <_malloc_usable_size_r>:
 800842c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008430:	1f18      	subs	r0, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	bfbc      	itt	lt
 8008436:	580b      	ldrlt	r3, [r1, r0]
 8008438:	18c0      	addlt	r0, r0, r3
 800843a:	4770      	bx	lr

0800843c <_raise_r>:
 800843c:	291f      	cmp	r1, #31
 800843e:	b538      	push	{r3, r4, r5, lr}
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	d904      	bls.n	8008450 <_raise_r+0x14>
 8008446:	2316      	movs	r3, #22
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	f04f 30ff 	mov.w	r0, #4294967295
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008452:	b112      	cbz	r2, 800845a <_raise_r+0x1e>
 8008454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008458:	b94b      	cbnz	r3, 800846e <_raise_r+0x32>
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f830 	bl	80084c0 <_getpid_r>
 8008460:	462a      	mov	r2, r5
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846a:	f000 b817 	b.w	800849c <_kill_r>
 800846e:	2b01      	cmp	r3, #1
 8008470:	d00a      	beq.n	8008488 <_raise_r+0x4c>
 8008472:	1c59      	adds	r1, r3, #1
 8008474:	d103      	bne.n	800847e <_raise_r+0x42>
 8008476:	2316      	movs	r3, #22
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	2001      	movs	r0, #1
 800847c:	e7e7      	b.n	800844e <_raise_r+0x12>
 800847e:	2400      	movs	r4, #0
 8008480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008484:	4628      	mov	r0, r5
 8008486:	4798      	blx	r3
 8008488:	2000      	movs	r0, #0
 800848a:	e7e0      	b.n	800844e <_raise_r+0x12>

0800848c <raise>:
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <raise+0xc>)
 800848e:	4601      	mov	r1, r0
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f7ff bfd3 	b.w	800843c <_raise_r>
 8008496:	bf00      	nop
 8008498:	2000002c 	.word	0x2000002c

0800849c <_kill_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_kill_r+0x20>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	f7f8 ffa1 	bl	80013f0 <_kill>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	d102      	bne.n	80084b8 <_kill_r+0x1c>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	b103      	cbz	r3, 80084b8 <_kill_r+0x1c>
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
 80084ba:	bf00      	nop
 80084bc:	20000390 	.word	0x20000390

080084c0 <_getpid_r>:
 80084c0:	f7f8 bf8e 	b.w	80013e0 <_getpid>

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
