
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008aa8  08008aa8  00018aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ebc  08008ebc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008ebc  08008ebc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ebc  08008ebc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ebc  08008ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000248  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010213  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002010  00000000  00000000  00030423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  000331d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021929  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b4c  00000000  00000000  000557c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc8d  00000000  00000000  00066315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131fa2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c0  00000000  00000000  00131ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a90 	.word	0x08008a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008a90 	.word	0x08008a90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f004 fd9f 	bl	8005718 <HAL_UART_Transmit>

  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000378 	.word	0x20000378

08000be8 <vDriveForward>:
	return close_obstacle;

}


void vDriveForward(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2110      	movs	r1, #16
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <vDriveForward+0x30>)
 8000bf2:	f001 faf7 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <vDriveForward+0x30>)
 8000bfc:	f001 faf2 	bl	80021e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2101      	movs	r1, #1
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <vDriveForward+0x34>)
 8000c06:	f001 faed 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <vDriveForward+0x34>)
 8000c10:	f001 fae8 	bl	80021e4 <HAL_GPIO_WritePin>

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000400 	.word	0x48000400

08000c20 <vDriveBackward>:
void vDriveBackward(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <vDriveBackward+0x30>)
 8000c2a:	f001 fadb 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2120      	movs	r1, #32
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <vDriveBackward+0x30>)
 8000c34:	f001 fad6 	bl	80021e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <vDriveBackward+0x34>)
 8000c3e:	f001 fad1 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <vDriveBackward+0x34>)
 8000c48:	f001 facc 	bl	80021e4 <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000400 	.word	0x48000400

08000c58 <vStopAcceleration>:

void vStopAcceleration(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <vStopAcceleration+0x30>)
 8000c62:	f001 fabf 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <vStopAcceleration+0x30>)
 8000c6c:	f001 faba 	bl	80021e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <vStopAcceleration+0x34>)
 8000c76:	f001 fab5 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <vStopAcceleration+0x34>)
 8000c80:	f001 fab0 	bl	80021e4 <HAL_GPIO_WritePin>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000400 	.word	0x48000400

08000c90 <vTurnLeft>:

void vTurnLeft(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <vTurnLeft+0x30>)
 8000c9a:	f001 faa3 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <vTurnLeft+0x30>)
 8000ca4:	f001 fa9e 	bl	80021e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <vTurnLeft+0x34>)
 8000cae:	f001 fa99 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <vTurnLeft+0x34>)
 8000cb8:	f001 fa94 	bl	80021e4 <HAL_GPIO_WritePin>

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <vTurnRight>:

void vTurnRight(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RIGHT_WHEEL_PC4_GPIO_Port, RIGHT_WHEEL_PC4_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <vTurnRight+0x30>)
 8000cd2:	f001 fa87 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_PC5_GPIO_Port, RIGHT_WHEEL_PC5_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <vTurnRight+0x30>)
 8000cdc:	f001 fa82 	bl	80021e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_WHEEL_PB0_GPIO_Port, LEFT_WHEEL_PB0_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <vTurnRight+0x34>)
 8000ce6:	f001 fa7d 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_PB1_GPIO_Port, LEFT_WHEEL_PB1_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2102      	movs	r1, #2
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <vTurnRight+0x34>)
 8000cf0:	f001 fa78 	bl	80021e4 <HAL_GPIO_WritePin>

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <vDriveProc>:


void vDriveProc(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	if(activeDriveProcess != previousDriveProcess){
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <vDriveProc+0x68>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <vDriveProc+0x6c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d027      	beq.n	8000d60 <vDriveProc+0x60>
		previousDriveProcess = activeDriveProcess;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <vDriveProc+0x68>)
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <vDriveProc+0x6c>)
 8000d16:	701a      	strb	r2, [r3, #0]
		switch (activeDriveProcess) {
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <vDriveProc+0x68>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d81c      	bhi.n	8000d5a <vDriveProc+0x5a>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <vDriveProc+0x28>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d55 	.word	0x08000d55
 8000d2c:	08000d3d 	.word	0x08000d3d
 8000d30:	08000d43 	.word	0x08000d43
 8000d34:	08000d49 	.word	0x08000d49
 8000d38:	08000d4f 	.word	0x08000d4f
			case FORWARD:
				vDriveForward();
 8000d3c:	f7ff ff54 	bl	8000be8 <vDriveForward>
				break;
 8000d40:	e00f      	b.n	8000d62 <vDriveProc+0x62>
			case BACKWARD:
				vDriveBackward();
 8000d42:	f7ff ff6d 	bl	8000c20 <vDriveBackward>
				break;
 8000d46:	e00c      	b.n	8000d62 <vDriveProc+0x62>
			case TURN_RIGHT:
				vTurnRight();
 8000d48:	f7ff ffbe 	bl	8000cc8 <vTurnRight>
				break;
 8000d4c:	e009      	b.n	8000d62 <vDriveProc+0x62>
			case TURN_LEFT:
				vTurnLeft();
 8000d4e:	f7ff ff9f 	bl	8000c90 <vTurnLeft>
				break;
 8000d52:	e006      	b.n	8000d62 <vDriveProc+0x62>
			case STOP:
				vStopAcceleration();
 8000d54:	f7ff ff80 	bl	8000c58 <vStopAcceleration>
				break;
 8000d58:	e003      	b.n	8000d62 <vDriveProc+0x62>
			default:
				vStopAcceleration();
 8000d5a:	f7ff ff7d 	bl	8000c58 <vStopAcceleration>
				break;
 8000d5e:	e000      	b.n	8000d62 <vDriveProc+0x62>
		}
	}
 8000d60:	bf00      	nop
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000401 	.word	0x20000401
 8000d6c:	20000402 	.word	0x20000402

08000d70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_BUTTON_Pin){
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d80:	d102      	bne.n	8000d88 <HAL_GPIO_EXTI_Callback+0x18>
        boardProcess = SAFE_DRIVE;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]
    }

}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000400 	.word	0x20000400

08000d98 <usScanForTurn>:
	}


}

uint8_t usScanForTurn(){
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

	if(safe_right){
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <usScanForTurn+0x28>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <usScanForTurn+0x10>
		return 3u;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e006      	b.n	8000db6 <usScanForTurn+0x1e>

	} else if(safe_left){
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <usScanForTurn+0x2c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <usScanForTurn+0x1c>
		return 4u;
 8000db0:	2304      	movs	r3, #4
 8000db2:	e000      	b.n	8000db6 <usScanForTurn+0x1e>

	} else{
		return 0u;
 8000db4:	2300      	movs	r3, #0

	}
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20000403 	.word	0x20000403
 8000dc4:	20000404 	.word	0x20000404

08000dc8 <vCar_Main>:
	}


}

void vCar_Main(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0



	switch (boardProcess) {
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <vCar_Main+0x80>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d836      	bhi.n	8000e42 <vCar_Main+0x7a>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <vCar_Main+0x14>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000ded 	.word	0x08000ded
 8000de0:	08000e0f 	.word	0x08000e0f
 8000de4:	08000e1b 	.word	0x08000e1b
 8000de8:	08000e27 	.word	0x08000e27
		case INIT:
			if(activeDriveProcess >= 5){
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <vCar_Main+0x84>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d903      	bls.n	8000dfc <vCar_Main+0x34>
				activeDriveProcess = 0;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <vCar_Main+0x84>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e005      	b.n	8000e08 <vCar_Main+0x40>
			} else {
				activeDriveProcess++;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <vCar_Main+0x84>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <vCar_Main+0x84>)
 8000e06:	701a      	strb	r2, [r3, #0]
			}
			vDriveProc();
 8000e08:	f7ff ff7a 	bl	8000d00 <vDriveProc>
			break;
 8000e0c:	e01a      	b.n	8000e44 <vCar_Main+0x7c>

		case IDLE:
			activeDriveProcess = STOP;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <vCar_Main+0x84>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8000e14:	f7ff ff74 	bl	8000d00 <vDriveProc>
			break;
 8000e18:	e014      	b.n	8000e44 <vCar_Main+0x7c>

		case SAFE_DRIVE:
			activeDriveProcess = FORWARD;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <vCar_Main+0x84>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8000e20:	f7ff ff6e 	bl	8000d00 <vDriveProc>
			break;
 8000e24:	e00e      	b.n	8000e44 <vCar_Main+0x7c>

		case OBSTACLE_DETECTED:
			activeDriveProcess = STOP;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <vCar_Main+0x84>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8000e2c:	f7ff ff68 	bl	8000d00 <vDriveProc>
			activeDriveProcess = usScanForTurn();
 8000e30:	f7ff ffb2 	bl	8000d98 <usScanForTurn>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <vCar_Main+0x84>)
 8000e3a:	701a      	strb	r2, [r3, #0]
			vDriveProc();
 8000e3c:	f7ff ff60 	bl	8000d00 <vDriveProc>

			break;
 8000e40:	e000      	b.n	8000e44 <vCar_Main+0x7c>

		default:
			break;
 8000e42:	bf00      	nop
	}




}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000400 	.word	0x20000400
 8000e4c:	20000401 	.word	0x20000401

08000e50 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	static uint8_t callbackHandler = 0;
	static   int speedValue = 312;

	if (htim == &htim15) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d11b      	bne.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x48>


		if(callbackHandler % 20u == 0u){
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e66:	fba3 1302 	umull	r1, r3, r3, r2
 8000e6a:	0919      	lsrs	r1, r3, #4
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x3a>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, speedValue);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	639a      	str	r2, [r3, #56]	; 0x38
			vCar_Main();
 8000e86:	f7ff ff9f 	bl	8000dc8 <vCar_Main>
		}
		if(callbackHandler >= 40){
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b27      	cmp	r3, #39	; 0x27
 8000e90:	d902      	bls.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x48>
			callbackHandler = 0;
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200002e0 	.word	0x200002e0
 8000ea4:	20000405 	.word	0x20000405
 8000ea8:	cccccccd 	.word	0xcccccccd
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000294 	.word	0x20000294

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fe91 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f84b 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 fabd 	bl	8001440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec6:	f000 fa8b 	bl	80013e0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eca:	f000 f8ad 	bl	8001028 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ece:	f000 f939 	bl	8001144 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000ed2:	f000 fa5d 	bl	8001390 <MX_TIM16_Init>
  MX_TIM4_Init();
 8000ed6:	f000 f9ad 	bl	8001234 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000eda:	f000 fa07 	bl	80012ec <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <main+0x90>)
 8000ee2:	f003 f8db 	bl	800409c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <main+0x90>)
 8000eea:	f003 f8d7 	bl	800409c <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000eee:	2108      	movs	r1, #8
 8000ef0:	4814      	ldr	r0, [pc, #80]	; (8000f44 <main+0x90>)
 8000ef2:	f002 ff6f 	bl	8003dd4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <main+0x94>)
 8000efa:	f002 ff6b 	bl	8003dd4 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim15);
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <main+0x98>)
 8000f00:	f002 fea0 	bl	8003c44 <HAL_TIM_Base_Start_IT>

  servo_init(&htim3, TIM_CHANNEL_1);
 8000f04:	2100      	movs	r1, #0
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <main+0x9c>)
 8000f08:	f000 fb2c 	bl	8001564 <servo_init>

  uint8_t angle_table[] = {0, 50, 100, 180};
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <main+0xa0>)
 8000f0e:	613b      	str	r3, [r7, #16]
  float way_table[] = {0, 0, 0, 0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  float max = 0;
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c


  int i = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  int n = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  int Index = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  uint32_t time_tick = HAL_GetTick();
 8000f2e:	f000 feb1 	bl	8001c94 <HAL_GetTick>
 8000f32:	61f8      	str	r0, [r7, #28]
  uint32_t max_time = 1000;
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	61bb      	str	r3, [r7, #24]
  int speedValue = 312;
 8000f3a:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000f3e:	617b      	str	r3, [r7, #20]


  while (1)
 8000f40:	e7fe      	b.n	8000f40 <main+0x8c>
 8000f42:	bf00      	nop
 8000f44:	200001fc 	.word	0x200001fc
 8000f48:	20000294 	.word	0x20000294
 8000f4c:	200002e0 	.word	0x200002e0
 8000f50:	20000248 	.word	0x20000248
 8000f54:	b4643200 	.word	0xb4643200

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0a6      	sub	sp, #152	; 0x98
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f62:	2228      	movs	r2, #40	; 0x28
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 f874 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2258      	movs	r2, #88	; 0x58
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 f866 	bl	8006054 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f90:	2310      	movs	r3, #16
 8000f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f944 	bl	8002244 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fc2:	f000 fac9 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f982 	bl	80032ec <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fee:	f000 fab3 	bl	8001558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <SystemClock_Config+0xcc>)
 8000ff4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001002:	2300      	movs	r3, #0
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001006:	2300      	movs	r3, #0
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fba3 	bl	8003758 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001018:	f000 fa9e 	bl	8001558 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3798      	adds	r7, #152	; 0x98
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	00f00002 	.word	0x00f00002

08001028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <MX_TIM2_Init+0x114>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <MX_TIM2_Init+0x114>)
 8001064:	2248      	movs	r2, #72	; 0x48
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_TIM2_Init+0x114>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <MX_TIM2_Init+0x114>)
 8001070:	4a33      	ldr	r2, [pc, #204]	; (8001140 <MX_TIM2_Init+0x118>)
 8001072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_TIM2_Init+0x114>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_TIM2_Init+0x114>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001080:	482e      	ldr	r0, [pc, #184]	; (800113c <MX_TIM2_Init+0x114>)
 8001082:	f002 ffb3 	bl	8003fec <HAL_TIM_IC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800108c:	f000 fa64 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001090:	482a      	ldr	r0, [pc, #168]	; (800113c <MX_TIM2_Init+0x114>)
 8001092:	f002 fe47 	bl	8003d24 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800109c:	f000 fa5c 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4823      	ldr	r0, [pc, #140]	; (800113c <MX_TIM2_Init+0x114>)
 80010b0:	f004 fa3a 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ba:	f000 fa4d 	bl	8001558 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4819      	ldr	r0, [pc, #100]	; (800113c <MX_TIM2_Init+0x114>)
 80010d8:	f003 f9fb 	bl	80044d2 <HAL_TIM_IC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80010e2:	f000 fa39 	bl	8001558 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2204      	movs	r2, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_TIM2_Init+0x114>)
 80010f8:	f003 f9eb 	bl	80044d2 <HAL_TIM_IC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001102:	f000 fa29 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	; 0x60
 8001108:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800110a:	230a      	movs	r3, #10
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	2208      	movs	r2, #8
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM2_Init+0x114>)
 800111e:	f003 fa75 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001128:	f000 fa16 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM2_Init+0x114>)
 800112e:	f000 fb4b 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	; 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001fc 	.word	0x200001fc
 8001140:	000f4240 	.word	0x000f4240

08001144 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_TIM3_Init+0xe8>)
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <MX_TIM3_Init+0xec>)
 800117a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_TIM3_Init+0xe8>)
 800117e:	2247      	movs	r2, #71	; 0x47
 8001180:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_TIM3_Init+0xe8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_TIM3_Init+0xe8>)
 800118a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800118e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_TIM3_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_TIM3_Init+0xe8>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800119c:	4823      	ldr	r0, [pc, #140]	; (800122c <MX_TIM3_Init+0xe8>)
 800119e:	f002 fcf9 	bl	8003b94 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011a8:	f000 f9d6 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	4619      	mov	r1, r3
 80011b8:	481c      	ldr	r0, [pc, #112]	; (800122c <MX_TIM3_Init+0xe8>)
 80011ba:	f003 fb3b 	bl	8004834 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011c4:	f000 f9c8 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_TIM3_Init+0xe8>)
 80011ca:	f002 fdab 	bl	8003d24 <HAL_TIM_PWM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 f9c0 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_TIM3_Init+0xe8>)
 80011e8:	f004 f99e 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011f2:	f000 f9b1 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM3_Init+0xe8>)
 8001210:	f003 f9fc 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800121a:	f000 f99d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM3_Init+0xe8>)
 8001220:	f000 fad2 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 8001224:	bf00      	nop
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000248 	.word	0x20000248
 8001230:	40000400 	.word	0x40000400

08001234 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_TIM4_Init+0xb0>)
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <MX_TIM4_Init+0xb4>)
 800125c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1151-1;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_TIM4_Init+0xb0>)
 8001260:	f240 427e 	movw	r2, #1150	; 0x47e
 8001264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_TIM4_Init+0xb0>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_TIM4_Init+0xb0>)
 800126e:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001272:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_TIM4_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_TIM4_Init+0xb0>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001280:	4818      	ldr	r0, [pc, #96]	; (80012e4 <MX_TIM4_Init+0xb0>)
 8001282:	f002 fd4f 	bl	8003d24 <HAL_TIM_PWM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 800128c:	f000 f964 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_TIM4_Init+0xb0>)
 80012a0:	f004 f942 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80012aa:	f000 f955 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2204      	movs	r2, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <MX_TIM4_Init+0xb0>)
 80012c6:	f003 f9a1 	bl	800460c <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80012d0:	f000 f942 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <MX_TIM4_Init+0xb0>)
 80012d6:	f000 fa77 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000294 	.word	0x20000294
 80012e8:	40000800 	.word	0x40000800

080012ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_TIM15_Init+0x9c>)
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <MX_TIM15_Init+0xa0>)
 800130e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3000-1;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM15_Init+0x9c>)
 8001312:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001316:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_TIM15_Init+0x9c>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 6000-1;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM15_Init+0x9c>)
 8001320:	f241 726f 	movw	r2, #5999	; 0x176f
 8001324:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM15_Init+0x9c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_TIM15_Init+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM15_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_TIM15_Init+0x9c>)
 800133a:	f002 fc2b 	bl	8003b94 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001344:	f000 f908 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_TIM15_Init+0x9c>)
 8001356:	f003 fa6d 	bl	8004834 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001360:	f000 f8fa 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM15_Init+0x9c>)
 8001372:	f004 f8d9 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800137c:	f000 f8ec 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200002e0 	.word	0x200002e0
 800138c:	40014000 	.word	0x40014000

08001390 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_TIM16_Init+0x48>)
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <MX_TIM16_Init+0x4c>)
 8001398:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7200-1;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_TIM16_Init+0x48>)
 800139c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80013a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_TIM16_Init+0x48>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2500-1;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_TIM16_Init+0x48>)
 80013aa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80013ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_TIM16_Init+0x48>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_TIM16_Init+0x48>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_TIM16_Init+0x48>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM16_Init+0x48>)
 80013c4:	f002 fbe6 	bl	8003b94 <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80013ce:	f000 f8c3 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000032c 	.word	0x2000032c
 80013dc:	40014400 	.word	0x40014400

080013e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <MX_USART2_UART_Init+0x5c>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART2_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001424:	f004 f92a 	bl	800567c <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800142e:	f000 f893 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000378 	.word	0x20000378
 800143c:	40004400 	.word	0x40004400

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <MX_GPIO_Init+0x10c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a3c      	ldr	r2, [pc, #240]	; (800154c <MX_GPIO_Init+0x10c>)
 800145c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001460:	6153      	str	r3, [r2, #20]
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <MX_GPIO_Init+0x10c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <MX_GPIO_Init+0x10c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <MX_GPIO_Init+0x10c>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <MX_GPIO_Init+0x10c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <MX_GPIO_Init+0x10c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a30      	ldr	r2, [pc, #192]	; (800154c <MX_GPIO_Init+0x10c>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6153      	str	r3, [r2, #20]
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <MX_GPIO_Init+0x10c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f000 fe9c 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_WHEEL_PC4_Pin|RIGHT_WHEEL_PC5_Pin|RED_7_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	21b0      	movs	r1, #176	; 0xb0
 80014b0:	4827      	ldr	r0, [pc, #156]	; (8001550 <MX_GPIO_Init+0x110>)
 80014b2:	f000 fe97 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFT_WHEEL_PB0_Pin|LEFT_WHEEL_PB1_Pin|Buzzer_pin_Pin|YELLOW_6_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2153      	movs	r1, #83	; 0x53
 80014ba:	4826      	ldr	r0, [pc, #152]	; (8001554 <MX_GPIO_Init+0x114>)
 80014bc:	f000 fe92 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	481e      	ldr	r0, [pc, #120]	; (8001550 <MX_GPIO_Init+0x110>)
 80014d8:	f000 fcfa 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_3_Pin GREEN_4_Pin YELLOW_5_Pin RED_8_Pin */
  GPIO_InitStruct.Pin = GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin;
 80014dc:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f000 fcea 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_WHEEL_PC4_Pin RIGHT_WHEEL_PC5_Pin RED_7_Pin */
  GPIO_InitStruct.Pin = RIGHT_WHEEL_PC4_Pin|RIGHT_WHEEL_PC5_Pin|RED_7_Pin;
 80014fc:	23b0      	movs	r3, #176	; 0xb0
 80014fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480f      	ldr	r0, [pc, #60]	; (8001550 <MX_GPIO_Init+0x110>)
 8001514:	f000 fcdc 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_WHEEL_PB0_Pin LEFT_WHEEL_PB1_Pin Buzzer_pin_Pin YELLOW_6_Pin */
  GPIO_InitStruct.Pin = LEFT_WHEEL_PB0_Pin|LEFT_WHEEL_PB1_Pin|Buzzer_pin_Pin|YELLOW_6_Pin;
 8001518:	2353      	movs	r3, #83	; 0x53
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <MX_GPIO_Init+0x114>)
 8001530:	f000 fcce 	bl	8001ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2028      	movs	r0, #40	; 0x28
 800153a:	f000 fc92 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800153e:	2028      	movs	r0, #40	; 0x28
 8001540:	f000 fcab 	bl	8001e9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	48000800 	.word	0x48000800
 8001554:	48000400 	.word	0x48000400

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <servo_init>:

TIM_HandleTypeDef *pwm_tim;
uint32_t pwm_channel;

void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	pwm_tim = tim;
 800156e:	4a27      	ldr	r2, [pc, #156]	; (800160c <servo_init+0xa8>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6013      	str	r3, [r2, #0]
	pwm_channel = channel;
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <servo_init+0xac>)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <servo_init+0xac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <servo_init+0x2c>
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <servo_init+0xa8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
 800158e:	e031      	b.n	80015f4 <servo_init+0x90>
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <servo_init+0xac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d106      	bne.n	80015a6 <servo_init+0x42>
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <servo_init+0xa8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	6393      	str	r3, [r2, #56]	; 0x38
 80015a4:	e026      	b.n	80015f4 <servo_init+0x90>
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <servo_init+0xac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d106      	bne.n	80015bc <servo_init+0x58>
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <servo_init+0xa8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80015ba:	e01b      	b.n	80015f4 <servo_init+0x90>
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <servo_init+0xac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d106      	bne.n	80015d2 <servo_init+0x6e>
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <servo_init+0xa8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	e010      	b.n	80015f4 <servo_init+0x90>
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <servo_init+0xac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d106      	bne.n	80015e8 <servo_init+0x84>
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <servo_init+0xa8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	e005      	b.n	80015f4 <servo_init+0x90>
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <servo_init+0xa8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <servo_init+0xa8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <servo_init+0xac>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fbe8 	bl	8003dd4 <HAL_TIM_PWM_Start>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000408 	.word	0x20000408
 8001610:	2000040c 	.word	0x2000040c

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_MspInit+0x44>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_MspInit+0x44>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_MspInit+0x44>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x44>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x44>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x44>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d128      	bne.n	80016d0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_TIM_IC_MspInit+0x7c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_TIM_IC_MspInit+0x7c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_TIM_IC_MspInit+0x7c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_TIM_IC_MspInit+0x7c>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_TIM_IC_MspInit+0x7c>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_TIM_IC_MspInit+0x7c>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016be:	2301      	movs	r3, #1
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f000 fc00 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a23      	ldr	r2, [pc, #140]	; (8001778 <HAL_TIM_Base_MspInit+0x9c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d10c      	bne.n	8001708 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001706:	e032      	b.n	800176e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_TIM_Base_MspInit+0xa4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d114      	bne.n	800173c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2018      	movs	r0, #24
 8001730:	f000 fb97 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001734:	2018      	movs	r0, #24
 8001736:	f000 fbb0 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 800173a:	e018      	b.n	800176e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_TIM_Base_MspInit+0xa8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d113      	bne.n	800176e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_TIM_Base_MspInit+0xa0>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2019      	movs	r0, #25
 8001764:	f000 fb7d 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001768:	2019      	movs	r0, #25
 800176a:	f000 fb96 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40000400 	.word	0x40000400
 800177c:	40021000 	.word	0x40021000
 8001780:	40014000 	.word	0x40014000
 8001784:	40014400 	.word	0x40014400

08001788 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_TIM_PWM_MspInit+0x38>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10b      	bne.n	80017b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40000800 	.word	0x40000800
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d11d      	bne.n	8001826 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001814:	2301      	movs	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4827      	ldr	r0, [pc, #156]	; (80018bc <HAL_TIM_MspPostInit+0xf4>)
 8001820:	f000 fb56 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001824:	e044      	b.n	80018b0 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <HAL_TIM_MspPostInit+0xf8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d11c      	bne.n	800186a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 8001836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800183a:	6153      	str	r3, [r2, #20]
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001858:	2302      	movs	r3, #2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <HAL_TIM_MspPostInit+0xfc>)
 8001864:	f000 fb34 	bl	8001ed0 <HAL_GPIO_Init>
}
 8001868:	e022      	b.n	80018b0 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <HAL_TIM_MspPostInit+0x100>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d11d      	bne.n	80018b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187e:	6153      	str	r3, [r2, #20]
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_TIM_MspPostInit+0xf0>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800189e:	230a      	movs	r3, #10
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f000 fb10 	bl	8001ed0 <HAL_GPIO_Init>
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	40000400 	.word	0x40000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	40000800 	.word	0x40000800

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_UART_MspInit+0x7c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d128      	bne.n	8001940 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_UART_MspInit+0x80>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a16      	ldr	r2, [pc, #88]	; (800194c <HAL_UART_MspInit+0x80>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_UART_MspInit+0x80>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_UART_MspInit+0x80>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_UART_MspInit+0x80>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_UART_MspInit+0x80>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800191e:	230c      	movs	r3, #12
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192e:	2307      	movs	r3, #7
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f000 fac8 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f966 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80019aa:	f002 fc73 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002e0 	.word	0x200002e0

080019b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019be:	f002 fc69 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000032c 	.word	0x2000032c

080019cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80019d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019d4:	f000 fc1e 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <_getpid>:
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
 80019e0:	2301      	movs	r3, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	f004 fb03 	bl	8006000 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
 8001a1e:	e7fe      	b.n	8001a1e <_exit+0x12>

08001a20 <_read>:
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00a      	b.n	8001a48 <_read+0x28>
 8001a32:	f3af 8000 	nop.w
 8001a36:	4601      	mov	r1, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf0      	blt.n	8001a32 <_read+0x12>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_write>:
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e009      	b.n	8001a80 <_write+0x26>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f89f 	bl	8000bb8 <__io_putchar>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf1      	blt.n	8001a6c <_write+0x12>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_close>:
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	2300      	movs	r3, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_isatty>:
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	2300      	movs	r3, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <_sbrk>:
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
 8001b2c:	f004 fa68 	bl	8006000 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20010000 	.word	0x20010000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	20000410 	.word	0x20000410
 8001b64:	20000428 	.word	0x20000428

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopForever+0x2>
 8001b90:	f7ff ffea 	bl	8001b68 <SystemInit>
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <LoopForever+0x6>)
 8001b96:	490d      	ldr	r1, [pc, #52]	; (8001bcc <LoopForever+0xa>)
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <LoopForever+0xe>)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:
 8001b9e:	58d4      	ldr	r4, [r2, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:
 8001ba4:	18c4      	adds	r4, r0, r3
 8001ba6:	428c      	cmp	r4, r1
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <LoopForever+0x12>)
 8001bac:	4c0a      	ldr	r4, [pc, #40]	; (8001bd8 <LoopForever+0x16>)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>
 8001bba:	f004 fa27 	bl	800600c <__libc_init_array>
 8001bbe:	f7ff f979 	bl	8000eb4 <main>

08001bc2 <LoopForever>:
 8001bc2:	e7fe      	b.n	8001bc2 <LoopForever>
 8001bc4:	20010000 	.word	0x20010000
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	200001e0 	.word	0x200001e0
 8001bd0:	08008ec4 	.word	0x08008ec4
 8001bd4:	200001e0 	.word	0x200001e0
 8001bd8:	20000428 	.word	0x20000428

08001bdc <ADC1_2_IRQHandler>:
 8001bdc:	e7fe      	b.n	8001bdc <ADC1_2_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_Init+0x28>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_Init+0x28>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f92b 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fd0a 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000

08001c0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f943 	bl	8001eb6 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	f000 f90b 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000004 	.word	0x20000004
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	20000414 	.word	0x20000414

08001c94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000414 	.word	0x20000414

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff3e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e160      	b.n	80021a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8152 	beq.w	800219c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d005      	beq.n	8001f10 <HAL_GPIO_Init+0x40>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d130      	bne.n	8001f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f46:	2201      	movs	r2, #1
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 0201 	and.w	r2, r3, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d017      	beq.n	8001fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d123      	bne.n	8002002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	6939      	ldr	r1, [r7, #16]
 8001ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0203 	and.w	r2, r3, #3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80ac 	beq.w	800219c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002044:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_GPIO_Init+0x2f0>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a5d      	ldr	r2, [pc, #372]	; (80021c0 <HAL_GPIO_Init+0x2f0>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_GPIO_Init+0x2f0>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800205c:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002086:	d025      	beq.n	80020d4 <HAL_GPIO_Init+0x204>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x2f8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d01f      	beq.n	80020d0 <HAL_GPIO_Init+0x200>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x2fc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d019      	beq.n	80020cc <HAL_GPIO_Init+0x1fc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x300>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_GPIO_Init+0x1f8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x304>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00d      	beq.n	80020c4 <HAL_GPIO_Init+0x1f4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x308>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <HAL_GPIO_Init+0x1f0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x30c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_GPIO_Init+0x1ec>
 80020b8:	2306      	movs	r3, #6
 80020ba:	e00c      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020bc:	2307      	movs	r3, #7
 80020be:	e00a      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020c0:	2305      	movs	r3, #5
 80020c2:	e008      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020c8:	2303      	movs	r3, #3
 80020ca:	e004      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_GPIO_Init+0x206>
 80020d4:	2300      	movs	r3, #0
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	f002 0203 	and.w	r2, r2, #3
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4093      	lsls	r3, r2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e6:	4937      	ldr	r1, [pc, #220]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f4:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_GPIO_Init+0x310>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002118:	4a31      	ldr	r2, [pc, #196]	; (80021e0 <HAL_GPIO_Init+0x310>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_GPIO_Init+0x310>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_GPIO_Init+0x310>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_GPIO_Init+0x310>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800216c:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <HAL_GPIO_Init+0x310>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_GPIO_Init+0x310>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <HAL_GPIO_Init+0x310>)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f ae97 	bne.w	8001ee0 <HAL_GPIO_Init+0x10>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	48000400 	.word	0x48000400
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	48001000 	.word	0x48001000
 80021d8:	48001400 	.word	0x48001400
 80021dc:	48001800 	.word	0x48001800
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002200:	e002      	b.n	8002208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd9c 	bl	8000d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800224a:	af00      	add	r7, sp, #0
 800224c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002250:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002254:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f001 b83a 	b.w	80032de <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 816f 	beq.w	800255e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002280:	4bb5      	ldr	r3, [pc, #724]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b04      	cmp	r3, #4
 800228a:	d00c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800228c:	4bb2      	ldr	r3, [pc, #712]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d15c      	bne.n	8002352 <HAL_RCC_OscConfig+0x10e>
 8002298:	4baf      	ldr	r3, [pc, #700]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d155      	bne.n	8002352 <HAL_RCC_OscConfig+0x10e>
 80022a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_OscConfig+0x94>
 80022d2:	4ba1      	ldr	r3, [pc, #644]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e015      	b.n	8002304 <HAL_RCC_OscConfig+0xc0>
 80022d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80022ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022f4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002300:	4b95      	ldr	r3, [pc, #596]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002308:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800230c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002318:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f042 0220 	orr.w	r2, r2, #32
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f002 021f 	and.w	r2, r2, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8111 	beq.w	800255c <HAL_RCC_OscConfig+0x318>
 800233a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8108 	bne.w	800255c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f000 bfc6 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002356:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x12e>
 8002364:	4b7c      	ldr	r3, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a7b      	ldr	r2, [pc, #492]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e036      	b.n	80023e0 <HAL_RCC_OscConfig+0x19c>
 8002372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002376:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x158>
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a74      	ldr	r2, [pc, #464]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a71      	ldr	r2, [pc, #452]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e021      	b.n	80023e0 <HAL_RCC_OscConfig+0x19c>
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x184>
 80023ae:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a69      	ldr	r2, [pc, #420]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a66      	ldr	r2, [pc, #408]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x19c>
 80023c8:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a62      	ldr	r2, [pc, #392]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5f      	ldr	r2, [pc, #380]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d059      	beq.n	80024a4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fc50 	bl	8001c94 <HAL_GetTick>
 80023f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fa:	f7ff fc4b 	bl	8001c94 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d902      	bls.n	8002410 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	f000 bf67 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
 8002410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002414:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002424:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d102      	bne.n	8002442 <HAL_RCC_OscConfig+0x1fe>
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x22a>
 8002442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002446:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800245e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002472:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002476:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800247a:	fa92 f2a2 	rbit	r2, r2
 800247e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002482:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002486:	fab2 f282 	clz	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f042 0220 	orr.w	r2, r2, #32
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f002 021f 	and.w	r2, r2, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f202 	lsl.w	r2, r1, r2
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ab      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b6>
 80024a2:	e05c      	b.n	800255e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fbf6 	bl	8001c94 <HAL_GetTick>
 80024a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ae:	f7ff fbf1 	bl	8001c94 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d902      	bls.n	80024c4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f000 bf0d 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
 80024c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80024d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2b2>
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x2de>
 80024f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800250a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002512:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCC_OscConfig+0x314>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002526:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800252a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800252e:	fa92 f2a2 	rbit	r2, r2
 8002532:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002536:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	f002 021f 	and.w	r2, r2, #31
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f202 	lsl.w	r2, r1, r2
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ab      	bne.n	80024ae <HAL_RCC_OscConfig+0x26a>
 8002556:	e002      	b.n	800255e <HAL_RCC_OscConfig+0x31a>
 8002558:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 817f 	beq.w	8002872 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002574:	4ba7      	ldr	r3, [pc, #668]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002580:	4ba4      	ldr	r3, [pc, #656]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d173      	bne.n	8002674 <HAL_RCC_OscConfig+0x430>
 800258c:	4ba1      	ldr	r3, [pc, #644]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002598:	d16c      	bne.n	8002674 <HAL_RCC_OscConfig+0x430>
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80025ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_OscConfig+0x386>
 80025c4:	4b93      	ldr	r3, [pc, #588]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e013      	b.n	80025f2 <HAL_RCC_OscConfig+0x3ae>
 80025ca:	2302      	movs	r3, #2
 80025cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2202      	movs	r2, #2
 80025f4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80025f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80025fc:	fa92 f2a2 	rbit	r2, r2
 8002600:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002604:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f002 021f 	and.w	r2, r2, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCC_OscConfig+0x3f6>
 8002624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f000 be52 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	21f8      	movs	r1, #248	; 0xf8
 8002650:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002658:	fa91 f1a1 	rbit	r1, r1
 800265c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002660:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002664:	fab1 f181 	clz	r1, r1
 8002668:	b2c9      	uxtb	r1, r1
 800266a:	408b      	lsls	r3, r1
 800266c:	4969      	ldr	r1, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e0fe      	b.n	8002872 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002678:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8088 	beq.w	8002796 <HAL_RCC_OscConfig+0x552>
 8002686:	2301      	movs	r3, #1
 8002688:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002698:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	461a      	mov	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7ff faef 	bl	8001c94 <HAL_GetTick>
 80026b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026bc:	f7ff faea 	bl	8001c94 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d902      	bls.n	80026d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	f000 be06 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80026e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_OscConfig+0x4be>
 80026fc:	4b45      	ldr	r3, [pc, #276]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e013      	b.n	800272a <HAL_RCC_OscConfig+0x4e6>
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800271a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2202      	movs	r2, #2
 800272c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002730:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800273c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f002 021f 	and.w	r2, r2, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0af      	beq.n	80026bc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002768:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	21f8      	movs	r1, #248	; 0xf8
 8002772:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800277a:	fa91 f1a1 	rbit	r1, r1
 800277e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002782:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002786:	fab1 f181 	clz	r1, r1
 800278a:	b2c9      	uxtb	r1, r1
 800278c:	408b      	lsls	r3, r1
 800278e:	4921      	ldr	r1, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e06d      	b.n	8002872 <HAL_RCC_OscConfig+0x62e>
 8002796:	2301      	movs	r3, #1
 8002798:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80027a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	2300      	movs	r3, #0
 80027c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fa67 	bl	8001c94 <HAL_GetTick>
 80027c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7ff fa62 	bl	8001c94 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d902      	bls.n	80027e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	f000 bd7e 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80027f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x5d4>
 800280c:	4b01      	ldr	r3, [pc, #4]	; (8002814 <HAL_RCC_OscConfig+0x5d0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	e016      	b.n	8002840 <HAL_RCC_OscConfig+0x5fc>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800282a:	2302      	movs	r3, #2
 800282c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002830:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800283c:	4bbf      	ldr	r3, [pc, #764]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2202      	movs	r2, #2
 8002842:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002846:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800284a:	fa92 f2a2 	rbit	r2, r2
 800284e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002852:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f002 021f 	and.w	r2, r2, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f202 	lsl.w	r2, r1, r2
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ac      	bne.n	80027cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002876:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8113 	beq.w	8002aae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d07c      	beq.n	8002992 <HAL_RCC_OscConfig+0x74e>
 8002898:	2301      	movs	r3, #1
 800289a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80028aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	4ba2      	ldr	r3, [pc, #648]	; (8002b40 <HAL_RCC_OscConfig+0x8fc>)
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	461a      	mov	r2, r3
 80028be:	2301      	movs	r3, #1
 80028c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7ff f9e7 	bl	8001c94 <HAL_GetTick>
 80028c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff f9e2 	bl	8001c94 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d902      	bls.n	80028e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	f000 bcfe 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002902:	2202      	movs	r2, #2
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fa93 f2a3 	rbit	r2, r3
 8002914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002926:	2202      	movs	r2, #2
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002940:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 8002944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800294e:	2102      	movs	r1, #2
 8002950:	6019      	str	r1, [r3, #0]
 8002952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002956:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f1a3 	rbit	r1, r3
 8002960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002964:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002968:	6019      	str	r1, [r3, #0]
  return result;
 800296a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d09d      	beq.n	80028cc <HAL_RCC_OscConfig+0x688>
 8002990:	e08d      	b.n	8002aae <HAL_RCC_OscConfig+0x86a>
 8002992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002996:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x8fc>)
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	461a      	mov	r2, r3
 80029d0:	2300      	movs	r3, #0
 80029d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7ff f95e 	bl	8001c94 <HAL_GetTick>
 80029d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029de:	f7ff f959 	bl	8001c94 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	f000 bc75 	b.w	80032de <HAL_RCC_OscConfig+0x109a>
 80029f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029fc:	2202      	movs	r2, #2
 80029fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a44:	2202      	movs	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 8002a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f1a3 	rbit	r1, r3
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a86:	6019      	str	r1, [r3, #0]
  return result;
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d197      	bne.n	80029de <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 81a5 	beq.w	8002e0e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d116      	bne.n	8002b04 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_RCC_OscConfig+0x8f8>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_RCC_OscConfig+0x900>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d121      	bne.n	8002b54 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x900>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x900>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1c:	f7ff f8ba 	bl	8001c94 <HAL_GetTick>
 8002b20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	e010      	b.n	8002b48 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7ff f8b5 	bl	8001c94 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d908      	bls.n	8002b48 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e3d1      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	10908120 	.word	0x10908120
 8002b44:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <HAL_RCC_OscConfig+0xb3c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0e8      	beq.n	8002b26 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x92e>
 8002b64:	4b87      	ldr	r3, [pc, #540]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a86      	ldr	r2, [pc, #536]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	e035      	b.n	8002bde <HAL_RCC_OscConfig+0x99a>
 8002b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x958>
 8002b82:	4b80      	ldr	r3, [pc, #512]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a7f      	ldr	r2, [pc, #508]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	4b7d      	ldr	r3, [pc, #500]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a7c      	ldr	r2, [pc, #496]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	e020      	b.n	8002bde <HAL_RCC_OscConfig+0x99a>
 8002b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x982>
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a74      	ldr	r2, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a71      	ldr	r2, [pc, #452]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	e00b      	b.n	8002bde <HAL_RCC_OscConfig+0x99a>
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a6e      	ldr	r2, [pc, #440]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4a6b      	ldr	r2, [pc, #428]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8081 	beq.w	8002cf2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff f850 	bl	8001c94 <HAL_GetTick>
 8002bf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	e00b      	b.n	8002c12 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7ff f84b 	bl	8001c94 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e365      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
 8002c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c3e:	2202      	movs	r2, #2
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c58:	601a      	str	r2, [r3, #0]
  return result;
 8002c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0xa3a>
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	e013      	b.n	8002ca6 <HAL_RCC_OscConfig+0xa62>
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002caa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002cae:	2102      	movs	r1, #2
 8002cb0:	6011      	str	r1, [r2, #0]
 8002cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cb6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	fa92 f1a2 	rbit	r1, r2
 8002cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cc4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002cc8:	6011      	str	r1, [r2, #0]
  return result;
 8002cca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cce:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d084      	beq.n	8002bfa <HAL_RCC_OscConfig+0x9b6>
 8002cf0:	e083      	b.n	8002dfa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe ffcf 	bl	8001c94 <HAL_GetTick>
 8002cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe ffca 	bl	8001c94 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e2e4      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
 8002d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d18:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d40:	2202      	movs	r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d5a:	601a      	str	r2, [r3, #0]
  return result;
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0xb44>
 8002d7a:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_OscConfig+0xb40>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	e017      	b.n	8002db0 <HAL_RCC_OscConfig+0xb6c>
 8002d80:	40007000 	.word	0x40007000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4bb3      	ldr	r3, [pc, #716]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002db4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002db8:	2102      	movs	r1, #2
 8002dba:	6011      	str	r1, [r2, #0]
 8002dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	fa92 f1a2 	rbit	r1, r2
 8002dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dce:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002dd2:	6011      	str	r1, [r2, #0]
  return result;
 8002dd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dd8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d180      	bne.n	8002cfc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dfa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b9e      	ldr	r3, [pc, #632]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4a9d      	ldr	r2, [pc, #628]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 825e 	beq.w	80032dc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e20:	4b96      	ldr	r3, [pc, #600]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	f000 821f 	beq.w	800326c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	f040 8170 	bne.w	8003120 <HAL_RCC_OscConfig+0xedc>
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e60:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e64:	601a      	str	r2, [r3, #0]
  return result;
 8002e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e6e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	2300      	movs	r3, #0
 8002e84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe ff05 	bl	8001c94 <HAL_GetTick>
 8002e8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe ff00 	bl	8001c94 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e21c      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
 8002ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	fa93 f2a3 	rbit	r2, r3
 8002ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ec8:	601a      	str	r2, [r3, #0]
  return result;
 8002eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ece:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ed2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0xcaa>
 8002ee8:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e027      	b.n	8002f3e <HAL_RCC_OscConfig+0xcfa>
 8002eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f00:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	fa93 f2a3 	rbit	r2, r3
 8002f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f26:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f34:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f42:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f4a:	6011      	str	r1, [r2, #0]
 8002f4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f50:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	fa92 f1a2 	rbit	r1, r2
 8002f5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f5e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002f62:	6011      	str	r1, [r2, #0]
  return result;
 8002f64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f68:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	fab2 f282 	clz	r2, r2
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f042 0220 	orr.w	r2, r2, #32
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	f002 021f 	and.w	r2, r2, #31
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d182      	bne.n	8002e90 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	4937      	ldr	r1, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a19      	ldr	r1, [r3, #32]
 8002fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fde:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fa93 f2a3 	rbit	r2, r3
 8002fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ff0:	601a      	str	r2, [r3, #0]
  return result;
 8002ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ffa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003006:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	461a      	mov	r2, r3
 800300e:	2301      	movs	r3, #1
 8003010:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe fe3f 	bl	8001c94 <HAL_GetTick>
 8003016:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301a:	e009      	b.n	8003030 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fe3a 	bl	8001c94 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e156      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
 8003030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003034:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003042:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003050:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003054:	601a      	str	r2, [r3, #0]
  return result;
 8003056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800305e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0xe3c>
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <HAL_RCC_OscConfig+0xe38>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e02a      	b.n	80030d0 <HAL_RCC_OscConfig+0xe8c>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003084:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003092:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f2a3 	rbit	r2, r3
 800309c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	4b86      	ldr	r3, [pc, #536]	; (80032e8 <HAL_RCC_OscConfig+0x10a4>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	fa92 f1a2 	rbit	r1, r2
 80030ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030f0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80030f4:	6011      	str	r1, [r2, #0]
  return result;
 80030f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030fa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f43f af7f 	beq.w	800301c <HAL_RCC_OscConfig+0xdd8>
 800311e:	e0dd      	b.n	80032dc <HAL_RCC_OscConfig+0x1098>
 8003120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003124:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800312c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003132:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f2a3 	rbit	r2, r3
 800313c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003140:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003144:	601a      	str	r2, [r3, #0]
  return result;
 8003146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800314e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800315a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fe fd95 	bl	8001c94 <HAL_GetTick>
 800316a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	e009      	b.n	8003184 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fd90 	bl	8001c94 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0ac      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
 8003184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003188:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800318c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003196:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031a8:	601a      	str	r2, [r3, #0]
  return result;
 80031aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_OscConfig+0xf8a>
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_OscConfig+0x10a4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	e027      	b.n	800321e <HAL_RCC_OscConfig+0xfda>
 80031ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	fa93 f2a3 	rbit	r2, r3
 80031ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003214:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_RCC_OscConfig+0x10a4>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003222:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003226:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800322a:	6011      	str	r1, [r2, #0]
 800322c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003230:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	fa92 f1a2 	rbit	r1, r2
 800323a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800323e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003242:	6011      	str	r1, [r2, #0]
  return result;
 8003244:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003248:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	fab2 f282 	clz	r2, r2
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f042 0220 	orr.w	r2, r2, #32
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f002 021f 	and.w	r2, r2, #31
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d182      	bne.n	8003170 <HAL_RCC_OscConfig+0xf2c>
 800326a:	e037      	b.n	80032dc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800326c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e02e      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_OscConfig+0x10a4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_RCC_OscConfig+0x10a4>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003290:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003294:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d117      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80032ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032bc:	429a      	cmp	r2, r3
 80032be:	d10b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80032c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09e      	sub	sp, #120	; 0x78
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e162      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	498b      	ldr	r1, [pc, #556]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e14a      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	497f      	ldr	r1, [pc, #508]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80dc 	beq.w	8003518 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d13c      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xf6>
 8003368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800336c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_RCC_ClockConfig+0xa6>
 800338c:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e00f      	b.n	80033b2 <HAL_RCC_ClockConfig+0xc6>
 8003392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003396:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	667b      	str	r3, [r7, #100]	; 0x64
 80033a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a4:	663b      	str	r3, [r7, #96]	; 0x60
 80033a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ae:	4b67      	ldr	r3, [pc, #412]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80033b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ba:	fa92 f2a2 	rbit	r2, r2
 80033be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0220 	orr.w	r2, r2, #32
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d17b      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0f3      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d13c      	bne.n	8003464 <HAL_RCC_ClockConfig+0x178>
 80033ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_RCC_ClockConfig+0x128>
 800340e:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e00f      	b.n	8003434 <HAL_RCC_ClockConfig+0x148>
 8003414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003430:	4b46      	ldr	r3, [pc, #280]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003438:	63ba      	str	r2, [r7, #56]	; 0x38
 800343a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800343c:	fa92 f2a2 	rbit	r2, r2
 8003440:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f002 021f 	and.w	r2, r2, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d13a      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b2      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
 8003464:	2302      	movs	r3, #2
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_ClockConfig+0x1a0>
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e00d      	b.n	80034a8 <HAL_RCC_ClockConfig+0x1bc>
 800348c:	2302      	movs	r3, #2
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	2302      	movs	r3, #2
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2202      	movs	r2, #2
 80034aa:	61ba      	str	r2, [r7, #24]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	fa92 f2a2 	rbit	r2, r2
 80034b2:	617a      	str	r2, [r7, #20]
  return result;
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	fab2 f282 	clz	r2, r2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f042 0220 	orr.w	r2, r2, #32
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f002 021f 	and.w	r2, r2, #31
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f202 	lsl.w	r2, r1, r2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e079      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fe fbd4 	bl	8001c94 <HAL_GetTick>
 80034ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fe fbd0 	bl	8001c94 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e061      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCC_ClockConfig+0x260>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d214      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	4906      	ldr	r1, [pc, #24]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCC_ClockConfig+0x25c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e040      	b.n	80035ca <HAL_RCC_ClockConfig+0x2de>
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	491a      	ldr	r1, [pc, #104]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4912      	ldr	r1, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800358e:	f000 f829 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003592:	4601      	mov	r1, r0
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359c:	22f0      	movs	r2, #240	; 0xf0
 800359e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	fa92 f2a2 	rbit	r2, r2
 80035a6:	60fa      	str	r2, [r7, #12]
  return result;
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	fab2 f282 	clz	r2, r2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	40d3      	lsrs	r3, r2
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x2ec>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_RCC_ClockConfig+0x2f0>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCC_ClockConfig+0x2f4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fb22 	bl	8001c0c <HAL_InitTick>
  
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3778      	adds	r7, #120	; 0x78
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08008aa8 	.word	0x08008aa8
 80035dc:	20000004 	.word	0x20000004
 80035e0:	20000008 	.word	0x20000008

080035e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b08b      	sub	sp, #44	; 0x2c
 80035e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x30>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x36>
 8003612:	e03f      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e03f      	b.n	800369a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003620:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003624:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	fa92 f2a2 	rbit	r2, r2
 800362c:	607a      	str	r2, [r7, #4]
  return result;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	fab2 f282 	clz	r2, r2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	40d3      	lsrs	r3, r2
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	220f      	movs	r2, #15
 8003648:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	fa92 f2a2 	rbit	r2, r2
 8003650:	60fa      	str	r2, [r7, #12]
  return result;
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	fab2 f282 	clz	r2, r2
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	40d3      	lsrs	r3, r2
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800366c:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	fbb2 f2f3 	udiv	r2, r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	e007      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fbb2 f2f3 	udiv	r2, r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	623b      	str	r3, [r7, #32]
      break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003696:	623b      	str	r3, [r7, #32]
      break;
 8003698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369a:	6a3b      	ldr	r3, [r7, #32]
}
 800369c:	4618      	mov	r0, r3
 800369e:	372c      	adds	r7, #44	; 0x2c
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40021000 	.word	0x40021000
 80036ac:	007a1200 	.word	0x007a1200
 80036b0:	08008ac0 	.word	0x08008ac0
 80036b4:	08008ad0 	.word	0x08008ad0

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036d6:	f7ff ffef 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036da:	4601      	mov	r1, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	603a      	str	r2, [r7, #0]
  return result;
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	40d3      	lsrs	r3, r2
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	08008ab8 	.word	0x08008ab8

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800371a:	f7ff ffcd 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 800371e:	4601      	mov	r1, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003728:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800372c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	fa92 f2a2 	rbit	r2, r2
 8003734:	603a      	str	r2, [r7, #0]
  return result;
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	40d3      	lsrs	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	08008ab8 	.word	0x08008ab8

08003758 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b092      	sub	sp, #72	; 0x48
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80d4 	beq.w	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377c:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4a4a      	ldr	r2, [pc, #296]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	61d3      	str	r3, [r2, #28]
 8003794:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b45      	ldr	r3, [pc, #276]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a41      	ldr	r2, [pc, #260]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fe fa69 	bl	8001c94 <HAL_GetTick>
 80037c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fe fa65 	bl	8001c94 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1d6      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b38      	ldr	r3, [pc, #224]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8084 	beq.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003800:	429a      	cmp	r2, r3
 8003802:	d07c      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	461a      	mov	r2, r3
 800382e:	2301      	movs	r3, #1
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	461a      	mov	r2, r3
 8003852:	2300      	movs	r3, #0
 8003854:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04b      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fe fa15 	bl	8001c94 <HAL_GetTick>
 800386a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fa11 	bl	8001c94 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e180      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
 8003890:	2302      	movs	r3, #2
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	61fb      	str	r3, [r7, #28]
  return result;
 800389c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d108      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038b2:	4b01      	ldr	r3, [pc, #4]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	e00d      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
 80038c0:	10908100 	.word	0x10908100
 80038c4:	2302      	movs	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	4b9a      	ldr	r3, [pc, #616]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	2202      	movs	r2, #2
 80038d6:	613a      	str	r2, [r7, #16]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	fa92 f2a2 	rbit	r2, r2
 80038de:	60fa      	str	r2, [r7, #12]
  return result;
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	fab2 f282 	clz	r2, r2
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	f002 021f 	and.w	r2, r2, #31
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f202 	lsl.w	r2, r1, r2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0b7      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038fe:	4b8f      	ldr	r3, [pc, #572]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	498c      	ldr	r1, [pc, #560]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003910:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4a87      	ldr	r2, [pc, #540]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003922:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003930:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	f023 0203 	bic.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	497f      	ldr	r1, [pc, #508]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394e:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4978      	ldr	r1, [pc, #480]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	4970      	ldr	r1, [pc, #448]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800398a:	4b6c      	ldr	r3, [pc, #432]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f023 0210 	bic.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4969      	ldr	r1, [pc, #420]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039a8:	4b64      	ldr	r3, [pc, #400]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	4961      	ldr	r1, [pc, #388]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f023 0220 	bic.w	r2, r3, #32
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	495a      	ldr	r1, [pc, #360]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039e4:	4b55      	ldr	r3, [pc, #340]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	4952      	ldr	r1, [pc, #328]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a02:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	494b      	ldr	r1, [pc, #300]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a20:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4943      	ldr	r1, [pc, #268]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	493c      	ldr	r1, [pc, #240]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a5c:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	4934      	ldr	r1, [pc, #208]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a7a:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	492d      	ldr	r1, [pc, #180]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	4925      	ldr	r1, [pc, #148]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	491e      	ldr	r1, [pc, #120]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	490f      	ldr	r1, [pc, #60]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b2e:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	4913      	ldr	r1, [pc, #76]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b60:	490b      	ldr	r1, [pc, #44]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b72:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3748      	adds	r7, #72	; 0x48
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e049      	b.n	8003c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd fd8e 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 ff20 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e04f      	b.n	8003cfc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d018      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIM_Base_Start_IT+0x76>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d115      	bne.n	8003ce6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d015      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0xb4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d011      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	e008      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e000      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40013400 	.word	0x40013400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40015000 	.word	0x40015000
 8003d20:	00010007 	.word	0x00010007

08003d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e049      	b.n	8003dca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fd1c 	bl	8001788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fe58 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_TIM_PWM_Start+0x24>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e03c      	b.n	8003e72 <HAL_TIM_PWM_Start+0x9e>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d109      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x3e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e02f      	b.n	8003e72 <HAL_TIM_PWM_Start+0x9e>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d109      	bne.n	8003e2c <HAL_TIM_PWM_Start+0x58>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e022      	b.n	8003e72 <HAL_TIM_PWM_Start+0x9e>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d109      	bne.n	8003e46 <HAL_TIM_PWM_Start+0x72>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	e015      	b.n	8003e72 <HAL_TIM_PWM_Start+0x9e>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d109      	bne.n	8003e60 <HAL_TIM_PWM_Start+0x8c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e008      	b.n	8003e72 <HAL_TIM_PWM_Start+0x9e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0a1      	b.n	8003fbe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xb6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e88:	e023      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xfe>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start+0xc6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e98:	e01b      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xfe>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0xd6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea8:	e013      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xfe>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0xe6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb8:	e00b      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xfe>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0xf6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec8:	e003      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xfe>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fafe 	bl	80054dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a38      	ldr	r2, [pc, #224]	; (8003fc8 <HAL_TIM_PWM_Start+0x1f4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x148>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a37      	ldr	r2, [pc, #220]	; (8003fcc <HAL_TIM_PWM_Start+0x1f8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x148>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <HAL_TIM_PWM_Start+0x1fc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x148>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_TIM_PWM_Start+0x200>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x148>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a32      	ldr	r2, [pc, #200]	; (8003fd8 <HAL_TIM_PWM_Start+0x204>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x148>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <HAL_TIM_PWM_Start+0x208>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x14c>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_TIM_PWM_Start+0x14e>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_TIM_PWM_Start+0x1f4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d01d      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1a8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d018      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1a8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_TIM_PWM_Start+0x20c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1a8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <HAL_TIM_PWM_Start+0x210>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1a8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <HAL_TIM_PWM_Start+0x1f8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1a8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_TIM_PWM_Start+0x1fc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x1a8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_TIM_PWM_Start+0x208>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d115      	bne.n	8003fa8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <HAL_TIM_PWM_Start+0x214>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d015      	beq.n	8003fba <HAL_TIM_PWM_Start+0x1e6>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d011      	beq.n	8003fba <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	e008      	b.n	8003fba <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e000      	b.n	8003fbc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800
 8003fdc:	40015000 	.word	0x40015000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	00010007 	.word	0x00010007

08003fec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e049      	b.n	8004092 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fd fb22 	bl	800165c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fcf4 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_IC_Start+0x1a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e023      	b.n	80040fe <HAL_TIM_IC_Start+0x62>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_IC_Start+0x2a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e01b      	b.n	80040fe <HAL_TIM_IC_Start+0x62>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_IC_Start+0x3a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e013      	b.n	80040fe <HAL_TIM_IC_Start+0x62>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_IC_Start+0x4a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e00b      	b.n	80040fe <HAL_TIM_IC_Start+0x62>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_IC_Start+0x5a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e003      	b.n	80040fe <HAL_TIM_IC_Start+0x62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <HAL_TIM_IC_Start+0x74>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e013      	b.n	8004138 <HAL_TIM_IC_Start+0x9c>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b04      	cmp	r3, #4
 8004114:	d104      	bne.n	8004120 <HAL_TIM_IC_Start+0x84>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e00b      	b.n	8004138 <HAL_TIM_IC_Start+0x9c>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d104      	bne.n	8004130 <HAL_TIM_IC_Start+0x94>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e003      	b.n	8004138 <HAL_TIM_IC_Start+0x9c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004136:	b2db      	uxtb	r3, r3
 8004138:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d102      	bne.n	8004146 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e092      	b.n	8004270 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_TIM_IC_Start+0xbe>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	e023      	b.n	80041a2 <HAL_TIM_IC_Start+0x106>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d104      	bne.n	800416a <HAL_TIM_IC_Start+0xce>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	e01b      	b.n	80041a2 <HAL_TIM_IC_Start+0x106>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d104      	bne.n	800417a <HAL_TIM_IC_Start+0xde>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	e013      	b.n	80041a2 <HAL_TIM_IC_Start+0x106>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d104      	bne.n	800418a <HAL_TIM_IC_Start+0xee>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004188:	e00b      	b.n	80041a2 <HAL_TIM_IC_Start+0x106>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b10      	cmp	r3, #16
 800418e:	d104      	bne.n	800419a <HAL_TIM_IC_Start+0xfe>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004198:	e003      	b.n	80041a2 <HAL_TIM_IC_Start+0x106>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <HAL_TIM_IC_Start+0x116>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	e013      	b.n	80041da <HAL_TIM_IC_Start+0x13e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_IC_Start+0x126>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c0:	e00b      	b.n	80041da <HAL_TIM_IC_Start+0x13e>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_IC_Start+0x136>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041d0:	e003      	b.n	80041da <HAL_TIM_IC_Start+0x13e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f97a 	bl	80054dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a22      	ldr	r2, [pc, #136]	; (8004278 <HAL_TIM_IC_Start+0x1dc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01d      	beq.n	800422e <HAL_TIM_IC_Start+0x192>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d018      	beq.n	800422e <HAL_TIM_IC_Start+0x192>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1e      	ldr	r2, [pc, #120]	; (800427c <HAL_TIM_IC_Start+0x1e0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_TIM_IC_Start+0x192>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <HAL_TIM_IC_Start+0x1e4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIM_IC_Start+0x192>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_TIM_IC_Start+0x1e8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIM_IC_Start+0x192>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <HAL_TIM_IC_Start+0x1ec>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIM_IC_Start+0x192>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_TIM_IC_Start+0x1f0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d115      	bne.n	800425a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	4b16      	ldr	r3, [pc, #88]	; (8004290 <HAL_TIM_IC_Start+0x1f4>)
 8004236:	4013      	ands	r3, r2
 8004238:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d015      	beq.n	800426c <HAL_TIM_IC_Start+0x1d0>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d011      	beq.n	800426c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	e008      	b.n	800426c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e000      	b.n	800426e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40015000 	.word	0x40015000
 8004290:	00010007 	.word	0x00010007

08004294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d122      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d11b      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0202 	mvn.w	r2, #2
 80042c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb7f 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb71 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb82 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0204 	mvn.w	r2, #4
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fb55 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fb47 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb58 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0208 	mvn.w	r2, #8
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2204      	movs	r2, #4
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fb2b 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fb1d 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb2e 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2208      	movs	r2, #8
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fb01 	bl	80049da <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 faf3 	bl	80049c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fb04 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0201 	mvn.w	r2, #1
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc fd1c 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 f908 	bl	8005654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d10e      	bne.n	8004472 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d107      	bne.n	8004472 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 f8fb 	bl	8005668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d10e      	bne.n	800449e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d107      	bne.n	800449e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fab2 	bl	8004a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d10e      	bne.n	80044ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0220 	mvn.w	r2, #32
 80044c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f001 f8bb 	bl	8005640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e088      	b.n	8004602 <HAL_TIM_IC_ConfigChannel+0x130>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11b      	bne.n	8004536 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f000 fe27 	bl	8005160 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 020c 	bic.w	r2, r2, #12
 8004520:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6999      	ldr	r1, [r3, #24]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	619a      	str	r2, [r3, #24]
 8004534:	e060      	b.n	80045f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d11c      	bne.n	8004576 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f000 fea5 	bl	800529a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800455e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	619a      	str	r2, [r3, #24]
 8004574:	e040      	b.n	80045f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f000 fef2 	bl	8005374 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 020c 	bic.w	r2, r2, #12
 800459e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69d9      	ldr	r1, [r3, #28]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	61da      	str	r2, [r3, #28]
 80045b2:	e021      	b.n	80045f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d11c      	bne.n	80045f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f000 ff0f 	bl	80053ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69d9      	ldr	r1, [r3, #28]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e001      	b.n	80045f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004626:	2302      	movs	r3, #2
 8004628:	e0ff      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b14      	cmp	r3, #20
 8004636:	f200 80f0 	bhi.w	800481a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800463a:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004695 	.word	0x08004695
 8004644:	0800481b 	.word	0x0800481b
 8004648:	0800481b 	.word	0x0800481b
 800464c:	0800481b 	.word	0x0800481b
 8004650:	080046d5 	.word	0x080046d5
 8004654:	0800481b 	.word	0x0800481b
 8004658:	0800481b 	.word	0x0800481b
 800465c:	0800481b 	.word	0x0800481b
 8004660:	08004717 	.word	0x08004717
 8004664:	0800481b 	.word	0x0800481b
 8004668:	0800481b 	.word	0x0800481b
 800466c:	0800481b 	.word	0x0800481b
 8004670:	08004757 	.word	0x08004757
 8004674:	0800481b 	.word	0x0800481b
 8004678:	0800481b 	.word	0x0800481b
 800467c:	0800481b 	.word	0x0800481b
 8004680:	08004799 	.word	0x08004799
 8004684:	0800481b 	.word	0x0800481b
 8004688:	0800481b 	.word	0x0800481b
 800468c:	0800481b 	.word	0x0800481b
 8004690:	080047d9 	.word	0x080047d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fa5a 	bl	8004b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6999      	ldr	r1, [r3, #24]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	619a      	str	r2, [r3, #24]
      break;
 80046d2:	e0a5      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fad4 	bl	8004c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6999      	ldr	r1, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	619a      	str	r2, [r3, #24]
      break;
 8004714:	e084      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fb47 	bl	8004db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0208 	orr.w	r2, r2, #8
 8004730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0204 	bic.w	r2, r2, #4
 8004740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	61da      	str	r2, [r3, #28]
      break;
 8004754:	e064      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fbb9 	bl	8004ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69d9      	ldr	r1, [r3, #28]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	61da      	str	r2, [r3, #28]
      break;
 8004796:	e043      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fc08 	bl	8004fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0208 	orr.w	r2, r2, #8
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0204 	bic.w	r2, r2, #4
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047d6:	e023      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fc52 	bl	8005088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004818:	e002      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
      break;
 800481e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop

08004834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIM_ConfigClockSource+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e0b6      	b.n	80049be <HAL_TIM_ConfigClockSource+0x18a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488c:	d03e      	beq.n	800490c <HAL_TIM_ConfigClockSource+0xd8>
 800488e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004892:	f200 8087 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	f000 8086 	beq.w	80049aa <HAL_TIM_ConfigClockSource+0x176>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d87f      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048a4:	2b70      	cmp	r3, #112	; 0x70
 80048a6:	d01a      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xaa>
 80048a8:	2b70      	cmp	r3, #112	; 0x70
 80048aa:	d87b      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048ac:	2b60      	cmp	r3, #96	; 0x60
 80048ae:	d050      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x11e>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d877      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048b4:	2b50      	cmp	r3, #80	; 0x50
 80048b6:	d03c      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0xfe>
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d873      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d058      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x13e>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d86f      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048c4:	2b30      	cmp	r3, #48	; 0x30
 80048c6:	d064      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x15e>
 80048c8:	2b30      	cmp	r3, #48	; 0x30
 80048ca:	d86b      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d060      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x15e>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d867      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d05c      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x15e>
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d05a      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x15e>
 80048dc:	e062      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f000 fdd5 	bl	800549c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	609a      	str	r2, [r3, #8]
      break;
 800490a:	e04f      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6899      	ldr	r1, [r3, #8]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f000 fdbe 	bl	800549c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800492e:	609a      	str	r2, [r3, #8]
      break;
 8004930:	e03c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	461a      	mov	r2, r3
 8004940:	f000 fc7c 	bl	800523c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2150      	movs	r1, #80	; 0x50
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fd8b 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004950:	e02c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	461a      	mov	r2, r3
 8004960:	f000 fcd8 	bl	8005314 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2160      	movs	r1, #96	; 0x60
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd7b 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004970:	e01c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	461a      	mov	r2, r3
 8004980:	f000 fc5c 	bl	800523c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2140      	movs	r1, #64	; 0x40
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fd6b 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004990:	e00c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 fd62 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 80049a2:	e003      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e000      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a42      	ldr	r2, [pc, #264]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d00f      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <TIM_Base_SetConfig+0x120>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3e      	ldr	r2, [pc, #248]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <TIM_Base_SetConfig+0x128>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a31      	ldr	r2, [pc, #196]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01f      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d01b      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2e      	ldr	r2, [pc, #184]	; (8004b38 <TIM_Base_SetConfig+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d017      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <TIM_Base_SetConfig+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2c      	ldr	r2, [pc, #176]	; (8004b40 <TIM_Base_SetConfig+0x128>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <TIM_Base_SetConfig+0x130>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <TIM_Base_SetConfig+0x134>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <TIM_Base_SetConfig+0x138>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_Base_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d108      	bne.n	8004ac4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <TIM_Base_SetConfig+0x11c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <TIM_Base_SetConfig+0x100>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <TIM_Base_SetConfig+0x128>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0x100>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <TIM_Base_SetConfig+0x130>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0x100>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <TIM_Base_SetConfig+0x134>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0x100>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <TIM_Base_SetConfig+0x138>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0x100>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <TIM_Base_SetConfig+0x12c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40015000 	.word	0x40015000
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0303 	bic.w	r3, r3, #3
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 0302 	bic.w	r3, r3, #2
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <TIM_OC1_SetConfig+0x11c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <TIM_OC1_SetConfig+0x88>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <TIM_OC1_SetConfig+0x120>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00f      	beq.n	8004bdc <TIM_OC1_SetConfig+0x88>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2e      	ldr	r2, [pc, #184]	; (8004c78 <TIM_OC1_SetConfig+0x124>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <TIM_OC1_SetConfig+0x88>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <TIM_OC1_SetConfig+0x128>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d007      	beq.n	8004bdc <TIM_OC1_SetConfig+0x88>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <TIM_OC1_SetConfig+0x12c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_OC1_SetConfig+0x88>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <TIM_OC1_SetConfig+0x130>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d10c      	bne.n	8004bf6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0308 	bic.w	r3, r3, #8
 8004be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <TIM_OC1_SetConfig+0x11c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <TIM_OC1_SetConfig+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <TIM_OC1_SetConfig+0x120>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_OC1_SetConfig+0xd2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <TIM_OC1_SetConfig+0x124>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC1_SetConfig+0xd2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <TIM_OC1_SetConfig+0x128>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC1_SetConfig+0xd2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <TIM_OC1_SetConfig+0x12c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC1_SetConfig+0xd2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <TIM_OC1_SetConfig+0x130>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800
 8004c84:	40015000 	.word	0x40015000

08004c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0210 	bic.w	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0320 	bic.w	r3, r3, #32
 8004cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <TIM_OC2_SetConfig+0x110>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_OC2_SetConfig+0x74>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2b      	ldr	r2, [pc, #172]	; (8004d9c <TIM_OC2_SetConfig+0x114>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC2_SetConfig+0x74>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <TIM_OC2_SetConfig+0x118>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10d      	bne.n	8004d18 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <TIM_OC2_SetConfig+0x110>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <TIM_OC2_SetConfig+0xc0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <TIM_OC2_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00f      	beq.n	8004d48 <TIM_OC2_SetConfig+0xc0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <TIM_OC2_SetConfig+0x11c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_OC2_SetConfig+0xc0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <TIM_OC2_SetConfig+0x120>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_OC2_SetConfig+0xc0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <TIM_OC2_SetConfig+0x124>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC2_SetConfig+0xc0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <TIM_OC2_SetConfig+0x118>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d113      	bne.n	8004d70 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d56:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40013400 	.word	0x40013400
 8004da0:	40015000 	.word	0x40015000
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800

08004db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	; (8004ebc <TIM_OC3_SetConfig+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_OC3_SetConfig+0x72>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <TIM_OC3_SetConfig+0x110>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC3_SetConfig+0x72>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a29      	ldr	r2, [pc, #164]	; (8004ec4 <TIM_OC3_SetConfig+0x114>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10d      	bne.n	8004e3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <TIM_OC3_SetConfig+0x10c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_OC3_SetConfig+0xbe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <TIM_OC3_SetConfig+0x110>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_OC3_SetConfig+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <TIM_OC3_SetConfig+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_OC3_SetConfig+0xbe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <TIM_OC3_SetConfig+0x11c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_OC3_SetConfig+0xbe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <TIM_OC3_SetConfig+0x120>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC3_SetConfig+0xbe>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <TIM_OC3_SetConfig+0x114>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d113      	bne.n	8004e96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40015000 	.word	0x40015000
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	031b      	lsls	r3, r3, #12
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <TIM_OC4_SetConfig+0xc8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <TIM_OC4_SetConfig+0x8c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC4_SetConfig+0xcc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00f      	beq.n	8004f60 <TIM_OC4_SetConfig+0x8c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC4_SetConfig+0xd0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_OC4_SetConfig+0x8c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC4_SetConfig+0xd4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <TIM_OC4_SetConfig+0x8c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <TIM_OC4_SetConfig+0xd8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC4_SetConfig+0x8c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <TIM_OC4_SetConfig+0xdc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d109      	bne.n	8004f74 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40013400 	.word	0x40013400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800
 8004fb0:	40015000 	.word	0x40015000

08004fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ff8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a19      	ldr	r2, [pc, #100]	; (8005070 <TIM_OC5_SetConfig+0xbc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <TIM_OC5_SetConfig+0x82>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a18      	ldr	r2, [pc, #96]	; (8005074 <TIM_OC5_SetConfig+0xc0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00f      	beq.n	8005036 <TIM_OC5_SetConfig+0x82>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a17      	ldr	r2, [pc, #92]	; (8005078 <TIM_OC5_SetConfig+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00b      	beq.n	8005036 <TIM_OC5_SetConfig+0x82>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a16      	ldr	r2, [pc, #88]	; (800507c <TIM_OC5_SetConfig+0xc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d007      	beq.n	8005036 <TIM_OC5_SetConfig+0x82>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <TIM_OC5_SetConfig+0xcc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_OC5_SetConfig+0x82>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a14      	ldr	r2, [pc, #80]	; (8005084 <TIM_OC5_SetConfig+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d109      	bne.n	800504a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40013400 	.word	0x40013400
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800
 8005084:	40015000 	.word	0x40015000

08005088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	051b      	lsls	r3, r3, #20
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <TIM_OC6_SetConfig+0xc0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <TIM_OC6_SetConfig+0x84>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a19      	ldr	r2, [pc, #100]	; (800514c <TIM_OC6_SetConfig+0xc4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00f      	beq.n	800510c <TIM_OC6_SetConfig+0x84>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_OC6_SetConfig+0xc8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00b      	beq.n	800510c <TIM_OC6_SetConfig+0x84>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <TIM_OC6_SetConfig+0xcc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_OC6_SetConfig+0x84>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <TIM_OC6_SetConfig+0xd0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC6_SetConfig+0x84>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <TIM_OC6_SetConfig+0xd4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d109      	bne.n	8005120 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800
 800515c:	40015000 	.word	0x40015000

08005160 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0201 	bic.w	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <TIM_TI1_SetConfig+0xc4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d017      	beq.n	80051be <TIM_TI1_SetConfig+0x5e>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d013      	beq.n	80051be <TIM_TI1_SetConfig+0x5e>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a23      	ldr	r2, [pc, #140]	; (8005228 <TIM_TI1_SetConfig+0xc8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_TI1_SetConfig+0x5e>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a22      	ldr	r2, [pc, #136]	; (800522c <TIM_TI1_SetConfig+0xcc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_TI1_SetConfig+0x5e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a21      	ldr	r2, [pc, #132]	; (8005230 <TIM_TI1_SetConfig+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_TI1_SetConfig+0x5e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a20      	ldr	r2, [pc, #128]	; (8005234 <TIM_TI1_SetConfig+0xd4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_TI1_SetConfig+0x5e>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <TIM_TI1_SetConfig+0xd8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <TIM_TI1_SetConfig+0x62>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <TIM_TI1_SetConfig+0x64>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e003      	b.n	80051e2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 030a 	and.w	r3, r3, #10
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40013400 	.word	0x40013400
 8005234:	40014000 	.word	0x40014000
 8005238:	40015000 	.word	0x40015000

0800523c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0201 	bic.w	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 030a 	bic.w	r3, r3, #10
 8005278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f023 0210 	bic.w	r2, r3, #16
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	b29b      	uxth	r3, r3
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 0210 	bic.w	r2, r3, #16
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	031b      	lsls	r3, r3, #12
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005350:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	621a      	str	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0303 	bic.w	r3, r3, #3
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800542a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	031b      	lsls	r3, r3, #12
 8005430:	b29b      	uxth	r3, r3
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800543e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	031b      	lsls	r3, r3, #12
 8005444:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	f043 0307 	orr.w	r3, r3, #7
 8005488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	431a      	orrs	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2201      	movs	r2, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	401a      	ands	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	431a      	orrs	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e06d      	b.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2f      	ldr	r2, [pc, #188]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d01d      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d018      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1a      	ldr	r2, [pc, #104]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a15      	ldr	r2, [pc, #84]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a11      	ldr	r2, [pc, #68]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10c      	bne.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40013400 	.word	0x40013400
 8005630:	40015000 	.word	0x40015000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40014000 	.word	0x40014000

08005640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e040      	b.n	8005710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc f914 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	; 0x24
 80056a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8b6 	bl	800582c <UART_SetConfig>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e022      	b.n	8005710 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa7e 	bl	8005bd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb05 	bl	8005d18 <UART_CheckIdleState>
 800570e:	4603      	mov	r3, r0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800572c:	2b20      	cmp	r3, #32
 800572e:	d178      	bne.n	8005822 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_Transmit+0x24>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e071      	b.n	8005824 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2221      	movs	r2, #33	; 0x21
 800574c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574e:	f7fc faa1 	bl	8001c94 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	d108      	bne.n	8005780 <HAL_UART_Transmit+0x68>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005788:	e030      	b.n	80057ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fb67 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e03c      	b.n	8005824 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057bc:	b292      	uxth	r2, r2
 80057be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	3302      	adds	r3, #2
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e008      	b.n	80057da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	781a      	ldrb	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	b292      	uxth	r2, r2
 80057d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1c8      	bne.n	800578a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2200      	movs	r2, #0
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fb30 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e005      	b.n	8005824 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e000      	b.n	8005824 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005822:	2302      	movs	r3, #2
  }
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b92      	ldr	r3, [pc, #584]	; (8005aa0 <UART_SetConfig+0x274>)
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	430b      	orrs	r3, r1
 8005862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	430a      	orrs	r2, r1
 800589c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a80      	ldr	r2, [pc, #512]	; (8005aa4 <UART_SetConfig+0x278>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d120      	bne.n	80058ea <UART_SetConfig+0xbe>
 80058a8:	4b7f      	ldr	r3, [pc, #508]	; (8005aa8 <UART_SetConfig+0x27c>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d817      	bhi.n	80058e4 <UART_SetConfig+0xb8>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x90>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058d9 	.word	0x080058d9
 80058c4:	080058df 	.word	0x080058df
 80058c8:	080058d3 	.word	0x080058d3
 80058cc:	2301      	movs	r3, #1
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	e0b5      	b.n	8005a3e <UART_SetConfig+0x212>
 80058d2:	2302      	movs	r3, #2
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e0b2      	b.n	8005a3e <UART_SetConfig+0x212>
 80058d8:	2304      	movs	r3, #4
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e0af      	b.n	8005a3e <UART_SetConfig+0x212>
 80058de:	2308      	movs	r3, #8
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e0ac      	b.n	8005a3e <UART_SetConfig+0x212>
 80058e4:	2310      	movs	r3, #16
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e0a9      	b.n	8005a3e <UART_SetConfig+0x212>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6f      	ldr	r2, [pc, #444]	; (8005aac <UART_SetConfig+0x280>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d124      	bne.n	800593e <UART_SetConfig+0x112>
 80058f4:	4b6c      	ldr	r3, [pc, #432]	; (8005aa8 <UART_SetConfig+0x27c>)
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005900:	d011      	beq.n	8005926 <UART_SetConfig+0xfa>
 8005902:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005906:	d817      	bhi.n	8005938 <UART_SetConfig+0x10c>
 8005908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800590c:	d011      	beq.n	8005932 <UART_SetConfig+0x106>
 800590e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005912:	d811      	bhi.n	8005938 <UART_SetConfig+0x10c>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <UART_SetConfig+0xf4>
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591c:	d006      	beq.n	800592c <UART_SetConfig+0x100>
 800591e:	e00b      	b.n	8005938 <UART_SetConfig+0x10c>
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e08b      	b.n	8005a3e <UART_SetConfig+0x212>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e088      	b.n	8005a3e <UART_SetConfig+0x212>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e085      	b.n	8005a3e <UART_SetConfig+0x212>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e082      	b.n	8005a3e <UART_SetConfig+0x212>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e07f      	b.n	8005a3e <UART_SetConfig+0x212>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a5b      	ldr	r2, [pc, #364]	; (8005ab0 <UART_SetConfig+0x284>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d124      	bne.n	8005992 <UART_SetConfig+0x166>
 8005948:	4b57      	ldr	r3, [pc, #348]	; (8005aa8 <UART_SetConfig+0x27c>)
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005950:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005954:	d011      	beq.n	800597a <UART_SetConfig+0x14e>
 8005956:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800595a:	d817      	bhi.n	800598c <UART_SetConfig+0x160>
 800595c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005960:	d011      	beq.n	8005986 <UART_SetConfig+0x15a>
 8005962:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005966:	d811      	bhi.n	800598c <UART_SetConfig+0x160>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <UART_SetConfig+0x148>
 800596c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005970:	d006      	beq.n	8005980 <UART_SetConfig+0x154>
 8005972:	e00b      	b.n	800598c <UART_SetConfig+0x160>
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e061      	b.n	8005a3e <UART_SetConfig+0x212>
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e05e      	b.n	8005a3e <UART_SetConfig+0x212>
 8005980:	2304      	movs	r3, #4
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e05b      	b.n	8005a3e <UART_SetConfig+0x212>
 8005986:	2308      	movs	r3, #8
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e058      	b.n	8005a3e <UART_SetConfig+0x212>
 800598c:	2310      	movs	r3, #16
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e055      	b.n	8005a3e <UART_SetConfig+0x212>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a47      	ldr	r2, [pc, #284]	; (8005ab4 <UART_SetConfig+0x288>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d124      	bne.n	80059e6 <UART_SetConfig+0x1ba>
 800599c:	4b42      	ldr	r3, [pc, #264]	; (8005aa8 <UART_SetConfig+0x27c>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80059a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059a8:	d011      	beq.n	80059ce <UART_SetConfig+0x1a2>
 80059aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ae:	d817      	bhi.n	80059e0 <UART_SetConfig+0x1b4>
 80059b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b4:	d011      	beq.n	80059da <UART_SetConfig+0x1ae>
 80059b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ba:	d811      	bhi.n	80059e0 <UART_SetConfig+0x1b4>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <UART_SetConfig+0x19c>
 80059c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c4:	d006      	beq.n	80059d4 <UART_SetConfig+0x1a8>
 80059c6:	e00b      	b.n	80059e0 <UART_SetConfig+0x1b4>
 80059c8:	2300      	movs	r3, #0
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e037      	b.n	8005a3e <UART_SetConfig+0x212>
 80059ce:	2302      	movs	r3, #2
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e034      	b.n	8005a3e <UART_SetConfig+0x212>
 80059d4:	2304      	movs	r3, #4
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e031      	b.n	8005a3e <UART_SetConfig+0x212>
 80059da:	2308      	movs	r3, #8
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e02e      	b.n	8005a3e <UART_SetConfig+0x212>
 80059e0:	2310      	movs	r3, #16
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e02b      	b.n	8005a3e <UART_SetConfig+0x212>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a33      	ldr	r2, [pc, #204]	; (8005ab8 <UART_SetConfig+0x28c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d124      	bne.n	8005a3a <UART_SetConfig+0x20e>
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <UART_SetConfig+0x27c>)
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80059f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059fc:	d011      	beq.n	8005a22 <UART_SetConfig+0x1f6>
 80059fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a02:	d817      	bhi.n	8005a34 <UART_SetConfig+0x208>
 8005a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a08:	d011      	beq.n	8005a2e <UART_SetConfig+0x202>
 8005a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a0e:	d811      	bhi.n	8005a34 <UART_SetConfig+0x208>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <UART_SetConfig+0x1f0>
 8005a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a18:	d006      	beq.n	8005a28 <UART_SetConfig+0x1fc>
 8005a1a:	e00b      	b.n	8005a34 <UART_SetConfig+0x208>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x212>
 8005a22:	2302      	movs	r3, #2
 8005a24:	77fb      	strb	r3, [r7, #31]
 8005a26:	e00a      	b.n	8005a3e <UART_SetConfig+0x212>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e007      	b.n	8005a3e <UART_SetConfig+0x212>
 8005a2e:	2308      	movs	r3, #8
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e004      	b.n	8005a3e <UART_SetConfig+0x212>
 8005a34:	2310      	movs	r3, #16
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e001      	b.n	8005a3e <UART_SetConfig+0x212>
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a46:	d16b      	bne.n	8005b20 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d838      	bhi.n	8005ac0 <UART_SetConfig+0x294>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x228>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	08005ac1 	.word	0x08005ac1
 8005a64:	08005a8f 	.word	0x08005a8f
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005ac1 	.word	0x08005ac1
 8005a74:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a78:	f7fd fe2a 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8005a7c:	61b8      	str	r0, [r7, #24]
        break;
 8005a7e:	e024      	b.n	8005aca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fd fe48 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8005a84:	61b8      	str	r0, [r7, #24]
        break;
 8005a86:	e020      	b.n	8005aca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <UART_SetConfig+0x290>)
 8005a8a:	61bb      	str	r3, [r7, #24]
        break;
 8005a8c:	e01d      	b.n	8005aca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fd fda9 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8005a92:	61b8      	str	r0, [r7, #24]
        break;
 8005a94:	e019      	b.n	8005aca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e015      	b.n	8005aca <UART_SetConfig+0x29e>
 8005a9e:	bf00      	nop
 8005aa0:	efff69f3 	.word	0xefff69f3
 8005aa4:	40013800 	.word	0x40013800
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40004400 	.word	0x40004400
 8005ab0:	40004800 	.word	0x40004800
 8005ab4:	40004c00 	.word	0x40004c00
 8005ab8:	40005000 	.word	0x40005000
 8005abc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	77bb      	strb	r3, [r7, #30]
        break;
 8005ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d073      	beq.n	8005bb8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	005a      	lsls	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	441a      	add	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b0f      	cmp	r3, #15
 8005aea:	d916      	bls.n	8005b1a <UART_SetConfig+0x2ee>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d212      	bcs.n	8005b1a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f023 030f 	bic.w	r3, r3, #15
 8005afc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	89fb      	ldrh	r3, [r7, #14]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	89fa      	ldrh	r2, [r7, #14]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	e04e      	b.n	8005bb8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	77bb      	strb	r3, [r7, #30]
 8005b1e:	e04b      	b.n	8005bb8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d827      	bhi.n	8005b76 <UART_SetConfig+0x34a>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0x300>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	08005b77 	.word	0x08005b77
 8005b3c:	08005b67 	.word	0x08005b67
 8005b40:	08005b77 	.word	0x08005b77
 8005b44:	08005b77 	.word	0x08005b77
 8005b48:	08005b77 	.word	0x08005b77
 8005b4c:	08005b6f 	.word	0x08005b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b50:	f7fd fdbe 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8005b54:	61b8      	str	r0, [r7, #24]
        break;
 8005b56:	e013      	b.n	8005b80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b58:	f7fd fddc 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8005b5c:	61b8      	str	r0, [r7, #24]
        break;
 8005b5e:	e00f      	b.n	8005b80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <UART_SetConfig+0x3a4>)
 8005b62:	61bb      	str	r3, [r7, #24]
        break;
 8005b64:	e00c      	b.n	8005b80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b66:	f7fd fd3d 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8005b6a:	61b8      	str	r0, [r7, #24]
        break;
 8005b6c:	e008      	b.n	8005b80 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b72:	61bb      	str	r3, [r7, #24]
        break;
 8005b74:	e004      	b.n	8005b80 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d018      	beq.n	8005bb8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	085a      	lsrs	r2, r3, #1
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	441a      	add	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b0f      	cmp	r3, #15
 8005b9e:	d909      	bls.n	8005bb4 <UART_SetConfig+0x388>
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba6:	d205      	bcs.n	8005bb4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	e001      	b.n	8005bb8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	007a1200 	.word	0x007a1200

08005bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d10a      	bne.n	8005cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b098      	sub	sp, #96	; 0x60
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d28:	f7fb ffb4 	bl	8001c94 <HAL_GetTick>
 8005d2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d12e      	bne.n	8005d9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	2200      	movs	r2, #0
 8005d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f88c 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d021      	beq.n	8005d9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
 8005d76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e062      	b.n	8005e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d149      	bne.n	8005e3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f856 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d03c      	beq.n	8005e3c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
 8005de2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3308      	adds	r3, #8
 8005e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e5      	bne.n	8005df4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e011      	b.n	8005e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3758      	adds	r7, #88	; 0x58
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e78:	e049      	b.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e80:	d045      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fb ff07 	bl	8001c94 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e048      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d031      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d110      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f838 	bl	8005f36 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e029      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee8:	d111      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f81e 	bl	8005f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e00f      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d0a6      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b095      	sub	sp, #84	; 0x54
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e6      	bne.n	8005f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3308      	adds	r3, #8
 8005f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d118      	bne.n	8005fde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f023 0310 	bic.w	r3, r3, #16
 8005fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e6      	bne.n	8005fac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ff2:	bf00      	nop
 8005ff4:	3754      	adds	r7, #84	; 0x54
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000010 	.word	0x20000010

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f002 fd36 	bl	8008a90 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08008ebc 	.word	0x08008ebc
 8006048:	08008ebc 	.word	0x08008ebc
 800604c:	08008ebc 	.word	0x08008ebc
 8006050:	08008ec0 	.word	0x08008ec0

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <__cvt>:
 8006064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	ec55 4b10 	vmov	r4, r5, d0
 800606c:	2d00      	cmp	r5, #0
 800606e:	460e      	mov	r6, r1
 8006070:	4619      	mov	r1, r3
 8006072:	462b      	mov	r3, r5
 8006074:	bfbb      	ittet	lt
 8006076:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800607a:	461d      	movlt	r5, r3
 800607c:	2300      	movge	r3, #0
 800607e:	232d      	movlt	r3, #45	; 0x2d
 8006080:	700b      	strb	r3, [r1, #0]
 8006082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006088:	4691      	mov	r9, r2
 800608a:	f023 0820 	bic.w	r8, r3, #32
 800608e:	bfbc      	itt	lt
 8006090:	4622      	movlt	r2, r4
 8006092:	4614      	movlt	r4, r2
 8006094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006098:	d005      	beq.n	80060a6 <__cvt+0x42>
 800609a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800609e:	d100      	bne.n	80060a2 <__cvt+0x3e>
 80060a0:	3601      	adds	r6, #1
 80060a2:	2102      	movs	r1, #2
 80060a4:	e000      	b.n	80060a8 <__cvt+0x44>
 80060a6:	2103      	movs	r1, #3
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	ab02      	add	r3, sp, #8
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	ec45 4b10 	vmov	d0, r4, r5
 80060b4:	4653      	mov	r3, sl
 80060b6:	4632      	mov	r2, r6
 80060b8:	f000 fcca 	bl	8006a50 <_dtoa_r>
 80060bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060c0:	4607      	mov	r7, r0
 80060c2:	d102      	bne.n	80060ca <__cvt+0x66>
 80060c4:	f019 0f01 	tst.w	r9, #1
 80060c8:	d022      	beq.n	8006110 <__cvt+0xac>
 80060ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060ce:	eb07 0906 	add.w	r9, r7, r6
 80060d2:	d110      	bne.n	80060f6 <__cvt+0x92>
 80060d4:	783b      	ldrb	r3, [r7, #0]
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d10a      	bne.n	80060f0 <__cvt+0x8c>
 80060da:	2200      	movs	r2, #0
 80060dc:	2300      	movs	r3, #0
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e6:	b918      	cbnz	r0, 80060f0 <__cvt+0x8c>
 80060e8:	f1c6 0601 	rsb	r6, r6, #1
 80060ec:	f8ca 6000 	str.w	r6, [sl]
 80060f0:	f8da 3000 	ldr.w	r3, [sl]
 80060f4:	4499      	add	r9, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	2300      	movs	r3, #0
 80060fa:	4620      	mov	r0, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7fa fceb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006102:	b108      	cbz	r0, 8006108 <__cvt+0xa4>
 8006104:	f8cd 900c 	str.w	r9, [sp, #12]
 8006108:	2230      	movs	r2, #48	; 0x30
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	454b      	cmp	r3, r9
 800610e:	d307      	bcc.n	8006120 <__cvt+0xbc>
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006114:	1bdb      	subs	r3, r3, r7
 8006116:	4638      	mov	r0, r7
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	b004      	add	sp, #16
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	1c59      	adds	r1, r3, #1
 8006122:	9103      	str	r1, [sp, #12]
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e7f0      	b.n	800610a <__cvt+0xa6>

08006128 <__exponent>:
 8006128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612a:	4603      	mov	r3, r0
 800612c:	2900      	cmp	r1, #0
 800612e:	bfb8      	it	lt
 8006130:	4249      	neglt	r1, r1
 8006132:	f803 2b02 	strb.w	r2, [r3], #2
 8006136:	bfb4      	ite	lt
 8006138:	222d      	movlt	r2, #45	; 0x2d
 800613a:	222b      	movge	r2, #43	; 0x2b
 800613c:	2909      	cmp	r1, #9
 800613e:	7042      	strb	r2, [r0, #1]
 8006140:	dd2a      	ble.n	8006198 <__exponent+0x70>
 8006142:	f10d 0407 	add.w	r4, sp, #7
 8006146:	46a4      	mov	ip, r4
 8006148:	270a      	movs	r7, #10
 800614a:	46a6      	mov	lr, r4
 800614c:	460a      	mov	r2, r1
 800614e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006152:	fb07 1516 	mls	r5, r7, r6, r1
 8006156:	3530      	adds	r5, #48	; 0x30
 8006158:	2a63      	cmp	r2, #99	; 0x63
 800615a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800615e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006162:	4631      	mov	r1, r6
 8006164:	dcf1      	bgt.n	800614a <__exponent+0x22>
 8006166:	3130      	adds	r1, #48	; 0x30
 8006168:	f1ae 0502 	sub.w	r5, lr, #2
 800616c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006170:	1c44      	adds	r4, r0, #1
 8006172:	4629      	mov	r1, r5
 8006174:	4561      	cmp	r1, ip
 8006176:	d30a      	bcc.n	800618e <__exponent+0x66>
 8006178:	f10d 0209 	add.w	r2, sp, #9
 800617c:	eba2 020e 	sub.w	r2, r2, lr
 8006180:	4565      	cmp	r5, ip
 8006182:	bf88      	it	hi
 8006184:	2200      	movhi	r2, #0
 8006186:	4413      	add	r3, r2
 8006188:	1a18      	subs	r0, r3, r0
 800618a:	b003      	add	sp, #12
 800618c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800618e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006192:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006196:	e7ed      	b.n	8006174 <__exponent+0x4c>
 8006198:	2330      	movs	r3, #48	; 0x30
 800619a:	3130      	adds	r1, #48	; 0x30
 800619c:	7083      	strb	r3, [r0, #2]
 800619e:	70c1      	strb	r1, [r0, #3]
 80061a0:	1d03      	adds	r3, r0, #4
 80061a2:	e7f1      	b.n	8006188 <__exponent+0x60>

080061a4 <_printf_float>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	ed2d 8b02 	vpush	{d8}
 80061ac:	b08d      	sub	sp, #52	; 0x34
 80061ae:	460c      	mov	r4, r1
 80061b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80061b4:	4616      	mov	r6, r2
 80061b6:	461f      	mov	r7, r3
 80061b8:	4605      	mov	r5, r0
 80061ba:	f001 fb2d 	bl	8007818 <_localeconv_r>
 80061be:	f8d0 a000 	ldr.w	sl, [r0]
 80061c2:	4650      	mov	r0, sl
 80061c4:	f7fa f80c 	bl	80001e0 <strlen>
 80061c8:	2300      	movs	r3, #0
 80061ca:	930a      	str	r3, [sp, #40]	; 0x28
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	f8d8 3000 	ldr.w	r3, [r8]
 80061d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80061d8:	3307      	adds	r3, #7
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	f103 0208 	add.w	r2, r3, #8
 80061e2:	f8c8 2000 	str.w	r2, [r8]
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80061ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80061f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80061fc:	ee08 0a10 	vmov	s16, r0
 8006200:	4b9f      	ldr	r3, [pc, #636]	; (8006480 <_printf_float+0x2dc>)
 8006202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800620a:	f7fa fc97 	bl	8000b3c <__aeabi_dcmpun>
 800620e:	bb88      	cbnz	r0, 8006274 <_printf_float+0xd0>
 8006210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006214:	4b9a      	ldr	r3, [pc, #616]	; (8006480 <_printf_float+0x2dc>)
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	f7fa fc71 	bl	8000b00 <__aeabi_dcmple>
 800621e:	bb48      	cbnz	r0, 8006274 <_printf_float+0xd0>
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa fc60 	bl	8000aec <__aeabi_dcmplt>
 800622c:	b110      	cbz	r0, 8006234 <_printf_float+0x90>
 800622e:	232d      	movs	r3, #45	; 0x2d
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	4b93      	ldr	r3, [pc, #588]	; (8006484 <_printf_float+0x2e0>)
 8006236:	4894      	ldr	r0, [pc, #592]	; (8006488 <_printf_float+0x2e4>)
 8006238:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800623c:	bf94      	ite	ls
 800623e:	4698      	movls	r8, r3
 8006240:	4680      	movhi	r8, r0
 8006242:	2303      	movs	r3, #3
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	9b05      	ldr	r3, [sp, #20]
 8006248:	f023 0204 	bic.w	r2, r3, #4
 800624c:	6022      	str	r2, [r4, #0]
 800624e:	f04f 0900 	mov.w	r9, #0
 8006252:	9700      	str	r7, [sp, #0]
 8006254:	4633      	mov	r3, r6
 8006256:	aa0b      	add	r2, sp, #44	; 0x2c
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 f9d8 	bl	8006610 <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	f040 8090 	bne.w	8006386 <_printf_float+0x1e2>
 8006266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800626a:	b00d      	add	sp, #52	; 0x34
 800626c:	ecbd 8b02 	vpop	{d8}
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	4640      	mov	r0, r8
 800627a:	4649      	mov	r1, r9
 800627c:	f7fa fc5e 	bl	8000b3c <__aeabi_dcmpun>
 8006280:	b140      	cbz	r0, 8006294 <_printf_float+0xf0>
 8006282:	464b      	mov	r3, r9
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfbc      	itt	lt
 8006288:	232d      	movlt	r3, #45	; 0x2d
 800628a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800628e:	487f      	ldr	r0, [pc, #508]	; (800648c <_printf_float+0x2e8>)
 8006290:	4b7f      	ldr	r3, [pc, #508]	; (8006490 <_printf_float+0x2ec>)
 8006292:	e7d1      	b.n	8006238 <_printf_float+0x94>
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800629a:	9206      	str	r2, [sp, #24]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	d13f      	bne.n	8006320 <_printf_float+0x17c>
 80062a0:	2306      	movs	r3, #6
 80062a2:	6063      	str	r3, [r4, #4]
 80062a4:	9b05      	ldr	r3, [sp, #20]
 80062a6:	6861      	ldr	r1, [r4, #4]
 80062a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062ac:	2300      	movs	r3, #0
 80062ae:	9303      	str	r3, [sp, #12]
 80062b0:	ab0a      	add	r3, sp, #40	; 0x28
 80062b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80062b6:	ab09      	add	r3, sp, #36	; 0x24
 80062b8:	ec49 8b10 	vmov	d0, r8, r9
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062c4:	4628      	mov	r0, r5
 80062c6:	f7ff fecd 	bl	8006064 <__cvt>
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ce:	2b47      	cmp	r3, #71	; 0x47
 80062d0:	4680      	mov	r8, r0
 80062d2:	d108      	bne.n	80062e6 <_printf_float+0x142>
 80062d4:	1cc8      	adds	r0, r1, #3
 80062d6:	db02      	blt.n	80062de <_printf_float+0x13a>
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	dd41      	ble.n	8006362 <_printf_float+0x1be>
 80062de:	f1ab 0b02 	sub.w	fp, fp, #2
 80062e2:	fa5f fb8b 	uxtb.w	fp, fp
 80062e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062ea:	d820      	bhi.n	800632e <_printf_float+0x18a>
 80062ec:	3901      	subs	r1, #1
 80062ee:	465a      	mov	r2, fp
 80062f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062f4:	9109      	str	r1, [sp, #36]	; 0x24
 80062f6:	f7ff ff17 	bl	8006128 <__exponent>
 80062fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fc:	1813      	adds	r3, r2, r0
 80062fe:	2a01      	cmp	r2, #1
 8006300:	4681      	mov	r9, r0
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	dc02      	bgt.n	800630c <_printf_float+0x168>
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	d501      	bpl.n	8006310 <_printf_float+0x16c>
 800630c:	3301      	adds	r3, #1
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006314:	2b00      	cmp	r3, #0
 8006316:	d09c      	beq.n	8006252 <_printf_float+0xae>
 8006318:	232d      	movs	r3, #45	; 0x2d
 800631a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800631e:	e798      	b.n	8006252 <_printf_float+0xae>
 8006320:	9a06      	ldr	r2, [sp, #24]
 8006322:	2a47      	cmp	r2, #71	; 0x47
 8006324:	d1be      	bne.n	80062a4 <_printf_float+0x100>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1bc      	bne.n	80062a4 <_printf_float+0x100>
 800632a:	2301      	movs	r3, #1
 800632c:	e7b9      	b.n	80062a2 <_printf_float+0xfe>
 800632e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006332:	d118      	bne.n	8006366 <_printf_float+0x1c2>
 8006334:	2900      	cmp	r1, #0
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	dd0b      	ble.n	8006352 <_printf_float+0x1ae>
 800633a:	6121      	str	r1, [r4, #16]
 800633c:	b913      	cbnz	r3, 8006344 <_printf_float+0x1a0>
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	07d0      	lsls	r0, r2, #31
 8006342:	d502      	bpl.n	800634a <_printf_float+0x1a6>
 8006344:	3301      	adds	r3, #1
 8006346:	440b      	add	r3, r1
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	65a1      	str	r1, [r4, #88]	; 0x58
 800634c:	f04f 0900 	mov.w	r9, #0
 8006350:	e7de      	b.n	8006310 <_printf_float+0x16c>
 8006352:	b913      	cbnz	r3, 800635a <_printf_float+0x1b6>
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	07d2      	lsls	r2, r2, #31
 8006358:	d501      	bpl.n	800635e <_printf_float+0x1ba>
 800635a:	3302      	adds	r3, #2
 800635c:	e7f4      	b.n	8006348 <_printf_float+0x1a4>
 800635e:	2301      	movs	r3, #1
 8006360:	e7f2      	b.n	8006348 <_printf_float+0x1a4>
 8006362:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	4299      	cmp	r1, r3
 800636a:	db05      	blt.n	8006378 <_printf_float+0x1d4>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	6121      	str	r1, [r4, #16]
 8006370:	07d8      	lsls	r0, r3, #31
 8006372:	d5ea      	bpl.n	800634a <_printf_float+0x1a6>
 8006374:	1c4b      	adds	r3, r1, #1
 8006376:	e7e7      	b.n	8006348 <_printf_float+0x1a4>
 8006378:	2900      	cmp	r1, #0
 800637a:	bfd4      	ite	le
 800637c:	f1c1 0202 	rsble	r2, r1, #2
 8006380:	2201      	movgt	r2, #1
 8006382:	4413      	add	r3, r2
 8006384:	e7e0      	b.n	8006348 <_printf_float+0x1a4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	055a      	lsls	r2, r3, #21
 800638a:	d407      	bmi.n	800639c <_printf_float+0x1f8>
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	4642      	mov	r2, r8
 8006390:	4631      	mov	r1, r6
 8006392:	4628      	mov	r0, r5
 8006394:	47b8      	blx	r7
 8006396:	3001      	adds	r0, #1
 8006398:	d12c      	bne.n	80063f4 <_printf_float+0x250>
 800639a:	e764      	b.n	8006266 <_printf_float+0xc2>
 800639c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063a0:	f240 80e0 	bls.w	8006564 <_printf_float+0x3c0>
 80063a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063a8:	2200      	movs	r2, #0
 80063aa:	2300      	movs	r3, #0
 80063ac:	f7fa fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d034      	beq.n	800641e <_printf_float+0x27a>
 80063b4:	4a37      	ldr	r2, [pc, #220]	; (8006494 <_printf_float+0x2f0>)
 80063b6:	2301      	movs	r3, #1
 80063b8:	4631      	mov	r1, r6
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	f43f af51 	beq.w	8006266 <_printf_float+0xc2>
 80063c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c8:	429a      	cmp	r2, r3
 80063ca:	db02      	blt.n	80063d2 <_printf_float+0x22e>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07d8      	lsls	r0, r3, #31
 80063d0:	d510      	bpl.n	80063f4 <_printf_float+0x250>
 80063d2:	ee18 3a10 	vmov	r3, s16
 80063d6:	4652      	mov	r2, sl
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af41 	beq.w	8006266 <_printf_float+0xc2>
 80063e4:	f04f 0800 	mov.w	r8, #0
 80063e8:	f104 091a 	add.w	r9, r4, #26
 80063ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ee:	3b01      	subs	r3, #1
 80063f0:	4543      	cmp	r3, r8
 80063f2:	dc09      	bgt.n	8006408 <_printf_float+0x264>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	079b      	lsls	r3, r3, #30
 80063f8:	f100 8105 	bmi.w	8006606 <_printf_float+0x462>
 80063fc:	68e0      	ldr	r0, [r4, #12]
 80063fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006400:	4298      	cmp	r0, r3
 8006402:	bfb8      	it	lt
 8006404:	4618      	movlt	r0, r3
 8006406:	e730      	b.n	800626a <_printf_float+0xc6>
 8006408:	2301      	movs	r3, #1
 800640a:	464a      	mov	r2, r9
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f af27 	beq.w	8006266 <_printf_float+0xc2>
 8006418:	f108 0801 	add.w	r8, r8, #1
 800641c:	e7e6      	b.n	80063ec <_printf_float+0x248>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	dc39      	bgt.n	8006498 <_printf_float+0x2f4>
 8006424:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <_printf_float+0x2f0>)
 8006426:	2301      	movs	r3, #1
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	f43f af19 	beq.w	8006266 <_printf_float+0xc2>
 8006434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006438:	4313      	orrs	r3, r2
 800643a:	d102      	bne.n	8006442 <_printf_float+0x29e>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	07d9      	lsls	r1, r3, #31
 8006440:	d5d8      	bpl.n	80063f4 <_printf_float+0x250>
 8006442:	ee18 3a10 	vmov	r3, s16
 8006446:	4652      	mov	r2, sl
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	f43f af09 	beq.w	8006266 <_printf_float+0xc2>
 8006454:	f04f 0900 	mov.w	r9, #0
 8006458:	f104 0a1a 	add.w	sl, r4, #26
 800645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645e:	425b      	negs	r3, r3
 8006460:	454b      	cmp	r3, r9
 8006462:	dc01      	bgt.n	8006468 <_printf_float+0x2c4>
 8006464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006466:	e792      	b.n	800638e <_printf_float+0x1ea>
 8006468:	2301      	movs	r3, #1
 800646a:	4652      	mov	r2, sl
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	f43f aef7 	beq.w	8006266 <_printf_float+0xc2>
 8006478:	f109 0901 	add.w	r9, r9, #1
 800647c:	e7ee      	b.n	800645c <_printf_float+0x2b8>
 800647e:	bf00      	nop
 8006480:	7fefffff 	.word	0x7fefffff
 8006484:	08008ae4 	.word	0x08008ae4
 8006488:	08008ae8 	.word	0x08008ae8
 800648c:	08008af0 	.word	0x08008af0
 8006490:	08008aec 	.word	0x08008aec
 8006494:	08008af4 	.word	0x08008af4
 8006498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800649c:	429a      	cmp	r2, r3
 800649e:	bfa8      	it	ge
 80064a0:	461a      	movge	r2, r3
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	4691      	mov	r9, r2
 80064a6:	dc37      	bgt.n	8006518 <_printf_float+0x374>
 80064a8:	f04f 0b00 	mov.w	fp, #0
 80064ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064b0:	f104 021a 	add.w	r2, r4, #26
 80064b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064b6:	9305      	str	r3, [sp, #20]
 80064b8:	eba3 0309 	sub.w	r3, r3, r9
 80064bc:	455b      	cmp	r3, fp
 80064be:	dc33      	bgt.n	8006528 <_printf_float+0x384>
 80064c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064c4:	429a      	cmp	r2, r3
 80064c6:	db3b      	blt.n	8006540 <_printf_float+0x39c>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	07da      	lsls	r2, r3, #31
 80064cc:	d438      	bmi.n	8006540 <_printf_float+0x39c>
 80064ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d0:	9a05      	ldr	r2, [sp, #20]
 80064d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d4:	1a9a      	subs	r2, r3, r2
 80064d6:	eba3 0901 	sub.w	r9, r3, r1
 80064da:	4591      	cmp	r9, r2
 80064dc:	bfa8      	it	ge
 80064de:	4691      	movge	r9, r2
 80064e0:	f1b9 0f00 	cmp.w	r9, #0
 80064e4:	dc35      	bgt.n	8006552 <_printf_float+0x3ae>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064ee:	f104 0a1a 	add.w	sl, r4, #26
 80064f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	eba3 0309 	sub.w	r3, r3, r9
 80064fc:	4543      	cmp	r3, r8
 80064fe:	f77f af79 	ble.w	80063f4 <_printf_float+0x250>
 8006502:	2301      	movs	r3, #1
 8006504:	4652      	mov	r2, sl
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	f43f aeaa 	beq.w	8006266 <_printf_float+0xc2>
 8006512:	f108 0801 	add.w	r8, r8, #1
 8006516:	e7ec      	b.n	80064f2 <_printf_float+0x34e>
 8006518:	4613      	mov	r3, r2
 800651a:	4631      	mov	r1, r6
 800651c:	4642      	mov	r2, r8
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	d1c0      	bne.n	80064a8 <_printf_float+0x304>
 8006526:	e69e      	b.n	8006266 <_printf_float+0xc2>
 8006528:	2301      	movs	r3, #1
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	9205      	str	r2, [sp, #20]
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f ae97 	beq.w	8006266 <_printf_float+0xc2>
 8006538:	9a05      	ldr	r2, [sp, #20]
 800653a:	f10b 0b01 	add.w	fp, fp, #1
 800653e:	e7b9      	b.n	80064b4 <_printf_float+0x310>
 8006540:	ee18 3a10 	vmov	r3, s16
 8006544:	4652      	mov	r2, sl
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d1be      	bne.n	80064ce <_printf_float+0x32a>
 8006550:	e689      	b.n	8006266 <_printf_float+0xc2>
 8006552:	9a05      	ldr	r2, [sp, #20]
 8006554:	464b      	mov	r3, r9
 8006556:	4442      	add	r2, r8
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	d1c1      	bne.n	80064e6 <_printf_float+0x342>
 8006562:	e680      	b.n	8006266 <_printf_float+0xc2>
 8006564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006566:	2a01      	cmp	r2, #1
 8006568:	dc01      	bgt.n	800656e <_printf_float+0x3ca>
 800656a:	07db      	lsls	r3, r3, #31
 800656c:	d538      	bpl.n	80065e0 <_printf_float+0x43c>
 800656e:	2301      	movs	r3, #1
 8006570:	4642      	mov	r2, r8
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae74 	beq.w	8006266 <_printf_float+0xc2>
 800657e:	ee18 3a10 	vmov	r3, s16
 8006582:	4652      	mov	r2, sl
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f ae6b 	beq.w	8006266 <_printf_float+0xc2>
 8006590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	f7fa fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800659c:	b9d8      	cbnz	r0, 80065d6 <_printf_float+0x432>
 800659e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a0:	f108 0201 	add.w	r2, r8, #1
 80065a4:	3b01      	subs	r3, #1
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	d10e      	bne.n	80065ce <_printf_float+0x42a>
 80065b0:	e659      	b.n	8006266 <_printf_float+0xc2>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4652      	mov	r2, sl
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f ae52 	beq.w	8006266 <_printf_float+0xc2>
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c8:	3b01      	subs	r3, #1
 80065ca:	4543      	cmp	r3, r8
 80065cc:	dcf1      	bgt.n	80065b2 <_printf_float+0x40e>
 80065ce:	464b      	mov	r3, r9
 80065d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065d4:	e6dc      	b.n	8006390 <_printf_float+0x1ec>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	f104 0a1a 	add.w	sl, r4, #26
 80065de:	e7f2      	b.n	80065c6 <_printf_float+0x422>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4642      	mov	r2, r8
 80065e4:	e7df      	b.n	80065a6 <_printf_float+0x402>
 80065e6:	2301      	movs	r3, #1
 80065e8:	464a      	mov	r2, r9
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	f43f ae38 	beq.w	8006266 <_printf_float+0xc2>
 80065f6:	f108 0801 	add.w	r8, r8, #1
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065fe:	1a5b      	subs	r3, r3, r1
 8006600:	4543      	cmp	r3, r8
 8006602:	dcf0      	bgt.n	80065e6 <_printf_float+0x442>
 8006604:	e6fa      	b.n	80063fc <_printf_float+0x258>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 0919 	add.w	r9, r4, #25
 800660e:	e7f4      	b.n	80065fa <_printf_float+0x456>

08006610 <_printf_common>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	4616      	mov	r6, r2
 8006616:	4699      	mov	r9, r3
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006620:	4293      	cmp	r3, r2
 8006622:	bfb8      	it	lt
 8006624:	4613      	movlt	r3, r2
 8006626:	6033      	str	r3, [r6, #0]
 8006628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b10a      	cbz	r2, 8006636 <_printf_common+0x26>
 8006632:	3301      	adds	r3, #1
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	0699      	lsls	r1, r3, #26
 800663a:	bf42      	ittt	mi
 800663c:	6833      	ldrmi	r3, [r6, #0]
 800663e:	3302      	addmi	r3, #2
 8006640:	6033      	strmi	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	f015 0506 	ands.w	r5, r5, #6
 8006648:	d106      	bne.n	8006658 <_printf_common+0x48>
 800664a:	f104 0a19 	add.w	sl, r4, #25
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	6832      	ldr	r2, [r6, #0]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc26      	bgt.n	80066a6 <_printf_common+0x96>
 8006658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800665c:	1e13      	subs	r3, r2, #0
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	bf18      	it	ne
 8006662:	2301      	movne	r3, #1
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d42b      	bmi.n	80066c0 <_printf_common+0xb0>
 8006668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800666c:	4649      	mov	r1, r9
 800666e:	4638      	mov	r0, r7
 8006670:	47c0      	blx	r8
 8006672:	3001      	adds	r0, #1
 8006674:	d01e      	beq.n	80066b4 <_printf_common+0xa4>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	68e5      	ldr	r5, [r4, #12]
 800667a:	6832      	ldr	r2, [r6, #0]
 800667c:	f003 0306 	and.w	r3, r3, #6
 8006680:	2b04      	cmp	r3, #4
 8006682:	bf08      	it	eq
 8006684:	1aad      	subeq	r5, r5, r2
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	6922      	ldr	r2, [r4, #16]
 800668a:	bf0c      	ite	eq
 800668c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006690:	2500      	movne	r5, #0
 8006692:	4293      	cmp	r3, r2
 8006694:	bfc4      	itt	gt
 8006696:	1a9b      	subgt	r3, r3, r2
 8006698:	18ed      	addgt	r5, r5, r3
 800669a:	2600      	movs	r6, #0
 800669c:	341a      	adds	r4, #26
 800669e:	42b5      	cmp	r5, r6
 80066a0:	d11a      	bne.n	80066d8 <_printf_common+0xc8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e008      	b.n	80066b8 <_printf_common+0xa8>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4652      	mov	r2, sl
 80066aa:	4649      	mov	r1, r9
 80066ac:	4638      	mov	r0, r7
 80066ae:	47c0      	blx	r8
 80066b0:	3001      	adds	r0, #1
 80066b2:	d103      	bne.n	80066bc <_printf_common+0xac>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	3501      	adds	r5, #1
 80066be:	e7c6      	b.n	800664e <_printf_common+0x3e>
 80066c0:	18e1      	adds	r1, r4, r3
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	2030      	movs	r0, #48	; 0x30
 80066c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066ca:	4422      	add	r2, r4
 80066cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066d4:	3302      	adds	r3, #2
 80066d6:	e7c7      	b.n	8006668 <_printf_common+0x58>
 80066d8:	2301      	movs	r3, #1
 80066da:	4622      	mov	r2, r4
 80066dc:	4649      	mov	r1, r9
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0e6      	beq.n	80066b4 <_printf_common+0xa4>
 80066e6:	3601      	adds	r6, #1
 80066e8:	e7d9      	b.n	800669e <_printf_common+0x8e>
	...

080066ec <_printf_i>:
 80066ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	7e0f      	ldrb	r7, [r1, #24]
 80066f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066f4:	2f78      	cmp	r7, #120	; 0x78
 80066f6:	4691      	mov	r9, r2
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	469a      	mov	sl, r3
 80066fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006702:	d807      	bhi.n	8006714 <_printf_i+0x28>
 8006704:	2f62      	cmp	r7, #98	; 0x62
 8006706:	d80a      	bhi.n	800671e <_printf_i+0x32>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f000 80d8 	beq.w	80068be <_printf_i+0x1d2>
 800670e:	2f58      	cmp	r7, #88	; 0x58
 8006710:	f000 80a3 	beq.w	800685a <_printf_i+0x16e>
 8006714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800671c:	e03a      	b.n	8006794 <_printf_i+0xa8>
 800671e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006722:	2b15      	cmp	r3, #21
 8006724:	d8f6      	bhi.n	8006714 <_printf_i+0x28>
 8006726:	a101      	add	r1, pc, #4	; (adr r1, 800672c <_printf_i+0x40>)
 8006728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800672c:	08006785 	.word	0x08006785
 8006730:	08006799 	.word	0x08006799
 8006734:	08006715 	.word	0x08006715
 8006738:	08006715 	.word	0x08006715
 800673c:	08006715 	.word	0x08006715
 8006740:	08006715 	.word	0x08006715
 8006744:	08006799 	.word	0x08006799
 8006748:	08006715 	.word	0x08006715
 800674c:	08006715 	.word	0x08006715
 8006750:	08006715 	.word	0x08006715
 8006754:	08006715 	.word	0x08006715
 8006758:	080068a5 	.word	0x080068a5
 800675c:	080067c9 	.word	0x080067c9
 8006760:	08006887 	.word	0x08006887
 8006764:	08006715 	.word	0x08006715
 8006768:	08006715 	.word	0x08006715
 800676c:	080068c7 	.word	0x080068c7
 8006770:	08006715 	.word	0x08006715
 8006774:	080067c9 	.word	0x080067c9
 8006778:	08006715 	.word	0x08006715
 800677c:	08006715 	.word	0x08006715
 8006780:	0800688f 	.word	0x0800688f
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	602a      	str	r2, [r5, #0]
 800678c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006794:	2301      	movs	r3, #1
 8006796:	e0a3      	b.n	80068e0 <_printf_i+0x1f4>
 8006798:	6820      	ldr	r0, [r4, #0]
 800679a:	6829      	ldr	r1, [r5, #0]
 800679c:	0606      	lsls	r6, r0, #24
 800679e:	f101 0304 	add.w	r3, r1, #4
 80067a2:	d50a      	bpl.n	80067ba <_printf_i+0xce>
 80067a4:	680e      	ldr	r6, [r1, #0]
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	2e00      	cmp	r6, #0
 80067aa:	da03      	bge.n	80067b4 <_printf_i+0xc8>
 80067ac:	232d      	movs	r3, #45	; 0x2d
 80067ae:	4276      	negs	r6, r6
 80067b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b4:	485e      	ldr	r0, [pc, #376]	; (8006930 <_printf_i+0x244>)
 80067b6:	230a      	movs	r3, #10
 80067b8:	e019      	b.n	80067ee <_printf_i+0x102>
 80067ba:	680e      	ldr	r6, [r1, #0]
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067c2:	bf18      	it	ne
 80067c4:	b236      	sxthne	r6, r6
 80067c6:	e7ef      	b.n	80067a8 <_printf_i+0xbc>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	6029      	str	r1, [r5, #0]
 80067d0:	0601      	lsls	r1, r0, #24
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0xec>
 80067d4:	681e      	ldr	r6, [r3, #0]
 80067d6:	e002      	b.n	80067de <_printf_i+0xf2>
 80067d8:	0646      	lsls	r6, r0, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0xe8>
 80067dc:	881e      	ldrh	r6, [r3, #0]
 80067de:	4854      	ldr	r0, [pc, #336]	; (8006930 <_printf_i+0x244>)
 80067e0:	2f6f      	cmp	r7, #111	; 0x6f
 80067e2:	bf0c      	ite	eq
 80067e4:	2308      	moveq	r3, #8
 80067e6:	230a      	movne	r3, #10
 80067e8:	2100      	movs	r1, #0
 80067ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ee:	6865      	ldr	r5, [r4, #4]
 80067f0:	60a5      	str	r5, [r4, #8]
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	bfa2      	ittt	ge
 80067f6:	6821      	ldrge	r1, [r4, #0]
 80067f8:	f021 0104 	bicge.w	r1, r1, #4
 80067fc:	6021      	strge	r1, [r4, #0]
 80067fe:	b90e      	cbnz	r6, 8006804 <_printf_i+0x118>
 8006800:	2d00      	cmp	r5, #0
 8006802:	d04d      	beq.n	80068a0 <_printf_i+0x1b4>
 8006804:	4615      	mov	r5, r2
 8006806:	fbb6 f1f3 	udiv	r1, r6, r3
 800680a:	fb03 6711 	mls	r7, r3, r1, r6
 800680e:	5dc7      	ldrb	r7, [r0, r7]
 8006810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006814:	4637      	mov	r7, r6
 8006816:	42bb      	cmp	r3, r7
 8006818:	460e      	mov	r6, r1
 800681a:	d9f4      	bls.n	8006806 <_printf_i+0x11a>
 800681c:	2b08      	cmp	r3, #8
 800681e:	d10b      	bne.n	8006838 <_printf_i+0x14c>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	07de      	lsls	r6, r3, #31
 8006824:	d508      	bpl.n	8006838 <_printf_i+0x14c>
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	6861      	ldr	r1, [r4, #4]
 800682a:	4299      	cmp	r1, r3
 800682c:	bfde      	ittt	le
 800682e:	2330      	movle	r3, #48	; 0x30
 8006830:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006834:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006838:	1b52      	subs	r2, r2, r5
 800683a:	6122      	str	r2, [r4, #16]
 800683c:	f8cd a000 	str.w	sl, [sp]
 8006840:	464b      	mov	r3, r9
 8006842:	aa03      	add	r2, sp, #12
 8006844:	4621      	mov	r1, r4
 8006846:	4640      	mov	r0, r8
 8006848:	f7ff fee2 	bl	8006610 <_printf_common>
 800684c:	3001      	adds	r0, #1
 800684e:	d14c      	bne.n	80068ea <_printf_i+0x1fe>
 8006850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006854:	b004      	add	sp, #16
 8006856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685a:	4835      	ldr	r0, [pc, #212]	; (8006930 <_printf_i+0x244>)
 800685c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	f851 6b04 	ldr.w	r6, [r1], #4
 8006868:	6029      	str	r1, [r5, #0]
 800686a:	061d      	lsls	r5, r3, #24
 800686c:	d514      	bpl.n	8006898 <_printf_i+0x1ac>
 800686e:	07df      	lsls	r7, r3, #31
 8006870:	bf44      	itt	mi
 8006872:	f043 0320 	orrmi.w	r3, r3, #32
 8006876:	6023      	strmi	r3, [r4, #0]
 8006878:	b91e      	cbnz	r6, 8006882 <_printf_i+0x196>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	f023 0320 	bic.w	r3, r3, #32
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	2310      	movs	r3, #16
 8006884:	e7b0      	b.n	80067e8 <_printf_i+0xfc>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f043 0320 	orr.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	2378      	movs	r3, #120	; 0x78
 8006890:	4828      	ldr	r0, [pc, #160]	; (8006934 <_printf_i+0x248>)
 8006892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006896:	e7e3      	b.n	8006860 <_printf_i+0x174>
 8006898:	0659      	lsls	r1, r3, #25
 800689a:	bf48      	it	mi
 800689c:	b2b6      	uxthmi	r6, r6
 800689e:	e7e6      	b.n	800686e <_printf_i+0x182>
 80068a0:	4615      	mov	r5, r2
 80068a2:	e7bb      	b.n	800681c <_printf_i+0x130>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6826      	ldr	r6, [r4, #0]
 80068a8:	6961      	ldr	r1, [r4, #20]
 80068aa:	1d18      	adds	r0, r3, #4
 80068ac:	6028      	str	r0, [r5, #0]
 80068ae:	0635      	lsls	r5, r6, #24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0x1cc>
 80068b4:	6019      	str	r1, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0x1d2>
 80068b8:	0670      	lsls	r0, r6, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0x1c8>
 80068bc:	8019      	strh	r1, [r3, #0]
 80068be:	2300      	movs	r3, #0
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	4615      	mov	r5, r2
 80068c4:	e7ba      	b.n	800683c <_printf_i+0x150>
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	602a      	str	r2, [r5, #0]
 80068cc:	681d      	ldr	r5, [r3, #0]
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	2100      	movs	r1, #0
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7f9 fc8c 	bl	80001f0 <memchr>
 80068d8:	b108      	cbz	r0, 80068de <_printf_i+0x1f2>
 80068da:	1b40      	subs	r0, r0, r5
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	2300      	movs	r3, #0
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e8:	e7a8      	b.n	800683c <_printf_i+0x150>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	462a      	mov	r2, r5
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d0ab      	beq.n	8006850 <_printf_i+0x164>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	079b      	lsls	r3, r3, #30
 80068fc:	d413      	bmi.n	8006926 <_printf_i+0x23a>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e7a4      	b.n	8006854 <_printf_i+0x168>
 800690a:	2301      	movs	r3, #1
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	47d0      	blx	sl
 8006914:	3001      	adds	r0, #1
 8006916:	d09b      	beq.n	8006850 <_printf_i+0x164>
 8006918:	3501      	adds	r5, #1
 800691a:	68e3      	ldr	r3, [r4, #12]
 800691c:	9903      	ldr	r1, [sp, #12]
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	42ab      	cmp	r3, r5
 8006922:	dcf2      	bgt.n	800690a <_printf_i+0x21e>
 8006924:	e7eb      	b.n	80068fe <_printf_i+0x212>
 8006926:	2500      	movs	r5, #0
 8006928:	f104 0619 	add.w	r6, r4, #25
 800692c:	e7f5      	b.n	800691a <_printf_i+0x22e>
 800692e:	bf00      	nop
 8006930:	08008af6 	.word	0x08008af6
 8006934:	08008b07 	.word	0x08008b07

08006938 <quorem>:
 8006938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	6903      	ldr	r3, [r0, #16]
 800693e:	690c      	ldr	r4, [r1, #16]
 8006940:	42a3      	cmp	r3, r4
 8006942:	4607      	mov	r7, r0
 8006944:	f2c0 8081 	blt.w	8006a4a <quorem+0x112>
 8006948:	3c01      	subs	r4, #1
 800694a:	f101 0814 	add.w	r8, r1, #20
 800694e:	f100 0514 	add.w	r5, r0, #20
 8006952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800695c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006960:	3301      	adds	r3, #1
 8006962:	429a      	cmp	r2, r3
 8006964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800696c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006970:	d331      	bcc.n	80069d6 <quorem+0x9e>
 8006972:	f04f 0e00 	mov.w	lr, #0
 8006976:	4640      	mov	r0, r8
 8006978:	46ac      	mov	ip, r5
 800697a:	46f2      	mov	sl, lr
 800697c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006980:	b293      	uxth	r3, r2
 8006982:	fb06 e303 	mla	r3, r6, r3, lr
 8006986:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800698a:	b29b      	uxth	r3, r3
 800698c:	ebaa 0303 	sub.w	r3, sl, r3
 8006990:	f8dc a000 	ldr.w	sl, [ip]
 8006994:	0c12      	lsrs	r2, r2, #16
 8006996:	fa13 f38a 	uxtah	r3, r3, sl
 800699a:	fb06 e202 	mla	r2, r6, r2, lr
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	9b00      	ldr	r3, [sp, #0]
 80069a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069a6:	b292      	uxth	r2, r2
 80069a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80069b4:	4581      	cmp	r9, r0
 80069b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ba:	f84c 3b04 	str.w	r3, [ip], #4
 80069be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069c2:	d2db      	bcs.n	800697c <quorem+0x44>
 80069c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80069c8:	b92b      	cbnz	r3, 80069d6 <quorem+0x9e>
 80069ca:	9b01      	ldr	r3, [sp, #4]
 80069cc:	3b04      	subs	r3, #4
 80069ce:	429d      	cmp	r5, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	d32e      	bcc.n	8006a32 <quorem+0xfa>
 80069d4:	613c      	str	r4, [r7, #16]
 80069d6:	4638      	mov	r0, r7
 80069d8:	f001 f9be 	bl	8007d58 <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	db24      	blt.n	8006a2a <quorem+0xf2>
 80069e0:	3601      	adds	r6, #1
 80069e2:	4628      	mov	r0, r5
 80069e4:	f04f 0c00 	mov.w	ip, #0
 80069e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80069ec:	f8d0 e000 	ldr.w	lr, [r0]
 80069f0:	b293      	uxth	r3, r2
 80069f2:	ebac 0303 	sub.w	r3, ip, r3
 80069f6:	0c12      	lsrs	r2, r2, #16
 80069f8:	fa13 f38e 	uxtah	r3, r3, lr
 80069fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a0a:	45c1      	cmp	r9, r8
 8006a0c:	f840 3b04 	str.w	r3, [r0], #4
 8006a10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a14:	d2e8      	bcs.n	80069e8 <quorem+0xb0>
 8006a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a1e:	b922      	cbnz	r2, 8006a2a <quorem+0xf2>
 8006a20:	3b04      	subs	r3, #4
 8006a22:	429d      	cmp	r5, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	d30a      	bcc.n	8006a3e <quorem+0x106>
 8006a28:	613c      	str	r4, [r7, #16]
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	b003      	add	sp, #12
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	3b04      	subs	r3, #4
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	d1cc      	bne.n	80069d4 <quorem+0x9c>
 8006a3a:	3c01      	subs	r4, #1
 8006a3c:	e7c7      	b.n	80069ce <quorem+0x96>
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	3b04      	subs	r3, #4
 8006a42:	2a00      	cmp	r2, #0
 8006a44:	d1f0      	bne.n	8006a28 <quorem+0xf0>
 8006a46:	3c01      	subs	r4, #1
 8006a48:	e7eb      	b.n	8006a22 <quorem+0xea>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e7ee      	b.n	8006a2c <quorem+0xf4>
	...

08006a50 <_dtoa_r>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	ed2d 8b04 	vpush	{d8-d9}
 8006a58:	ec57 6b10 	vmov	r6, r7, d0
 8006a5c:	b093      	sub	sp, #76	; 0x4c
 8006a5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a64:	9106      	str	r1, [sp, #24]
 8006a66:	ee10 aa10 	vmov	sl, s0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a70:	46bb      	mov	fp, r7
 8006a72:	b975      	cbnz	r5, 8006a92 <_dtoa_r+0x42>
 8006a74:	2010      	movs	r0, #16
 8006a76:	f000 fed7 	bl	8007828 <malloc>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a7e:	b920      	cbnz	r0, 8006a8a <_dtoa_r+0x3a>
 8006a80:	4ba7      	ldr	r3, [pc, #668]	; (8006d20 <_dtoa_r+0x2d0>)
 8006a82:	21ea      	movs	r1, #234	; 0xea
 8006a84:	48a7      	ldr	r0, [pc, #668]	; (8006d24 <_dtoa_r+0x2d4>)
 8006a86:	f001 fddf 	bl	8008648 <__assert_func>
 8006a8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a8e:	6005      	str	r5, [r0, #0]
 8006a90:	60c5      	str	r5, [r0, #12]
 8006a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a94:	6819      	ldr	r1, [r3, #0]
 8006a96:	b151      	cbz	r1, 8006aae <_dtoa_r+0x5e>
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	604a      	str	r2, [r1, #4]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4093      	lsls	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 ff16 	bl	80078d4 <_Bfree>
 8006aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	1e3b      	subs	r3, r7, #0
 8006ab0:	bfaa      	itet	ge
 8006ab2:	2300      	movge	r3, #0
 8006ab4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006ab8:	f8c8 3000 	strge.w	r3, [r8]
 8006abc:	4b9a      	ldr	r3, [pc, #616]	; (8006d28 <_dtoa_r+0x2d8>)
 8006abe:	bfbc      	itt	lt
 8006ac0:	2201      	movlt	r2, #1
 8006ac2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ac6:	ea33 030b 	bics.w	r3, r3, fp
 8006aca:	d11b      	bne.n	8006b04 <_dtoa_r+0xb4>
 8006acc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ace:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ad8:	4333      	orrs	r3, r6
 8006ada:	f000 8592 	beq.w	8007602 <_dtoa_r+0xbb2>
 8006ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae0:	b963      	cbnz	r3, 8006afc <_dtoa_r+0xac>
 8006ae2:	4b92      	ldr	r3, [pc, #584]	; (8006d2c <_dtoa_r+0x2dc>)
 8006ae4:	e022      	b.n	8006b2c <_dtoa_r+0xdc>
 8006ae6:	4b92      	ldr	r3, [pc, #584]	; (8006d30 <_dtoa_r+0x2e0>)
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	3308      	adds	r3, #8
 8006aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	9801      	ldr	r0, [sp, #4]
 8006af2:	b013      	add	sp, #76	; 0x4c
 8006af4:	ecbd 8b04 	vpop	{d8-d9}
 8006af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afc:	4b8b      	ldr	r3, [pc, #556]	; (8006d2c <_dtoa_r+0x2dc>)
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	3303      	adds	r3, #3
 8006b02:	e7f3      	b.n	8006aec <_dtoa_r+0x9c>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	4650      	mov	r0, sl
 8006b0a:	4659      	mov	r1, fp
 8006b0c:	f7f9 ffe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b10:	ec4b ab19 	vmov	d9, sl, fp
 8006b14:	4680      	mov	r8, r0
 8006b16:	b158      	cbz	r0, 8006b30 <_dtoa_r+0xe0>
 8006b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 856b 	beq.w	80075fc <_dtoa_r+0xbac>
 8006b26:	4883      	ldr	r0, [pc, #524]	; (8006d34 <_dtoa_r+0x2e4>)
 8006b28:	6018      	str	r0, [r3, #0]
 8006b2a:	1e43      	subs	r3, r0, #1
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	e7df      	b.n	8006af0 <_dtoa_r+0xa0>
 8006b30:	ec4b ab10 	vmov	d0, sl, fp
 8006b34:	aa10      	add	r2, sp, #64	; 0x40
 8006b36:	a911      	add	r1, sp, #68	; 0x44
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f001 f9b3 	bl	8007ea4 <__d2b>
 8006b3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b42:	ee08 0a10 	vmov	s16, r0
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	f000 8084 	beq.w	8006c54 <_dtoa_r+0x204>
 8006b4c:	ee19 3a90 	vmov	r3, s19
 8006b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b58:	4656      	mov	r6, sl
 8006b5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b66:	4b74      	ldr	r3, [pc, #464]	; (8006d38 <_dtoa_r+0x2e8>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 fb93 	bl	8000298 <__aeabi_dsub>
 8006b72:	a365      	add	r3, pc, #404	; (adr r3, 8006d08 <_dtoa_r+0x2b8>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fd46 	bl	8000608 <__aeabi_dmul>
 8006b7c:	a364      	add	r3, pc, #400	; (adr r3, 8006d10 <_dtoa_r+0x2c0>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fb8b 	bl	800029c <__adddf3>
 8006b86:	4606      	mov	r6, r0
 8006b88:	4628      	mov	r0, r5
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	f7f9 fcd2 	bl	8000534 <__aeabi_i2d>
 8006b90:	a361      	add	r3, pc, #388	; (adr r3, 8006d18 <_dtoa_r+0x2c8>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fd37 	bl	8000608 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	f7f9 fb7b 	bl	800029c <__adddf3>
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	460f      	mov	r7, r1
 8006baa:	f7f9 ffdd 	bl	8000b68 <__aeabi_d2iz>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	9000      	str	r0, [sp, #0]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 ff98 	bl	8000aec <__aeabi_dcmplt>
 8006bbc:	b150      	cbz	r0, 8006bd4 <_dtoa_r+0x184>
 8006bbe:	9800      	ldr	r0, [sp, #0]
 8006bc0:	f7f9 fcb8 	bl	8000534 <__aeabi_i2d>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	f7f9 ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bcc:	b910      	cbnz	r0, 8006bd4 <_dtoa_r+0x184>
 8006bce:	9b00      	ldr	r3, [sp, #0]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	9b00      	ldr	r3, [sp, #0]
 8006bd6:	2b16      	cmp	r3, #22
 8006bd8:	d85a      	bhi.n	8006c90 <_dtoa_r+0x240>
 8006bda:	9a00      	ldr	r2, [sp, #0]
 8006bdc:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <_dtoa_r+0x2ec>)
 8006bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	ec51 0b19 	vmov	r0, r1, d9
 8006bea:	f7f9 ff7f 	bl	8000aec <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d050      	beq.n	8006c94 <_dtoa_r+0x244>
 8006bf2:	9b00      	ldr	r3, [sp, #0]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bfe:	1b5d      	subs	r5, r3, r5
 8006c00:	1e6b      	subs	r3, r5, #1
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	bf45      	ittet	mi
 8006c06:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c0a:	9304      	strmi	r3, [sp, #16]
 8006c0c:	2300      	movpl	r3, #0
 8006c0e:	2300      	movmi	r3, #0
 8006c10:	bf4c      	ite	mi
 8006c12:	9305      	strmi	r3, [sp, #20]
 8006c14:	9304      	strpl	r3, [sp, #16]
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	db3d      	blt.n	8006c98 <_dtoa_r+0x248>
 8006c1c:	9b05      	ldr	r3, [sp, #20]
 8006c1e:	9a00      	ldr	r2, [sp, #0]
 8006c20:	920a      	str	r2, [sp, #40]	; 0x28
 8006c22:	4413      	add	r3, r2
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9307      	str	r3, [sp, #28]
 8006c2a:	9b06      	ldr	r3, [sp, #24]
 8006c2c:	2b09      	cmp	r3, #9
 8006c2e:	f200 8089 	bhi.w	8006d44 <_dtoa_r+0x2f4>
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	bfc4      	itt	gt
 8006c36:	3b04      	subgt	r3, #4
 8006c38:	9306      	strgt	r3, [sp, #24]
 8006c3a:	9b06      	ldr	r3, [sp, #24]
 8006c3c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c40:	bfcc      	ite	gt
 8006c42:	2500      	movgt	r5, #0
 8006c44:	2501      	movle	r5, #1
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	f200 8087 	bhi.w	8006d5a <_dtoa_r+0x30a>
 8006c4c:	e8df f003 	tbb	[pc, r3]
 8006c50:	59383a2d 	.word	0x59383a2d
 8006c54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c58:	441d      	add	r5, r3
 8006c5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	bfc1      	itttt	gt
 8006c62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c72:	bfda      	itte	le
 8006c74:	f1c3 0320 	rsble	r3, r3, #32
 8006c78:	fa06 f003 	lslle.w	r0, r6, r3
 8006c7c:	4318      	orrgt	r0, r3
 8006c7e:	f7f9 fc49 	bl	8000514 <__aeabi_ui2d>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4606      	mov	r6, r0
 8006c86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c8a:	3d01      	subs	r5, #1
 8006c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c8e:	e76a      	b.n	8006b66 <_dtoa_r+0x116>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e7b2      	b.n	8006bfa <_dtoa_r+0x1aa>
 8006c94:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c96:	e7b1      	b.n	8006bfc <_dtoa_r+0x1ac>
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	9a00      	ldr	r2, [sp, #0]
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	4253      	negs	r3, r2
 8006ca2:	9307      	str	r3, [sp, #28]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca8:	e7bf      	b.n	8006c2a <_dtoa_r+0x1da>
 8006caa:	2300      	movs	r3, #0
 8006cac:	9308      	str	r3, [sp, #32]
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc55      	bgt.n	8006d60 <_dtoa_r+0x310>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cbe:	e00c      	b.n	8006cda <_dtoa_r+0x28a>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e7f3      	b.n	8006cac <_dtoa_r+0x25c>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc8:	9308      	str	r3, [sp, #32]
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	4413      	add	r3, r2
 8006cce:	9302      	str	r3, [sp, #8]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	9303      	str	r3, [sp, #12]
 8006cd6:	bfb8      	it	lt
 8006cd8:	2301      	movlt	r3, #1
 8006cda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006cdc:	2200      	movs	r2, #0
 8006cde:	6042      	str	r2, [r0, #4]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	f102 0614 	add.w	r6, r2, #20
 8006ce6:	429e      	cmp	r6, r3
 8006ce8:	6841      	ldr	r1, [r0, #4]
 8006cea:	d93d      	bls.n	8006d68 <_dtoa_r+0x318>
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fdb1 	bl	8007854 <_Balloc>
 8006cf2:	9001      	str	r0, [sp, #4]
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d13b      	bne.n	8006d70 <_dtoa_r+0x320>
 8006cf8:	4b11      	ldr	r3, [pc, #68]	; (8006d40 <_dtoa_r+0x2f0>)
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d00:	e6c0      	b.n	8006a84 <_dtoa_r+0x34>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e7df      	b.n	8006cc6 <_dtoa_r+0x276>
 8006d06:	bf00      	nop
 8006d08:	636f4361 	.word	0x636f4361
 8006d0c:	3fd287a7 	.word	0x3fd287a7
 8006d10:	8b60c8b3 	.word	0x8b60c8b3
 8006d14:	3fc68a28 	.word	0x3fc68a28
 8006d18:	509f79fb 	.word	0x509f79fb
 8006d1c:	3fd34413 	.word	0x3fd34413
 8006d20:	08008b25 	.word	0x08008b25
 8006d24:	08008b3c 	.word	0x08008b3c
 8006d28:	7ff00000 	.word	0x7ff00000
 8006d2c:	08008b21 	.word	0x08008b21
 8006d30:	08008b18 	.word	0x08008b18
 8006d34:	08008af5 	.word	0x08008af5
 8006d38:	3ff80000 	.word	0x3ff80000
 8006d3c:	08008c90 	.word	0x08008c90
 8006d40:	08008b97 	.word	0x08008b97
 8006d44:	2501      	movs	r5, #1
 8006d46:	2300      	movs	r3, #0
 8006d48:	9306      	str	r3, [sp, #24]
 8006d4a:	9508      	str	r5, [sp, #32]
 8006d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d54:	2200      	movs	r2, #0
 8006d56:	2312      	movs	r3, #18
 8006d58:	e7b0      	b.n	8006cbc <_dtoa_r+0x26c>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	9308      	str	r3, [sp, #32]
 8006d5e:	e7f5      	b.n	8006d4c <_dtoa_r+0x2fc>
 8006d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d66:	e7b8      	b.n	8006cda <_dtoa_r+0x28a>
 8006d68:	3101      	adds	r1, #1
 8006d6a:	6041      	str	r1, [r0, #4]
 8006d6c:	0052      	lsls	r2, r2, #1
 8006d6e:	e7b8      	b.n	8006ce2 <_dtoa_r+0x292>
 8006d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d72:	9a01      	ldr	r2, [sp, #4]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	2b0e      	cmp	r3, #14
 8006d7a:	f200 809d 	bhi.w	8006eb8 <_dtoa_r+0x468>
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	f000 809a 	beq.w	8006eb8 <_dtoa_r+0x468>
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	dd32      	ble.n	8006df0 <_dtoa_r+0x3a0>
 8006d8a:	4ab7      	ldr	r2, [pc, #732]	; (8007068 <_dtoa_r+0x618>)
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d98:	9b00      	ldr	r3, [sp, #0]
 8006d9a:	05d8      	lsls	r0, r3, #23
 8006d9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006da0:	d516      	bpl.n	8006dd0 <_dtoa_r+0x380>
 8006da2:	4bb2      	ldr	r3, [pc, #712]	; (800706c <_dtoa_r+0x61c>)
 8006da4:	ec51 0b19 	vmov	r0, r1, d9
 8006da8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dac:	f7f9 fd56 	bl	800085c <__aeabi_ddiv>
 8006db0:	f007 070f 	and.w	r7, r7, #15
 8006db4:	4682      	mov	sl, r0
 8006db6:	468b      	mov	fp, r1
 8006db8:	2503      	movs	r5, #3
 8006dba:	4eac      	ldr	r6, [pc, #688]	; (800706c <_dtoa_r+0x61c>)
 8006dbc:	b957      	cbnz	r7, 8006dd4 <_dtoa_r+0x384>
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	f7f9 fd49 	bl	800085c <__aeabi_ddiv>
 8006dca:	4682      	mov	sl, r0
 8006dcc:	468b      	mov	fp, r1
 8006dce:	e028      	b.n	8006e22 <_dtoa_r+0x3d2>
 8006dd0:	2502      	movs	r5, #2
 8006dd2:	e7f2      	b.n	8006dba <_dtoa_r+0x36a>
 8006dd4:	07f9      	lsls	r1, r7, #31
 8006dd6:	d508      	bpl.n	8006dea <_dtoa_r+0x39a>
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4649      	mov	r1, r9
 8006ddc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006de0:	f7f9 fc12 	bl	8000608 <__aeabi_dmul>
 8006de4:	3501      	adds	r5, #1
 8006de6:	4680      	mov	r8, r0
 8006de8:	4689      	mov	r9, r1
 8006dea:	107f      	asrs	r7, r7, #1
 8006dec:	3608      	adds	r6, #8
 8006dee:	e7e5      	b.n	8006dbc <_dtoa_r+0x36c>
 8006df0:	f000 809b 	beq.w	8006f2a <_dtoa_r+0x4da>
 8006df4:	9b00      	ldr	r3, [sp, #0]
 8006df6:	4f9d      	ldr	r7, [pc, #628]	; (800706c <_dtoa_r+0x61c>)
 8006df8:	425e      	negs	r6, r3
 8006dfa:	4b9b      	ldr	r3, [pc, #620]	; (8007068 <_dtoa_r+0x618>)
 8006dfc:	f006 020f 	and.w	r2, r6, #15
 8006e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	ec51 0b19 	vmov	r0, r1, d9
 8006e0c:	f7f9 fbfc 	bl	8000608 <__aeabi_dmul>
 8006e10:	1136      	asrs	r6, r6, #4
 8006e12:	4682      	mov	sl, r0
 8006e14:	468b      	mov	fp, r1
 8006e16:	2300      	movs	r3, #0
 8006e18:	2502      	movs	r5, #2
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d17a      	bne.n	8006f14 <_dtoa_r+0x4c4>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1d3      	bne.n	8006dca <_dtoa_r+0x37a>
 8006e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8082 	beq.w	8006f2e <_dtoa_r+0x4de>
 8006e2a:	4b91      	ldr	r3, [pc, #580]	; (8007070 <_dtoa_r+0x620>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4650      	mov	r0, sl
 8006e30:	4659      	mov	r1, fp
 8006e32:	f7f9 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d079      	beq.n	8006f2e <_dtoa_r+0x4de>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d076      	beq.n	8006f2e <_dtoa_r+0x4de>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dd36      	ble.n	8006eb4 <_dtoa_r+0x464>
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	1e5f      	subs	r7, r3, #1
 8006e4e:	2200      	movs	r2, #0
 8006e50:	4b88      	ldr	r3, [pc, #544]	; (8007074 <_dtoa_r+0x624>)
 8006e52:	f7f9 fbd9 	bl	8000608 <__aeabi_dmul>
 8006e56:	9e02      	ldr	r6, [sp, #8]
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f7f9 fb68 	bl	8000534 <__aeabi_i2d>
 8006e64:	4652      	mov	r2, sl
 8006e66:	465b      	mov	r3, fp
 8006e68:	f7f9 fbce 	bl	8000608 <__aeabi_dmul>
 8006e6c:	4b82      	ldr	r3, [pc, #520]	; (8007078 <_dtoa_r+0x628>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f7f9 fa14 	bl	800029c <__adddf3>
 8006e74:	46d0      	mov	r8, sl
 8006e76:	46d9      	mov	r9, fp
 8006e78:	4682      	mov	sl, r0
 8006e7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	d158      	bne.n	8006f34 <_dtoa_r+0x4e4>
 8006e82:	4b7e      	ldr	r3, [pc, #504]	; (800707c <_dtoa_r+0x62c>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	4640      	mov	r0, r8
 8006e88:	4649      	mov	r1, r9
 8006e8a:	f7f9 fa05 	bl	8000298 <__aeabi_dsub>
 8006e8e:	4652      	mov	r2, sl
 8006e90:	465b      	mov	r3, fp
 8006e92:	4680      	mov	r8, r0
 8006e94:	4689      	mov	r9, r1
 8006e96:	f7f9 fe47 	bl	8000b28 <__aeabi_dcmpgt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f040 8295 	bne.w	80073ca <_dtoa_r+0x97a>
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 fe1f 	bl	8000aec <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f040 8289 	bne.w	80073c6 <_dtoa_r+0x976>
 8006eb4:	ec5b ab19 	vmov	sl, fp, d9
 8006eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f2c0 8148 	blt.w	8007150 <_dtoa_r+0x700>
 8006ec0:	9a00      	ldr	r2, [sp, #0]
 8006ec2:	2a0e      	cmp	r2, #14
 8006ec4:	f300 8144 	bgt.w	8007150 <_dtoa_r+0x700>
 8006ec8:	4b67      	ldr	r3, [pc, #412]	; (8007068 <_dtoa_r+0x618>)
 8006eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ece:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f280 80d5 	bge.w	8007084 <_dtoa_r+0x634>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f300 80d1 	bgt.w	8007084 <_dtoa_r+0x634>
 8006ee2:	f040 826f 	bne.w	80073c4 <_dtoa_r+0x974>
 8006ee6:	4b65      	ldr	r3, [pc, #404]	; (800707c <_dtoa_r+0x62c>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	f7f9 fb8b 	bl	8000608 <__aeabi_dmul>
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	f7f9 fe0d 	bl	8000b14 <__aeabi_dcmpge>
 8006efa:	9e03      	ldr	r6, [sp, #12]
 8006efc:	4637      	mov	r7, r6
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f040 8245 	bne.w	800738e <_dtoa_r+0x93e>
 8006f04:	9d01      	ldr	r5, [sp, #4]
 8006f06:	2331      	movs	r3, #49	; 0x31
 8006f08:	f805 3b01 	strb.w	r3, [r5], #1
 8006f0c:	9b00      	ldr	r3, [sp, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	e240      	b.n	8007396 <_dtoa_r+0x946>
 8006f14:	07f2      	lsls	r2, r6, #31
 8006f16:	d505      	bpl.n	8006f24 <_dtoa_r+0x4d4>
 8006f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1c:	f7f9 fb74 	bl	8000608 <__aeabi_dmul>
 8006f20:	3501      	adds	r5, #1
 8006f22:	2301      	movs	r3, #1
 8006f24:	1076      	asrs	r6, r6, #1
 8006f26:	3708      	adds	r7, #8
 8006f28:	e777      	b.n	8006e1a <_dtoa_r+0x3ca>
 8006f2a:	2502      	movs	r5, #2
 8006f2c:	e779      	b.n	8006e22 <_dtoa_r+0x3d2>
 8006f2e:	9f00      	ldr	r7, [sp, #0]
 8006f30:	9e03      	ldr	r6, [sp, #12]
 8006f32:	e794      	b.n	8006e5e <_dtoa_r+0x40e>
 8006f34:	9901      	ldr	r1, [sp, #4]
 8006f36:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <_dtoa_r+0x618>)
 8006f38:	4431      	add	r1, r6
 8006f3a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f3c:	9908      	ldr	r1, [sp, #32]
 8006f3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f46:	2900      	cmp	r1, #0
 8006f48:	d043      	beq.n	8006fd2 <_dtoa_r+0x582>
 8006f4a:	494d      	ldr	r1, [pc, #308]	; (8007080 <_dtoa_r+0x630>)
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	f7f9 fc85 	bl	800085c <__aeabi_ddiv>
 8006f52:	4652      	mov	r2, sl
 8006f54:	465b      	mov	r3, fp
 8006f56:	f7f9 f99f 	bl	8000298 <__aeabi_dsub>
 8006f5a:	9d01      	ldr	r5, [sp, #4]
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	468b      	mov	fp, r1
 8006f60:	4649      	mov	r1, r9
 8006f62:	4640      	mov	r0, r8
 8006f64:	f7f9 fe00 	bl	8000b68 <__aeabi_d2iz>
 8006f68:	4606      	mov	r6, r0
 8006f6a:	f7f9 fae3 	bl	8000534 <__aeabi_i2d>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f98f 	bl	8000298 <__aeabi_dsub>
 8006f7a:	3630      	adds	r6, #48	; 0x30
 8006f7c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f80:	4652      	mov	r2, sl
 8006f82:	465b      	mov	r3, fp
 8006f84:	4680      	mov	r8, r0
 8006f86:	4689      	mov	r9, r1
 8006f88:	f7f9 fdb0 	bl	8000aec <__aeabi_dcmplt>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d163      	bne.n	8007058 <_dtoa_r+0x608>
 8006f90:	4642      	mov	r2, r8
 8006f92:	464b      	mov	r3, r9
 8006f94:	4936      	ldr	r1, [pc, #216]	; (8007070 <_dtoa_r+0x620>)
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7f9 f97e 	bl	8000298 <__aeabi_dsub>
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	465b      	mov	r3, fp
 8006fa0:	f7f9 fda4 	bl	8000aec <__aeabi_dcmplt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f040 80b5 	bne.w	8007114 <_dtoa_r+0x6c4>
 8006faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fac:	429d      	cmp	r5, r3
 8006fae:	d081      	beq.n	8006eb4 <_dtoa_r+0x464>
 8006fb0:	4b30      	ldr	r3, [pc, #192]	; (8007074 <_dtoa_r+0x624>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	f7f9 fb26 	bl	8000608 <__aeabi_dmul>
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <_dtoa_r+0x624>)
 8006fbe:	4682      	mov	sl, r0
 8006fc0:	468b      	mov	fp, r1
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f7f9 fb1e 	bl	8000608 <__aeabi_dmul>
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	e7c6      	b.n	8006f60 <_dtoa_r+0x510>
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	4659      	mov	r1, fp
 8006fd6:	f7f9 fb17 	bl	8000608 <__aeabi_dmul>
 8006fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fdc:	9d01      	ldr	r5, [sp, #4]
 8006fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	468b      	mov	fp, r1
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	f7f9 fdbe 	bl	8000b68 <__aeabi_d2iz>
 8006fec:	4606      	mov	r6, r0
 8006fee:	f7f9 faa1 	bl	8000534 <__aeabi_i2d>
 8006ff2:	3630      	adds	r6, #48	; 0x30
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 f94c 	bl	8000298 <__aeabi_dsub>
 8007000:	f805 6b01 	strb.w	r6, [r5], #1
 8007004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007006:	429d      	cmp	r5, r3
 8007008:	4680      	mov	r8, r0
 800700a:	4689      	mov	r9, r1
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	d124      	bne.n	800705c <_dtoa_r+0x60c>
 8007012:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <_dtoa_r+0x630>)
 8007014:	4650      	mov	r0, sl
 8007016:	4659      	mov	r1, fp
 8007018:	f7f9 f940 	bl	800029c <__adddf3>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4640      	mov	r0, r8
 8007022:	4649      	mov	r1, r9
 8007024:	f7f9 fd80 	bl	8000b28 <__aeabi_dcmpgt>
 8007028:	2800      	cmp	r0, #0
 800702a:	d173      	bne.n	8007114 <_dtoa_r+0x6c4>
 800702c:	4652      	mov	r2, sl
 800702e:	465b      	mov	r3, fp
 8007030:	4913      	ldr	r1, [pc, #76]	; (8007080 <_dtoa_r+0x630>)
 8007032:	2000      	movs	r0, #0
 8007034:	f7f9 f930 	bl	8000298 <__aeabi_dsub>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4640      	mov	r0, r8
 800703e:	4649      	mov	r1, r9
 8007040:	f7f9 fd54 	bl	8000aec <__aeabi_dcmplt>
 8007044:	2800      	cmp	r0, #0
 8007046:	f43f af35 	beq.w	8006eb4 <_dtoa_r+0x464>
 800704a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800704c:	1e6b      	subs	r3, r5, #1
 800704e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007050:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007054:	2b30      	cmp	r3, #48	; 0x30
 8007056:	d0f8      	beq.n	800704a <_dtoa_r+0x5fa>
 8007058:	9700      	str	r7, [sp, #0]
 800705a:	e049      	b.n	80070f0 <_dtoa_r+0x6a0>
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <_dtoa_r+0x624>)
 800705e:	f7f9 fad3 	bl	8000608 <__aeabi_dmul>
 8007062:	4680      	mov	r8, r0
 8007064:	4689      	mov	r9, r1
 8007066:	e7bd      	b.n	8006fe4 <_dtoa_r+0x594>
 8007068:	08008c90 	.word	0x08008c90
 800706c:	08008c68 	.word	0x08008c68
 8007070:	3ff00000 	.word	0x3ff00000
 8007074:	40240000 	.word	0x40240000
 8007078:	401c0000 	.word	0x401c0000
 800707c:	40140000 	.word	0x40140000
 8007080:	3fe00000 	.word	0x3fe00000
 8007084:	9d01      	ldr	r5, [sp, #4]
 8007086:	4656      	mov	r6, sl
 8007088:	465f      	mov	r7, fp
 800708a:	4642      	mov	r2, r8
 800708c:	464b      	mov	r3, r9
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fbe3 	bl	800085c <__aeabi_ddiv>
 8007096:	f7f9 fd67 	bl	8000b68 <__aeabi_d2iz>
 800709a:	4682      	mov	sl, r0
 800709c:	f7f9 fa4a 	bl	8000534 <__aeabi_i2d>
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	f7f9 fab0 	bl	8000608 <__aeabi_dmul>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80070b4:	f7f9 f8f0 	bl	8000298 <__aeabi_dsub>
 80070b8:	f805 6b01 	strb.w	r6, [r5], #1
 80070bc:	9e01      	ldr	r6, [sp, #4]
 80070be:	9f03      	ldr	r7, [sp, #12]
 80070c0:	1bae      	subs	r6, r5, r6
 80070c2:	42b7      	cmp	r7, r6
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	d135      	bne.n	8007136 <_dtoa_r+0x6e6>
 80070ca:	f7f9 f8e7 	bl	800029c <__adddf3>
 80070ce:	4642      	mov	r2, r8
 80070d0:	464b      	mov	r3, r9
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	f7f9 fd27 	bl	8000b28 <__aeabi_dcmpgt>
 80070da:	b9d0      	cbnz	r0, 8007112 <_dtoa_r+0x6c2>
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e8:	b110      	cbz	r0, 80070f0 <_dtoa_r+0x6a0>
 80070ea:	f01a 0f01 	tst.w	sl, #1
 80070ee:	d110      	bne.n	8007112 <_dtoa_r+0x6c2>
 80070f0:	4620      	mov	r0, r4
 80070f2:	ee18 1a10 	vmov	r1, s16
 80070f6:	f000 fbed 	bl	80078d4 <_Bfree>
 80070fa:	2300      	movs	r3, #0
 80070fc:	9800      	ldr	r0, [sp, #0]
 80070fe:	702b      	strb	r3, [r5, #0]
 8007100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007102:	3001      	adds	r0, #1
 8007104:	6018      	str	r0, [r3, #0]
 8007106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007108:	2b00      	cmp	r3, #0
 800710a:	f43f acf1 	beq.w	8006af0 <_dtoa_r+0xa0>
 800710e:	601d      	str	r5, [r3, #0]
 8007110:	e4ee      	b.n	8006af0 <_dtoa_r+0xa0>
 8007112:	9f00      	ldr	r7, [sp, #0]
 8007114:	462b      	mov	r3, r5
 8007116:	461d      	mov	r5, r3
 8007118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800711c:	2a39      	cmp	r2, #57	; 0x39
 800711e:	d106      	bne.n	800712e <_dtoa_r+0x6de>
 8007120:	9a01      	ldr	r2, [sp, #4]
 8007122:	429a      	cmp	r2, r3
 8007124:	d1f7      	bne.n	8007116 <_dtoa_r+0x6c6>
 8007126:	9901      	ldr	r1, [sp, #4]
 8007128:	2230      	movs	r2, #48	; 0x30
 800712a:	3701      	adds	r7, #1
 800712c:	700a      	strb	r2, [r1, #0]
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	3201      	adds	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e790      	b.n	8007058 <_dtoa_r+0x608>
 8007136:	4ba6      	ldr	r3, [pc, #664]	; (80073d0 <_dtoa_r+0x980>)
 8007138:	2200      	movs	r2, #0
 800713a:	f7f9 fa65 	bl	8000608 <__aeabi_dmul>
 800713e:	2200      	movs	r2, #0
 8007140:	2300      	movs	r3, #0
 8007142:	4606      	mov	r6, r0
 8007144:	460f      	mov	r7, r1
 8007146:	f7f9 fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800714a:	2800      	cmp	r0, #0
 800714c:	d09d      	beq.n	800708a <_dtoa_r+0x63a>
 800714e:	e7cf      	b.n	80070f0 <_dtoa_r+0x6a0>
 8007150:	9a08      	ldr	r2, [sp, #32]
 8007152:	2a00      	cmp	r2, #0
 8007154:	f000 80d7 	beq.w	8007306 <_dtoa_r+0x8b6>
 8007158:	9a06      	ldr	r2, [sp, #24]
 800715a:	2a01      	cmp	r2, #1
 800715c:	f300 80ba 	bgt.w	80072d4 <_dtoa_r+0x884>
 8007160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007162:	2a00      	cmp	r2, #0
 8007164:	f000 80b2 	beq.w	80072cc <_dtoa_r+0x87c>
 8007168:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800716c:	9e07      	ldr	r6, [sp, #28]
 800716e:	9d04      	ldr	r5, [sp, #16]
 8007170:	9a04      	ldr	r2, [sp, #16]
 8007172:	441a      	add	r2, r3
 8007174:	9204      	str	r2, [sp, #16]
 8007176:	9a05      	ldr	r2, [sp, #20]
 8007178:	2101      	movs	r1, #1
 800717a:	441a      	add	r2, r3
 800717c:	4620      	mov	r0, r4
 800717e:	9205      	str	r2, [sp, #20]
 8007180:	f000 fc60 	bl	8007a44 <__i2b>
 8007184:	4607      	mov	r7, r0
 8007186:	2d00      	cmp	r5, #0
 8007188:	dd0c      	ble.n	80071a4 <_dtoa_r+0x754>
 800718a:	9b05      	ldr	r3, [sp, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd09      	ble.n	80071a4 <_dtoa_r+0x754>
 8007190:	42ab      	cmp	r3, r5
 8007192:	9a04      	ldr	r2, [sp, #16]
 8007194:	bfa8      	it	ge
 8007196:	462b      	movge	r3, r5
 8007198:	1ad2      	subs	r2, r2, r3
 800719a:	9204      	str	r2, [sp, #16]
 800719c:	9a05      	ldr	r2, [sp, #20]
 800719e:	1aed      	subs	r5, r5, r3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	b31b      	cbz	r3, 80071f0 <_dtoa_r+0x7a0>
 80071a8:	9b08      	ldr	r3, [sp, #32]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80af 	beq.w	800730e <_dtoa_r+0x8be>
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	dd13      	ble.n	80071dc <_dtoa_r+0x78c>
 80071b4:	4639      	mov	r1, r7
 80071b6:	4632      	mov	r2, r6
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fd03 	bl	8007bc4 <__pow5mult>
 80071be:	ee18 2a10 	vmov	r2, s16
 80071c2:	4601      	mov	r1, r0
 80071c4:	4607      	mov	r7, r0
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 fc52 	bl	8007a70 <__multiply>
 80071cc:	ee18 1a10 	vmov	r1, s16
 80071d0:	4680      	mov	r8, r0
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fb7e 	bl	80078d4 <_Bfree>
 80071d8:	ee08 8a10 	vmov	s16, r8
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	1b9a      	subs	r2, r3, r6
 80071e0:	d006      	beq.n	80071f0 <_dtoa_r+0x7a0>
 80071e2:	ee18 1a10 	vmov	r1, s16
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fcec 	bl	8007bc4 <__pow5mult>
 80071ec:	ee08 0a10 	vmov	s16, r0
 80071f0:	2101      	movs	r1, #1
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fc26 	bl	8007a44 <__i2b>
 80071f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	4606      	mov	r6, r0
 80071fe:	f340 8088 	ble.w	8007312 <_dtoa_r+0x8c2>
 8007202:	461a      	mov	r2, r3
 8007204:	4601      	mov	r1, r0
 8007206:	4620      	mov	r0, r4
 8007208:	f000 fcdc 	bl	8007bc4 <__pow5mult>
 800720c:	9b06      	ldr	r3, [sp, #24]
 800720e:	2b01      	cmp	r3, #1
 8007210:	4606      	mov	r6, r0
 8007212:	f340 8081 	ble.w	8007318 <_dtoa_r+0x8c8>
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	6933      	ldr	r3, [r6, #16]
 800721c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007220:	6918      	ldr	r0, [r3, #16]
 8007222:	f000 fbbf 	bl	80079a4 <__hi0bits>
 8007226:	f1c0 0020 	rsb	r0, r0, #32
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	4418      	add	r0, r3
 800722e:	f010 001f 	ands.w	r0, r0, #31
 8007232:	f000 8092 	beq.w	800735a <_dtoa_r+0x90a>
 8007236:	f1c0 0320 	rsb	r3, r0, #32
 800723a:	2b04      	cmp	r3, #4
 800723c:	f340 808a 	ble.w	8007354 <_dtoa_r+0x904>
 8007240:	f1c0 001c 	rsb	r0, r0, #28
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	4403      	add	r3, r0
 8007248:	9304      	str	r3, [sp, #16]
 800724a:	9b05      	ldr	r3, [sp, #20]
 800724c:	4403      	add	r3, r0
 800724e:	4405      	add	r5, r0
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	dd07      	ble.n	8007268 <_dtoa_r+0x818>
 8007258:	ee18 1a10 	vmov	r1, s16
 800725c:	461a      	mov	r2, r3
 800725e:	4620      	mov	r0, r4
 8007260:	f000 fd0a 	bl	8007c78 <__lshift>
 8007264:	ee08 0a10 	vmov	s16, r0
 8007268:	9b05      	ldr	r3, [sp, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	dd05      	ble.n	800727a <_dtoa_r+0x82a>
 800726e:	4631      	mov	r1, r6
 8007270:	461a      	mov	r2, r3
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fd00 	bl	8007c78 <__lshift>
 8007278:	4606      	mov	r6, r0
 800727a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d06e      	beq.n	800735e <_dtoa_r+0x90e>
 8007280:	ee18 0a10 	vmov	r0, s16
 8007284:	4631      	mov	r1, r6
 8007286:	f000 fd67 	bl	8007d58 <__mcmp>
 800728a:	2800      	cmp	r0, #0
 800728c:	da67      	bge.n	800735e <_dtoa_r+0x90e>
 800728e:	9b00      	ldr	r3, [sp, #0]
 8007290:	3b01      	subs	r3, #1
 8007292:	ee18 1a10 	vmov	r1, s16
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	220a      	movs	r2, #10
 800729a:	2300      	movs	r3, #0
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fb3b 	bl	8007918 <__multadd>
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	ee08 0a10 	vmov	s16, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 81b1 	beq.w	8007610 <_dtoa_r+0xbc0>
 80072ae:	2300      	movs	r3, #0
 80072b0:	4639      	mov	r1, r7
 80072b2:	220a      	movs	r2, #10
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fb2f 	bl	8007918 <__multadd>
 80072ba:	9b02      	ldr	r3, [sp, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	4607      	mov	r7, r0
 80072c0:	f300 808e 	bgt.w	80073e0 <_dtoa_r+0x990>
 80072c4:	9b06      	ldr	r3, [sp, #24]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	dc51      	bgt.n	800736e <_dtoa_r+0x91e>
 80072ca:	e089      	b.n	80073e0 <_dtoa_r+0x990>
 80072cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072d2:	e74b      	b.n	800716c <_dtoa_r+0x71c>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	1e5e      	subs	r6, r3, #1
 80072d8:	9b07      	ldr	r3, [sp, #28]
 80072da:	42b3      	cmp	r3, r6
 80072dc:	bfbf      	itttt	lt
 80072de:	9b07      	ldrlt	r3, [sp, #28]
 80072e0:	9607      	strlt	r6, [sp, #28]
 80072e2:	1af2      	sublt	r2, r6, r3
 80072e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072e6:	bfb6      	itet	lt
 80072e8:	189b      	addlt	r3, r3, r2
 80072ea:	1b9e      	subge	r6, r3, r6
 80072ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	bfb8      	it	lt
 80072f2:	2600      	movlt	r6, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb7      	itett	lt
 80072f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80072fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007300:	1a9d      	sublt	r5, r3, r2
 8007302:	2300      	movlt	r3, #0
 8007304:	e734      	b.n	8007170 <_dtoa_r+0x720>
 8007306:	9e07      	ldr	r6, [sp, #28]
 8007308:	9d04      	ldr	r5, [sp, #16]
 800730a:	9f08      	ldr	r7, [sp, #32]
 800730c:	e73b      	b.n	8007186 <_dtoa_r+0x736>
 800730e:	9a07      	ldr	r2, [sp, #28]
 8007310:	e767      	b.n	80071e2 <_dtoa_r+0x792>
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	2b01      	cmp	r3, #1
 8007316:	dc18      	bgt.n	800734a <_dtoa_r+0x8fa>
 8007318:	f1ba 0f00 	cmp.w	sl, #0
 800731c:	d115      	bne.n	800734a <_dtoa_r+0x8fa>
 800731e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007322:	b993      	cbnz	r3, 800734a <_dtoa_r+0x8fa>
 8007324:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007328:	0d1b      	lsrs	r3, r3, #20
 800732a:	051b      	lsls	r3, r3, #20
 800732c:	b183      	cbz	r3, 8007350 <_dtoa_r+0x900>
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	9b05      	ldr	r3, [sp, #20]
 8007336:	3301      	adds	r3, #1
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	f04f 0801 	mov.w	r8, #1
 800733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	f47f af6a 	bne.w	800721a <_dtoa_r+0x7ca>
 8007346:	2001      	movs	r0, #1
 8007348:	e76f      	b.n	800722a <_dtoa_r+0x7da>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	e7f6      	b.n	800733e <_dtoa_r+0x8ee>
 8007350:	4698      	mov	r8, r3
 8007352:	e7f4      	b.n	800733e <_dtoa_r+0x8ee>
 8007354:	f43f af7d 	beq.w	8007252 <_dtoa_r+0x802>
 8007358:	4618      	mov	r0, r3
 800735a:	301c      	adds	r0, #28
 800735c:	e772      	b.n	8007244 <_dtoa_r+0x7f4>
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc37      	bgt.n	80073d4 <_dtoa_r+0x984>
 8007364:	9b06      	ldr	r3, [sp, #24]
 8007366:	2b02      	cmp	r3, #2
 8007368:	dd34      	ble.n	80073d4 <_dtoa_r+0x984>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	9302      	str	r3, [sp, #8]
 800736e:	9b02      	ldr	r3, [sp, #8]
 8007370:	b96b      	cbnz	r3, 800738e <_dtoa_r+0x93e>
 8007372:	4631      	mov	r1, r6
 8007374:	2205      	movs	r2, #5
 8007376:	4620      	mov	r0, r4
 8007378:	f000 face 	bl	8007918 <__multadd>
 800737c:	4601      	mov	r1, r0
 800737e:	4606      	mov	r6, r0
 8007380:	ee18 0a10 	vmov	r0, s16
 8007384:	f000 fce8 	bl	8007d58 <__mcmp>
 8007388:	2800      	cmp	r0, #0
 800738a:	f73f adbb 	bgt.w	8006f04 <_dtoa_r+0x4b4>
 800738e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007390:	9d01      	ldr	r5, [sp, #4]
 8007392:	43db      	mvns	r3, r3
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	4631      	mov	r1, r6
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa99 	bl	80078d4 <_Bfree>
 80073a2:	2f00      	cmp	r7, #0
 80073a4:	f43f aea4 	beq.w	80070f0 <_dtoa_r+0x6a0>
 80073a8:	f1b8 0f00 	cmp.w	r8, #0
 80073ac:	d005      	beq.n	80073ba <_dtoa_r+0x96a>
 80073ae:	45b8      	cmp	r8, r7
 80073b0:	d003      	beq.n	80073ba <_dtoa_r+0x96a>
 80073b2:	4641      	mov	r1, r8
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 fa8d 	bl	80078d4 <_Bfree>
 80073ba:	4639      	mov	r1, r7
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fa89 	bl	80078d4 <_Bfree>
 80073c2:	e695      	b.n	80070f0 <_dtoa_r+0x6a0>
 80073c4:	2600      	movs	r6, #0
 80073c6:	4637      	mov	r7, r6
 80073c8:	e7e1      	b.n	800738e <_dtoa_r+0x93e>
 80073ca:	9700      	str	r7, [sp, #0]
 80073cc:	4637      	mov	r7, r6
 80073ce:	e599      	b.n	8006f04 <_dtoa_r+0x4b4>
 80073d0:	40240000 	.word	0x40240000
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80ca 	beq.w	8007570 <_dtoa_r+0xb20>
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	9302      	str	r3, [sp, #8]
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x9a0>
 80073e4:	4639      	mov	r1, r7
 80073e6:	462a      	mov	r2, r5
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fc45 	bl	8007c78 <__lshift>
 80073ee:	4607      	mov	r7, r0
 80073f0:	f1b8 0f00 	cmp.w	r8, #0
 80073f4:	d05b      	beq.n	80074ae <_dtoa_r+0xa5e>
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fa2b 	bl	8007854 <_Balloc>
 80073fe:	4605      	mov	r5, r0
 8007400:	b928      	cbnz	r0, 800740e <_dtoa_r+0x9be>
 8007402:	4b87      	ldr	r3, [pc, #540]	; (8007620 <_dtoa_r+0xbd0>)
 8007404:	4602      	mov	r2, r0
 8007406:	f240 21ea 	movw	r1, #746	; 0x2ea
 800740a:	f7ff bb3b 	b.w	8006a84 <_dtoa_r+0x34>
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	3202      	adds	r2, #2
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	f107 010c 	add.w	r1, r7, #12
 8007418:	300c      	adds	r0, #12
 800741a:	f000 fa0d 	bl	8007838 <memcpy>
 800741e:	2201      	movs	r2, #1
 8007420:	4629      	mov	r1, r5
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fc28 	bl	8007c78 <__lshift>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	f103 0901 	add.w	r9, r3, #1
 800742e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007432:	4413      	add	r3, r2
 8007434:	9305      	str	r3, [sp, #20]
 8007436:	f00a 0301 	and.w	r3, sl, #1
 800743a:	46b8      	mov	r8, r7
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	4607      	mov	r7, r0
 8007440:	4631      	mov	r1, r6
 8007442:	ee18 0a10 	vmov	r0, s16
 8007446:	f7ff fa77 	bl	8006938 <quorem>
 800744a:	4641      	mov	r1, r8
 800744c:	9002      	str	r0, [sp, #8]
 800744e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007452:	ee18 0a10 	vmov	r0, s16
 8007456:	f000 fc7f 	bl	8007d58 <__mcmp>
 800745a:	463a      	mov	r2, r7
 800745c:	9003      	str	r0, [sp, #12]
 800745e:	4631      	mov	r1, r6
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fc95 	bl	8007d90 <__mdiff>
 8007466:	68c2      	ldr	r2, [r0, #12]
 8007468:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800746c:	4605      	mov	r5, r0
 800746e:	bb02      	cbnz	r2, 80074b2 <_dtoa_r+0xa62>
 8007470:	4601      	mov	r1, r0
 8007472:	ee18 0a10 	vmov	r0, s16
 8007476:	f000 fc6f 	bl	8007d58 <__mcmp>
 800747a:	4602      	mov	r2, r0
 800747c:	4629      	mov	r1, r5
 800747e:	4620      	mov	r0, r4
 8007480:	9207      	str	r2, [sp, #28]
 8007482:	f000 fa27 	bl	80078d4 <_Bfree>
 8007486:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800748a:	ea43 0102 	orr.w	r1, r3, r2
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	430b      	orrs	r3, r1
 8007492:	464d      	mov	r5, r9
 8007494:	d10f      	bne.n	80074b6 <_dtoa_r+0xa66>
 8007496:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800749a:	d02a      	beq.n	80074f2 <_dtoa_r+0xaa2>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd02      	ble.n	80074a8 <_dtoa_r+0xa58>
 80074a2:	9b02      	ldr	r3, [sp, #8]
 80074a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80074a8:	f88b a000 	strb.w	sl, [fp]
 80074ac:	e775      	b.n	800739a <_dtoa_r+0x94a>
 80074ae:	4638      	mov	r0, r7
 80074b0:	e7ba      	b.n	8007428 <_dtoa_r+0x9d8>
 80074b2:	2201      	movs	r2, #1
 80074b4:	e7e2      	b.n	800747c <_dtoa_r+0xa2c>
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	db04      	blt.n	80074c6 <_dtoa_r+0xa76>
 80074bc:	9906      	ldr	r1, [sp, #24]
 80074be:	430b      	orrs	r3, r1
 80074c0:	9904      	ldr	r1, [sp, #16]
 80074c2:	430b      	orrs	r3, r1
 80074c4:	d122      	bne.n	800750c <_dtoa_r+0xabc>
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	ddee      	ble.n	80074a8 <_dtoa_r+0xa58>
 80074ca:	ee18 1a10 	vmov	r1, s16
 80074ce:	2201      	movs	r2, #1
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fbd1 	bl	8007c78 <__lshift>
 80074d6:	4631      	mov	r1, r6
 80074d8:	ee08 0a10 	vmov	s16, r0
 80074dc:	f000 fc3c 	bl	8007d58 <__mcmp>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	dc03      	bgt.n	80074ec <_dtoa_r+0xa9c>
 80074e4:	d1e0      	bne.n	80074a8 <_dtoa_r+0xa58>
 80074e6:	f01a 0f01 	tst.w	sl, #1
 80074ea:	d0dd      	beq.n	80074a8 <_dtoa_r+0xa58>
 80074ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074f0:	d1d7      	bne.n	80074a2 <_dtoa_r+0xa52>
 80074f2:	2339      	movs	r3, #57	; 0x39
 80074f4:	f88b 3000 	strb.w	r3, [fp]
 80074f8:	462b      	mov	r3, r5
 80074fa:	461d      	mov	r5, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007502:	2a39      	cmp	r2, #57	; 0x39
 8007504:	d071      	beq.n	80075ea <_dtoa_r+0xb9a>
 8007506:	3201      	adds	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e746      	b.n	800739a <_dtoa_r+0x94a>
 800750c:	2a00      	cmp	r2, #0
 800750e:	dd07      	ble.n	8007520 <_dtoa_r+0xad0>
 8007510:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007514:	d0ed      	beq.n	80074f2 <_dtoa_r+0xaa2>
 8007516:	f10a 0301 	add.w	r3, sl, #1
 800751a:	f88b 3000 	strb.w	r3, [fp]
 800751e:	e73c      	b.n	800739a <_dtoa_r+0x94a>
 8007520:	9b05      	ldr	r3, [sp, #20]
 8007522:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007526:	4599      	cmp	r9, r3
 8007528:	d047      	beq.n	80075ba <_dtoa_r+0xb6a>
 800752a:	ee18 1a10 	vmov	r1, s16
 800752e:	2300      	movs	r3, #0
 8007530:	220a      	movs	r2, #10
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f9f0 	bl	8007918 <__multadd>
 8007538:	45b8      	cmp	r8, r7
 800753a:	ee08 0a10 	vmov	s16, r0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	f04f 020a 	mov.w	r2, #10
 8007546:	4641      	mov	r1, r8
 8007548:	4620      	mov	r0, r4
 800754a:	d106      	bne.n	800755a <_dtoa_r+0xb0a>
 800754c:	f000 f9e4 	bl	8007918 <__multadd>
 8007550:	4680      	mov	r8, r0
 8007552:	4607      	mov	r7, r0
 8007554:	f109 0901 	add.w	r9, r9, #1
 8007558:	e772      	b.n	8007440 <_dtoa_r+0x9f0>
 800755a:	f000 f9dd 	bl	8007918 <__multadd>
 800755e:	4639      	mov	r1, r7
 8007560:	4680      	mov	r8, r0
 8007562:	2300      	movs	r3, #0
 8007564:	220a      	movs	r2, #10
 8007566:	4620      	mov	r0, r4
 8007568:	f000 f9d6 	bl	8007918 <__multadd>
 800756c:	4607      	mov	r7, r0
 800756e:	e7f1      	b.n	8007554 <_dtoa_r+0xb04>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	9d01      	ldr	r5, [sp, #4]
 8007576:	ee18 0a10 	vmov	r0, s16
 800757a:	4631      	mov	r1, r6
 800757c:	f7ff f9dc 	bl	8006938 <quorem>
 8007580:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	f805 ab01 	strb.w	sl, [r5], #1
 800758a:	1aea      	subs	r2, r5, r3
 800758c:	9b02      	ldr	r3, [sp, #8]
 800758e:	4293      	cmp	r3, r2
 8007590:	dd09      	ble.n	80075a6 <_dtoa_r+0xb56>
 8007592:	ee18 1a10 	vmov	r1, s16
 8007596:	2300      	movs	r3, #0
 8007598:	220a      	movs	r2, #10
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f9bc 	bl	8007918 <__multadd>
 80075a0:	ee08 0a10 	vmov	s16, r0
 80075a4:	e7e7      	b.n	8007576 <_dtoa_r+0xb26>
 80075a6:	9b02      	ldr	r3, [sp, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfc8      	it	gt
 80075ac:	461d      	movgt	r5, r3
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	bfd8      	it	le
 80075b2:	2501      	movle	r5, #1
 80075b4:	441d      	add	r5, r3
 80075b6:	f04f 0800 	mov.w	r8, #0
 80075ba:	ee18 1a10 	vmov	r1, s16
 80075be:	2201      	movs	r2, #1
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fb59 	bl	8007c78 <__lshift>
 80075c6:	4631      	mov	r1, r6
 80075c8:	ee08 0a10 	vmov	s16, r0
 80075cc:	f000 fbc4 	bl	8007d58 <__mcmp>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	dc91      	bgt.n	80074f8 <_dtoa_r+0xaa8>
 80075d4:	d102      	bne.n	80075dc <_dtoa_r+0xb8c>
 80075d6:	f01a 0f01 	tst.w	sl, #1
 80075da:	d18d      	bne.n	80074f8 <_dtoa_r+0xaa8>
 80075dc:	462b      	mov	r3, r5
 80075de:	461d      	mov	r5, r3
 80075e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e4:	2a30      	cmp	r2, #48	; 0x30
 80075e6:	d0fa      	beq.n	80075de <_dtoa_r+0xb8e>
 80075e8:	e6d7      	b.n	800739a <_dtoa_r+0x94a>
 80075ea:	9a01      	ldr	r2, [sp, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d184      	bne.n	80074fa <_dtoa_r+0xaaa>
 80075f0:	9b00      	ldr	r3, [sp, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	2331      	movs	r3, #49	; 0x31
 80075f8:	7013      	strb	r3, [r2, #0]
 80075fa:	e6ce      	b.n	800739a <_dtoa_r+0x94a>
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <_dtoa_r+0xbd4>)
 80075fe:	f7ff ba95 	b.w	8006b2c <_dtoa_r+0xdc>
 8007602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f aa6e 	bne.w	8006ae6 <_dtoa_r+0x96>
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <_dtoa_r+0xbd8>)
 800760c:	f7ff ba8e 	b.w	8006b2c <_dtoa_r+0xdc>
 8007610:	9b02      	ldr	r3, [sp, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	dcae      	bgt.n	8007574 <_dtoa_r+0xb24>
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f73f aea8 	bgt.w	800736e <_dtoa_r+0x91e>
 800761e:	e7a9      	b.n	8007574 <_dtoa_r+0xb24>
 8007620:	08008b97 	.word	0x08008b97
 8007624:	08008af4 	.word	0x08008af4
 8007628:	08008b18 	.word	0x08008b18

0800762c <std>:
 800762c:	2300      	movs	r3, #0
 800762e:	b510      	push	{r4, lr}
 8007630:	4604      	mov	r4, r0
 8007632:	e9c0 3300 	strd	r3, r3, [r0]
 8007636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763a:	6083      	str	r3, [r0, #8]
 800763c:	8181      	strh	r1, [r0, #12]
 800763e:	6643      	str	r3, [r0, #100]	; 0x64
 8007640:	81c2      	strh	r2, [r0, #14]
 8007642:	6183      	str	r3, [r0, #24]
 8007644:	4619      	mov	r1, r3
 8007646:	2208      	movs	r2, #8
 8007648:	305c      	adds	r0, #92	; 0x5c
 800764a:	f7fe fd03 	bl	8006054 <memset>
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x38>)
 8007650:	6263      	str	r3, [r4, #36]	; 0x24
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x3c>)
 8007654:	62a3      	str	r3, [r4, #40]	; 0x28
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x40>)
 8007658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x44>)
 800765c:	6224      	str	r4, [r4, #32]
 800765e:	6323      	str	r3, [r4, #48]	; 0x30
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	0800841d 	.word	0x0800841d
 8007668:	0800843f 	.word	0x0800843f
 800766c:	08008477 	.word	0x08008477
 8007670:	0800849b 	.word	0x0800849b

08007674 <_cleanup_r>:
 8007674:	4901      	ldr	r1, [pc, #4]	; (800767c <_cleanup_r+0x8>)
 8007676:	f000 b8af 	b.w	80077d8 <_fwalk_reent>
 800767a:	bf00      	nop
 800767c:	080087b1 	.word	0x080087b1

08007680 <__sfmoreglue>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	2268      	movs	r2, #104	; 0x68
 8007684:	1e4d      	subs	r5, r1, #1
 8007686:	4355      	muls	r5, r2
 8007688:	460e      	mov	r6, r1
 800768a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800768e:	f000 fce7 	bl	8008060 <_malloc_r>
 8007692:	4604      	mov	r4, r0
 8007694:	b140      	cbz	r0, 80076a8 <__sfmoreglue+0x28>
 8007696:	2100      	movs	r1, #0
 8007698:	e9c0 1600 	strd	r1, r6, [r0]
 800769c:	300c      	adds	r0, #12
 800769e:	60a0      	str	r0, [r4, #8]
 80076a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a4:	f7fe fcd6 	bl	8006054 <memset>
 80076a8:	4620      	mov	r0, r4
 80076aa:	bd70      	pop	{r4, r5, r6, pc}

080076ac <__sfp_lock_acquire>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__sfp_lock_acquire+0x8>)
 80076ae:	f000 b8b8 	b.w	8007822 <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	20000419 	.word	0x20000419

080076b8 <__sfp_lock_release>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__sfp_lock_release+0x8>)
 80076ba:	f000 b8b3 	b.w	8007824 <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	20000419 	.word	0x20000419

080076c4 <__sinit_lock_acquire>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__sinit_lock_acquire+0x8>)
 80076c6:	f000 b8ac 	b.w	8007822 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	2000041a 	.word	0x2000041a

080076d0 <__sinit_lock_release>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__sinit_lock_release+0x8>)
 80076d2:	f000 b8a7 	b.w	8007824 <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	2000041a 	.word	0x2000041a

080076dc <__sinit>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	f7ff fff0 	bl	80076c4 <__sinit_lock_acquire>
 80076e4:	69a3      	ldr	r3, [r4, #24]
 80076e6:	b11b      	cbz	r3, 80076f0 <__sinit+0x14>
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f7ff bff0 	b.w	80076d0 <__sinit_lock_release>
 80076f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076f4:	6523      	str	r3, [r4, #80]	; 0x50
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <__sinit+0x68>)
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <__sinit+0x6c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80076fe:	42a3      	cmp	r3, r4
 8007700:	bf04      	itt	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	61a3      	streq	r3, [r4, #24]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f820 	bl	800774c <__sfp>
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	4620      	mov	r0, r4
 8007710:	f000 f81c 	bl	800774c <__sfp>
 8007714:	60a0      	str	r0, [r4, #8]
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f818 	bl	800774c <__sfp>
 800771c:	2200      	movs	r2, #0
 800771e:	60e0      	str	r0, [r4, #12]
 8007720:	2104      	movs	r1, #4
 8007722:	6860      	ldr	r0, [r4, #4]
 8007724:	f7ff ff82 	bl	800762c <std>
 8007728:	68a0      	ldr	r0, [r4, #8]
 800772a:	2201      	movs	r2, #1
 800772c:	2109      	movs	r1, #9
 800772e:	f7ff ff7d 	bl	800762c <std>
 8007732:	68e0      	ldr	r0, [r4, #12]
 8007734:	2202      	movs	r2, #2
 8007736:	2112      	movs	r1, #18
 8007738:	f7ff ff78 	bl	800762c <std>
 800773c:	2301      	movs	r3, #1
 800773e:	61a3      	str	r3, [r4, #24]
 8007740:	e7d2      	b.n	80076e8 <__sinit+0xc>
 8007742:	bf00      	nop
 8007744:	08008ae0 	.word	0x08008ae0
 8007748:	08007675 	.word	0x08007675

0800774c <__sfp>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	4607      	mov	r7, r0
 8007750:	f7ff ffac 	bl	80076ac <__sfp_lock_acquire>
 8007754:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <__sfp+0x84>)
 8007756:	681e      	ldr	r6, [r3, #0]
 8007758:	69b3      	ldr	r3, [r6, #24]
 800775a:	b913      	cbnz	r3, 8007762 <__sfp+0x16>
 800775c:	4630      	mov	r0, r6
 800775e:	f7ff ffbd 	bl	80076dc <__sinit>
 8007762:	3648      	adds	r6, #72	; 0x48
 8007764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	d503      	bpl.n	8007774 <__sfp+0x28>
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	b30b      	cbz	r3, 80077b4 <__sfp+0x68>
 8007770:	6836      	ldr	r6, [r6, #0]
 8007772:	e7f7      	b.n	8007764 <__sfp+0x18>
 8007774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007778:	b9d5      	cbnz	r5, 80077b0 <__sfp+0x64>
 800777a:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <__sfp+0x88>)
 800777c:	60e3      	str	r3, [r4, #12]
 800777e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007782:	6665      	str	r5, [r4, #100]	; 0x64
 8007784:	f000 f84c 	bl	8007820 <__retarget_lock_init_recursive>
 8007788:	f7ff ff96 	bl	80076b8 <__sfp_lock_release>
 800778c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007794:	6025      	str	r5, [r4, #0]
 8007796:	61a5      	str	r5, [r4, #24]
 8007798:	2208      	movs	r2, #8
 800779a:	4629      	mov	r1, r5
 800779c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077a0:	f7fe fc58 	bl	8006054 <memset>
 80077a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077ac:	4620      	mov	r0, r4
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b0:	3468      	adds	r4, #104	; 0x68
 80077b2:	e7d9      	b.n	8007768 <__sfp+0x1c>
 80077b4:	2104      	movs	r1, #4
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ff62 	bl	8007680 <__sfmoreglue>
 80077bc:	4604      	mov	r4, r0
 80077be:	6030      	str	r0, [r6, #0]
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d1d5      	bne.n	8007770 <__sfp+0x24>
 80077c4:	f7ff ff78 	bl	80076b8 <__sfp_lock_release>
 80077c8:	230c      	movs	r3, #12
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e7ee      	b.n	80077ac <__sfp+0x60>
 80077ce:	bf00      	nop
 80077d0:	08008ae0 	.word	0x08008ae0
 80077d4:	ffff0001 	.word	0xffff0001

080077d8 <_fwalk_reent>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4606      	mov	r6, r0
 80077de:	4688      	mov	r8, r1
 80077e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077e4:	2700      	movs	r7, #0
 80077e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ea:	f1b9 0901 	subs.w	r9, r9, #1
 80077ee:	d505      	bpl.n	80077fc <_fwalk_reent+0x24>
 80077f0:	6824      	ldr	r4, [r4, #0]
 80077f2:	2c00      	cmp	r4, #0
 80077f4:	d1f7      	bne.n	80077e6 <_fwalk_reent+0xe>
 80077f6:	4638      	mov	r0, r7
 80077f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fc:	89ab      	ldrh	r3, [r5, #12]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d907      	bls.n	8007812 <_fwalk_reent+0x3a>
 8007802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007806:	3301      	adds	r3, #1
 8007808:	d003      	beq.n	8007812 <_fwalk_reent+0x3a>
 800780a:	4629      	mov	r1, r5
 800780c:	4630      	mov	r0, r6
 800780e:	47c0      	blx	r8
 8007810:	4307      	orrs	r7, r0
 8007812:	3568      	adds	r5, #104	; 0x68
 8007814:	e7e9      	b.n	80077ea <_fwalk_reent+0x12>
	...

08007818 <_localeconv_r>:
 8007818:	4800      	ldr	r0, [pc, #0]	; (800781c <_localeconv_r+0x4>)
 800781a:	4770      	bx	lr
 800781c:	20000164 	.word	0x20000164

08007820 <__retarget_lock_init_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_acquire_recursive>:
 8007822:	4770      	bx	lr

08007824 <__retarget_lock_release_recursive>:
 8007824:	4770      	bx	lr
	...

08007828 <malloc>:
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <malloc+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f000 bc17 	b.w	8008060 <_malloc_r>
 8007832:	bf00      	nop
 8007834:	20000010 	.word	0x20000010

08007838 <memcpy>:
 8007838:	440a      	add	r2, r1
 800783a:	4291      	cmp	r1, r2
 800783c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007840:	d100      	bne.n	8007844 <memcpy+0xc>
 8007842:	4770      	bx	lr
 8007844:	b510      	push	{r4, lr}
 8007846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800784a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800784e:	4291      	cmp	r1, r2
 8007850:	d1f9      	bne.n	8007846 <memcpy+0xe>
 8007852:	bd10      	pop	{r4, pc}

08007854 <_Balloc>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007858:	4604      	mov	r4, r0
 800785a:	460d      	mov	r5, r1
 800785c:	b976      	cbnz	r6, 800787c <_Balloc+0x28>
 800785e:	2010      	movs	r0, #16
 8007860:	f7ff ffe2 	bl	8007828 <malloc>
 8007864:	4602      	mov	r2, r0
 8007866:	6260      	str	r0, [r4, #36]	; 0x24
 8007868:	b920      	cbnz	r0, 8007874 <_Balloc+0x20>
 800786a:	4b18      	ldr	r3, [pc, #96]	; (80078cc <_Balloc+0x78>)
 800786c:	4818      	ldr	r0, [pc, #96]	; (80078d0 <_Balloc+0x7c>)
 800786e:	2166      	movs	r1, #102	; 0x66
 8007870:	f000 feea 	bl	8008648 <__assert_func>
 8007874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007878:	6006      	str	r6, [r0, #0]
 800787a:	60c6      	str	r6, [r0, #12]
 800787c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800787e:	68f3      	ldr	r3, [r6, #12]
 8007880:	b183      	cbz	r3, 80078a4 <_Balloc+0x50>
 8007882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800788a:	b9b8      	cbnz	r0, 80078bc <_Balloc+0x68>
 800788c:	2101      	movs	r1, #1
 800788e:	fa01 f605 	lsl.w	r6, r1, r5
 8007892:	1d72      	adds	r2, r6, #5
 8007894:	0092      	lsls	r2, r2, #2
 8007896:	4620      	mov	r0, r4
 8007898:	f000 fb60 	bl	8007f5c <_calloc_r>
 800789c:	b160      	cbz	r0, 80078b8 <_Balloc+0x64>
 800789e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078a2:	e00e      	b.n	80078c2 <_Balloc+0x6e>
 80078a4:	2221      	movs	r2, #33	; 0x21
 80078a6:	2104      	movs	r1, #4
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fb57 	bl	8007f5c <_calloc_r>
 80078ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b0:	60f0      	str	r0, [r6, #12]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e4      	bne.n	8007882 <_Balloc+0x2e>
 80078b8:	2000      	movs	r0, #0
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	6802      	ldr	r2, [r0, #0]
 80078be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078c2:	2300      	movs	r3, #0
 80078c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078c8:	e7f7      	b.n	80078ba <_Balloc+0x66>
 80078ca:	bf00      	nop
 80078cc:	08008b25 	.word	0x08008b25
 80078d0:	08008c08 	.word	0x08008c08

080078d4 <_Bfree>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078d8:	4605      	mov	r5, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	b976      	cbnz	r6, 80078fc <_Bfree+0x28>
 80078de:	2010      	movs	r0, #16
 80078e0:	f7ff ffa2 	bl	8007828 <malloc>
 80078e4:	4602      	mov	r2, r0
 80078e6:	6268      	str	r0, [r5, #36]	; 0x24
 80078e8:	b920      	cbnz	r0, 80078f4 <_Bfree+0x20>
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <_Bfree+0x3c>)
 80078ec:	4809      	ldr	r0, [pc, #36]	; (8007914 <_Bfree+0x40>)
 80078ee:	218a      	movs	r1, #138	; 0x8a
 80078f0:	f000 feaa 	bl	8008648 <__assert_func>
 80078f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f8:	6006      	str	r6, [r0, #0]
 80078fa:	60c6      	str	r6, [r0, #12]
 80078fc:	b13c      	cbz	r4, 800790e <_Bfree+0x3a>
 80078fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007900:	6862      	ldr	r2, [r4, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007908:	6021      	str	r1, [r4, #0]
 800790a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	08008b25 	.word	0x08008b25
 8007914:	08008c08 	.word	0x08008c08

08007918 <__multadd>:
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	690d      	ldr	r5, [r1, #16]
 800791e:	4607      	mov	r7, r0
 8007920:	460c      	mov	r4, r1
 8007922:	461e      	mov	r6, r3
 8007924:	f101 0c14 	add.w	ip, r1, #20
 8007928:	2000      	movs	r0, #0
 800792a:	f8dc 3000 	ldr.w	r3, [ip]
 800792e:	b299      	uxth	r1, r3
 8007930:	fb02 6101 	mla	r1, r2, r1, r6
 8007934:	0c1e      	lsrs	r6, r3, #16
 8007936:	0c0b      	lsrs	r3, r1, #16
 8007938:	fb02 3306 	mla	r3, r2, r6, r3
 800793c:	b289      	uxth	r1, r1
 800793e:	3001      	adds	r0, #1
 8007940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007944:	4285      	cmp	r5, r0
 8007946:	f84c 1b04 	str.w	r1, [ip], #4
 800794a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800794e:	dcec      	bgt.n	800792a <__multadd+0x12>
 8007950:	b30e      	cbz	r6, 8007996 <__multadd+0x7e>
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	42ab      	cmp	r3, r5
 8007956:	dc19      	bgt.n	800798c <__multadd+0x74>
 8007958:	6861      	ldr	r1, [r4, #4]
 800795a:	4638      	mov	r0, r7
 800795c:	3101      	adds	r1, #1
 800795e:	f7ff ff79 	bl	8007854 <_Balloc>
 8007962:	4680      	mov	r8, r0
 8007964:	b928      	cbnz	r0, 8007972 <__multadd+0x5a>
 8007966:	4602      	mov	r2, r0
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <__multadd+0x84>)
 800796a:	480d      	ldr	r0, [pc, #52]	; (80079a0 <__multadd+0x88>)
 800796c:	21b5      	movs	r1, #181	; 0xb5
 800796e:	f000 fe6b 	bl	8008648 <__assert_func>
 8007972:	6922      	ldr	r2, [r4, #16]
 8007974:	3202      	adds	r2, #2
 8007976:	f104 010c 	add.w	r1, r4, #12
 800797a:	0092      	lsls	r2, r2, #2
 800797c:	300c      	adds	r0, #12
 800797e:	f7ff ff5b 	bl	8007838 <memcpy>
 8007982:	4621      	mov	r1, r4
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff ffa5 	bl	80078d4 <_Bfree>
 800798a:	4644      	mov	r4, r8
 800798c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007990:	3501      	adds	r5, #1
 8007992:	615e      	str	r6, [r3, #20]
 8007994:	6125      	str	r5, [r4, #16]
 8007996:	4620      	mov	r0, r4
 8007998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800799c:	08008b97 	.word	0x08008b97
 80079a0:	08008c08 	.word	0x08008c08

080079a4 <__hi0bits>:
 80079a4:	0c03      	lsrs	r3, r0, #16
 80079a6:	041b      	lsls	r3, r3, #16
 80079a8:	b9d3      	cbnz	r3, 80079e0 <__hi0bits+0x3c>
 80079aa:	0400      	lsls	r0, r0, #16
 80079ac:	2310      	movs	r3, #16
 80079ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079b2:	bf04      	itt	eq
 80079b4:	0200      	lsleq	r0, r0, #8
 80079b6:	3308      	addeq	r3, #8
 80079b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079bc:	bf04      	itt	eq
 80079be:	0100      	lsleq	r0, r0, #4
 80079c0:	3304      	addeq	r3, #4
 80079c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079c6:	bf04      	itt	eq
 80079c8:	0080      	lsleq	r0, r0, #2
 80079ca:	3302      	addeq	r3, #2
 80079cc:	2800      	cmp	r0, #0
 80079ce:	db05      	blt.n	80079dc <__hi0bits+0x38>
 80079d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079d4:	f103 0301 	add.w	r3, r3, #1
 80079d8:	bf08      	it	eq
 80079da:	2320      	moveq	r3, #32
 80079dc:	4618      	mov	r0, r3
 80079de:	4770      	bx	lr
 80079e0:	2300      	movs	r3, #0
 80079e2:	e7e4      	b.n	80079ae <__hi0bits+0xa>

080079e4 <__lo0bits>:
 80079e4:	6803      	ldr	r3, [r0, #0]
 80079e6:	f013 0207 	ands.w	r2, r3, #7
 80079ea:	4601      	mov	r1, r0
 80079ec:	d00b      	beq.n	8007a06 <__lo0bits+0x22>
 80079ee:	07da      	lsls	r2, r3, #31
 80079f0:	d423      	bmi.n	8007a3a <__lo0bits+0x56>
 80079f2:	0798      	lsls	r0, r3, #30
 80079f4:	bf49      	itett	mi
 80079f6:	085b      	lsrmi	r3, r3, #1
 80079f8:	089b      	lsrpl	r3, r3, #2
 80079fa:	2001      	movmi	r0, #1
 80079fc:	600b      	strmi	r3, [r1, #0]
 80079fe:	bf5c      	itt	pl
 8007a00:	600b      	strpl	r3, [r1, #0]
 8007a02:	2002      	movpl	r0, #2
 8007a04:	4770      	bx	lr
 8007a06:	b298      	uxth	r0, r3
 8007a08:	b9a8      	cbnz	r0, 8007a36 <__lo0bits+0x52>
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	2010      	movs	r0, #16
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	b90a      	cbnz	r2, 8007a16 <__lo0bits+0x32>
 8007a12:	3008      	adds	r0, #8
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	071a      	lsls	r2, r3, #28
 8007a18:	bf04      	itt	eq
 8007a1a:	091b      	lsreq	r3, r3, #4
 8007a1c:	3004      	addeq	r0, #4
 8007a1e:	079a      	lsls	r2, r3, #30
 8007a20:	bf04      	itt	eq
 8007a22:	089b      	lsreq	r3, r3, #2
 8007a24:	3002      	addeq	r0, #2
 8007a26:	07da      	lsls	r2, r3, #31
 8007a28:	d403      	bmi.n	8007a32 <__lo0bits+0x4e>
 8007a2a:	085b      	lsrs	r3, r3, #1
 8007a2c:	f100 0001 	add.w	r0, r0, #1
 8007a30:	d005      	beq.n	8007a3e <__lo0bits+0x5a>
 8007a32:	600b      	str	r3, [r1, #0]
 8007a34:	4770      	bx	lr
 8007a36:	4610      	mov	r0, r2
 8007a38:	e7e9      	b.n	8007a0e <__lo0bits+0x2a>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	4770      	bx	lr
 8007a3e:	2020      	movs	r0, #32
 8007a40:	4770      	bx	lr
	...

08007a44 <__i2b>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	2101      	movs	r1, #1
 8007a4a:	f7ff ff03 	bl	8007854 <_Balloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	b928      	cbnz	r0, 8007a5e <__i2b+0x1a>
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <__i2b+0x24>)
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <__i2b+0x28>)
 8007a56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a5a:	f000 fdf5 	bl	8008648 <__assert_func>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	6144      	str	r4, [r0, #20]
 8007a62:	6103      	str	r3, [r0, #16]
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	bf00      	nop
 8007a68:	08008b97 	.word	0x08008b97
 8007a6c:	08008c08 	.word	0x08008c08

08007a70 <__multiply>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4691      	mov	r9, r2
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	bfb8      	it	lt
 8007a80:	460b      	movlt	r3, r1
 8007a82:	460c      	mov	r4, r1
 8007a84:	bfbc      	itt	lt
 8007a86:	464c      	movlt	r4, r9
 8007a88:	4699      	movlt	r9, r3
 8007a8a:	6927      	ldr	r7, [r4, #16]
 8007a8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a90:	68a3      	ldr	r3, [r4, #8]
 8007a92:	6861      	ldr	r1, [r4, #4]
 8007a94:	eb07 060a 	add.w	r6, r7, sl
 8007a98:	42b3      	cmp	r3, r6
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	bfb8      	it	lt
 8007a9e:	3101      	addlt	r1, #1
 8007aa0:	f7ff fed8 	bl	8007854 <_Balloc>
 8007aa4:	b930      	cbnz	r0, 8007ab4 <__multiply+0x44>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	4b44      	ldr	r3, [pc, #272]	; (8007bbc <__multiply+0x14c>)
 8007aaa:	4845      	ldr	r0, [pc, #276]	; (8007bc0 <__multiply+0x150>)
 8007aac:	f240 115d 	movw	r1, #349	; 0x15d
 8007ab0:	f000 fdca 	bl	8008648 <__assert_func>
 8007ab4:	f100 0514 	add.w	r5, r0, #20
 8007ab8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007abc:	462b      	mov	r3, r5
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4543      	cmp	r3, r8
 8007ac2:	d321      	bcc.n	8007b08 <__multiply+0x98>
 8007ac4:	f104 0314 	add.w	r3, r4, #20
 8007ac8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007acc:	f109 0314 	add.w	r3, r9, #20
 8007ad0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ad4:	9202      	str	r2, [sp, #8]
 8007ad6:	1b3a      	subs	r2, r7, r4
 8007ad8:	3a15      	subs	r2, #21
 8007ada:	f022 0203 	bic.w	r2, r2, #3
 8007ade:	3204      	adds	r2, #4
 8007ae0:	f104 0115 	add.w	r1, r4, #21
 8007ae4:	428f      	cmp	r7, r1
 8007ae6:	bf38      	it	cc
 8007ae8:	2204      	movcc	r2, #4
 8007aea:	9201      	str	r2, [sp, #4]
 8007aec:	9a02      	ldr	r2, [sp, #8]
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d80c      	bhi.n	8007b0e <__multiply+0x9e>
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	dd03      	ble.n	8007b00 <__multiply+0x90>
 8007af8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d05a      	beq.n	8007bb6 <__multiply+0x146>
 8007b00:	6106      	str	r6, [r0, #16]
 8007b02:	b005      	add	sp, #20
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	f843 2b04 	str.w	r2, [r3], #4
 8007b0c:	e7d8      	b.n	8007ac0 <__multiply+0x50>
 8007b0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b12:	f1ba 0f00 	cmp.w	sl, #0
 8007b16:	d024      	beq.n	8007b62 <__multiply+0xf2>
 8007b18:	f104 0e14 	add.w	lr, r4, #20
 8007b1c:	46a9      	mov	r9, r5
 8007b1e:	f04f 0c00 	mov.w	ip, #0
 8007b22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b26:	f8d9 1000 	ldr.w	r1, [r9]
 8007b2a:	fa1f fb82 	uxth.w	fp, r2
 8007b2e:	b289      	uxth	r1, r1
 8007b30:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b38:	f8d9 2000 	ldr.w	r2, [r9]
 8007b3c:	4461      	add	r1, ip
 8007b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b42:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b4a:	b289      	uxth	r1, r1
 8007b4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b50:	4577      	cmp	r7, lr
 8007b52:	f849 1b04 	str.w	r1, [r9], #4
 8007b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b5a:	d8e2      	bhi.n	8007b22 <__multiply+0xb2>
 8007b5c:	9a01      	ldr	r2, [sp, #4]
 8007b5e:	f845 c002 	str.w	ip, [r5, r2]
 8007b62:	9a03      	ldr	r2, [sp, #12]
 8007b64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	d020      	beq.n	8007bb2 <__multiply+0x142>
 8007b70:	6829      	ldr	r1, [r5, #0]
 8007b72:	f104 0c14 	add.w	ip, r4, #20
 8007b76:	46ae      	mov	lr, r5
 8007b78:	f04f 0a00 	mov.w	sl, #0
 8007b7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b84:	fb09 220b 	mla	r2, r9, fp, r2
 8007b88:	4492      	add	sl, r2
 8007b8a:	b289      	uxth	r1, r1
 8007b8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b90:	f84e 1b04 	str.w	r1, [lr], #4
 8007b94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b98:	f8be 1000 	ldrh.w	r1, [lr]
 8007b9c:	0c12      	lsrs	r2, r2, #16
 8007b9e:	fb09 1102 	mla	r1, r9, r2, r1
 8007ba2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ba6:	4567      	cmp	r7, ip
 8007ba8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bac:	d8e6      	bhi.n	8007b7c <__multiply+0x10c>
 8007bae:	9a01      	ldr	r2, [sp, #4]
 8007bb0:	50a9      	str	r1, [r5, r2]
 8007bb2:	3504      	adds	r5, #4
 8007bb4:	e79a      	b.n	8007aec <__multiply+0x7c>
 8007bb6:	3e01      	subs	r6, #1
 8007bb8:	e79c      	b.n	8007af4 <__multiply+0x84>
 8007bba:	bf00      	nop
 8007bbc:	08008b97 	.word	0x08008b97
 8007bc0:	08008c08 	.word	0x08008c08

08007bc4 <__pow5mult>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4615      	mov	r5, r2
 8007bca:	f012 0203 	ands.w	r2, r2, #3
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	d007      	beq.n	8007be4 <__pow5mult+0x20>
 8007bd4:	4c25      	ldr	r4, [pc, #148]	; (8007c6c <__pow5mult+0xa8>)
 8007bd6:	3a01      	subs	r2, #1
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bde:	f7ff fe9b 	bl	8007918 <__multadd>
 8007be2:	4607      	mov	r7, r0
 8007be4:	10ad      	asrs	r5, r5, #2
 8007be6:	d03d      	beq.n	8007c64 <__pow5mult+0xa0>
 8007be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bea:	b97c      	cbnz	r4, 8007c0c <__pow5mult+0x48>
 8007bec:	2010      	movs	r0, #16
 8007bee:	f7ff fe1b 	bl	8007828 <malloc>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6270      	str	r0, [r6, #36]	; 0x24
 8007bf6:	b928      	cbnz	r0, 8007c04 <__pow5mult+0x40>
 8007bf8:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <__pow5mult+0xac>)
 8007bfa:	481e      	ldr	r0, [pc, #120]	; (8007c74 <__pow5mult+0xb0>)
 8007bfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c00:	f000 fd22 	bl	8008648 <__assert_func>
 8007c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c08:	6004      	str	r4, [r0, #0]
 8007c0a:	60c4      	str	r4, [r0, #12]
 8007c0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c14:	b94c      	cbnz	r4, 8007c2a <__pow5mult+0x66>
 8007c16:	f240 2171 	movw	r1, #625	; 0x271
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ff12 	bl	8007a44 <__i2b>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c26:	4604      	mov	r4, r0
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	f04f 0900 	mov.w	r9, #0
 8007c2e:	07eb      	lsls	r3, r5, #31
 8007c30:	d50a      	bpl.n	8007c48 <__pow5mult+0x84>
 8007c32:	4639      	mov	r1, r7
 8007c34:	4622      	mov	r2, r4
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7ff ff1a 	bl	8007a70 <__multiply>
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff fe47 	bl	80078d4 <_Bfree>
 8007c46:	4647      	mov	r7, r8
 8007c48:	106d      	asrs	r5, r5, #1
 8007c4a:	d00b      	beq.n	8007c64 <__pow5mult+0xa0>
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	b938      	cbnz	r0, 8007c60 <__pow5mult+0x9c>
 8007c50:	4622      	mov	r2, r4
 8007c52:	4621      	mov	r1, r4
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff ff0b 	bl	8007a70 <__multiply>
 8007c5a:	6020      	str	r0, [r4, #0]
 8007c5c:	f8c0 9000 	str.w	r9, [r0]
 8007c60:	4604      	mov	r4, r0
 8007c62:	e7e4      	b.n	8007c2e <__pow5mult+0x6a>
 8007c64:	4638      	mov	r0, r7
 8007c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08008d58 	.word	0x08008d58
 8007c70:	08008b25 	.word	0x08008b25
 8007c74:	08008c08 	.word	0x08008c08

08007c78 <__lshift>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6849      	ldr	r1, [r1, #4]
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4691      	mov	r9, r2
 8007c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c90:	f108 0601 	add.w	r6, r8, #1
 8007c94:	42b3      	cmp	r3, r6
 8007c96:	db0b      	blt.n	8007cb0 <__lshift+0x38>
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fddb 	bl	8007854 <_Balloc>
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	b948      	cbnz	r0, 8007cb6 <__lshift+0x3e>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <__lshift+0xd8>)
 8007ca6:	482b      	ldr	r0, [pc, #172]	; (8007d54 <__lshift+0xdc>)
 8007ca8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cac:	f000 fccc 	bl	8008648 <__assert_func>
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	e7ee      	b.n	8007c94 <__lshift+0x1c>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f100 0114 	add.w	r1, r0, #20
 8007cbc:	f100 0210 	add.w	r2, r0, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	4553      	cmp	r3, sl
 8007cc4:	db37      	blt.n	8007d36 <__lshift+0xbe>
 8007cc6:	6920      	ldr	r0, [r4, #16]
 8007cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ccc:	f104 0314 	add.w	r3, r4, #20
 8007cd0:	f019 091f 	ands.w	r9, r9, #31
 8007cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cdc:	d02f      	beq.n	8007d3e <__lshift+0xc6>
 8007cde:	f1c9 0e20 	rsb	lr, r9, #32
 8007ce2:	468a      	mov	sl, r1
 8007ce4:	f04f 0c00 	mov.w	ip, #0
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	fa02 f209 	lsl.w	r2, r2, r9
 8007cee:	ea42 020c 	orr.w	r2, r2, ip
 8007cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8007cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d00:	d8f2      	bhi.n	8007ce8 <__lshift+0x70>
 8007d02:	1b03      	subs	r3, r0, r4
 8007d04:	3b15      	subs	r3, #21
 8007d06:	f023 0303 	bic.w	r3, r3, #3
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	f104 0215 	add.w	r2, r4, #21
 8007d10:	4290      	cmp	r0, r2
 8007d12:	bf38      	it	cc
 8007d14:	2304      	movcc	r3, #4
 8007d16:	f841 c003 	str.w	ip, [r1, r3]
 8007d1a:	f1bc 0f00 	cmp.w	ip, #0
 8007d1e:	d001      	beq.n	8007d24 <__lshift+0xac>
 8007d20:	f108 0602 	add.w	r6, r8, #2
 8007d24:	3e01      	subs	r6, #1
 8007d26:	4638      	mov	r0, r7
 8007d28:	612e      	str	r6, [r5, #16]
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	f7ff fdd2 	bl	80078d4 <_Bfree>
 8007d30:	4628      	mov	r0, r5
 8007d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	e7c1      	b.n	8007cc2 <__lshift+0x4a>
 8007d3e:	3904      	subs	r1, #4
 8007d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d44:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d48:	4298      	cmp	r0, r3
 8007d4a:	d8f9      	bhi.n	8007d40 <__lshift+0xc8>
 8007d4c:	e7ea      	b.n	8007d24 <__lshift+0xac>
 8007d4e:	bf00      	nop
 8007d50:	08008b97 	.word	0x08008b97
 8007d54:	08008c08 	.word	0x08008c08

08007d58 <__mcmp>:
 8007d58:	b530      	push	{r4, r5, lr}
 8007d5a:	6902      	ldr	r2, [r0, #16]
 8007d5c:	690c      	ldr	r4, [r1, #16]
 8007d5e:	1b12      	subs	r2, r2, r4
 8007d60:	d10e      	bne.n	8007d80 <__mcmp+0x28>
 8007d62:	f100 0314 	add.w	r3, r0, #20
 8007d66:	3114      	adds	r1, #20
 8007d68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d78:	42a5      	cmp	r5, r4
 8007d7a:	d003      	beq.n	8007d84 <__mcmp+0x2c>
 8007d7c:	d305      	bcc.n	8007d8a <__mcmp+0x32>
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4610      	mov	r0, r2
 8007d82:	bd30      	pop	{r4, r5, pc}
 8007d84:	4283      	cmp	r3, r0
 8007d86:	d3f3      	bcc.n	8007d70 <__mcmp+0x18>
 8007d88:	e7fa      	b.n	8007d80 <__mcmp+0x28>
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d8e:	e7f7      	b.n	8007d80 <__mcmp+0x28>

08007d90 <__mdiff>:
 8007d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	4606      	mov	r6, r0
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4690      	mov	r8, r2
 8007d9e:	f7ff ffdb 	bl	8007d58 <__mcmp>
 8007da2:	1e05      	subs	r5, r0, #0
 8007da4:	d110      	bne.n	8007dc8 <__mdiff+0x38>
 8007da6:	4629      	mov	r1, r5
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff fd53 	bl	8007854 <_Balloc>
 8007dae:	b930      	cbnz	r0, 8007dbe <__mdiff+0x2e>
 8007db0:	4b3a      	ldr	r3, [pc, #232]	; (8007e9c <__mdiff+0x10c>)
 8007db2:	4602      	mov	r2, r0
 8007db4:	f240 2132 	movw	r1, #562	; 0x232
 8007db8:	4839      	ldr	r0, [pc, #228]	; (8007ea0 <__mdiff+0x110>)
 8007dba:	f000 fc45 	bl	8008648 <__assert_func>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc8:	bfa4      	itt	ge
 8007dca:	4643      	movge	r3, r8
 8007dcc:	46a0      	movge	r8, r4
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dd4:	bfa6      	itte	ge
 8007dd6:	461c      	movge	r4, r3
 8007dd8:	2500      	movge	r5, #0
 8007dda:	2501      	movlt	r5, #1
 8007ddc:	f7ff fd3a 	bl	8007854 <_Balloc>
 8007de0:	b920      	cbnz	r0, 8007dec <__mdiff+0x5c>
 8007de2:	4b2e      	ldr	r3, [pc, #184]	; (8007e9c <__mdiff+0x10c>)
 8007de4:	4602      	mov	r2, r0
 8007de6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007dea:	e7e5      	b.n	8007db8 <__mdiff+0x28>
 8007dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007df0:	6926      	ldr	r6, [r4, #16]
 8007df2:	60c5      	str	r5, [r0, #12]
 8007df4:	f104 0914 	add.w	r9, r4, #20
 8007df8:	f108 0514 	add.w	r5, r8, #20
 8007dfc:	f100 0e14 	add.w	lr, r0, #20
 8007e00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e08:	f108 0210 	add.w	r2, r8, #16
 8007e0c:	46f2      	mov	sl, lr
 8007e0e:	2100      	movs	r1, #0
 8007e10:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e18:	fa1f f883 	uxth.w	r8, r3
 8007e1c:	fa11 f18b 	uxtah	r1, r1, fp
 8007e20:	0c1b      	lsrs	r3, r3, #16
 8007e22:	eba1 0808 	sub.w	r8, r1, r8
 8007e26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e2e:	fa1f f888 	uxth.w	r8, r8
 8007e32:	1419      	asrs	r1, r3, #16
 8007e34:	454e      	cmp	r6, r9
 8007e36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e3a:	f84a 3b04 	str.w	r3, [sl], #4
 8007e3e:	d8e7      	bhi.n	8007e10 <__mdiff+0x80>
 8007e40:	1b33      	subs	r3, r6, r4
 8007e42:	3b15      	subs	r3, #21
 8007e44:	f023 0303 	bic.w	r3, r3, #3
 8007e48:	3304      	adds	r3, #4
 8007e4a:	3415      	adds	r4, #21
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	bf38      	it	cc
 8007e50:	2304      	movcc	r3, #4
 8007e52:	441d      	add	r5, r3
 8007e54:	4473      	add	r3, lr
 8007e56:	469e      	mov	lr, r3
 8007e58:	462e      	mov	r6, r5
 8007e5a:	4566      	cmp	r6, ip
 8007e5c:	d30e      	bcc.n	8007e7c <__mdiff+0xec>
 8007e5e:	f10c 0203 	add.w	r2, ip, #3
 8007e62:	1b52      	subs	r2, r2, r5
 8007e64:	f022 0203 	bic.w	r2, r2, #3
 8007e68:	3d03      	subs	r5, #3
 8007e6a:	45ac      	cmp	ip, r5
 8007e6c:	bf38      	it	cc
 8007e6e:	2200      	movcc	r2, #0
 8007e70:	441a      	add	r2, r3
 8007e72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e76:	b17b      	cbz	r3, 8007e98 <__mdiff+0x108>
 8007e78:	6107      	str	r7, [r0, #16]
 8007e7a:	e7a3      	b.n	8007dc4 <__mdiff+0x34>
 8007e7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e80:	fa11 f288 	uxtah	r2, r1, r8
 8007e84:	1414      	asrs	r4, r2, #16
 8007e86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e90:	f84e 2b04 	str.w	r2, [lr], #4
 8007e94:	1421      	asrs	r1, r4, #16
 8007e96:	e7e0      	b.n	8007e5a <__mdiff+0xca>
 8007e98:	3f01      	subs	r7, #1
 8007e9a:	e7ea      	b.n	8007e72 <__mdiff+0xe2>
 8007e9c:	08008b97 	.word	0x08008b97
 8007ea0:	08008c08 	.word	0x08008c08

08007ea4 <__d2b>:
 8007ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ea8:	4689      	mov	r9, r1
 8007eaa:	2101      	movs	r1, #1
 8007eac:	ec57 6b10 	vmov	r6, r7, d0
 8007eb0:	4690      	mov	r8, r2
 8007eb2:	f7ff fccf 	bl	8007854 <_Balloc>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	b930      	cbnz	r0, 8007ec8 <__d2b+0x24>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	4b25      	ldr	r3, [pc, #148]	; (8007f54 <__d2b+0xb0>)
 8007ebe:	4826      	ldr	r0, [pc, #152]	; (8007f58 <__d2b+0xb4>)
 8007ec0:	f240 310a 	movw	r1, #778	; 0x30a
 8007ec4:	f000 fbc0 	bl	8008648 <__assert_func>
 8007ec8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ecc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ed0:	bb35      	cbnz	r5, 8007f20 <__d2b+0x7c>
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	d028      	beq.n	8007f2a <__d2b+0x86>
 8007ed8:	4668      	mov	r0, sp
 8007eda:	9600      	str	r6, [sp, #0]
 8007edc:	f7ff fd82 	bl	80079e4 <__lo0bits>
 8007ee0:	9900      	ldr	r1, [sp, #0]
 8007ee2:	b300      	cbz	r0, 8007f26 <__d2b+0x82>
 8007ee4:	9a01      	ldr	r2, [sp, #4]
 8007ee6:	f1c0 0320 	rsb	r3, r0, #32
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	40c2      	lsrs	r2, r0
 8007ef2:	6163      	str	r3, [r4, #20]
 8007ef4:	9201      	str	r2, [sp, #4]
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	61a3      	str	r3, [r4, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2202      	movne	r2, #2
 8007f00:	2201      	moveq	r2, #1
 8007f02:	6122      	str	r2, [r4, #16]
 8007f04:	b1d5      	cbz	r5, 8007f3c <__d2b+0x98>
 8007f06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f0a:	4405      	add	r5, r0
 8007f0c:	f8c9 5000 	str.w	r5, [r9]
 8007f10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f14:	f8c8 0000 	str.w	r0, [r8]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	b003      	add	sp, #12
 8007f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f24:	e7d5      	b.n	8007ed2 <__d2b+0x2e>
 8007f26:	6161      	str	r1, [r4, #20]
 8007f28:	e7e5      	b.n	8007ef6 <__d2b+0x52>
 8007f2a:	a801      	add	r0, sp, #4
 8007f2c:	f7ff fd5a 	bl	80079e4 <__lo0bits>
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	6163      	str	r3, [r4, #20]
 8007f34:	2201      	movs	r2, #1
 8007f36:	6122      	str	r2, [r4, #16]
 8007f38:	3020      	adds	r0, #32
 8007f3a:	e7e3      	b.n	8007f04 <__d2b+0x60>
 8007f3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f44:	f8c9 0000 	str.w	r0, [r9]
 8007f48:	6918      	ldr	r0, [r3, #16]
 8007f4a:	f7ff fd2b 	bl	80079a4 <__hi0bits>
 8007f4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f52:	e7df      	b.n	8007f14 <__d2b+0x70>
 8007f54:	08008b97 	.word	0x08008b97
 8007f58:	08008c08 	.word	0x08008c08

08007f5c <_calloc_r>:
 8007f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f5e:	fba1 2402 	umull	r2, r4, r1, r2
 8007f62:	b94c      	cbnz	r4, 8007f78 <_calloc_r+0x1c>
 8007f64:	4611      	mov	r1, r2
 8007f66:	9201      	str	r2, [sp, #4]
 8007f68:	f000 f87a 	bl	8008060 <_malloc_r>
 8007f6c:	9a01      	ldr	r2, [sp, #4]
 8007f6e:	4605      	mov	r5, r0
 8007f70:	b930      	cbnz	r0, 8007f80 <_calloc_r+0x24>
 8007f72:	4628      	mov	r0, r5
 8007f74:	b003      	add	sp, #12
 8007f76:	bd30      	pop	{r4, r5, pc}
 8007f78:	220c      	movs	r2, #12
 8007f7a:	6002      	str	r2, [r0, #0]
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	e7f8      	b.n	8007f72 <_calloc_r+0x16>
 8007f80:	4621      	mov	r1, r4
 8007f82:	f7fe f867 	bl	8006054 <memset>
 8007f86:	e7f4      	b.n	8007f72 <_calloc_r+0x16>

08007f88 <_free_r>:
 8007f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	d044      	beq.n	8008018 <_free_r+0x90>
 8007f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f92:	9001      	str	r0, [sp, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f1a1 0404 	sub.w	r4, r1, #4
 8007f9a:	bfb8      	it	lt
 8007f9c:	18e4      	addlt	r4, r4, r3
 8007f9e:	f000 fcdf 	bl	8008960 <__malloc_lock>
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	; (800801c <_free_r+0x94>)
 8007fa4:	9801      	ldr	r0, [sp, #4]
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	b933      	cbnz	r3, 8007fb8 <_free_r+0x30>
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	6014      	str	r4, [r2, #0]
 8007fae:	b003      	add	sp, #12
 8007fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fb4:	f000 bcda 	b.w	800896c <__malloc_unlock>
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d908      	bls.n	8007fce <_free_r+0x46>
 8007fbc:	6825      	ldr	r5, [r4, #0]
 8007fbe:	1961      	adds	r1, r4, r5
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	bf01      	itttt	eq
 8007fc4:	6819      	ldreq	r1, [r3, #0]
 8007fc6:	685b      	ldreq	r3, [r3, #4]
 8007fc8:	1949      	addeq	r1, r1, r5
 8007fca:	6021      	streq	r1, [r4, #0]
 8007fcc:	e7ed      	b.n	8007faa <_free_r+0x22>
 8007fce:	461a      	mov	r2, r3
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	b10b      	cbz	r3, 8007fd8 <_free_r+0x50>
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	d9fa      	bls.n	8007fce <_free_r+0x46>
 8007fd8:	6811      	ldr	r1, [r2, #0]
 8007fda:	1855      	adds	r5, r2, r1
 8007fdc:	42a5      	cmp	r5, r4
 8007fde:	d10b      	bne.n	8007ff8 <_free_r+0x70>
 8007fe0:	6824      	ldr	r4, [r4, #0]
 8007fe2:	4421      	add	r1, r4
 8007fe4:	1854      	adds	r4, r2, r1
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	6011      	str	r1, [r2, #0]
 8007fea:	d1e0      	bne.n	8007fae <_free_r+0x26>
 8007fec:	681c      	ldr	r4, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	6053      	str	r3, [r2, #4]
 8007ff2:	4421      	add	r1, r4
 8007ff4:	6011      	str	r1, [r2, #0]
 8007ff6:	e7da      	b.n	8007fae <_free_r+0x26>
 8007ff8:	d902      	bls.n	8008000 <_free_r+0x78>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	6003      	str	r3, [r0, #0]
 8007ffe:	e7d6      	b.n	8007fae <_free_r+0x26>
 8008000:	6825      	ldr	r5, [r4, #0]
 8008002:	1961      	adds	r1, r4, r5
 8008004:	428b      	cmp	r3, r1
 8008006:	bf04      	itt	eq
 8008008:	6819      	ldreq	r1, [r3, #0]
 800800a:	685b      	ldreq	r3, [r3, #4]
 800800c:	6063      	str	r3, [r4, #4]
 800800e:	bf04      	itt	eq
 8008010:	1949      	addeq	r1, r1, r5
 8008012:	6021      	streq	r1, [r4, #0]
 8008014:	6054      	str	r4, [r2, #4]
 8008016:	e7ca      	b.n	8007fae <_free_r+0x26>
 8008018:	b003      	add	sp, #12
 800801a:	bd30      	pop	{r4, r5, pc}
 800801c:	2000041c 	.word	0x2000041c

08008020 <sbrk_aligned>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4e0e      	ldr	r6, [pc, #56]	; (800805c <sbrk_aligned+0x3c>)
 8008024:	460c      	mov	r4, r1
 8008026:	6831      	ldr	r1, [r6, #0]
 8008028:	4605      	mov	r5, r0
 800802a:	b911      	cbnz	r1, 8008032 <sbrk_aligned+0x12>
 800802c:	f000 f9e6 	bl	80083fc <_sbrk_r>
 8008030:	6030      	str	r0, [r6, #0]
 8008032:	4621      	mov	r1, r4
 8008034:	4628      	mov	r0, r5
 8008036:	f000 f9e1 	bl	80083fc <_sbrk_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	d00a      	beq.n	8008054 <sbrk_aligned+0x34>
 800803e:	1cc4      	adds	r4, r0, #3
 8008040:	f024 0403 	bic.w	r4, r4, #3
 8008044:	42a0      	cmp	r0, r4
 8008046:	d007      	beq.n	8008058 <sbrk_aligned+0x38>
 8008048:	1a21      	subs	r1, r4, r0
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f9d6 	bl	80083fc <_sbrk_r>
 8008050:	3001      	adds	r0, #1
 8008052:	d101      	bne.n	8008058 <sbrk_aligned+0x38>
 8008054:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008058:	4620      	mov	r0, r4
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	20000420 	.word	0x20000420

08008060 <_malloc_r>:
 8008060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008064:	1ccd      	adds	r5, r1, #3
 8008066:	f025 0503 	bic.w	r5, r5, #3
 800806a:	3508      	adds	r5, #8
 800806c:	2d0c      	cmp	r5, #12
 800806e:	bf38      	it	cc
 8008070:	250c      	movcc	r5, #12
 8008072:	2d00      	cmp	r5, #0
 8008074:	4607      	mov	r7, r0
 8008076:	db01      	blt.n	800807c <_malloc_r+0x1c>
 8008078:	42a9      	cmp	r1, r5
 800807a:	d905      	bls.n	8008088 <_malloc_r+0x28>
 800807c:	230c      	movs	r3, #12
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	2600      	movs	r6, #0
 8008082:	4630      	mov	r0, r6
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	4e2e      	ldr	r6, [pc, #184]	; (8008144 <_malloc_r+0xe4>)
 800808a:	f000 fc69 	bl	8008960 <__malloc_lock>
 800808e:	6833      	ldr	r3, [r6, #0]
 8008090:	461c      	mov	r4, r3
 8008092:	bb34      	cbnz	r4, 80080e2 <_malloc_r+0x82>
 8008094:	4629      	mov	r1, r5
 8008096:	4638      	mov	r0, r7
 8008098:	f7ff ffc2 	bl	8008020 <sbrk_aligned>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	4604      	mov	r4, r0
 80080a0:	d14d      	bne.n	800813e <_malloc_r+0xde>
 80080a2:	6834      	ldr	r4, [r6, #0]
 80080a4:	4626      	mov	r6, r4
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	d140      	bne.n	800812c <_malloc_r+0xcc>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	4631      	mov	r1, r6
 80080ae:	4638      	mov	r0, r7
 80080b0:	eb04 0803 	add.w	r8, r4, r3
 80080b4:	f000 f9a2 	bl	80083fc <_sbrk_r>
 80080b8:	4580      	cmp	r8, r0
 80080ba:	d13a      	bne.n	8008132 <_malloc_r+0xd2>
 80080bc:	6821      	ldr	r1, [r4, #0]
 80080be:	3503      	adds	r5, #3
 80080c0:	1a6d      	subs	r5, r5, r1
 80080c2:	f025 0503 	bic.w	r5, r5, #3
 80080c6:	3508      	adds	r5, #8
 80080c8:	2d0c      	cmp	r5, #12
 80080ca:	bf38      	it	cc
 80080cc:	250c      	movcc	r5, #12
 80080ce:	4629      	mov	r1, r5
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7ff ffa5 	bl	8008020 <sbrk_aligned>
 80080d6:	3001      	adds	r0, #1
 80080d8:	d02b      	beq.n	8008132 <_malloc_r+0xd2>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	442b      	add	r3, r5
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	e00e      	b.n	8008100 <_malloc_r+0xa0>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	1b52      	subs	r2, r2, r5
 80080e6:	d41e      	bmi.n	8008126 <_malloc_r+0xc6>
 80080e8:	2a0b      	cmp	r2, #11
 80080ea:	d916      	bls.n	800811a <_malloc_r+0xba>
 80080ec:	1961      	adds	r1, r4, r5
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	6025      	str	r5, [r4, #0]
 80080f2:	bf18      	it	ne
 80080f4:	6059      	strne	r1, [r3, #4]
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	bf08      	it	eq
 80080fa:	6031      	streq	r1, [r6, #0]
 80080fc:	5162      	str	r2, [r4, r5]
 80080fe:	604b      	str	r3, [r1, #4]
 8008100:	4638      	mov	r0, r7
 8008102:	f104 060b 	add.w	r6, r4, #11
 8008106:	f000 fc31 	bl	800896c <__malloc_unlock>
 800810a:	f026 0607 	bic.w	r6, r6, #7
 800810e:	1d23      	adds	r3, r4, #4
 8008110:	1af2      	subs	r2, r6, r3
 8008112:	d0b6      	beq.n	8008082 <_malloc_r+0x22>
 8008114:	1b9b      	subs	r3, r3, r6
 8008116:	50a3      	str	r3, [r4, r2]
 8008118:	e7b3      	b.n	8008082 <_malloc_r+0x22>
 800811a:	6862      	ldr	r2, [r4, #4]
 800811c:	42a3      	cmp	r3, r4
 800811e:	bf0c      	ite	eq
 8008120:	6032      	streq	r2, [r6, #0]
 8008122:	605a      	strne	r2, [r3, #4]
 8008124:	e7ec      	b.n	8008100 <_malloc_r+0xa0>
 8008126:	4623      	mov	r3, r4
 8008128:	6864      	ldr	r4, [r4, #4]
 800812a:	e7b2      	b.n	8008092 <_malloc_r+0x32>
 800812c:	4634      	mov	r4, r6
 800812e:	6876      	ldr	r6, [r6, #4]
 8008130:	e7b9      	b.n	80080a6 <_malloc_r+0x46>
 8008132:	230c      	movs	r3, #12
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4638      	mov	r0, r7
 8008138:	f000 fc18 	bl	800896c <__malloc_unlock>
 800813c:	e7a1      	b.n	8008082 <_malloc_r+0x22>
 800813e:	6025      	str	r5, [r4, #0]
 8008140:	e7de      	b.n	8008100 <_malloc_r+0xa0>
 8008142:	bf00      	nop
 8008144:	2000041c 	.word	0x2000041c

08008148 <__sfputc_r>:
 8008148:	6893      	ldr	r3, [r2, #8]
 800814a:	3b01      	subs	r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	b410      	push	{r4}
 8008150:	6093      	str	r3, [r2, #8]
 8008152:	da08      	bge.n	8008166 <__sfputc_r+0x1e>
 8008154:	6994      	ldr	r4, [r2, #24]
 8008156:	42a3      	cmp	r3, r4
 8008158:	db01      	blt.n	800815e <__sfputc_r+0x16>
 800815a:	290a      	cmp	r1, #10
 800815c:	d103      	bne.n	8008166 <__sfputc_r+0x1e>
 800815e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008162:	f000 b99f 	b.w	80084a4 <__swbuf_r>
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	1c58      	adds	r0, r3, #1
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	7019      	strb	r1, [r3, #0]
 800816e:	4608      	mov	r0, r1
 8008170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008174:	4770      	bx	lr

08008176 <__sfputs_r>:
 8008176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008178:	4606      	mov	r6, r0
 800817a:	460f      	mov	r7, r1
 800817c:	4614      	mov	r4, r2
 800817e:	18d5      	adds	r5, r2, r3
 8008180:	42ac      	cmp	r4, r5
 8008182:	d101      	bne.n	8008188 <__sfputs_r+0x12>
 8008184:	2000      	movs	r0, #0
 8008186:	e007      	b.n	8008198 <__sfputs_r+0x22>
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	463a      	mov	r2, r7
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff ffda 	bl	8008148 <__sfputc_r>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d1f3      	bne.n	8008180 <__sfputs_r+0xa>
 8008198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800819c <_vfiprintf_r>:
 800819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	460d      	mov	r5, r1
 80081a2:	b09d      	sub	sp, #116	; 0x74
 80081a4:	4614      	mov	r4, r2
 80081a6:	4698      	mov	r8, r3
 80081a8:	4606      	mov	r6, r0
 80081aa:	b118      	cbz	r0, 80081b4 <_vfiprintf_r+0x18>
 80081ac:	6983      	ldr	r3, [r0, #24]
 80081ae:	b90b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x18>
 80081b0:	f7ff fa94 	bl	80076dc <__sinit>
 80081b4:	4b89      	ldr	r3, [pc, #548]	; (80083dc <_vfiprintf_r+0x240>)
 80081b6:	429d      	cmp	r5, r3
 80081b8:	d11b      	bne.n	80081f2 <_vfiprintf_r+0x56>
 80081ba:	6875      	ldr	r5, [r6, #4]
 80081bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081be:	07d9      	lsls	r1, r3, #31
 80081c0:	d405      	bmi.n	80081ce <_vfiprintf_r+0x32>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	059a      	lsls	r2, r3, #22
 80081c6:	d402      	bmi.n	80081ce <_vfiprintf_r+0x32>
 80081c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ca:	f7ff fb2a 	bl	8007822 <__retarget_lock_acquire_recursive>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	071b      	lsls	r3, r3, #28
 80081d2:	d501      	bpl.n	80081d8 <_vfiprintf_r+0x3c>
 80081d4:	692b      	ldr	r3, [r5, #16]
 80081d6:	b9eb      	cbnz	r3, 8008214 <_vfiprintf_r+0x78>
 80081d8:	4629      	mov	r1, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f9c6 	bl	800856c <__swsetup_r>
 80081e0:	b1c0      	cbz	r0, 8008214 <_vfiprintf_r+0x78>
 80081e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e4:	07dc      	lsls	r4, r3, #31
 80081e6:	d50e      	bpl.n	8008206 <_vfiprintf_r+0x6a>
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ec:	b01d      	add	sp, #116	; 0x74
 80081ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f2:	4b7b      	ldr	r3, [pc, #492]	; (80083e0 <_vfiprintf_r+0x244>)
 80081f4:	429d      	cmp	r5, r3
 80081f6:	d101      	bne.n	80081fc <_vfiprintf_r+0x60>
 80081f8:	68b5      	ldr	r5, [r6, #8]
 80081fa:	e7df      	b.n	80081bc <_vfiprintf_r+0x20>
 80081fc:	4b79      	ldr	r3, [pc, #484]	; (80083e4 <_vfiprintf_r+0x248>)
 80081fe:	429d      	cmp	r5, r3
 8008200:	bf08      	it	eq
 8008202:	68f5      	ldreq	r5, [r6, #12]
 8008204:	e7da      	b.n	80081bc <_vfiprintf_r+0x20>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	0598      	lsls	r0, r3, #22
 800820a:	d4ed      	bmi.n	80081e8 <_vfiprintf_r+0x4c>
 800820c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800820e:	f7ff fb09 	bl	8007824 <__retarget_lock_release_recursive>
 8008212:	e7e9      	b.n	80081e8 <_vfiprintf_r+0x4c>
 8008214:	2300      	movs	r3, #0
 8008216:	9309      	str	r3, [sp, #36]	; 0x24
 8008218:	2320      	movs	r3, #32
 800821a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800821e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008222:	2330      	movs	r3, #48	; 0x30
 8008224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083e8 <_vfiprintf_r+0x24c>
 8008228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800822c:	f04f 0901 	mov.w	r9, #1
 8008230:	4623      	mov	r3, r4
 8008232:	469a      	mov	sl, r3
 8008234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008238:	b10a      	cbz	r2, 800823e <_vfiprintf_r+0xa2>
 800823a:	2a25      	cmp	r2, #37	; 0x25
 800823c:	d1f9      	bne.n	8008232 <_vfiprintf_r+0x96>
 800823e:	ebba 0b04 	subs.w	fp, sl, r4
 8008242:	d00b      	beq.n	800825c <_vfiprintf_r+0xc0>
 8008244:	465b      	mov	r3, fp
 8008246:	4622      	mov	r2, r4
 8008248:	4629      	mov	r1, r5
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff ff93 	bl	8008176 <__sfputs_r>
 8008250:	3001      	adds	r0, #1
 8008252:	f000 80aa 	beq.w	80083aa <_vfiprintf_r+0x20e>
 8008256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008258:	445a      	add	r2, fp
 800825a:	9209      	str	r2, [sp, #36]	; 0x24
 800825c:	f89a 3000 	ldrb.w	r3, [sl]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80a2 	beq.w	80083aa <_vfiprintf_r+0x20e>
 8008266:	2300      	movs	r3, #0
 8008268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800826c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008270:	f10a 0a01 	add.w	sl, sl, #1
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800827c:	931a      	str	r3, [sp, #104]	; 0x68
 800827e:	4654      	mov	r4, sl
 8008280:	2205      	movs	r2, #5
 8008282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008286:	4858      	ldr	r0, [pc, #352]	; (80083e8 <_vfiprintf_r+0x24c>)
 8008288:	f7f7 ffb2 	bl	80001f0 <memchr>
 800828c:	9a04      	ldr	r2, [sp, #16]
 800828e:	b9d8      	cbnz	r0, 80082c8 <_vfiprintf_r+0x12c>
 8008290:	06d1      	lsls	r1, r2, #27
 8008292:	bf44      	itt	mi
 8008294:	2320      	movmi	r3, #32
 8008296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829a:	0713      	lsls	r3, r2, #28
 800829c:	bf44      	itt	mi
 800829e:	232b      	movmi	r3, #43	; 0x2b
 80082a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a4:	f89a 3000 	ldrb.w	r3, [sl]
 80082a8:	2b2a      	cmp	r3, #42	; 0x2a
 80082aa:	d015      	beq.n	80082d8 <_vfiprintf_r+0x13c>
 80082ac:	9a07      	ldr	r2, [sp, #28]
 80082ae:	4654      	mov	r4, sl
 80082b0:	2000      	movs	r0, #0
 80082b2:	f04f 0c0a 	mov.w	ip, #10
 80082b6:	4621      	mov	r1, r4
 80082b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082bc:	3b30      	subs	r3, #48	; 0x30
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d94e      	bls.n	8008360 <_vfiprintf_r+0x1c4>
 80082c2:	b1b0      	cbz	r0, 80082f2 <_vfiprintf_r+0x156>
 80082c4:	9207      	str	r2, [sp, #28]
 80082c6:	e014      	b.n	80082f2 <_vfiprintf_r+0x156>
 80082c8:	eba0 0308 	sub.w	r3, r0, r8
 80082cc:	fa09 f303 	lsl.w	r3, r9, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	46a2      	mov	sl, r4
 80082d6:	e7d2      	b.n	800827e <_vfiprintf_r+0xe2>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	1d19      	adds	r1, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9103      	str	r1, [sp, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bfbb      	ittet	lt
 80082e4:	425b      	neglt	r3, r3
 80082e6:	f042 0202 	orrlt.w	r2, r2, #2
 80082ea:	9307      	strge	r3, [sp, #28]
 80082ec:	9307      	strlt	r3, [sp, #28]
 80082ee:	bfb8      	it	lt
 80082f0:	9204      	strlt	r2, [sp, #16]
 80082f2:	7823      	ldrb	r3, [r4, #0]
 80082f4:	2b2e      	cmp	r3, #46	; 0x2e
 80082f6:	d10c      	bne.n	8008312 <_vfiprintf_r+0x176>
 80082f8:	7863      	ldrb	r3, [r4, #1]
 80082fa:	2b2a      	cmp	r3, #42	; 0x2a
 80082fc:	d135      	bne.n	800836a <_vfiprintf_r+0x1ce>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb8      	it	lt
 800830a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800830e:	3402      	adds	r4, #2
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083f8 <_vfiprintf_r+0x25c>
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	2203      	movs	r2, #3
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ff68 	bl	80001f0 <memchr>
 8008320:	b140      	cbz	r0, 8008334 <_vfiprintf_r+0x198>
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	eba0 000a 	sub.w	r0, r0, sl
 8008328:	fa03 f000 	lsl.w	r0, r3, r0
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4303      	orrs	r3, r0
 8008330:	3401      	adds	r4, #1
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008338:	482c      	ldr	r0, [pc, #176]	; (80083ec <_vfiprintf_r+0x250>)
 800833a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800833e:	2206      	movs	r2, #6
 8008340:	f7f7 ff56 	bl	80001f0 <memchr>
 8008344:	2800      	cmp	r0, #0
 8008346:	d03f      	beq.n	80083c8 <_vfiprintf_r+0x22c>
 8008348:	4b29      	ldr	r3, [pc, #164]	; (80083f0 <_vfiprintf_r+0x254>)
 800834a:	bb1b      	cbnz	r3, 8008394 <_vfiprintf_r+0x1f8>
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	3307      	adds	r3, #7
 8008350:	f023 0307 	bic.w	r3, r3, #7
 8008354:	3308      	adds	r3, #8
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835a:	443b      	add	r3, r7
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
 800835e:	e767      	b.n	8008230 <_vfiprintf_r+0x94>
 8008360:	fb0c 3202 	mla	r2, ip, r2, r3
 8008364:	460c      	mov	r4, r1
 8008366:	2001      	movs	r0, #1
 8008368:	e7a5      	b.n	80082b6 <_vfiprintf_r+0x11a>
 800836a:	2300      	movs	r3, #0
 800836c:	3401      	adds	r4, #1
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	4619      	mov	r1, r3
 8008372:	f04f 0c0a 	mov.w	ip, #10
 8008376:	4620      	mov	r0, r4
 8008378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837c:	3a30      	subs	r2, #48	; 0x30
 800837e:	2a09      	cmp	r2, #9
 8008380:	d903      	bls.n	800838a <_vfiprintf_r+0x1ee>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0c5      	beq.n	8008312 <_vfiprintf_r+0x176>
 8008386:	9105      	str	r1, [sp, #20]
 8008388:	e7c3      	b.n	8008312 <_vfiprintf_r+0x176>
 800838a:	fb0c 2101 	mla	r1, ip, r1, r2
 800838e:	4604      	mov	r4, r0
 8008390:	2301      	movs	r3, #1
 8008392:	e7f0      	b.n	8008376 <_vfiprintf_r+0x1da>
 8008394:	ab03      	add	r3, sp, #12
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	462a      	mov	r2, r5
 800839a:	4b16      	ldr	r3, [pc, #88]	; (80083f4 <_vfiprintf_r+0x258>)
 800839c:	a904      	add	r1, sp, #16
 800839e:	4630      	mov	r0, r6
 80083a0:	f7fd ff00 	bl	80061a4 <_printf_float>
 80083a4:	4607      	mov	r7, r0
 80083a6:	1c78      	adds	r0, r7, #1
 80083a8:	d1d6      	bne.n	8008358 <_vfiprintf_r+0x1bc>
 80083aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ac:	07d9      	lsls	r1, r3, #31
 80083ae:	d405      	bmi.n	80083bc <_vfiprintf_r+0x220>
 80083b0:	89ab      	ldrh	r3, [r5, #12]
 80083b2:	059a      	lsls	r2, r3, #22
 80083b4:	d402      	bmi.n	80083bc <_vfiprintf_r+0x220>
 80083b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b8:	f7ff fa34 	bl	8007824 <__retarget_lock_release_recursive>
 80083bc:	89ab      	ldrh	r3, [r5, #12]
 80083be:	065b      	lsls	r3, r3, #25
 80083c0:	f53f af12 	bmi.w	80081e8 <_vfiprintf_r+0x4c>
 80083c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c6:	e711      	b.n	80081ec <_vfiprintf_r+0x50>
 80083c8:	ab03      	add	r3, sp, #12
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	462a      	mov	r2, r5
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <_vfiprintf_r+0x258>)
 80083d0:	a904      	add	r1, sp, #16
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7fe f98a 	bl	80066ec <_printf_i>
 80083d8:	e7e4      	b.n	80083a4 <_vfiprintf_r+0x208>
 80083da:	bf00      	nop
 80083dc:	08008bc8 	.word	0x08008bc8
 80083e0:	08008be8 	.word	0x08008be8
 80083e4:	08008ba8 	.word	0x08008ba8
 80083e8:	08008d64 	.word	0x08008d64
 80083ec:	08008d6e 	.word	0x08008d6e
 80083f0:	080061a5 	.word	0x080061a5
 80083f4:	08008177 	.word	0x08008177
 80083f8:	08008d6a 	.word	0x08008d6a

080083fc <_sbrk_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d06      	ldr	r5, [pc, #24]	; (8008418 <_sbrk_r+0x1c>)
 8008400:	2300      	movs	r3, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7f9 fb78 	bl	8001afc <_sbrk>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_sbrk_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_sbrk_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20000424 	.word	0x20000424

0800841c <__sread>:
 800841c:	b510      	push	{r4, lr}
 800841e:	460c      	mov	r4, r1
 8008420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008424:	f000 faa8 	bl	8008978 <_read_r>
 8008428:	2800      	cmp	r0, #0
 800842a:	bfab      	itete	ge
 800842c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800842e:	89a3      	ldrhlt	r3, [r4, #12]
 8008430:	181b      	addge	r3, r3, r0
 8008432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008436:	bfac      	ite	ge
 8008438:	6563      	strge	r3, [r4, #84]	; 0x54
 800843a:	81a3      	strhlt	r3, [r4, #12]
 800843c:	bd10      	pop	{r4, pc}

0800843e <__swrite>:
 800843e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008442:	461f      	mov	r7, r3
 8008444:	898b      	ldrh	r3, [r1, #12]
 8008446:	05db      	lsls	r3, r3, #23
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	4616      	mov	r6, r2
 800844e:	d505      	bpl.n	800845c <__swrite+0x1e>
 8008450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008454:	2302      	movs	r3, #2
 8008456:	2200      	movs	r2, #0
 8008458:	f000 f9f8 	bl	800884c <_lseek_r>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	4632      	mov	r2, r6
 800846a:	463b      	mov	r3, r7
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008472:	f000 b869 	b.w	8008548 <_write_r>

08008476 <__sseek>:
 8008476:	b510      	push	{r4, lr}
 8008478:	460c      	mov	r4, r1
 800847a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847e:	f000 f9e5 	bl	800884c <_lseek_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	bf15      	itete	ne
 8008488:	6560      	strne	r0, [r4, #84]	; 0x54
 800848a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800848e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008492:	81a3      	strheq	r3, [r4, #12]
 8008494:	bf18      	it	ne
 8008496:	81a3      	strhne	r3, [r4, #12]
 8008498:	bd10      	pop	{r4, pc}

0800849a <__sclose>:
 800849a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849e:	f000 b8f1 	b.w	8008684 <_close_r>
	...

080084a4 <__swbuf_r>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	460e      	mov	r6, r1
 80084a8:	4614      	mov	r4, r2
 80084aa:	4605      	mov	r5, r0
 80084ac:	b118      	cbz	r0, 80084b6 <__swbuf_r+0x12>
 80084ae:	6983      	ldr	r3, [r0, #24]
 80084b0:	b90b      	cbnz	r3, 80084b6 <__swbuf_r+0x12>
 80084b2:	f7ff f913 	bl	80076dc <__sinit>
 80084b6:	4b21      	ldr	r3, [pc, #132]	; (800853c <__swbuf_r+0x98>)
 80084b8:	429c      	cmp	r4, r3
 80084ba:	d12b      	bne.n	8008514 <__swbuf_r+0x70>
 80084bc:	686c      	ldr	r4, [r5, #4]
 80084be:	69a3      	ldr	r3, [r4, #24]
 80084c0:	60a3      	str	r3, [r4, #8]
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	071a      	lsls	r2, r3, #28
 80084c6:	d52f      	bpl.n	8008528 <__swbuf_r+0x84>
 80084c8:	6923      	ldr	r3, [r4, #16]
 80084ca:	b36b      	cbz	r3, 8008528 <__swbuf_r+0x84>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	6820      	ldr	r0, [r4, #0]
 80084d0:	1ac0      	subs	r0, r0, r3
 80084d2:	6963      	ldr	r3, [r4, #20]
 80084d4:	b2f6      	uxtb	r6, r6
 80084d6:	4283      	cmp	r3, r0
 80084d8:	4637      	mov	r7, r6
 80084da:	dc04      	bgt.n	80084e6 <__swbuf_r+0x42>
 80084dc:	4621      	mov	r1, r4
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 f966 	bl	80087b0 <_fflush_r>
 80084e4:	bb30      	cbnz	r0, 8008534 <__swbuf_r+0x90>
 80084e6:	68a3      	ldr	r3, [r4, #8]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	60a3      	str	r3, [r4, #8]
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	6022      	str	r2, [r4, #0]
 80084f2:	701e      	strb	r6, [r3, #0]
 80084f4:	6963      	ldr	r3, [r4, #20]
 80084f6:	3001      	adds	r0, #1
 80084f8:	4283      	cmp	r3, r0
 80084fa:	d004      	beq.n	8008506 <__swbuf_r+0x62>
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	07db      	lsls	r3, r3, #31
 8008500:	d506      	bpl.n	8008510 <__swbuf_r+0x6c>
 8008502:	2e0a      	cmp	r6, #10
 8008504:	d104      	bne.n	8008510 <__swbuf_r+0x6c>
 8008506:	4621      	mov	r1, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f951 	bl	80087b0 <_fflush_r>
 800850e:	b988      	cbnz	r0, 8008534 <__swbuf_r+0x90>
 8008510:	4638      	mov	r0, r7
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <__swbuf_r+0x9c>)
 8008516:	429c      	cmp	r4, r3
 8008518:	d101      	bne.n	800851e <__swbuf_r+0x7a>
 800851a:	68ac      	ldr	r4, [r5, #8]
 800851c:	e7cf      	b.n	80084be <__swbuf_r+0x1a>
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <__swbuf_r+0xa0>)
 8008520:	429c      	cmp	r4, r3
 8008522:	bf08      	it	eq
 8008524:	68ec      	ldreq	r4, [r5, #12]
 8008526:	e7ca      	b.n	80084be <__swbuf_r+0x1a>
 8008528:	4621      	mov	r1, r4
 800852a:	4628      	mov	r0, r5
 800852c:	f000 f81e 	bl	800856c <__swsetup_r>
 8008530:	2800      	cmp	r0, #0
 8008532:	d0cb      	beq.n	80084cc <__swbuf_r+0x28>
 8008534:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008538:	e7ea      	b.n	8008510 <__swbuf_r+0x6c>
 800853a:	bf00      	nop
 800853c:	08008bc8 	.word	0x08008bc8
 8008540:	08008be8 	.word	0x08008be8
 8008544:	08008ba8 	.word	0x08008ba8

08008548 <_write_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d07      	ldr	r5, [pc, #28]	; (8008568 <_write_r+0x20>)
 800854c:	4604      	mov	r4, r0
 800854e:	4608      	mov	r0, r1
 8008550:	4611      	mov	r1, r2
 8008552:	2200      	movs	r2, #0
 8008554:	602a      	str	r2, [r5, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	f7f9 fa7f 	bl	8001a5a <_write>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_write_r+0x1e>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_write_r+0x1e>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	20000424 	.word	0x20000424

0800856c <__swsetup_r>:
 800856c:	4b32      	ldr	r3, [pc, #200]	; (8008638 <__swsetup_r+0xcc>)
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	681d      	ldr	r5, [r3, #0]
 8008572:	4606      	mov	r6, r0
 8008574:	460c      	mov	r4, r1
 8008576:	b125      	cbz	r5, 8008582 <__swsetup_r+0x16>
 8008578:	69ab      	ldr	r3, [r5, #24]
 800857a:	b913      	cbnz	r3, 8008582 <__swsetup_r+0x16>
 800857c:	4628      	mov	r0, r5
 800857e:	f7ff f8ad 	bl	80076dc <__sinit>
 8008582:	4b2e      	ldr	r3, [pc, #184]	; (800863c <__swsetup_r+0xd0>)
 8008584:	429c      	cmp	r4, r3
 8008586:	d10f      	bne.n	80085a8 <__swsetup_r+0x3c>
 8008588:	686c      	ldr	r4, [r5, #4]
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008590:	0719      	lsls	r1, r3, #28
 8008592:	d42c      	bmi.n	80085ee <__swsetup_r+0x82>
 8008594:	06dd      	lsls	r5, r3, #27
 8008596:	d411      	bmi.n	80085bc <__swsetup_r+0x50>
 8008598:	2309      	movs	r3, #9
 800859a:	6033      	str	r3, [r6, #0]
 800859c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a6:	e03e      	b.n	8008626 <__swsetup_r+0xba>
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <__swsetup_r+0xd4>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d101      	bne.n	80085b2 <__swsetup_r+0x46>
 80085ae:	68ac      	ldr	r4, [r5, #8]
 80085b0:	e7eb      	b.n	800858a <__swsetup_r+0x1e>
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <__swsetup_r+0xd8>)
 80085b4:	429c      	cmp	r4, r3
 80085b6:	bf08      	it	eq
 80085b8:	68ec      	ldreq	r4, [r5, #12]
 80085ba:	e7e6      	b.n	800858a <__swsetup_r+0x1e>
 80085bc:	0758      	lsls	r0, r3, #29
 80085be:	d512      	bpl.n	80085e6 <__swsetup_r+0x7a>
 80085c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085c2:	b141      	cbz	r1, 80085d6 <__swsetup_r+0x6a>
 80085c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d002      	beq.n	80085d2 <__swsetup_r+0x66>
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff fcdb 	bl	8007f88 <_free_r>
 80085d2:	2300      	movs	r3, #0
 80085d4:	6363      	str	r3, [r4, #52]	; 0x34
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	2300      	movs	r3, #0
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f043 0308 	orr.w	r3, r3, #8
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	b94b      	cbnz	r3, 8008606 <__swsetup_r+0x9a>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085fc:	d003      	beq.n	8008606 <__swsetup_r+0x9a>
 80085fe:	4621      	mov	r1, r4
 8008600:	4630      	mov	r0, r6
 8008602:	f000 f95b 	bl	80088bc <__smakebuf_r>
 8008606:	89a0      	ldrh	r0, [r4, #12]
 8008608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860c:	f010 0301 	ands.w	r3, r0, #1
 8008610:	d00a      	beq.n	8008628 <__swsetup_r+0xbc>
 8008612:	2300      	movs	r3, #0
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	6963      	ldr	r3, [r4, #20]
 8008618:	425b      	negs	r3, r3
 800861a:	61a3      	str	r3, [r4, #24]
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b943      	cbnz	r3, 8008632 <__swsetup_r+0xc6>
 8008620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008624:	d1ba      	bne.n	800859c <__swsetup_r+0x30>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	0781      	lsls	r1, r0, #30
 800862a:	bf58      	it	pl
 800862c:	6963      	ldrpl	r3, [r4, #20]
 800862e:	60a3      	str	r3, [r4, #8]
 8008630:	e7f4      	b.n	800861c <__swsetup_r+0xb0>
 8008632:	2000      	movs	r0, #0
 8008634:	e7f7      	b.n	8008626 <__swsetup_r+0xba>
 8008636:	bf00      	nop
 8008638:	20000010 	.word	0x20000010
 800863c:	08008bc8 	.word	0x08008bc8
 8008640:	08008be8 	.word	0x08008be8
 8008644:	08008ba8 	.word	0x08008ba8

08008648 <__assert_func>:
 8008648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800864a:	4614      	mov	r4, r2
 800864c:	461a      	mov	r2, r3
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <__assert_func+0x2c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4605      	mov	r5, r0
 8008654:	68d8      	ldr	r0, [r3, #12]
 8008656:	b14c      	cbz	r4, 800866c <__assert_func+0x24>
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <__assert_func+0x30>)
 800865a:	9100      	str	r1, [sp, #0]
 800865c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008660:	4906      	ldr	r1, [pc, #24]	; (800867c <__assert_func+0x34>)
 8008662:	462b      	mov	r3, r5
 8008664:	f000 f8e0 	bl	8008828 <fiprintf>
 8008668:	f000 f9a5 	bl	80089b6 <abort>
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <__assert_func+0x38>)
 800866e:	461c      	mov	r4, r3
 8008670:	e7f3      	b.n	800865a <__assert_func+0x12>
 8008672:	bf00      	nop
 8008674:	20000010 	.word	0x20000010
 8008678:	08008d75 	.word	0x08008d75
 800867c:	08008d82 	.word	0x08008d82
 8008680:	08008db0 	.word	0x08008db0

08008684 <_close_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d06      	ldr	r5, [pc, #24]	; (80086a0 <_close_r+0x1c>)
 8008688:	2300      	movs	r3, #0
 800868a:	4604      	mov	r4, r0
 800868c:	4608      	mov	r0, r1
 800868e:	602b      	str	r3, [r5, #0]
 8008690:	f7f9 f9ff 	bl	8001a92 <_close>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_close_r+0x1a>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_close_r+0x1a>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	20000424 	.word	0x20000424

080086a4 <__sflush_r>:
 80086a4:	898a      	ldrh	r2, [r1, #12]
 80086a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086aa:	4605      	mov	r5, r0
 80086ac:	0710      	lsls	r0, r2, #28
 80086ae:	460c      	mov	r4, r1
 80086b0:	d458      	bmi.n	8008764 <__sflush_r+0xc0>
 80086b2:	684b      	ldr	r3, [r1, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dc05      	bgt.n	80086c4 <__sflush_r+0x20>
 80086b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	dc02      	bgt.n	80086c4 <__sflush_r+0x20>
 80086be:	2000      	movs	r0, #0
 80086c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	d0f9      	beq.n	80086be <__sflush_r+0x1a>
 80086ca:	2300      	movs	r3, #0
 80086cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086d0:	682f      	ldr	r7, [r5, #0]
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	d032      	beq.n	800873c <__sflush_r+0x98>
 80086d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	075a      	lsls	r2, r3, #29
 80086dc:	d505      	bpl.n	80086ea <__sflush_r+0x46>
 80086de:	6863      	ldr	r3, [r4, #4]
 80086e0:	1ac0      	subs	r0, r0, r3
 80086e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086e4:	b10b      	cbz	r3, 80086ea <__sflush_r+0x46>
 80086e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086e8:	1ac0      	subs	r0, r0, r3
 80086ea:	2300      	movs	r3, #0
 80086ec:	4602      	mov	r2, r0
 80086ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086f0:	6a21      	ldr	r1, [r4, #32]
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b0      	blx	r6
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	d106      	bne.n	800870a <__sflush_r+0x66>
 80086fc:	6829      	ldr	r1, [r5, #0]
 80086fe:	291d      	cmp	r1, #29
 8008700:	d82c      	bhi.n	800875c <__sflush_r+0xb8>
 8008702:	4a2a      	ldr	r2, [pc, #168]	; (80087ac <__sflush_r+0x108>)
 8008704:	40ca      	lsrs	r2, r1
 8008706:	07d6      	lsls	r6, r2, #31
 8008708:	d528      	bpl.n	800875c <__sflush_r+0xb8>
 800870a:	2200      	movs	r2, #0
 800870c:	6062      	str	r2, [r4, #4]
 800870e:	04d9      	lsls	r1, r3, #19
 8008710:	6922      	ldr	r2, [r4, #16]
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	d504      	bpl.n	8008720 <__sflush_r+0x7c>
 8008716:	1c42      	adds	r2, r0, #1
 8008718:	d101      	bne.n	800871e <__sflush_r+0x7a>
 800871a:	682b      	ldr	r3, [r5, #0]
 800871c:	b903      	cbnz	r3, 8008720 <__sflush_r+0x7c>
 800871e:	6560      	str	r0, [r4, #84]	; 0x54
 8008720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008722:	602f      	str	r7, [r5, #0]
 8008724:	2900      	cmp	r1, #0
 8008726:	d0ca      	beq.n	80086be <__sflush_r+0x1a>
 8008728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800872c:	4299      	cmp	r1, r3
 800872e:	d002      	beq.n	8008736 <__sflush_r+0x92>
 8008730:	4628      	mov	r0, r5
 8008732:	f7ff fc29 	bl	8007f88 <_free_r>
 8008736:	2000      	movs	r0, #0
 8008738:	6360      	str	r0, [r4, #52]	; 0x34
 800873a:	e7c1      	b.n	80086c0 <__sflush_r+0x1c>
 800873c:	6a21      	ldr	r1, [r4, #32]
 800873e:	2301      	movs	r3, #1
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	1c41      	adds	r1, r0, #1
 8008746:	d1c7      	bne.n	80086d8 <__sflush_r+0x34>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0c4      	beq.n	80086d8 <__sflush_r+0x34>
 800874e:	2b1d      	cmp	r3, #29
 8008750:	d001      	beq.n	8008756 <__sflush_r+0xb2>
 8008752:	2b16      	cmp	r3, #22
 8008754:	d101      	bne.n	800875a <__sflush_r+0xb6>
 8008756:	602f      	str	r7, [r5, #0]
 8008758:	e7b1      	b.n	80086be <__sflush_r+0x1a>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	e7ad      	b.n	80086c0 <__sflush_r+0x1c>
 8008764:	690f      	ldr	r7, [r1, #16]
 8008766:	2f00      	cmp	r7, #0
 8008768:	d0a9      	beq.n	80086be <__sflush_r+0x1a>
 800876a:	0793      	lsls	r3, r2, #30
 800876c:	680e      	ldr	r6, [r1, #0]
 800876e:	bf08      	it	eq
 8008770:	694b      	ldreq	r3, [r1, #20]
 8008772:	600f      	str	r7, [r1, #0]
 8008774:	bf18      	it	ne
 8008776:	2300      	movne	r3, #0
 8008778:	eba6 0807 	sub.w	r8, r6, r7
 800877c:	608b      	str	r3, [r1, #8]
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	dd9c      	ble.n	80086be <__sflush_r+0x1a>
 8008784:	6a21      	ldr	r1, [r4, #32]
 8008786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008788:	4643      	mov	r3, r8
 800878a:	463a      	mov	r2, r7
 800878c:	4628      	mov	r0, r5
 800878e:	47b0      	blx	r6
 8008790:	2800      	cmp	r0, #0
 8008792:	dc06      	bgt.n	80087a2 <__sflush_r+0xfe>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a0:	e78e      	b.n	80086c0 <__sflush_r+0x1c>
 80087a2:	4407      	add	r7, r0
 80087a4:	eba8 0800 	sub.w	r8, r8, r0
 80087a8:	e7e9      	b.n	800877e <__sflush_r+0xda>
 80087aa:	bf00      	nop
 80087ac:	20400001 	.word	0x20400001

080087b0 <_fflush_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	4605      	mov	r5, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b913      	cbnz	r3, 80087c0 <_fflush_r+0x10>
 80087ba:	2500      	movs	r5, #0
 80087bc:	4628      	mov	r0, r5
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	b118      	cbz	r0, 80087ca <_fflush_r+0x1a>
 80087c2:	6983      	ldr	r3, [r0, #24]
 80087c4:	b90b      	cbnz	r3, 80087ca <_fflush_r+0x1a>
 80087c6:	f7fe ff89 	bl	80076dc <__sinit>
 80087ca:	4b14      	ldr	r3, [pc, #80]	; (800881c <_fflush_r+0x6c>)
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d11b      	bne.n	8008808 <_fflush_r+0x58>
 80087d0:	686c      	ldr	r4, [r5, #4]
 80087d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0ef      	beq.n	80087ba <_fflush_r+0xa>
 80087da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087dc:	07d0      	lsls	r0, r2, #31
 80087de:	d404      	bmi.n	80087ea <_fflush_r+0x3a>
 80087e0:	0599      	lsls	r1, r3, #22
 80087e2:	d402      	bmi.n	80087ea <_fflush_r+0x3a>
 80087e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e6:	f7ff f81c 	bl	8007822 <__retarget_lock_acquire_recursive>
 80087ea:	4628      	mov	r0, r5
 80087ec:	4621      	mov	r1, r4
 80087ee:	f7ff ff59 	bl	80086a4 <__sflush_r>
 80087f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f4:	07da      	lsls	r2, r3, #31
 80087f6:	4605      	mov	r5, r0
 80087f8:	d4e0      	bmi.n	80087bc <_fflush_r+0xc>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	059b      	lsls	r3, r3, #22
 80087fe:	d4dd      	bmi.n	80087bc <_fflush_r+0xc>
 8008800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008802:	f7ff f80f 	bl	8007824 <__retarget_lock_release_recursive>
 8008806:	e7d9      	b.n	80087bc <_fflush_r+0xc>
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <_fflush_r+0x70>)
 800880a:	429c      	cmp	r4, r3
 800880c:	d101      	bne.n	8008812 <_fflush_r+0x62>
 800880e:	68ac      	ldr	r4, [r5, #8]
 8008810:	e7df      	b.n	80087d2 <_fflush_r+0x22>
 8008812:	4b04      	ldr	r3, [pc, #16]	; (8008824 <_fflush_r+0x74>)
 8008814:	429c      	cmp	r4, r3
 8008816:	bf08      	it	eq
 8008818:	68ec      	ldreq	r4, [r5, #12]
 800881a:	e7da      	b.n	80087d2 <_fflush_r+0x22>
 800881c:	08008bc8 	.word	0x08008bc8
 8008820:	08008be8 	.word	0x08008be8
 8008824:	08008ba8 	.word	0x08008ba8

08008828 <fiprintf>:
 8008828:	b40e      	push	{r1, r2, r3}
 800882a:	b503      	push	{r0, r1, lr}
 800882c:	4601      	mov	r1, r0
 800882e:	ab03      	add	r3, sp, #12
 8008830:	4805      	ldr	r0, [pc, #20]	; (8008848 <fiprintf+0x20>)
 8008832:	f853 2b04 	ldr.w	r2, [r3], #4
 8008836:	6800      	ldr	r0, [r0, #0]
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	f7ff fcaf 	bl	800819c <_vfiprintf_r>
 800883e:	b002      	add	sp, #8
 8008840:	f85d eb04 	ldr.w	lr, [sp], #4
 8008844:	b003      	add	sp, #12
 8008846:	4770      	bx	lr
 8008848:	20000010 	.word	0x20000010

0800884c <_lseek_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	; (800886c <_lseek_r+0x20>)
 8008850:	4604      	mov	r4, r0
 8008852:	4608      	mov	r0, r1
 8008854:	4611      	mov	r1, r2
 8008856:	2200      	movs	r2, #0
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f7f9 f940 	bl	8001ae0 <_lseek>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_lseek_r+0x1e>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_lseek_r+0x1e>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20000424 	.word	0x20000424

08008870 <__swhatbuf_r>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	460e      	mov	r6, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	2900      	cmp	r1, #0
 800887a:	b096      	sub	sp, #88	; 0x58
 800887c:	4614      	mov	r4, r2
 800887e:	461d      	mov	r5, r3
 8008880:	da08      	bge.n	8008894 <__swhatbuf_r+0x24>
 8008882:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	602a      	str	r2, [r5, #0]
 800888a:	061a      	lsls	r2, r3, #24
 800888c:	d410      	bmi.n	80088b0 <__swhatbuf_r+0x40>
 800888e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008892:	e00e      	b.n	80088b2 <__swhatbuf_r+0x42>
 8008894:	466a      	mov	r2, sp
 8008896:	f000 f895 	bl	80089c4 <_fstat_r>
 800889a:	2800      	cmp	r0, #0
 800889c:	dbf1      	blt.n	8008882 <__swhatbuf_r+0x12>
 800889e:	9a01      	ldr	r2, [sp, #4]
 80088a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088a8:	425a      	negs	r2, r3
 80088aa:	415a      	adcs	r2, r3
 80088ac:	602a      	str	r2, [r5, #0]
 80088ae:	e7ee      	b.n	800888e <__swhatbuf_r+0x1e>
 80088b0:	2340      	movs	r3, #64	; 0x40
 80088b2:	2000      	movs	r0, #0
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	b016      	add	sp, #88	; 0x58
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080088bc <__smakebuf_r>:
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088c0:	079d      	lsls	r5, r3, #30
 80088c2:	4606      	mov	r6, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	d507      	bpl.n	80088d8 <__smakebuf_r+0x1c>
 80088c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2301      	movs	r3, #1
 80088d2:	6163      	str	r3, [r4, #20]
 80088d4:	b002      	add	sp, #8
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	ab01      	add	r3, sp, #4
 80088da:	466a      	mov	r2, sp
 80088dc:	f7ff ffc8 	bl	8008870 <__swhatbuf_r>
 80088e0:	9900      	ldr	r1, [sp, #0]
 80088e2:	4605      	mov	r5, r0
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff fbbb 	bl	8008060 <_malloc_r>
 80088ea:	b948      	cbnz	r0, 8008900 <__smakebuf_r+0x44>
 80088ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f0:	059a      	lsls	r2, r3, #22
 80088f2:	d4ef      	bmi.n	80088d4 <__smakebuf_r+0x18>
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	e7e3      	b.n	80088c8 <__smakebuf_r+0xc>
 8008900:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <__smakebuf_r+0x7c>)
 8008902:	62b3      	str	r3, [r6, #40]	; 0x28
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	6020      	str	r0, [r4, #0]
 8008908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	6163      	str	r3, [r4, #20]
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	6120      	str	r0, [r4, #16]
 8008916:	b15b      	cbz	r3, 8008930 <__smakebuf_r+0x74>
 8008918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f863 	bl	80089e8 <_isatty_r>
 8008922:	b128      	cbz	r0, 8008930 <__smakebuf_r+0x74>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	89a0      	ldrh	r0, [r4, #12]
 8008932:	4305      	orrs	r5, r0
 8008934:	81a5      	strh	r5, [r4, #12]
 8008936:	e7cd      	b.n	80088d4 <__smakebuf_r+0x18>
 8008938:	08007675 	.word	0x08007675

0800893c <__ascii_mbtowc>:
 800893c:	b082      	sub	sp, #8
 800893e:	b901      	cbnz	r1, 8008942 <__ascii_mbtowc+0x6>
 8008940:	a901      	add	r1, sp, #4
 8008942:	b142      	cbz	r2, 8008956 <__ascii_mbtowc+0x1a>
 8008944:	b14b      	cbz	r3, 800895a <__ascii_mbtowc+0x1e>
 8008946:	7813      	ldrb	r3, [r2, #0]
 8008948:	600b      	str	r3, [r1, #0]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	1e10      	subs	r0, r2, #0
 800894e:	bf18      	it	ne
 8008950:	2001      	movne	r0, #1
 8008952:	b002      	add	sp, #8
 8008954:	4770      	bx	lr
 8008956:	4610      	mov	r0, r2
 8008958:	e7fb      	b.n	8008952 <__ascii_mbtowc+0x16>
 800895a:	f06f 0001 	mvn.w	r0, #1
 800895e:	e7f8      	b.n	8008952 <__ascii_mbtowc+0x16>

08008960 <__malloc_lock>:
 8008960:	4801      	ldr	r0, [pc, #4]	; (8008968 <__malloc_lock+0x8>)
 8008962:	f7fe bf5e 	b.w	8007822 <__retarget_lock_acquire_recursive>
 8008966:	bf00      	nop
 8008968:	20000418 	.word	0x20000418

0800896c <__malloc_unlock>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__malloc_unlock+0x8>)
 800896e:	f7fe bf59 	b.w	8007824 <__retarget_lock_release_recursive>
 8008972:	bf00      	nop
 8008974:	20000418 	.word	0x20000418

08008978 <_read_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	; (8008998 <_read_r+0x20>)
 800897c:	4604      	mov	r4, r0
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	2200      	movs	r2, #0
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f7f9 f84a 	bl	8001a20 <_read>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_read_r+0x1e>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_read_r+0x1e>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	20000424 	.word	0x20000424

0800899c <__ascii_wctomb>:
 800899c:	b149      	cbz	r1, 80089b2 <__ascii_wctomb+0x16>
 800899e:	2aff      	cmp	r2, #255	; 0xff
 80089a0:	bf85      	ittet	hi
 80089a2:	238a      	movhi	r3, #138	; 0x8a
 80089a4:	6003      	strhi	r3, [r0, #0]
 80089a6:	700a      	strbls	r2, [r1, #0]
 80089a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80089ac:	bf98      	it	ls
 80089ae:	2001      	movls	r0, #1
 80089b0:	4770      	bx	lr
 80089b2:	4608      	mov	r0, r1
 80089b4:	4770      	bx	lr

080089b6 <abort>:
 80089b6:	b508      	push	{r3, lr}
 80089b8:	2006      	movs	r0, #6
 80089ba:	f000 f84d 	bl	8008a58 <raise>
 80089be:	2001      	movs	r0, #1
 80089c0:	f7f9 f824 	bl	8001a0c <_exit>

080089c4 <_fstat_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_fstat_r+0x20>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	f7f9 f86a 	bl	8001aaa <_fstat>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d102      	bne.n	80089e0 <_fstat_r+0x1c>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	b103      	cbz	r3, 80089e0 <_fstat_r+0x1c>
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	bd38      	pop	{r3, r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	20000424 	.word	0x20000424

080089e8 <_isatty_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4d06      	ldr	r5, [pc, #24]	; (8008a04 <_isatty_r+0x1c>)
 80089ec:	2300      	movs	r3, #0
 80089ee:	4604      	mov	r4, r0
 80089f0:	4608      	mov	r0, r1
 80089f2:	602b      	str	r3, [r5, #0]
 80089f4:	f7f9 f869 	bl	8001aca <_isatty>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_isatty_r+0x1a>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_isatty_r+0x1a>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20000424 	.word	0x20000424

08008a08 <_raise_r>:
 8008a08:	291f      	cmp	r1, #31
 8008a0a:	b538      	push	{r3, r4, r5, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	d904      	bls.n	8008a1c <_raise_r+0x14>
 8008a12:	2316      	movs	r3, #22
 8008a14:	6003      	str	r3, [r0, #0]
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a1e:	b112      	cbz	r2, 8008a26 <_raise_r+0x1e>
 8008a20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a24:	b94b      	cbnz	r3, 8008a3a <_raise_r+0x32>
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 f830 	bl	8008a8c <_getpid_r>
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	4601      	mov	r1, r0
 8008a30:	4620      	mov	r0, r4
 8008a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a36:	f000 b817 	b.w	8008a68 <_kill_r>
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d00a      	beq.n	8008a54 <_raise_r+0x4c>
 8008a3e:	1c59      	adds	r1, r3, #1
 8008a40:	d103      	bne.n	8008a4a <_raise_r+0x42>
 8008a42:	2316      	movs	r3, #22
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	2001      	movs	r0, #1
 8008a48:	e7e7      	b.n	8008a1a <_raise_r+0x12>
 8008a4a:	2400      	movs	r4, #0
 8008a4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a50:	4628      	mov	r0, r5
 8008a52:	4798      	blx	r3
 8008a54:	2000      	movs	r0, #0
 8008a56:	e7e0      	b.n	8008a1a <_raise_r+0x12>

08008a58 <raise>:
 8008a58:	4b02      	ldr	r3, [pc, #8]	; (8008a64 <raise+0xc>)
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	f7ff bfd3 	b.w	8008a08 <_raise_r>
 8008a62:	bf00      	nop
 8008a64:	20000010 	.word	0x20000010

08008a68 <_kill_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d07      	ldr	r5, [pc, #28]	; (8008a88 <_kill_r+0x20>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	f7f8 ffb9 	bl	80019ec <_kill>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d102      	bne.n	8008a84 <_kill_r+0x1c>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b103      	cbz	r3, 8008a84 <_kill_r+0x1c>
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	bf00      	nop
 8008a88:	20000424 	.word	0x20000424

08008a8c <_getpid_r>:
 8008a8c:	f7f8 bfa6 	b.w	80019dc <_getpid>

08008a90 <_init>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr

08008a9c <_fini>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr
