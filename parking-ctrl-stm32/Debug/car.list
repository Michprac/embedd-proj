
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008180  08008180  00018180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ac  080085ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080085ac  080085ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085ac  080085ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080085b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000015c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000338  20000338  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f341  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e33  00000000  00000000  0002f54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00032080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002190b  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001061d  00000000  00000000  000545c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb9bb  00000000  00000000  00064be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013059b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004680  00000000  00000000  001305ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008168 	.word	0x08008168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008168 	.word	0x08008168

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f004 f90b 	bl	8004df0 <HAL_UART_Transmit>

  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000290 	.word	0x20000290

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f000 fd75 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f84b 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 f9e3 	bl	8000fc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bfa:	f000 f9b1 	bl	8000f60 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bfe:	f000 f8a9 	bl	8000d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c02:	f000 f935 	bl	8000e70 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000c06:	2100      	movs	r1, #0
 8000c08:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0x94>)
 8000c0a:	f002 ff19 	bl	8003a40 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000c0e:	2104      	movs	r1, #4
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <main+0x94>)
 8000c12:	f002 ff15 	bl	8003a40 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c16:	2108      	movs	r1, #8
 8000c18:	4818      	ldr	r0, [pc, #96]	; (8000c7c <main+0x94>)
 8000c1a:	f002 fdad 	bl	8003778 <HAL_TIM_PWM_Start>

//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);


  servo_init(&htim3, TIM_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <main+0x98>)
 8000c22:	f000 fa59 	bl	80010d8 <servo_init>

  int speed_table[] = {-20, 10, 20, 50};
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <main+0x9c>)
 8000c28:	1d3c      	adds	r4, r7, #4
 8000c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t angle_table[] = {0, 50, 100, 180};
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <main+0xa0>)
 8000c32:	603b      	str	r3, [r7, #0]

  int i = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t time_tick = HAL_GetTick();
 8000c38:	f000 fdaa 	bl	8001790 <HAL_GetTick>
 8000c3c:	61b8      	str	r0, [r7, #24]
  uint32_t max_time = 2000;
 8000c3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c42:	617b      	str	r3, [r7, #20]
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2000);
//	  HAL_Delay(500);
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2050);
//	  HAL_Delay(2000);

	  if ( (HAL_GetTick() - time_tick) > max_time )
 8000c44:	f000 fda4 	bl	8001790 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d2f7      	bcs.n	8000c44 <main+0x5c>
	  {
		  time_tick = HAL_GetTick();
 8000c54:	f000 fd9c 	bl	8001790 <HAL_GetTick>
 8000c58:	61b8      	str	r0, [r7, #24]
		  servo_set_angle(angle_table[i++]);
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	61fa      	str	r2, [r7, #28]
 8000c60:	3320      	adds	r3, #32
 8000c62:	443b      	add	r3, r7
 8000c64:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fa8d 	bl	8001188 <servo_set_angle>

		  if(i >= 4)
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	dde7      	ble.n	8000c44 <main+0x5c>
			  i = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
	  if ( (HAL_GetTick() - time_tick) > max_time )
 8000c78:	e7e4      	b.n	8000c44 <main+0x5c>
 8000c7a:	bf00      	nop
 8000c7c:	200001f8 	.word	0x200001f8
 8000c80:	20000244 	.word	0x20000244
 8000c84:	0800818c 	.word	0x0800818c
 8000c88:	b4643200 	.word	0xb4643200

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0a6      	sub	sp, #152	; 0x98
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 fd46 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2258      	movs	r2, #88	; 0x58
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fd38 	bl	800572c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ffe4 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cf6:	f000 f9e9 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d14:	2102      	movs	r1, #2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 f822 	bl	8002d60 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d22:	f000 f9d3 	bl	80010cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <SystemClock_Config+0xc4>)
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fa47 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d44:	f000 f9c2 	bl	80010cc <Error_Handler>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3798      	adds	r7, #152	; 0x98
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	00300002 	.word	0x00300002

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000d90:	2248      	movs	r2, #72	; 0x48
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000d9a:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000d9c:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <MX_TIM2_Init+0x118>)
 8000d9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000dac:	482e      	ldr	r0, [pc, #184]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000dae:	f002 fdef 	bl	8003990 <HAL_TIM_IC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000db8:	f000 f988 	bl	80010cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dbc:	482a      	ldr	r0, [pc, #168]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000dbe:	f002 fc7a 	bl	80036b6 <HAL_TIM_PWM_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000dc8:	f000 f980 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4823      	ldr	r0, [pc, #140]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000ddc:	f003 ff2e 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000de6:	f000 f971 	bl	80010cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dee:	2301      	movs	r3, #1
 8000df0:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4819      	ldr	r0, [pc, #100]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000e04:	f002 ff18 	bl	8003c38 <HAL_TIM_IC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000e0e:	f000 f95d 	bl	80010cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e16:	2302      	movs	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000e24:	f002 ff08 	bl	8003c38 <HAL_TIM_IC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000e2e:	f000 f94d 	bl	80010cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000e36:	230a      	movs	r3, #10
 8000e38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	2208      	movs	r2, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000e4a:	f002 ff91 	bl	8003d70 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e54:	f000 f93a 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM2_Init+0x114>)
 8000e5a:	f000 fa75 	bl	8001348 <HAL_TIM_MspPostInit>

}
 8000e5e:	bf00      	nop
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001f8 	.word	0x200001f8
 8000e6c:	000f4240 	.word	0x000f4240

08000e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_TIM3_Init+0xec>)
 8000ea6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eaa:	2247      	movs	r2, #71	; 0x47
 8000eac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eb6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000eba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec8:	4823      	ldr	r0, [pc, #140]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eca:	f002 fb9d 	bl	8003608 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ed4:	f000 f8fa 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481c      	ldr	r0, [pc, #112]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ee6:	f003 f857 	bl	8003f98 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ef0:	f000 f8ec 	bl	80010cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ef6:	f002 fbde 	bl	80036b6 <HAL_TIM_PWM_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f00:	f000 f8e4 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000f14:	f003 fe92 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f1e:	f000 f8d5 	bl	80010cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000f3c:	f002 ff18 	bl	8003d70 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000f46:	f000 f8c1 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000f4c:	f000 f9fc 	bl	8001348 <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000244 	.word	0x20000244
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <MX_USART2_UART_Init+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART2_UART_Init+0x58>)
 8000fa4:	f003 fed6 	bl	8004d54 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 f88d 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000290 	.word	0x20000290
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x100>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a39      	ldr	r2, [pc, #228]	; (80010c0 <MX_GPIO_Init+0x100>)
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	6153      	str	r3, [r2, #20]
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <MX_GPIO_Init+0x100>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <MX_GPIO_Init+0x100>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <MX_GPIO_Init+0x100>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <MX_GPIO_Init+0x100>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <MX_GPIO_Init+0x100>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <MX_GPIO_Init+0x100>)
 800100c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <MX_GPIO_Init+0x100>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f000 fe2e 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_7_GPIO_Port, RED_7_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	4824      	ldr	r0, [pc, #144]	; (80010c4 <MX_GPIO_Init+0x104>)
 8001032:	f000 fe29 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_pin_Pin|YELLOW_6_Pin|BLUE_1_Pin|BLUE_2_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 7154 	mov.w	r1, #848	; 0x350
 800103c:	4822      	ldr	r0, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x108>)
 800103e:	f000 fe23 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SERVO_analog_Pin */
  GPIO_InitStruct.Pin = SERVO_analog_Pin;
 8001042:	2310      	movs	r3, #16
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SERVO_analog_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f000 fc8c 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_3_Pin GREEN_4_Pin YELLOW_5_Pin RED_8_Pin */
  GPIO_InitStruct.Pin = GREEN_3_Pin|GREEN_4_Pin|YELLOW_5_Pin|RED_8_Pin;
 800105c:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f000 fc7c 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_7_Pin */
  GPIO_InitStruct.Pin = RED_7_Pin;
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_7_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_GPIO_Init+0x104>)
 8001094:	f000 fc6e 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_pin_Pin YELLOW_6_Pin BLUE_1_Pin BLUE_2_Pin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin|YELLOW_6_Pin|BLUE_1_Pin|BLUE_2_Pin;
 8001098:	f44f 7354 	mov.w	r3, #848	; 0x350
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_GPIO_Init+0x108>)
 80010b2:	f000 fc5f 	bl	8001974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000800 	.word	0x48000800
 80010c8:	48000400 	.word	0x48000400

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <servo_init>:

TIM_HandleTypeDef *pwm_tim;
uint32_t pwm_channel;

void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	pwm_tim = tim;
 80010e2:	4a27      	ldr	r2, [pc, #156]	; (8001180 <servo_init+0xa8>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6013      	str	r3, [r2, #0]
	pwm_channel = channel;
 80010e8:	4a26      	ldr	r2, [pc, #152]	; (8001184 <servo_init+0xac>)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <servo_init+0xac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <servo_init+0x2c>
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <servo_init+0xa8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
 8001102:	e031      	b.n	8001168 <servo_init+0x90>
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <servo_init+0xac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d106      	bne.n	800111a <servo_init+0x42>
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <servo_init+0xa8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	6393      	str	r3, [r2, #56]	; 0x38
 8001118:	e026      	b.n	8001168 <servo_init+0x90>
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <servo_init+0xac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d106      	bne.n	8001130 <servo_init+0x58>
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <servo_init+0xa8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800112e:	e01b      	b.n	8001168 <servo_init+0x90>
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <servo_init+0xac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b0c      	cmp	r3, #12
 8001136:	d106      	bne.n	8001146 <servo_init+0x6e>
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <servo_init+0xa8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	e010      	b.n	8001168 <servo_init+0x90>
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <servo_init+0xac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b10      	cmp	r3, #16
 800114c:	d106      	bne.n	800115c <servo_init+0x84>
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <servo_init+0xa8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	e005      	b.n	8001168 <servo_init+0x90>
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <servo_init+0xa8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <servo_init+0xa8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <servo_init+0xac>)
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fb00 	bl	8003778 <HAL_TIM_PWM_Start>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000318 	.word	0x20000318
 8001184:	2000031c 	.word	0x2000031c

08001188 <servo_set_angle>:


void servo_set_angle(uint8_t angle)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if(angle < SERVO_MIN_ANGLE)
		angle = SERVO_MIN_ANGLE;
	else if(angle > SERVO_MAX_ANGLE)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2bb4      	cmp	r3, #180	; 0xb4
 8001196:	d901      	bls.n	800119c <servo_set_angle+0x14>
		angle = SERVO_MAX_ANGLE;
 8001198:	23b4      	movs	r3, #180	; 0xb4
 800119a:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_duty_us;

	pwm_duty_us = SERVO_MIN_US +
			(angle * (SERVO_MAX_US - SERVO_MIN_US)) / SERVO_MAX_ANGLE;
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <servo_set_angle+0xac>)
 80011a8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ac:	441a      	add	r2, r3
 80011ae:	11d2      	asrs	r2, r2, #7
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1ad3      	subs	r3, r2, r3
	pwm_duty_us = SERVO_MIN_US +
 80011b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011b8:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <servo_set_angle+0xb0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <servo_set_angle+0x46>
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <servo_set_angle+0xb4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34

}
 80011cc:	e02c      	b.n	8001228 <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <servo_set_angle+0xb0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d105      	bne.n	80011e2 <servo_set_angle+0x5a>
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <servo_set_angle+0xb4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011e0:	e022      	b.n	8001228 <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <servo_set_angle+0xb0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d105      	bne.n	80011f6 <servo_set_angle+0x6e>
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <servo_set_angle+0xb4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80011f4:	e018      	b.n	8001228 <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <servo_set_angle+0xb0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d105      	bne.n	800120a <servo_set_angle+0x82>
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <servo_set_angle+0xb4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001208:	e00e      	b.n	8001228 <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <servo_set_angle+0xb0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d105      	bne.n	800121e <servo_set_angle+0x96>
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <servo_set_angle+0xb4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800121c:	e004      	b.n	8001228 <servo_set_angle+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <servo_set_angle+0xb4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	b60b60b7 	.word	0xb60b60b7
 8001238:	2000031c 	.word	0x2000031c
 800123c:	20000318 	.word	0x20000318

08001240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_MspInit+0x44>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_MspInit+0x44>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_MspInit+0x44>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x44>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x44>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a8:	d128      	bne.n	80012fc <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_TIM_IC_MspInit+0x7c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_TIM_IC_MspInit+0x7c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_TIM_IC_MspInit+0x7c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_TIM_IC_MspInit+0x7c>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_TIM_IC_MspInit+0x7c>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_TIM_IC_MspInit+0x7c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ea:	2301      	movs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fb3c 	bl	8001974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_TIM_Base_MspInit+0x38>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10b      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_TIM_Base_MspInit+0x3c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x3c>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_TIM_Base_MspInit+0x3c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40000400 	.word	0x40000400
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001368:	d11d      	bne.n	80013a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_TIM_MspPostInit+0xa8>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <HAL_TIM_MspPostInit+0xa8>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_TIM_MspPostInit+0xa8>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001394:	2301      	movs	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <HAL_TIM_MspPostInit+0xac>)
 80013a0:	f000 fae8 	bl	8001974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013a4:	e020      	b.n	80013e8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_TIM_MspPostInit+0xb0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d11b      	bne.n	80013e8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_TIM_MspPostInit+0xa8>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_TIM_MspPostInit+0xa8>)
 80013b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013ba:	6153      	str	r3, [r2, #20]
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_TIM_MspPostInit+0xa8>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d8:	2302      	movs	r3, #2
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <HAL_TIM_MspPostInit+0xb4>)
 80013e4:	f000 fac6 	bl	8001974 <HAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000400 	.word	0x48000400
 80013f8:	40000400 	.word	0x40000400
 80013fc:	48000800 	.word	0x48000800

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_UART_MspInit+0x7c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d128      	bne.n	8001474 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x80>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001452:	230c      	movs	r3, #12
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f000 fa80 	bl	8001974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004400 	.word	0x40004400
 8001480:	40021000 	.word	0x40021000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f94a 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_kill>:

int _kill(int pid, int sig)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014f2:	f004 f8f1 	bl	80056d8 <__errno>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2216      	movs	r2, #22
 80014fa:	601a      	str	r2, [r3, #0]
  return -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_exit>:

void _exit (int status)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffe7 	bl	80014e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800151a:	e7fe      	b.n	800151a <_exit+0x12>

0800151c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
  }

  return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e009      	b.n	800157c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fb21 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf1      	blt.n	8001568 <_write+0x12>
  }
  return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_close>:

int _close(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	605a      	str	r2, [r3, #4]
  return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_isatty>:

int _isatty(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f004 f856 	bl	80056d8 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20010000 	.word	0x20010000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000320 	.word	0x20000320
 8001660:	20000338 	.word	0x20000338

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <LoopForever+0xe>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	; (80016d4 <LoopForever+0x16>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 f815 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ba:	f7ff fa95 	bl	8000be8 <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016cc:	080085b4 	.word	0x080085b4
  ldr r2, =_sbss
 80016d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016d4:	20000338 	.word	0x20000338

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>
	...

080016dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x28>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f90d 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fda2 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f917 	bl	800195a <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f8ed 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	20000324 	.word	0x20000324

08001790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;  
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000324 	.word	0x20000324

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff47 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff5c 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff8e 	bl	8001860 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5d 	bl	800180c <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffb0 	bl	80018c8 <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e160      	b.n	8001c46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8152 	beq.w	8001c40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d005      	beq.n	80019b4 <HAL_GPIO_Init+0x40>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d130      	bne.n	8001a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ea:	2201      	movs	r2, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0201 	and.w	r2, r3, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d017      	beq.n	8001a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d123      	bne.n	8001aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0203 	and.w	r2, r3, #3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80ac 	beq.w	8001c40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a5d      	ldr	r2, [pc, #372]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b00:	4a59      	ldr	r2, [pc, #356]	; (8001c68 <HAL_GPIO_Init+0x2f4>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b2a:	d025      	beq.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a4f      	ldr	r2, [pc, #316]	; (8001c6c <HAL_GPIO_Init+0x2f8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d01f      	beq.n	8001b74 <HAL_GPIO_Init+0x200>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a4e      	ldr	r2, [pc, #312]	; (8001c70 <HAL_GPIO_Init+0x2fc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d019      	beq.n	8001b70 <HAL_GPIO_Init+0x1fc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a4d      	ldr	r2, [pc, #308]	; (8001c74 <HAL_GPIO_Init+0x300>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1f8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1f4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <HAL_GPIO_Init+0x308>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1f0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a4a      	ldr	r2, [pc, #296]	; (8001c80 <HAL_GPIO_Init+0x30c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1ec>
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	e00c      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b60:	2307      	movs	r3, #7
 8001b62:	e00a      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b64:	2305      	movs	r3, #5
 8001b66:	e008      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e004      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e002      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_GPIO_Init+0x206>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	f002 0203 	and.w	r2, r2, #3
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4093      	lsls	r3, r2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b8a:	4937      	ldr	r1, [pc, #220]	; (8001c68 <HAL_GPIO_Init+0x2f4>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be6:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f ae97 	bne.w	8001984 <HAL_GPIO_Init+0x10>
  }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	48000800 	.word	0x48000800
 8001c74:	48000c00 	.word	0x48000c00
 8001c78:	48001000 	.word	0x48001000
 8001c7c:	48001400 	.word	0x48001400
 8001c80:	48001800 	.word	0x48001800
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f001 b83a 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 816f 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cf4:	4bb5      	ldr	r3, [pc, #724]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d00:	4bb2      	ldr	r3, [pc, #712]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d15c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x10e>
 8001d0c:	4baf      	ldr	r3, [pc, #700]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d155      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x10e>
 8001d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x94>
 8001d46:	4ba1      	ldr	r3, [pc, #644]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e015      	b.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d68:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d74:	4b95      	ldr	r3, [pc, #596]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d84:	fa92 f2a2 	rbit	r2, r2
 8001d88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8111 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x318>
 8001dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8108 	bne.w	8001fd0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f000 bfc6 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12e>
 8001dd8:	4b7c      	ldr	r3, [pc, #496]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a7b      	ldr	r2, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e036      	b.n	8001e54 <HAL_RCC_OscConfig+0x19c>
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x158>
 8001df6:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a74      	ldr	r2, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a71      	ldr	r2, [pc, #452]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e021      	b.n	8001e54 <HAL_RCC_OscConfig+0x19c>
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x184>
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0x19c>
 8001e3c:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a62      	ldr	r2, [pc, #392]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b60      	ldr	r3, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a5f      	ldr	r2, [pc, #380]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d059      	beq.n	8001f18 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc94 	bl	8001790 <HAL_GetTick>
 8001e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fc8f 	bl	8001790 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d902      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f000 bf67 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
 8001e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x1fe>
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x22a>
 8001eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ece:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ed2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ee6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001eea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001eee:	fa92 f2a2 	rbit	r2, r2
 8001ef2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ef6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f042 0220 	orr.w	r2, r2, #32
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f002 021f 	and.w	r2, r2, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ab      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1b6>
 8001f16:	e05c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fc3a 	bl	8001790 <HAL_GetTick>
 8001f1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f22:	f7ff fc35 	bl	8001790 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d902      	bls.n	8001f38 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f000 bf0d 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2b2>
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x2de>
 8001f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_RCC_OscConfig+0x314>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f9a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f9e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001faa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ab      	bne.n	8001f22 <HAL_RCC_OscConfig+0x26a>
 8001fca:	e002      	b.n	8001fd2 <HAL_RCC_OscConfig+0x31a>
 8001fcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 817f 	beq.w	80022e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fe8:	4ba7      	ldr	r3, [pc, #668]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ff4:	4ba4      	ldr	r3, [pc, #656]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d173      	bne.n	80020e8 <HAL_RCC_OscConfig+0x430>
 8002000:	4ba1      	ldr	r3, [pc, #644]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200c:	d16c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x430>
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002020:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <HAL_RCC_OscConfig+0x386>
 8002038:	4b93      	ldr	r3, [pc, #588]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e013      	b.n	8002066 <HAL_RCC_OscConfig+0x3ae>
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002056:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002062:	4b89      	ldr	r3, [pc, #548]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	2202      	movs	r2, #2
 8002068:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800206c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002070:	fa92 f2a2 	rbit	r2, r2
 8002074:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002078:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 021f 	and.w	r2, r2, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCC_OscConfig+0x3f6>
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d002      	beq.n	80020ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f000 be52 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	21f8      	movs	r1, #248	; 0xf8
 80020c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80020cc:	fa91 f1a1 	rbit	r1, r1
 80020d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80020d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020d8:	fab1 f181 	clz	r1, r1
 80020dc:	b2c9      	uxtb	r1, r1
 80020de:	408b      	lsls	r3, r1
 80020e0:	4969      	ldr	r1, [pc, #420]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e0fe      	b.n	80022e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8088 	beq.w	800220a <HAL_RCC_OscConfig+0x552>
 80020fa:	2301      	movs	r3, #1
 80020fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800210c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800211a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	461a      	mov	r2, r3
 8002122:	2301      	movs	r3, #1
 8002124:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff fb33 	bl	8001790 <HAL_GetTick>
 800212a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff fb2e 	bl	8001790 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f000 be06 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002158:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0x4be>
 8002170:	4b45      	ldr	r3, [pc, #276]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	e013      	b.n	800219e <HAL_RCC_OscConfig+0x4e6>
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800218e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2202      	movs	r2, #2
 80021a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80021b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0af      	beq.n	8002130 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	21f8      	movs	r1, #248	; 0xf8
 80021e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80021ee:	fa91 f1a1 	rbit	r1, r1
 80021f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80021f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021fa:	fab1 f181 	clz	r1, r1
 80021fe:	b2c9      	uxtb	r1, r1
 8002200:	408b      	lsls	r3, r1
 8002202:	4921      	ldr	r1, [pc, #132]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e06d      	b.n	80022e6 <HAL_RCC_OscConfig+0x62e>
 800220a:	2301      	movs	r3, #1
 800220c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800221c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800222a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	461a      	mov	r2, r3
 8002232:	2300      	movs	r3, #0
 8002234:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff faab 	bl	8001790 <HAL_GetTick>
 800223a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff faa6 	bl	8001790 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d902      	bls.n	8002256 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	f000 bd7e 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002268:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x5d4>
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <HAL_RCC_OscConfig+0x5d0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e016      	b.n	80022b4 <HAL_RCC_OscConfig+0x5fc>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022b0:	4bbf      	ldr	r3, [pc, #764]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2202      	movs	r2, #2
 80022b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80022ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022be:	fa92 f2a2 	rbit	r2, r2
 80022c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80022c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f002 021f 	and.w	r2, r2, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ac      	bne.n	8002240 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8113 	beq.w	8002522 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d07c      	beq.n	8002406 <HAL_RCC_OscConfig+0x74e>
 800230c:	2301      	movs	r3, #1
 800230e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800231e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4ba2      	ldr	r3, [pc, #648]	; (80025b4 <HAL_RCC_OscConfig+0x8fc>)
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	461a      	mov	r2, r3
 8002332:	2301      	movs	r3, #1
 8002334:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7ff fa2b 	bl	8001790 <HAL_GetTick>
 800233a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fa26 	bl	8001790 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d902      	bls.n	8002356 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	f000 bcfe 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002376:	2202      	movs	r2, #2
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800239a:	2202      	movs	r2, #2
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b7e      	ldr	r3, [pc, #504]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 80023b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023c2:	2102      	movs	r1, #2
 80023c4:	6019      	str	r1, [r3, #0]
 80023c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f1a3 	rbit	r1, r3
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023dc:	6019      	str	r1, [r3, #0]
  return result;
 80023de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d09d      	beq.n	8002340 <HAL_RCC_OscConfig+0x688>
 8002404:	e08d      	b.n	8002522 <HAL_RCC_OscConfig+0x86a>
 8002406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002416:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002428:	601a      	str	r2, [r3, #0]
  return result;
 800242a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002432:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x8fc>)
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	461a      	mov	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7ff f9a2 	bl	8001790 <HAL_GetTick>
 800244c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff f99d 	bl	8001790 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d902      	bls.n	8002468 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	f000 bc75 	b.w	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002478:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002486:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002494:	2202      	movs	r2, #2
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 80024d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024e0:	2102      	movs	r1, #2
 80024e2:	6019      	str	r1, [r3, #0]
 80024e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f1a3 	rbit	r1, r3
 80024f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80024fa:	6019      	str	r1, [r3, #0]
  return result;
 80024fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002500:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d197      	bne.n	8002452 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002526:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 81a5 	beq.w	8002882 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCC_OscConfig+0x8f8>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002570:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_RCC_OscConfig+0x900>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d121      	bne.n	80025c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_OscConfig+0x900>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x900>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002590:	f7ff f8fe 	bl	8001790 <HAL_GetTick>
 8002594:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e010      	b.n	80025bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7ff f8f9 	bl	8001790 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d908      	bls.n	80025bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e3d1      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	10908120 	.word	0x10908120
 80025b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <HAL_RCC_OscConfig+0xb3c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0e8      	beq.n	800259a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x92e>
 80025d8:	4b87      	ldr	r3, [pc, #540]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a86      	ldr	r2, [pc, #536]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	e035      	b.n	8002652 <HAL_RCC_OscConfig+0x99a>
 80025e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x958>
 80025f6:	4b80      	ldr	r3, [pc, #512]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a7f      	ldr	r2, [pc, #508]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a7c      	ldr	r2, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	e020      	b.n	8002652 <HAL_RCC_OscConfig+0x99a>
 8002610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002614:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x982>
 8002620:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a74      	ldr	r2, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a71      	ldr	r2, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0x99a>
 800263a:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a6b      	ldr	r2, [pc, #428]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002656:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8081 	beq.w	8002766 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7ff f894 	bl	8001790 <HAL_GetTick>
 8002668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	e00b      	b.n	8002686 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7ff f88f 	bl	8001790 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e365      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800268e:	2202      	movs	r2, #2
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026b2:	2202      	movs	r2, #2
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f2a3 	rbit	r2, r3
 80026c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026cc:	601a      	str	r2, [r3, #0]
  return result;
 80026ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_OscConfig+0xa3a>
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	e013      	b.n	800271a <HAL_RCC_OscConfig+0xa62>
 80026f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80026fa:	2202      	movs	r2, #2
 80026fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002702:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f2a3 	rbit	r2, r3
 800270c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002710:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800271e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002722:	2102      	movs	r1, #2
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800272a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	fa92 f1a2 	rbit	r1, r2
 8002734:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002738:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800273c:	6011      	str	r1, [r2, #0]
  return result;
 800273e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002742:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 021f 	and.w	r2, r2, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d084      	beq.n	800266e <HAL_RCC_OscConfig+0x9b6>
 8002764:	e083      	b.n	800286e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff f813 	bl	8001790 <HAL_GetTick>
 800276a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7ff f80e 	bl	8001790 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e2e4      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002790:	2202      	movs	r2, #2
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002798:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027b4:	2202      	movs	r2, #2
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027ce:	601a      	str	r2, [r3, #0]
  return result;
 80027d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d106      	bne.n	80027fc <HAL_RCC_OscConfig+0xb44>
 80027ee:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <HAL_RCC_OscConfig+0xb40>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	e017      	b.n	8002824 <HAL_RCC_OscConfig+0xb6c>
 80027f4:	40007000 	.word	0x40007000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002800:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	4bb3      	ldr	r3, [pc, #716]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002828:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800282c:	2102      	movs	r1, #2
 800282e:	6011      	str	r1, [r2, #0]
 8002830:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002834:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	fa92 f1a2 	rbit	r1, r2
 800283e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002842:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002846:	6011      	str	r1, [r2, #0]
  return result;
 8002848:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800284c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d180      	bne.n	8002770 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800286e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002876:	4b9e      	ldr	r3, [pc, #632]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a9d      	ldr	r2, [pc, #628]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002886:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 825e 	beq.w	8002d50 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	f000 821f 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f040 8170 	bne.w	8002b94 <HAL_RCC_OscConfig+0xedc>
 80028b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028d8:	601a      	str	r2, [r3, #0]
  return result;
 80028da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	461a      	mov	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7fe ff49 	bl	8001790 <HAL_GetTick>
 80028fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	e009      	b.n	8002918 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe ff44 	bl	8001790 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e21c      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002938:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800293c:	601a      	str	r2, [r3, #0]
  return result;
 800293e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002942:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002946:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0xcaa>
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e027      	b.n	80029b2 <HAL_RCC_OscConfig+0xcfa>
 8002962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002966:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800296a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002974:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029be:	6011      	str	r1, [r2, #0]
 80029c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	fa92 f1a2 	rbit	r1, r2
 80029ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029d2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80029d6:	6011      	str	r1, [r2, #0]
  return result;
 80029d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029dc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d182      	bne.n	8002904 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	4937      	ldr	r1, [pc, #220]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a19      	ldr	r1, [r3, #32]
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	492d      	ldr	r1, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a64:	601a      	str	r2, [r3, #0]
  return result;
 8002a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fe83 	bl	8001790 <HAL_GetTick>
 8002a8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fe7e 	bl	8001790 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e156      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ac8:	601a      	str	r2, [r3, #0]
  return result;
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ad2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0xe3c>
 8002ae8:	4b01      	ldr	r3, [pc, #4]	; (8002af0 <HAL_RCC_OscConfig+0xe38>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	e02a      	b.n	8002b44 <HAL_RCC_OscConfig+0xe8c>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	4b86      	ldr	r3, [pc, #536]	; (8002d5c <HAL_RCC_OscConfig+0x10a4>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b50:	6011      	str	r1, [r2, #0]
 8002b52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	fa92 f1a2 	rbit	r1, r2
 8002b60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b64:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002b68:	6011      	str	r1, [r2, #0]
  return result;
 8002b6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b6e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f002 021f 	and.w	r2, r2, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f43f af7f 	beq.w	8002a90 <HAL_RCC_OscConfig+0xdd8>
 8002b92:	e0dd      	b.n	8002d50 <HAL_RCC_OscConfig+0x1098>
 8002b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	fa93 f2a3 	rbit	r2, r3
 8002bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bb8:	601a      	str	r2, [r3, #0]
  return result;
 8002bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bc2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fdd9 	bl	8001790 <HAL_GetTick>
 8002bde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	e009      	b.n	8002bf8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fdd4 	bl	8001790 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0ac      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
 8002bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c1c:	601a      	str	r2, [r3, #0]
  return result;
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_OscConfig+0xf8a>
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_OscConfig+0x10a4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e027      	b.n	8002c92 <HAL_RCC_OscConfig+0xfda>
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f2a3 	rbit	r2, r3
 8002c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c88:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_RCC_OscConfig+0x10a4>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c9e:	6011      	str	r1, [r2, #0]
 8002ca0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ca4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	fa92 f1a2 	rbit	r1, r2
 8002cae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cb2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002cb6:	6011      	str	r1, [r2, #0]
  return result;
 8002cb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cbc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f042 0220 	orr.w	r2, r2, #32
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f002 021f 	and.w	r2, r2, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d182      	bne.n	8002be4 <HAL_RCC_OscConfig+0xf2c>
 8002cde:	e037      	b.n	8002d50 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e02e      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_OscConfig+0x10a4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x10a4>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d117      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d20:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b09e      	sub	sp, #120	; 0x78
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e162      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d910      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 0207 	bic.w	r2, r3, #7
 8002d8e:	498b      	ldr	r1, [pc, #556]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e14a      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	497f      	ldr	r1, [pc, #508]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80dc 	beq.w	8002f8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d13c      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xf6>
 8002ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xa6>
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	e00f      	b.n	8002e26 <HAL_RCC_ClockConfig+0xc6>
 8002e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	667b      	str	r3, [r7, #100]	; 0x64
 8002e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e2e:	fa92 f2a2 	rbit	r2, r2
 8002e32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d17b      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0f3      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d13c      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x178>
 8002e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x128>
 8002e82:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x148>
 8002e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	647b      	str	r3, [r7, #68]	; 0x44
 8002e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea4:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eac:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f042 0220 	orr.w	r2, r2, #32
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f002 021f 	and.w	r2, r2, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13a      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b2      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1a0>
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e00d      	b.n	8002f1c <HAL_RCC_ClockConfig+0x1bc>
 8002f00:	2302      	movs	r3, #2
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	61ba      	str	r2, [r7, #24]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	617a      	str	r2, [r7, #20]
  return result;
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e079      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	491a      	ldr	r1, [pc, #104]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fc18 	bl	8001790 <HAL_GetTick>
 8002f60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe fc14 	bl	8001790 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e061      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d214      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4906      	ldr	r1, [pc, #24]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e040      	b.n	800303e <HAL_RCC_ClockConfig+0x2de>
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	491a      	ldr	r1, [pc, #104]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4912      	ldr	r1, [pc, #72]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003002:	f000 f829 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003006:	4601      	mov	r1, r0
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCC_ClockConfig+0x2e8>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003010:	22f0      	movs	r2, #240	; 0xf0
 8003012:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	fa92 f2a2 	rbit	r2, r2
 800301a:	60fa      	str	r2, [r7, #12]
  return result;
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	fab2 f282 	clz	r2, r2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	40d3      	lsrs	r3, r2
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x2ec>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	fa21 f303 	lsr.w	r3, r1, r3
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_RCC_ClockConfig+0x2f0>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_RCC_ClockConfig+0x2f4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fb66 	bl	8001708 <HAL_InitTick>
  
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3778      	adds	r7, #120	; 0x78
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	0800819c 	.word	0x0800819c
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b08b      	sub	sp, #44	; 0x2c
 800305c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x30>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x36>
 8003086:	e03f      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc8>)
 800308a:	623b      	str	r3, [r7, #32]
      break;
 800308c:	e03f      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003094:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003098:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	607a      	str	r2, [r7, #4]
  return result;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	40d3      	lsrs	r3, r2
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	220f      	movs	r2, #15
 80030bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	60fa      	str	r2, [r7, #12]
  return result;
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e0:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	e007      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	623b      	str	r3, [r7, #32]
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc8>)
 800310a:	623b      	str	r3, [r7, #32]
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	6a3b      	ldr	r3, [r7, #32]
}
 8003110:	4618      	mov	r0, r3
 8003112:	372c      	adds	r7, #44	; 0x2c
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	080081b4 	.word	0x080081b4
 8003128:	080081c4 	.word	0x080081c4

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800314a:	f7ff ffef 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314e:	4601      	mov	r1, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003158:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800315c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	603a      	str	r2, [r7, #0]
  return result;
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	40d3      	lsrs	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	080081ac 	.word	0x080081ac

08003188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800318e:	f7ff ffcd 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800319c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	fa92 f2a2 	rbit	r2, r2
 80031a8:	603a      	str	r2, [r7, #0]
  return result;
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	40d3      	lsrs	r3, r2
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080081ac 	.word	0x080081ac

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b092      	sub	sp, #72	; 0x48
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80d4 	beq.w	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f0:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10e      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	61d3      	str	r3, [r2, #28]
 8003208:	4b48      	ldr	r3, [pc, #288]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b45      	ldr	r3, [pc, #276]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a41      	ldr	r2, [pc, #260]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fe faad 	bl	8001790 <HAL_GetTick>
 8003236:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fe faa9 	bl	8001790 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1d6      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8084 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003274:	429a      	cmp	r2, r3
 8003276:	d07c      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	461a      	mov	r2, r3
 80032a2:	2301      	movs	r3, #1
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe fa59 	bl	8001790 <HAL_GetTick>
 80032de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fa55 	bl	8001790 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e180      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80032f8:	2302      	movs	r3, #2
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	2302      	movs	r3, #2
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	61fb      	str	r3, [r7, #28]
  return result;
 8003310:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d108      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003326:	4b01      	ldr	r3, [pc, #4]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	e00d      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
 8003334:	10908100 	.word	0x10908100
 8003338:	2302      	movs	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	4b9a      	ldr	r3, [pc, #616]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2202      	movs	r2, #2
 800334a:	613a      	str	r2, [r7, #16]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	fa92 f2a2 	rbit	r2, r2
 8003352:	60fa      	str	r2, [r7, #12]
  return result;
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	fab2 f282 	clz	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f002 021f 	and.w	r2, r2, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f202 	lsl.w	r2, r1, r2
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0b7      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003372:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	498c      	ldr	r1, [pc, #560]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003380:	4313      	orrs	r3, r2
 8003382:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338c:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a87      	ldr	r2, [pc, #540]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a4:	4b82      	ldr	r3, [pc, #520]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f023 0203 	bic.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	497f      	ldr	r1, [pc, #508]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c2:	4b7b      	ldr	r3, [pc, #492]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4978      	ldr	r1, [pc, #480]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	4970      	ldr	r1, [pc, #448]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fe:	4b6c      	ldr	r3, [pc, #432]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f023 0210 	bic.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4969      	ldr	r1, [pc, #420]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800341c:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	4961      	ldr	r1, [pc, #388]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f023 0220 	bic.w	r2, r3, #32
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	495a      	ldr	r1, [pc, #360]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003458:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	4952      	ldr	r1, [pc, #328]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003476:	4b4e      	ldr	r3, [pc, #312]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	494b      	ldr	r1, [pc, #300]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4943      	ldr	r1, [pc, #268]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	493c      	ldr	r1, [pc, #240]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034d0:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	4934      	ldr	r1, [pc, #208]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034ee:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	492d      	ldr	r1, [pc, #180]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	4925      	ldr	r1, [pc, #148]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	491e      	ldr	r1, [pc, #120]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	4916      	ldr	r1, [pc, #88]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	490f      	ldr	r1, [pc, #60]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035a2:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	4913      	ldr	r1, [pc, #76]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	490b      	ldr	r1, [pc, #44]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	4904      	ldr	r1, [pc, #16]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3748      	adds	r7, #72	; 0x48
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e049      	b.n	80036ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fe6a 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f000 fd70 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e049      	b.n	800375c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f841 	bl	8003764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 fd19 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start+0x24>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e03c      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x3e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e02f      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x58>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e022      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d109      	bne.n	80037ea <HAL_TIM_PWM_Start+0x72>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e015      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start+0x8c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e008      	b.n	8003816 <HAL_TIM_PWM_Start+0x9e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0a1      	b.n	8003962 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0xb6>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	e023      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0xc6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	e01b      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0xd6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800384c:	e013      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xe6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800385c:	e00b      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b10      	cmp	r3, #16
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xf6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	e003      	b.n	8003876 <HAL_TIM_PWM_Start+0xfe>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f9b6 	bl	8004bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a38      	ldr	r2, [pc, #224]	; (800396c <HAL_TIM_PWM_Start+0x1f4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d018      	beq.n	80038c0 <HAL_TIM_PWM_Start+0x148>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a37      	ldr	r2, [pc, #220]	; (8003970 <HAL_TIM_PWM_Start+0x1f8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_TIM_PWM_Start+0x148>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a35      	ldr	r2, [pc, #212]	; (8003974 <HAL_TIM_PWM_Start+0x1fc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_TIM_PWM_Start+0x148>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a34      	ldr	r2, [pc, #208]	; (8003978 <HAL_TIM_PWM_Start+0x200>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_TIM_PWM_Start+0x148>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a32      	ldr	r2, [pc, #200]	; (800397c <HAL_TIM_PWM_Start+0x204>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_TIM_PWM_Start+0x148>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_TIM_PWM_Start+0x208>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_PWM_Start+0x14c>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_TIM_PWM_Start+0x14e>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a23      	ldr	r2, [pc, #140]	; (800396c <HAL_TIM_PWM_Start+0x1f4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_TIM_PWM_Start+0x1a8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ec:	d018      	beq.n	8003920 <HAL_TIM_PWM_Start+0x1a8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a24      	ldr	r2, [pc, #144]	; (8003984 <HAL_TIM_PWM_Start+0x20c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_TIM_PWM_Start+0x1a8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_TIM_PWM_Start+0x210>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_TIM_PWM_Start+0x1a8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_TIM_PWM_Start+0x1f8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_TIM_PWM_Start+0x1a8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_TIM_PWM_Start+0x1fc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_TIM_PWM_Start+0x1a8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a19      	ldr	r2, [pc, #100]	; (8003980 <HAL_TIM_PWM_Start+0x208>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d115      	bne.n	800394c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_TIM_PWM_Start+0x214>)
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b06      	cmp	r3, #6
 8003930:	d015      	beq.n	800395e <HAL_TIM_PWM_Start+0x1e6>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d011      	beq.n	800395e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e000      	b.n	8003960 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40013400 	.word	0x40013400
 8003974:	40014000 	.word	0x40014000
 8003978:	40014400 	.word	0x40014400
 800397c:	40014800 	.word	0x40014800
 8003980:	40015000 	.word	0x40015000
 8003984:	40000400 	.word	0x40000400
 8003988:	40000800 	.word	0x40000800
 800398c:	00010007 	.word	0x00010007

08003990 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e049      	b.n	8003a36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fc66 	bl	8001288 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f000 fbac 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <HAL_TIM_IC_Start+0x1a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e023      	b.n	8003aa2 <HAL_TIM_IC_Start+0x62>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_IC_Start+0x2a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e01b      	b.n	8003aa2 <HAL_TIM_IC_Start+0x62>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_IC_Start+0x3a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e013      	b.n	8003aa2 <HAL_TIM_IC_Start+0x62>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b0c      	cmp	r3, #12
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_IC_Start+0x4a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e00b      	b.n	8003aa2 <HAL_TIM_IC_Start+0x62>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_IC_Start+0x5a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	e003      	b.n	8003aa2 <HAL_TIM_IC_Start+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_TIM_IC_Start+0x74>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e013      	b.n	8003adc <HAL_TIM_IC_Start+0x9c>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d104      	bne.n	8003ac4 <HAL_TIM_IC_Start+0x84>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e00b      	b.n	8003adc <HAL_TIM_IC_Start+0x9c>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d104      	bne.n	8003ad4 <HAL_TIM_IC_Start+0x94>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e003      	b.n	8003adc <HAL_TIM_IC_Start+0x9c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d102      	bne.n	8003aea <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e092      	b.n	8003c14 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_IC_Start+0xbe>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	e023      	b.n	8003b46 <HAL_TIM_IC_Start+0x106>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_IC_Start+0xce>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	e01b      	b.n	8003b46 <HAL_TIM_IC_Start+0x106>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_IC_Start+0xde>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b1c:	e013      	b.n	8003b46 <HAL_TIM_IC_Start+0x106>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_IC_Start+0xee>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b2c:	e00b      	b.n	8003b46 <HAL_TIM_IC_Start+0x106>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_IC_Start+0xfe>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3c:	e003      	b.n	8003b46 <HAL_TIM_IC_Start+0x106>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_IC_Start+0x116>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b54:	e013      	b.n	8003b7e <HAL_TIM_IC_Start+0x13e>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_IC_Start+0x126>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b64:	e00b      	b.n	8003b7e <HAL_TIM_IC_Start+0x13e>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_IC_Start+0x136>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b74:	e003      	b.n	8003b7e <HAL_TIM_IC_Start+0x13e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f832 	bl	8004bf0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_TIM_IC_Start+0x1dc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_TIM_IC_Start+0x192>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d018      	beq.n	8003bd2 <HAL_TIM_IC_Start+0x192>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <HAL_TIM_IC_Start+0x1e0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_TIM_IC_Start+0x192>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_TIM_IC_Start+0x1e4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_TIM_IC_Start+0x192>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <HAL_TIM_IC_Start+0x1e8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_TIM_IC_Start+0x192>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <HAL_TIM_IC_Start+0x1ec>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_TIM_IC_Start+0x192>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_TIM_IC_Start+0x1f0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d115      	bne.n	8003bfe <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_TIM_IC_Start+0x1f4>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b06      	cmp	r3, #6
 8003be2:	d015      	beq.n	8003c10 <HAL_TIM_IC_Start+0x1d0>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d011      	beq.n	8003c10 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	e008      	b.n	8003c10 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e000      	b.n	8003c12 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40015000 	.word	0x40015000
 8003c34:	00010007 	.word	0x00010007

08003c38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e088      	b.n	8003d68 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f000 fdfe 	bl	8004874 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020c 	bic.w	r2, r2, #12
 8003c86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	619a      	str	r2, [r3, #24]
 8003c9a:	e060      	b.n	8003d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d11c      	bne.n	8003cdc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f000 fe7c 	bl	80049ae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6999      	ldr	r1, [r3, #24]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	021a      	lsls	r2, r3, #8
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
 8003cda:	e040      	b.n	8003d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11b      	bne.n	8003d1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f000 fec9 	bl	8004a88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 020c 	bic.w	r2, r2, #12
 8003d04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
 8003d18:	e021      	b.n	8003d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	d11c      	bne.n	8003d5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6819      	ldr	r1, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f000 fee6 	bl	8004b00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69d9      	ldr	r1, [r3, #28]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	61da      	str	r2, [r3, #28]
 8003d58:	e001      	b.n	8003d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0ff      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b14      	cmp	r3, #20
 8003d9a:	f200 80f0 	bhi.w	8003f7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003f7f 	.word	0x08003f7f
 8003dac:	08003f7f 	.word	0x08003f7f
 8003db0:	08003f7f 	.word	0x08003f7f
 8003db4:	08003e39 	.word	0x08003e39
 8003db8:	08003f7f 	.word	0x08003f7f
 8003dbc:	08003f7f 	.word	0x08003f7f
 8003dc0:	08003f7f 	.word	0x08003f7f
 8003dc4:	08003e7b 	.word	0x08003e7b
 8003dc8:	08003f7f 	.word	0x08003f7f
 8003dcc:	08003f7f 	.word	0x08003f7f
 8003dd0:	08003f7f 	.word	0x08003f7f
 8003dd4:	08003ebb 	.word	0x08003ebb
 8003dd8:	08003f7f 	.word	0x08003f7f
 8003ddc:	08003f7f 	.word	0x08003f7f
 8003de0:	08003f7f 	.word	0x08003f7f
 8003de4:	08003efd 	.word	0x08003efd
 8003de8:	08003f7f 	.word	0x08003f7f
 8003dec:	08003f7f 	.word	0x08003f7f
 8003df0:	08003f7f 	.word	0x08003f7f
 8003df4:	08003f3d 	.word	0x08003f3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fa32 	bl	8004268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0208 	orr.w	r2, r2, #8
 8003e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0204 	bic.w	r2, r2, #4
 8003e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6999      	ldr	r1, [r3, #24]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	619a      	str	r2, [r3, #24]
      break;
 8003e36:	e0a5      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 faac 	bl	800439c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6999      	ldr	r1, [r3, #24]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]
      break;
 8003e78:	e084      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb1f 	bl	80044c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0208 	orr.w	r2, r2, #8
 8003e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0204 	bic.w	r2, r2, #4
 8003ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69d9      	ldr	r1, [r3, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	61da      	str	r2, [r3, #28]
      break;
 8003eb8:	e064      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fb91 	bl	80045e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	61da      	str	r2, [r3, #28]
      break;
 8003efa:	e043      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fbe0 	bl	80046c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0208 	orr.w	r2, r2, #8
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0204 	bic.w	r2, r2, #4
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f3a:	e023      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fc2a 	bl	800479c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f7c:	e002      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
      break;
 8003f82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop

08003f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e0b6      	b.n	8004122 <HAL_TIM_ConfigClockSource+0x18a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff0:	d03e      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0xd8>
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff6:	f200 8087 	bhi.w	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	f000 8086 	beq.w	800410e <HAL_TIM_ConfigClockSource+0x176>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d87f      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004008:	2b70      	cmp	r3, #112	; 0x70
 800400a:	d01a      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xaa>
 800400c:	2b70      	cmp	r3, #112	; 0x70
 800400e:	d87b      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004010:	2b60      	cmp	r3, #96	; 0x60
 8004012:	d050      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x11e>
 8004014:	2b60      	cmp	r3, #96	; 0x60
 8004016:	d877      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004018:	2b50      	cmp	r3, #80	; 0x50
 800401a:	d03c      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xfe>
 800401c:	2b50      	cmp	r3, #80	; 0x50
 800401e:	d873      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d058      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x13e>
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d86f      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004028:	2b30      	cmp	r3, #48	; 0x30
 800402a:	d064      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15e>
 800402c:	2b30      	cmp	r3, #48	; 0x30
 800402e:	d86b      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004030:	2b20      	cmp	r3, #32
 8004032:	d060      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15e>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d867      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05c      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15e>
 800403c:	2b10      	cmp	r3, #16
 800403e:	d05a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15e>
 8004040:	e062      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f000 fdad 	bl	8004bb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	609a      	str	r2, [r3, #8]
      break;
 800406e:	e04f      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f000 fd96 	bl	8004bb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004092:	609a      	str	r2, [r3, #8]
      break;
 8004094:	e03c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 fc54 	bl	8004950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2150      	movs	r1, #80	; 0x50
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fd63 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80040b4:	e02c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fcb0 	bl	8004a28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2160      	movs	r1, #96	; 0x60
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fd53 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80040d4:	e01c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 fc34 	bl	8004950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2140      	movs	r1, #64	; 0x40
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fd43 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 fd3a 	bl	8004b7a <TIM_ITRx_SetConfig>
      break;
 8004106:	e003      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e000      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800410e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a42      	ldr	r2, [pc, #264]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3f      	ldr	r2, [pc, #252]	; (800424c <TIM_Base_SetConfig+0x120>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3e      	ldr	r2, [pc, #248]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3d      	ldr	r2, [pc, #244]	; (8004254 <TIM_Base_SetConfig+0x128>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a31      	ldr	r2, [pc, #196]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01f      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d01b      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2e      	ldr	r2, [pc, #184]	; (800424c <TIM_Base_SetConfig+0x120>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d017      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <TIM_Base_SetConfig+0x124>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2c      	ldr	r2, [pc, #176]	; (8004254 <TIM_Base_SetConfig+0x128>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <TIM_Base_SetConfig+0x130>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <TIM_Base_SetConfig+0x134>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <TIM_Base_SetConfig+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x100>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a13      	ldr	r2, [pc, #76]	; (8004254 <TIM_Base_SetConfig+0x128>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x100>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <TIM_Base_SetConfig+0x130>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x100>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <TIM_Base_SetConfig+0x134>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x100>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <TIM_Base_SetConfig+0x138>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x100>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d103      	bne.n	8004234 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	615a      	str	r2, [r3, #20]
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40013400 	.word	0x40013400
 8004258:	40015000 	.word	0x40015000
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800

08004268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 0302 	bic.w	r3, r3, #2
 80042b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a30      	ldr	r2, [pc, #192]	; (8004384 <TIM_OC1_SetConfig+0x11c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <TIM_OC1_SetConfig+0x88>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a2f      	ldr	r2, [pc, #188]	; (8004388 <TIM_OC1_SetConfig+0x120>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_OC1_SetConfig+0x88>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2e      	ldr	r2, [pc, #184]	; (800438c <TIM_OC1_SetConfig+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_OC1_SetConfig+0x88>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <TIM_OC1_SetConfig+0x128>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_OC1_SetConfig+0x88>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <TIM_OC1_SetConfig+0x12c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_OC1_SetConfig+0x88>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <TIM_OC1_SetConfig+0x130>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10c      	bne.n	800430a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0308 	bic.w	r3, r3, #8
 80042f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <TIM_OC1_SetConfig+0x11c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <TIM_OC1_SetConfig+0xd2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <TIM_OC1_SetConfig+0x120>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_OC1_SetConfig+0xd2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <TIM_OC1_SetConfig+0x124>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_OC1_SetConfig+0xd2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <TIM_OC1_SetConfig+0x128>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_OC1_SetConfig+0xd2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <TIM_OC1_SetConfig+0x12c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_OC1_SetConfig+0xd2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <TIM_OC1_SetConfig+0x130>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d111      	bne.n	800435e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bf00      	nop
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40013400 	.word	0x40013400
 800438c:	40014000 	.word	0x40014000
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800
 8004398:	40015000 	.word	0x40015000

0800439c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f023 0210 	bic.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0320 	bic.w	r3, r3, #32
 80043ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <TIM_OC2_SetConfig+0x110>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_OC2_SetConfig+0x74>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <TIM_OC2_SetConfig+0x114>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC2_SetConfig+0x74>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <TIM_OC2_SetConfig+0x118>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10d      	bne.n	800442c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <TIM_OC2_SetConfig+0x110>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <TIM_OC2_SetConfig+0xc0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <TIM_OC2_SetConfig+0x114>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00f      	beq.n	800445c <TIM_OC2_SetConfig+0xc0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <TIM_OC2_SetConfig+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00b      	beq.n	800445c <TIM_OC2_SetConfig+0xc0>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <TIM_OC2_SetConfig+0x120>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_OC2_SetConfig+0xc0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <TIM_OC2_SetConfig+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_OC2_SetConfig+0xc0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <TIM_OC2_SetConfig+0x118>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d113      	bne.n	8004484 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004462:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800446a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40013400 	.word	0x40013400
 80044b4:	40015000 	.word	0x40015000
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800

080044c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <TIM_OC3_SetConfig+0x10c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_OC3_SetConfig+0x72>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <TIM_OC3_SetConfig+0x110>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_OC3_SetConfig+0x72>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <TIM_OC3_SetConfig+0x114>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10d      	bne.n	8004552 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800453c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004550:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <TIM_OC3_SetConfig+0x10c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <TIM_OC3_SetConfig+0xbe>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <TIM_OC3_SetConfig+0x110>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00f      	beq.n	8004582 <TIM_OC3_SetConfig+0xbe>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <TIM_OC3_SetConfig+0x118>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <TIM_OC3_SetConfig+0xbe>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <TIM_OC3_SetConfig+0x11c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_OC3_SetConfig+0xbe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <TIM_OC3_SetConfig+0x120>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC3_SetConfig+0xbe>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <TIM_OC3_SetConfig+0x114>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d113      	bne.n	80045aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40013400 	.word	0x40013400
 80045d8:	40015000 	.word	0x40015000
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <TIM_OC4_SetConfig+0xc8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <TIM_OC4_SetConfig+0x8c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <TIM_OC4_SetConfig+0xcc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00f      	beq.n	8004674 <TIM_OC4_SetConfig+0x8c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <TIM_OC4_SetConfig+0xd0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_OC4_SetConfig+0x8c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a17      	ldr	r2, [pc, #92]	; (80046bc <TIM_OC4_SetConfig+0xd4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC4_SetConfig+0x8c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <TIM_OC4_SetConfig+0xd8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC4_SetConfig+0x8c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <TIM_OC4_SetConfig+0xdc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40014400 	.word	0x40014400
 80046c0:	40014800 	.word	0x40014800
 80046c4:	40015000 	.word	0x40015000

080046c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800470c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a19      	ldr	r2, [pc, #100]	; (8004784 <TIM_OC5_SetConfig+0xbc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <TIM_OC5_SetConfig+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <TIM_OC5_SetConfig+0xc0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_OC5_SetConfig+0x82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <TIM_OC5_SetConfig+0xc4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <TIM_OC5_SetConfig+0x82>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <TIM_OC5_SetConfig+0xc8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_OC5_SetConfig+0x82>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <TIM_OC5_SetConfig+0xcc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_OC5_SetConfig+0x82>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a14      	ldr	r2, [pc, #80]	; (8004798 <TIM_OC5_SetConfig+0xd0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d109      	bne.n	800475e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004750:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40013400 	.word	0x40013400
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800
 8004798:	40015000 	.word	0x40015000

0800479c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	051b      	lsls	r3, r3, #20
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1a      	ldr	r2, [pc, #104]	; (800485c <TIM_OC6_SetConfig+0xc0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <TIM_OC6_SetConfig+0x84>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a19      	ldr	r2, [pc, #100]	; (8004860 <TIM_OC6_SetConfig+0xc4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00f      	beq.n	8004820 <TIM_OC6_SetConfig+0x84>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a18      	ldr	r2, [pc, #96]	; (8004864 <TIM_OC6_SetConfig+0xc8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_OC6_SetConfig+0x84>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <TIM_OC6_SetConfig+0xcc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_OC6_SetConfig+0x84>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a16      	ldr	r2, [pc, #88]	; (800486c <TIM_OC6_SetConfig+0xd0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_OC6_SetConfig+0x84>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <TIM_OC6_SetConfig+0xd4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d109      	bne.n	8004834 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	029b      	lsls	r3, r3, #10
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40013400 	.word	0x40013400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800
 8004870:	40015000 	.word	0x40015000

08004874 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <TIM_TI1_SetConfig+0xc4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d017      	beq.n	80048d2 <TIM_TI1_SetConfig+0x5e>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d013      	beq.n	80048d2 <TIM_TI1_SetConfig+0x5e>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <TIM_TI1_SetConfig+0xc8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00f      	beq.n	80048d2 <TIM_TI1_SetConfig+0x5e>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <TIM_TI1_SetConfig+0xcc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <TIM_TI1_SetConfig+0x5e>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a21      	ldr	r2, [pc, #132]	; (8004944 <TIM_TI1_SetConfig+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_TI1_SetConfig+0x5e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <TIM_TI1_SetConfig+0xd4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_TI1_SetConfig+0x5e>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <TIM_TI1_SetConfig+0xd8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <TIM_TI1_SetConfig+0x62>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <TIM_TI1_SetConfig+0x64>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e003      	b.n	80048f6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	b2db      	uxtb	r3, r3
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f023 030a 	bic.w	r3, r3, #10
 8004910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f003 030a 	and.w	r3, r3, #10
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40013400 	.word	0x40013400
 8004948:	40014000 	.word	0x40014000
 800494c:	40015000 	.word	0x40015000

08004950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 030a 	bic.w	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f023 0210 	bic.w	r2, r3, #16
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	031b      	lsls	r3, r3, #12
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f023 0210 	bic.w	r2, r3, #16
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	031b      	lsls	r3, r3, #12
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	621a      	str	r2, [r3, #32]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 0303 	bic.w	r3, r3, #3
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ac4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	031b      	lsls	r3, r3, #12
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	031b      	lsls	r3, r3, #12
 8004b58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f043 0307 	orr.w	r3, r3, #7
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	2201      	movs	r2, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	401a      	ands	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e06d      	b.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a30      	ldr	r2, [pc, #192]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a2f      	ldr	r2, [pc, #188]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d108      	bne.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d01d      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d018      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a11      	ldr	r2, [pc, #68]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40015000 	.word	0x40015000
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40014000 	.word	0x40014000

08004d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e040      	b.n	8004de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc fb42 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	; 0x24
 8004d80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8b6 	bl	8004f04 <UART_SetConfig>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e022      	b.n	8004de8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa7e 	bl	80052ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb05 	bl	80053f0 <UART_CheckIdleState>
 8004de6:	4603      	mov	r3, r0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d178      	bne.n	8004efa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_UART_Transmit+0x24>
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e071      	b.n	8004efc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2221      	movs	r2, #33	; 0x21
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e26:	f7fc fcb3 	bl	8001790 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e44:	d108      	bne.n	8004e58 <HAL_UART_Transmit+0x68>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e003      	b.n	8004e60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e60:	e030      	b.n	8004ec4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2180      	movs	r1, #128	; 0x80
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb67 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e03c      	b.n	8004efc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10b      	bne.n	8004ea0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e94:	b292      	uxth	r2, r2
 8004e96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e008      	b.n	8004eb2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1c8      	bne.n	8004e62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fb30 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e005      	b.n	8004efc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e000      	b.n	8004efc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004efa:	2302      	movs	r3, #2
  }
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b92      	ldr	r3, [pc, #584]	; (8005178 <UART_SetConfig+0x274>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a80      	ldr	r2, [pc, #512]	; (800517c <UART_SetConfig+0x278>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d120      	bne.n	8004fc2 <UART_SetConfig+0xbe>
 8004f80:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <UART_SetConfig+0x27c>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d817      	bhi.n	8004fbc <UART_SetConfig+0xb8>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x90>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fb7 	.word	0x08004fb7
 8004fa0:	08004fab 	.word	0x08004fab
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e0b5      	b.n	8005116 <UART_SetConfig+0x212>
 8004faa:	2302      	movs	r3, #2
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e0b2      	b.n	8005116 <UART_SetConfig+0x212>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e0af      	b.n	8005116 <UART_SetConfig+0x212>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e0ac      	b.n	8005116 <UART_SetConfig+0x212>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e0a9      	b.n	8005116 <UART_SetConfig+0x212>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a6f      	ldr	r2, [pc, #444]	; (8005184 <UART_SetConfig+0x280>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d124      	bne.n	8005016 <UART_SetConfig+0x112>
 8004fcc:	4b6c      	ldr	r3, [pc, #432]	; (8005180 <UART_SetConfig+0x27c>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fd8:	d011      	beq.n	8004ffe <UART_SetConfig+0xfa>
 8004fda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fde:	d817      	bhi.n	8005010 <UART_SetConfig+0x10c>
 8004fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe4:	d011      	beq.n	800500a <UART_SetConfig+0x106>
 8004fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fea:	d811      	bhi.n	8005010 <UART_SetConfig+0x10c>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <UART_SetConfig+0xf4>
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d006      	beq.n	8005004 <UART_SetConfig+0x100>
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x10c>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e08b      	b.n	8005116 <UART_SetConfig+0x212>
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e088      	b.n	8005116 <UART_SetConfig+0x212>
 8005004:	2304      	movs	r3, #4
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e085      	b.n	8005116 <UART_SetConfig+0x212>
 800500a:	2308      	movs	r3, #8
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e082      	b.n	8005116 <UART_SetConfig+0x212>
 8005010:	2310      	movs	r3, #16
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e07f      	b.n	8005116 <UART_SetConfig+0x212>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5b      	ldr	r2, [pc, #364]	; (8005188 <UART_SetConfig+0x284>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d124      	bne.n	800506a <UART_SetConfig+0x166>
 8005020:	4b57      	ldr	r3, [pc, #348]	; (8005180 <UART_SetConfig+0x27c>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005028:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800502c:	d011      	beq.n	8005052 <UART_SetConfig+0x14e>
 800502e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005032:	d817      	bhi.n	8005064 <UART_SetConfig+0x160>
 8005034:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005038:	d011      	beq.n	800505e <UART_SetConfig+0x15a>
 800503a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800503e:	d811      	bhi.n	8005064 <UART_SetConfig+0x160>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <UART_SetConfig+0x148>
 8005044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005048:	d006      	beq.n	8005058 <UART_SetConfig+0x154>
 800504a:	e00b      	b.n	8005064 <UART_SetConfig+0x160>
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e061      	b.n	8005116 <UART_SetConfig+0x212>
 8005052:	2302      	movs	r3, #2
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e05e      	b.n	8005116 <UART_SetConfig+0x212>
 8005058:	2304      	movs	r3, #4
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e05b      	b.n	8005116 <UART_SetConfig+0x212>
 800505e:	2308      	movs	r3, #8
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e058      	b.n	8005116 <UART_SetConfig+0x212>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e055      	b.n	8005116 <UART_SetConfig+0x212>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a47      	ldr	r2, [pc, #284]	; (800518c <UART_SetConfig+0x288>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d124      	bne.n	80050be <UART_SetConfig+0x1ba>
 8005074:	4b42      	ldr	r3, [pc, #264]	; (8005180 <UART_SetConfig+0x27c>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800507c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005080:	d011      	beq.n	80050a6 <UART_SetConfig+0x1a2>
 8005082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005086:	d817      	bhi.n	80050b8 <UART_SetConfig+0x1b4>
 8005088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800508c:	d011      	beq.n	80050b2 <UART_SetConfig+0x1ae>
 800508e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005092:	d811      	bhi.n	80050b8 <UART_SetConfig+0x1b4>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <UART_SetConfig+0x19c>
 8005098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509c:	d006      	beq.n	80050ac <UART_SetConfig+0x1a8>
 800509e:	e00b      	b.n	80050b8 <UART_SetConfig+0x1b4>
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e037      	b.n	8005116 <UART_SetConfig+0x212>
 80050a6:	2302      	movs	r3, #2
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e034      	b.n	8005116 <UART_SetConfig+0x212>
 80050ac:	2304      	movs	r3, #4
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e031      	b.n	8005116 <UART_SetConfig+0x212>
 80050b2:	2308      	movs	r3, #8
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e02e      	b.n	8005116 <UART_SetConfig+0x212>
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e02b      	b.n	8005116 <UART_SetConfig+0x212>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a33      	ldr	r2, [pc, #204]	; (8005190 <UART_SetConfig+0x28c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d124      	bne.n	8005112 <UART_SetConfig+0x20e>
 80050c8:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <UART_SetConfig+0x27c>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80050d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050d4:	d011      	beq.n	80050fa <UART_SetConfig+0x1f6>
 80050d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050da:	d817      	bhi.n	800510c <UART_SetConfig+0x208>
 80050dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050e0:	d011      	beq.n	8005106 <UART_SetConfig+0x202>
 80050e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050e6:	d811      	bhi.n	800510c <UART_SetConfig+0x208>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <UART_SetConfig+0x1f0>
 80050ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f0:	d006      	beq.n	8005100 <UART_SetConfig+0x1fc>
 80050f2:	e00b      	b.n	800510c <UART_SetConfig+0x208>
 80050f4:	2300      	movs	r3, #0
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x212>
 80050fa:	2302      	movs	r3, #2
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x212>
 8005100:	2304      	movs	r3, #4
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e007      	b.n	8005116 <UART_SetConfig+0x212>
 8005106:	2308      	movs	r3, #8
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e004      	b.n	8005116 <UART_SetConfig+0x212>
 800510c:	2310      	movs	r3, #16
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e001      	b.n	8005116 <UART_SetConfig+0x212>
 8005112:	2310      	movs	r3, #16
 8005114:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511e:	d16b      	bne.n	80051f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005120:	7ffb      	ldrb	r3, [r7, #31]
 8005122:	2b08      	cmp	r3, #8
 8005124:	d838      	bhi.n	8005198 <UART_SetConfig+0x294>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <UART_SetConfig+0x228>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005151 	.word	0x08005151
 8005130:	08005159 	.word	0x08005159
 8005134:	08005161 	.word	0x08005161
 8005138:	08005199 	.word	0x08005199
 800513c:	08005167 	.word	0x08005167
 8005140:	08005199 	.word	0x08005199
 8005144:	08005199 	.word	0x08005199
 8005148:	08005199 	.word	0x08005199
 800514c:	0800516f 	.word	0x0800516f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005150:	f7fd fff8 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8005154:	61b8      	str	r0, [r7, #24]
        break;
 8005156:	e024      	b.n	80051a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005158:	f7fe f816 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 800515c:	61b8      	str	r0, [r7, #24]
        break;
 800515e:	e020      	b.n	80051a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <UART_SetConfig+0x290>)
 8005162:	61bb      	str	r3, [r7, #24]
        break;
 8005164:	e01d      	b.n	80051a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005166:	f7fd ff77 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 800516a:	61b8      	str	r0, [r7, #24]
        break;
 800516c:	e019      	b.n	80051a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005172:	61bb      	str	r3, [r7, #24]
        break;
 8005174:	e015      	b.n	80051a2 <UART_SetConfig+0x29e>
 8005176:	bf00      	nop
 8005178:	efff69f3 	.word	0xefff69f3
 800517c:	40013800 	.word	0x40013800
 8005180:	40021000 	.word	0x40021000
 8005184:	40004400 	.word	0x40004400
 8005188:	40004800 	.word	0x40004800
 800518c:	40004c00 	.word	0x40004c00
 8005190:	40005000 	.word	0x40005000
 8005194:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	77bb      	strb	r3, [r7, #30]
        break;
 80051a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d073      	beq.n	8005290 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	005a      	lsls	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	441a      	add	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d916      	bls.n	80051f2 <UART_SetConfig+0x2ee>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ca:	d212      	bcs.n	80051f2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f023 030f 	bic.w	r3, r3, #15
 80051d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	89fb      	ldrh	r3, [r7, #14]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	89fa      	ldrh	r2, [r7, #14]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e04e      	b.n	8005290 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	77bb      	strb	r3, [r7, #30]
 80051f6:	e04b      	b.n	8005290 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f8:	7ffb      	ldrb	r3, [r7, #31]
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d827      	bhi.n	800524e <UART_SetConfig+0x34a>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0x300>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	0800524f 	.word	0x0800524f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800524f 	.word	0x0800524f
 8005220:	0800524f 	.word	0x0800524f
 8005224:	08005247 	.word	0x08005247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fd ff8c 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 800522c:	61b8      	str	r0, [r7, #24]
        break;
 800522e:	e013      	b.n	8005258 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005230:	f7fd ffaa 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 8005234:	61b8      	str	r0, [r7, #24]
        break;
 8005236:	e00f      	b.n	8005258 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <UART_SetConfig+0x3a4>)
 800523a:	61bb      	str	r3, [r7, #24]
        break;
 800523c:	e00c      	b.n	8005258 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523e:	f7fd ff0b 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8005242:	61b8      	str	r0, [r7, #24]
        break;
 8005244:	e008      	b.n	8005258 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524a:	61bb      	str	r3, [r7, #24]
        break;
 800524c:	e004      	b.n	8005258 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	77bb      	strb	r3, [r7, #30]
        break;
 8005256:	bf00      	nop
    }

    if (pclk != 0U)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d018      	beq.n	8005290 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	085a      	lsrs	r2, r3, #1
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	441a      	add	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b0f      	cmp	r3, #15
 8005276:	d909      	bls.n	800528c <UART_SetConfig+0x388>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527e:	d205      	bcs.n	800528c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e001      	b.n	8005290 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800529c:	7fbb      	ldrb	r3, [r7, #30]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	007a1200 	.word	0x007a1200

080052ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053aa:	d10a      	bne.n	80053c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b098      	sub	sp, #96	; 0x60
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005400:	f7fc f9c6 	bl	8001790 <HAL_GetTick>
 8005404:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d12e      	bne.n	8005472 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f88c 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d021      	beq.n	8005472 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
 800544e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e062      	b.n	8005538 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d149      	bne.n	8005514 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f856 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d03c      	beq.n	8005514 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	623b      	str	r3, [r7, #32]
   return(result);
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	633b      	str	r3, [r7, #48]	; 0x30
 80054ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60fb      	str	r3, [r7, #12]
   return(result);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ec:	61fa      	str	r2, [r7, #28]
 80054ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	69b9      	ldr	r1, [r7, #24]
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	617b      	str	r3, [r7, #20]
   return(result);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e011      	b.n	8005538 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3758      	adds	r7, #88	; 0x58
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005550:	e049      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d045      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fc f919 	bl	8001790 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <UART_WaitOnFlagUntilTimeout+0x30>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e048      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d031      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d110      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2208      	movs	r2, #8
 8005596:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f838 	bl	800560e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2208      	movs	r2, #8
 80055a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e029      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c0:	d111      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f81e 	bl	800560e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e00f      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	429a      	cmp	r2, r3
 8005602:	d0a6      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800560e:	b480      	push	{r7}
 8005610:	b095      	sub	sp, #84	; 0x54
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	643b      	str	r3, [r7, #64]	; 0x40
 8005636:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e6      	bne.n	8005616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	61fb      	str	r3, [r7, #28]
   return(result);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800566e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e5      	bne.n	8005648 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005680:	2b01      	cmp	r3, #1
 8005682:	d118      	bne.n	80056b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	60bb      	str	r3, [r7, #8]
   return(result);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	647b      	str	r3, [r7, #68]	; 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	613b      	str	r3, [r7, #16]
   return(result);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e6      	bne.n	8005684 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80056ca:	bf00      	nop
 80056cc:	3754      	adds	r7, #84	; 0x54
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <__errno>:
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <__errno+0x8>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	2000000c 	.word	0x2000000c

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	; (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	; (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	; (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <__libc_init_array+0x44>)
 80056f8:	f002 fd36 	bl	8008168 <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	080085ac 	.word	0x080085ac
 8005720:	080085ac 	.word	0x080085ac
 8005724:	080085ac 	.word	0x080085ac
 8005728:	080085b0 	.word	0x080085b0

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <__cvt>:
 800573c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	ec55 4b10 	vmov	r4, r5, d0
 8005744:	2d00      	cmp	r5, #0
 8005746:	460e      	mov	r6, r1
 8005748:	4619      	mov	r1, r3
 800574a:	462b      	mov	r3, r5
 800574c:	bfbb      	ittet	lt
 800574e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005752:	461d      	movlt	r5, r3
 8005754:	2300      	movge	r3, #0
 8005756:	232d      	movlt	r3, #45	; 0x2d
 8005758:	700b      	strb	r3, [r1, #0]
 800575a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800575c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005760:	4691      	mov	r9, r2
 8005762:	f023 0820 	bic.w	r8, r3, #32
 8005766:	bfbc      	itt	lt
 8005768:	4622      	movlt	r2, r4
 800576a:	4614      	movlt	r4, r2
 800576c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005770:	d005      	beq.n	800577e <__cvt+0x42>
 8005772:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005776:	d100      	bne.n	800577a <__cvt+0x3e>
 8005778:	3601      	adds	r6, #1
 800577a:	2102      	movs	r1, #2
 800577c:	e000      	b.n	8005780 <__cvt+0x44>
 800577e:	2103      	movs	r1, #3
 8005780:	ab03      	add	r3, sp, #12
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	ab02      	add	r3, sp, #8
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	ec45 4b10 	vmov	d0, r4, r5
 800578c:	4653      	mov	r3, sl
 800578e:	4632      	mov	r2, r6
 8005790:	f000 fcca 	bl	8006128 <_dtoa_r>
 8005794:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005798:	4607      	mov	r7, r0
 800579a:	d102      	bne.n	80057a2 <__cvt+0x66>
 800579c:	f019 0f01 	tst.w	r9, #1
 80057a0:	d022      	beq.n	80057e8 <__cvt+0xac>
 80057a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a6:	eb07 0906 	add.w	r9, r7, r6
 80057aa:	d110      	bne.n	80057ce <__cvt+0x92>
 80057ac:	783b      	ldrb	r3, [r7, #0]
 80057ae:	2b30      	cmp	r3, #48	; 0x30
 80057b0:	d10a      	bne.n	80057c8 <__cvt+0x8c>
 80057b2:	2200      	movs	r2, #0
 80057b4:	2300      	movs	r3, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fb f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 80057be:	b918      	cbnz	r0, 80057c8 <__cvt+0x8c>
 80057c0:	f1c6 0601 	rsb	r6, r6, #1
 80057c4:	f8ca 6000 	str.w	r6, [sl]
 80057c8:	f8da 3000 	ldr.w	r3, [sl]
 80057cc:	4499      	add	r9, r3
 80057ce:	2200      	movs	r2, #0
 80057d0:	2300      	movs	r3, #0
 80057d2:	4620      	mov	r0, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	f7fb f97f 	bl	8000ad8 <__aeabi_dcmpeq>
 80057da:	b108      	cbz	r0, 80057e0 <__cvt+0xa4>
 80057dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80057e0:	2230      	movs	r2, #48	; 0x30
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	454b      	cmp	r3, r9
 80057e6:	d307      	bcc.n	80057f8 <__cvt+0xbc>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057ec:	1bdb      	subs	r3, r3, r7
 80057ee:	4638      	mov	r0, r7
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	b004      	add	sp, #16
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	9103      	str	r1, [sp, #12]
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e7f0      	b.n	80057e2 <__cvt+0xa6>

08005800 <__exponent>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	4603      	mov	r3, r0
 8005804:	2900      	cmp	r1, #0
 8005806:	bfb8      	it	lt
 8005808:	4249      	neglt	r1, r1
 800580a:	f803 2b02 	strb.w	r2, [r3], #2
 800580e:	bfb4      	ite	lt
 8005810:	222d      	movlt	r2, #45	; 0x2d
 8005812:	222b      	movge	r2, #43	; 0x2b
 8005814:	2909      	cmp	r1, #9
 8005816:	7042      	strb	r2, [r0, #1]
 8005818:	dd2a      	ble.n	8005870 <__exponent+0x70>
 800581a:	f10d 0407 	add.w	r4, sp, #7
 800581e:	46a4      	mov	ip, r4
 8005820:	270a      	movs	r7, #10
 8005822:	46a6      	mov	lr, r4
 8005824:	460a      	mov	r2, r1
 8005826:	fb91 f6f7 	sdiv	r6, r1, r7
 800582a:	fb07 1516 	mls	r5, r7, r6, r1
 800582e:	3530      	adds	r5, #48	; 0x30
 8005830:	2a63      	cmp	r2, #99	; 0x63
 8005832:	f104 34ff 	add.w	r4, r4, #4294967295
 8005836:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800583a:	4631      	mov	r1, r6
 800583c:	dcf1      	bgt.n	8005822 <__exponent+0x22>
 800583e:	3130      	adds	r1, #48	; 0x30
 8005840:	f1ae 0502 	sub.w	r5, lr, #2
 8005844:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005848:	1c44      	adds	r4, r0, #1
 800584a:	4629      	mov	r1, r5
 800584c:	4561      	cmp	r1, ip
 800584e:	d30a      	bcc.n	8005866 <__exponent+0x66>
 8005850:	f10d 0209 	add.w	r2, sp, #9
 8005854:	eba2 020e 	sub.w	r2, r2, lr
 8005858:	4565      	cmp	r5, ip
 800585a:	bf88      	it	hi
 800585c:	2200      	movhi	r2, #0
 800585e:	4413      	add	r3, r2
 8005860:	1a18      	subs	r0, r3, r0
 8005862:	b003      	add	sp, #12
 8005864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800586a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800586e:	e7ed      	b.n	800584c <__exponent+0x4c>
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	3130      	adds	r1, #48	; 0x30
 8005874:	7083      	strb	r3, [r0, #2]
 8005876:	70c1      	strb	r1, [r0, #3]
 8005878:	1d03      	adds	r3, r0, #4
 800587a:	e7f1      	b.n	8005860 <__exponent+0x60>

0800587c <_printf_float>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	ed2d 8b02 	vpush	{d8}
 8005884:	b08d      	sub	sp, #52	; 0x34
 8005886:	460c      	mov	r4, r1
 8005888:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800588c:	4616      	mov	r6, r2
 800588e:	461f      	mov	r7, r3
 8005890:	4605      	mov	r5, r0
 8005892:	f001 fb2d 	bl	8006ef0 <_localeconv_r>
 8005896:	f8d0 a000 	ldr.w	sl, [r0]
 800589a:	4650      	mov	r0, sl
 800589c:	f7fa fca0 	bl	80001e0 <strlen>
 80058a0:	2300      	movs	r3, #0
 80058a2:	930a      	str	r3, [sp, #40]	; 0x28
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	f8d8 3000 	ldr.w	r3, [r8]
 80058ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058b0:	3307      	adds	r3, #7
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	f103 0208 	add.w	r2, r3, #8
 80058ba:	f8c8 2000 	str.w	r2, [r8]
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058ce:	9307      	str	r3, [sp, #28]
 80058d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80058d4:	ee08 0a10 	vmov	s16, r0
 80058d8:	4b9f      	ldr	r3, [pc, #636]	; (8005b58 <_printf_float+0x2dc>)
 80058da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	f7fb f92b 	bl	8000b3c <__aeabi_dcmpun>
 80058e6:	bb88      	cbnz	r0, 800594c <_printf_float+0xd0>
 80058e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ec:	4b9a      	ldr	r3, [pc, #616]	; (8005b58 <_printf_float+0x2dc>)
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	f7fb f905 	bl	8000b00 <__aeabi_dcmple>
 80058f6:	bb48      	cbnz	r0, 800594c <_printf_float+0xd0>
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	4640      	mov	r0, r8
 80058fe:	4649      	mov	r1, r9
 8005900:	f7fb f8f4 	bl	8000aec <__aeabi_dcmplt>
 8005904:	b110      	cbz	r0, 800590c <_printf_float+0x90>
 8005906:	232d      	movs	r3, #45	; 0x2d
 8005908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590c:	4b93      	ldr	r3, [pc, #588]	; (8005b5c <_printf_float+0x2e0>)
 800590e:	4894      	ldr	r0, [pc, #592]	; (8005b60 <_printf_float+0x2e4>)
 8005910:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005914:	bf94      	ite	ls
 8005916:	4698      	movls	r8, r3
 8005918:	4680      	movhi	r8, r0
 800591a:	2303      	movs	r3, #3
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	9b05      	ldr	r3, [sp, #20]
 8005920:	f023 0204 	bic.w	r2, r3, #4
 8005924:	6022      	str	r2, [r4, #0]
 8005926:	f04f 0900 	mov.w	r9, #0
 800592a:	9700      	str	r7, [sp, #0]
 800592c:	4633      	mov	r3, r6
 800592e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005930:	4621      	mov	r1, r4
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f9d8 	bl	8005ce8 <_printf_common>
 8005938:	3001      	adds	r0, #1
 800593a:	f040 8090 	bne.w	8005a5e <_printf_float+0x1e2>
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	b00d      	add	sp, #52	; 0x34
 8005944:	ecbd 8b02 	vpop	{d8}
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	4640      	mov	r0, r8
 8005952:	4649      	mov	r1, r9
 8005954:	f7fb f8f2 	bl	8000b3c <__aeabi_dcmpun>
 8005958:	b140      	cbz	r0, 800596c <_printf_float+0xf0>
 800595a:	464b      	mov	r3, r9
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfbc      	itt	lt
 8005960:	232d      	movlt	r3, #45	; 0x2d
 8005962:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005966:	487f      	ldr	r0, [pc, #508]	; (8005b64 <_printf_float+0x2e8>)
 8005968:	4b7f      	ldr	r3, [pc, #508]	; (8005b68 <_printf_float+0x2ec>)
 800596a:	e7d1      	b.n	8005910 <_printf_float+0x94>
 800596c:	6863      	ldr	r3, [r4, #4]
 800596e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005972:	9206      	str	r2, [sp, #24]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	d13f      	bne.n	80059f8 <_printf_float+0x17c>
 8005978:	2306      	movs	r3, #6
 800597a:	6063      	str	r3, [r4, #4]
 800597c:	9b05      	ldr	r3, [sp, #20]
 800597e:	6861      	ldr	r1, [r4, #4]
 8005980:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005984:	2300      	movs	r3, #0
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	ab0a      	add	r3, sp, #40	; 0x28
 800598a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800598e:	ab09      	add	r3, sp, #36	; 0x24
 8005990:	ec49 8b10 	vmov	d0, r8, r9
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6022      	str	r2, [r4, #0]
 8005998:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800599c:	4628      	mov	r0, r5
 800599e:	f7ff fecd 	bl	800573c <__cvt>
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a6:	2b47      	cmp	r3, #71	; 0x47
 80059a8:	4680      	mov	r8, r0
 80059aa:	d108      	bne.n	80059be <_printf_float+0x142>
 80059ac:	1cc8      	adds	r0, r1, #3
 80059ae:	db02      	blt.n	80059b6 <_printf_float+0x13a>
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	4299      	cmp	r1, r3
 80059b4:	dd41      	ble.n	8005a3a <_printf_float+0x1be>
 80059b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80059ba:	fa5f fb8b 	uxtb.w	fp, fp
 80059be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059c2:	d820      	bhi.n	8005a06 <_printf_float+0x18a>
 80059c4:	3901      	subs	r1, #1
 80059c6:	465a      	mov	r2, fp
 80059c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059cc:	9109      	str	r1, [sp, #36]	; 0x24
 80059ce:	f7ff ff17 	bl	8005800 <__exponent>
 80059d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d4:	1813      	adds	r3, r2, r0
 80059d6:	2a01      	cmp	r2, #1
 80059d8:	4681      	mov	r9, r0
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	dc02      	bgt.n	80059e4 <_printf_float+0x168>
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	07d2      	lsls	r2, r2, #31
 80059e2:	d501      	bpl.n	80059e8 <_printf_float+0x16c>
 80059e4:	3301      	adds	r3, #1
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d09c      	beq.n	800592a <_printf_float+0xae>
 80059f0:	232d      	movs	r3, #45	; 0x2d
 80059f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f6:	e798      	b.n	800592a <_printf_float+0xae>
 80059f8:	9a06      	ldr	r2, [sp, #24]
 80059fa:	2a47      	cmp	r2, #71	; 0x47
 80059fc:	d1be      	bne.n	800597c <_printf_float+0x100>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1bc      	bne.n	800597c <_printf_float+0x100>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e7b9      	b.n	800597a <_printf_float+0xfe>
 8005a06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a0a:	d118      	bne.n	8005a3e <_printf_float+0x1c2>
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	dd0b      	ble.n	8005a2a <_printf_float+0x1ae>
 8005a12:	6121      	str	r1, [r4, #16]
 8005a14:	b913      	cbnz	r3, 8005a1c <_printf_float+0x1a0>
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d502      	bpl.n	8005a22 <_printf_float+0x1a6>
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	440b      	add	r3, r1
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a24:	f04f 0900 	mov.w	r9, #0
 8005a28:	e7de      	b.n	80059e8 <_printf_float+0x16c>
 8005a2a:	b913      	cbnz	r3, 8005a32 <_printf_float+0x1b6>
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	07d2      	lsls	r2, r2, #31
 8005a30:	d501      	bpl.n	8005a36 <_printf_float+0x1ba>
 8005a32:	3302      	adds	r3, #2
 8005a34:	e7f4      	b.n	8005a20 <_printf_float+0x1a4>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7f2      	b.n	8005a20 <_printf_float+0x1a4>
 8005a3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a40:	4299      	cmp	r1, r3
 8005a42:	db05      	blt.n	8005a50 <_printf_float+0x1d4>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	6121      	str	r1, [r4, #16]
 8005a48:	07d8      	lsls	r0, r3, #31
 8005a4a:	d5ea      	bpl.n	8005a22 <_printf_float+0x1a6>
 8005a4c:	1c4b      	adds	r3, r1, #1
 8005a4e:	e7e7      	b.n	8005a20 <_printf_float+0x1a4>
 8005a50:	2900      	cmp	r1, #0
 8005a52:	bfd4      	ite	le
 8005a54:	f1c1 0202 	rsble	r2, r1, #2
 8005a58:	2201      	movgt	r2, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	e7e0      	b.n	8005a20 <_printf_float+0x1a4>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	055a      	lsls	r2, r3, #21
 8005a62:	d407      	bmi.n	8005a74 <_printf_float+0x1f8>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	4642      	mov	r2, r8
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d12c      	bne.n	8005acc <_printf_float+0x250>
 8005a72:	e764      	b.n	800593e <_printf_float+0xc2>
 8005a74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a78:	f240 80e0 	bls.w	8005c3c <_printf_float+0x3c0>
 8005a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a80:	2200      	movs	r2, #0
 8005a82:	2300      	movs	r3, #0
 8005a84:	f7fb f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d034      	beq.n	8005af6 <_printf_float+0x27a>
 8005a8c:	4a37      	ldr	r2, [pc, #220]	; (8005b6c <_printf_float+0x2f0>)
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af51 	beq.w	800593e <_printf_float+0xc2>
 8005a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	db02      	blt.n	8005aaa <_printf_float+0x22e>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	07d8      	lsls	r0, r3, #31
 8005aa8:	d510      	bpl.n	8005acc <_printf_float+0x250>
 8005aaa:	ee18 3a10 	vmov	r3, s16
 8005aae:	4652      	mov	r2, sl
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af41 	beq.w	800593e <_printf_float+0xc2>
 8005abc:	f04f 0800 	mov.w	r8, #0
 8005ac0:	f104 091a 	add.w	r9, r4, #26
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4543      	cmp	r3, r8
 8005aca:	dc09      	bgt.n	8005ae0 <_printf_float+0x264>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	079b      	lsls	r3, r3, #30
 8005ad0:	f100 8105 	bmi.w	8005cde <_printf_float+0x462>
 8005ad4:	68e0      	ldr	r0, [r4, #12]
 8005ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ad8:	4298      	cmp	r0, r3
 8005ada:	bfb8      	it	lt
 8005adc:	4618      	movlt	r0, r3
 8005ade:	e730      	b.n	8005942 <_printf_float+0xc6>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	464a      	mov	r2, r9
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f af27 	beq.w	800593e <_printf_float+0xc2>
 8005af0:	f108 0801 	add.w	r8, r8, #1
 8005af4:	e7e6      	b.n	8005ac4 <_printf_float+0x248>
 8005af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dc39      	bgt.n	8005b70 <_printf_float+0x2f4>
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <_printf_float+0x2f0>)
 8005afe:	2301      	movs	r3, #1
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	f43f af19 	beq.w	800593e <_printf_float+0xc2>
 8005b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b10:	4313      	orrs	r3, r2
 8005b12:	d102      	bne.n	8005b1a <_printf_float+0x29e>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	07d9      	lsls	r1, r3, #31
 8005b18:	d5d8      	bpl.n	8005acc <_printf_float+0x250>
 8005b1a:	ee18 3a10 	vmov	r3, s16
 8005b1e:	4652      	mov	r2, sl
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af09 	beq.w	800593e <_printf_float+0xc2>
 8005b2c:	f04f 0900 	mov.w	r9, #0
 8005b30:	f104 0a1a 	add.w	sl, r4, #26
 8005b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b36:	425b      	negs	r3, r3
 8005b38:	454b      	cmp	r3, r9
 8005b3a:	dc01      	bgt.n	8005b40 <_printf_float+0x2c4>
 8005b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3e:	e792      	b.n	8005a66 <_printf_float+0x1ea>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4652      	mov	r2, sl
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f aef7 	beq.w	800593e <_printf_float+0xc2>
 8005b50:	f109 0901 	add.w	r9, r9, #1
 8005b54:	e7ee      	b.n	8005b34 <_printf_float+0x2b8>
 8005b56:	bf00      	nop
 8005b58:	7fefffff 	.word	0x7fefffff
 8005b5c:	080081d8 	.word	0x080081d8
 8005b60:	080081dc 	.word	0x080081dc
 8005b64:	080081e4 	.word	0x080081e4
 8005b68:	080081e0 	.word	0x080081e0
 8005b6c:	080081e8 	.word	0x080081e8
 8005b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bfa8      	it	ge
 8005b78:	461a      	movge	r2, r3
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	4691      	mov	r9, r2
 8005b7e:	dc37      	bgt.n	8005bf0 <_printf_float+0x374>
 8005b80:	f04f 0b00 	mov.w	fp, #0
 8005b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b88:	f104 021a 	add.w	r2, r4, #26
 8005b8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b8e:	9305      	str	r3, [sp, #20]
 8005b90:	eba3 0309 	sub.w	r3, r3, r9
 8005b94:	455b      	cmp	r3, fp
 8005b96:	dc33      	bgt.n	8005c00 <_printf_float+0x384>
 8005b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	db3b      	blt.n	8005c18 <_printf_float+0x39c>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	07da      	lsls	r2, r3, #31
 8005ba4:	d438      	bmi.n	8005c18 <_printf_float+0x39c>
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	9a05      	ldr	r2, [sp, #20]
 8005baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bac:	1a9a      	subs	r2, r3, r2
 8005bae:	eba3 0901 	sub.w	r9, r3, r1
 8005bb2:	4591      	cmp	r9, r2
 8005bb4:	bfa8      	it	ge
 8005bb6:	4691      	movge	r9, r2
 8005bb8:	f1b9 0f00 	cmp.w	r9, #0
 8005bbc:	dc35      	bgt.n	8005c2a <_printf_float+0x3ae>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc6:	f104 0a1a 	add.w	sl, r4, #26
 8005bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	eba3 0309 	sub.w	r3, r3, r9
 8005bd4:	4543      	cmp	r3, r8
 8005bd6:	f77f af79 	ble.w	8005acc <_printf_float+0x250>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4652      	mov	r2, sl
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f aeaa 	beq.w	800593e <_printf_float+0xc2>
 8005bea:	f108 0801 	add.w	r8, r8, #1
 8005bee:	e7ec      	b.n	8005bca <_printf_float+0x34e>
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d1c0      	bne.n	8005b80 <_printf_float+0x304>
 8005bfe:	e69e      	b.n	800593e <_printf_float+0xc2>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	9205      	str	r2, [sp, #20]
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f ae97 	beq.w	800593e <_printf_float+0xc2>
 8005c10:	9a05      	ldr	r2, [sp, #20]
 8005c12:	f10b 0b01 	add.w	fp, fp, #1
 8005c16:	e7b9      	b.n	8005b8c <_printf_float+0x310>
 8005c18:	ee18 3a10 	vmov	r3, s16
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1be      	bne.n	8005ba6 <_printf_float+0x32a>
 8005c28:	e689      	b.n	800593e <_printf_float+0xc2>
 8005c2a:	9a05      	ldr	r2, [sp, #20]
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	4442      	add	r2, r8
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	d1c1      	bne.n	8005bbe <_printf_float+0x342>
 8005c3a:	e680      	b.n	800593e <_printf_float+0xc2>
 8005c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c3e:	2a01      	cmp	r2, #1
 8005c40:	dc01      	bgt.n	8005c46 <_printf_float+0x3ca>
 8005c42:	07db      	lsls	r3, r3, #31
 8005c44:	d538      	bpl.n	8005cb8 <_printf_float+0x43c>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4642      	mov	r2, r8
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	47b8      	blx	r7
 8005c50:	3001      	adds	r0, #1
 8005c52:	f43f ae74 	beq.w	800593e <_printf_float+0xc2>
 8005c56:	ee18 3a10 	vmov	r3, s16
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f ae6b 	beq.w	800593e <_printf_float+0xc2>
 8005c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f7fa ff32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c74:	b9d8      	cbnz	r0, 8005cae <_printf_float+0x432>
 8005c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c78:	f108 0201 	add.w	r2, r8, #1
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	d10e      	bne.n	8005ca6 <_printf_float+0x42a>
 8005c88:	e659      	b.n	800593e <_printf_float+0xc2>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f ae52 	beq.w	800593e <_printf_float+0xc2>
 8005c9a:	f108 0801 	add.w	r8, r8, #1
 8005c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	4543      	cmp	r3, r8
 8005ca4:	dcf1      	bgt.n	8005c8a <_printf_float+0x40e>
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cac:	e6dc      	b.n	8005a68 <_printf_float+0x1ec>
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	f104 0a1a 	add.w	sl, r4, #26
 8005cb6:	e7f2      	b.n	8005c9e <_printf_float+0x422>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4642      	mov	r2, r8
 8005cbc:	e7df      	b.n	8005c7e <_printf_float+0x402>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	464a      	mov	r2, r9
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f ae38 	beq.w	800593e <_printf_float+0xc2>
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cd6:	1a5b      	subs	r3, r3, r1
 8005cd8:	4543      	cmp	r3, r8
 8005cda:	dcf0      	bgt.n	8005cbe <_printf_float+0x442>
 8005cdc:	e6fa      	b.n	8005ad4 <_printf_float+0x258>
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	f104 0919 	add.w	r9, r4, #25
 8005ce6:	e7f4      	b.n	8005cd2 <_printf_float+0x456>

08005ce8 <_printf_common>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4616      	mov	r6, r2
 8005cee:	4699      	mov	r9, r3
 8005cf0:	688a      	ldr	r2, [r1, #8]
 8005cf2:	690b      	ldr	r3, [r1, #16]
 8005cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	bfb8      	it	lt
 8005cfc:	4613      	movlt	r3, r2
 8005cfe:	6033      	str	r3, [r6, #0]
 8005d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d04:	4607      	mov	r7, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	b10a      	cbz	r2, 8005d0e <_printf_common+0x26>
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	0699      	lsls	r1, r3, #26
 8005d12:	bf42      	ittt	mi
 8005d14:	6833      	ldrmi	r3, [r6, #0]
 8005d16:	3302      	addmi	r3, #2
 8005d18:	6033      	strmi	r3, [r6, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	f015 0506 	ands.w	r5, r5, #6
 8005d20:	d106      	bne.n	8005d30 <_printf_common+0x48>
 8005d22:	f104 0a19 	add.w	sl, r4, #25
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	6832      	ldr	r2, [r6, #0]
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dc26      	bgt.n	8005d7e <_printf_common+0x96>
 8005d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d34:	1e13      	subs	r3, r2, #0
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	0692      	lsls	r2, r2, #26
 8005d3e:	d42b      	bmi.n	8005d98 <_printf_common+0xb0>
 8005d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d44:	4649      	mov	r1, r9
 8005d46:	4638      	mov	r0, r7
 8005d48:	47c0      	blx	r8
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d01e      	beq.n	8005d8c <_printf_common+0xa4>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	68e5      	ldr	r5, [r4, #12]
 8005d52:	6832      	ldr	r2, [r6, #0]
 8005d54:	f003 0306 	and.w	r3, r3, #6
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	bf08      	it	eq
 8005d5c:	1aad      	subeq	r5, r5, r2
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	6922      	ldr	r2, [r4, #16]
 8005d62:	bf0c      	ite	eq
 8005d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d68:	2500      	movne	r5, #0
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bfc4      	itt	gt
 8005d6e:	1a9b      	subgt	r3, r3, r2
 8005d70:	18ed      	addgt	r5, r5, r3
 8005d72:	2600      	movs	r6, #0
 8005d74:	341a      	adds	r4, #26
 8005d76:	42b5      	cmp	r5, r6
 8005d78:	d11a      	bne.n	8005db0 <_printf_common+0xc8>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e008      	b.n	8005d90 <_printf_common+0xa8>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4652      	mov	r2, sl
 8005d82:	4649      	mov	r1, r9
 8005d84:	4638      	mov	r0, r7
 8005d86:	47c0      	blx	r8
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d103      	bne.n	8005d94 <_printf_common+0xac>
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	3501      	adds	r5, #1
 8005d96:	e7c6      	b.n	8005d26 <_printf_common+0x3e>
 8005d98:	18e1      	adds	r1, r4, r3
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	2030      	movs	r0, #48	; 0x30
 8005d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005da2:	4422      	add	r2, r4
 8005da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dac:	3302      	adds	r3, #2
 8005dae:	e7c7      	b.n	8005d40 <_printf_common+0x58>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4622      	mov	r2, r4
 8005db4:	4649      	mov	r1, r9
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c0      	blx	r8
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d0e6      	beq.n	8005d8c <_printf_common+0xa4>
 8005dbe:	3601      	adds	r6, #1
 8005dc0:	e7d9      	b.n	8005d76 <_printf_common+0x8e>
	...

08005dc4 <_printf_i>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	7e0f      	ldrb	r7, [r1, #24]
 8005dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dcc:	2f78      	cmp	r7, #120	; 0x78
 8005dce:	4691      	mov	r9, r2
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	469a      	mov	sl, r3
 8005dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dda:	d807      	bhi.n	8005dec <_printf_i+0x28>
 8005ddc:	2f62      	cmp	r7, #98	; 0x62
 8005dde:	d80a      	bhi.n	8005df6 <_printf_i+0x32>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 80d8 	beq.w	8005f96 <_printf_i+0x1d2>
 8005de6:	2f58      	cmp	r7, #88	; 0x58
 8005de8:	f000 80a3 	beq.w	8005f32 <_printf_i+0x16e>
 8005dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005df4:	e03a      	b.n	8005e6c <_printf_i+0xa8>
 8005df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dfa:	2b15      	cmp	r3, #21
 8005dfc:	d8f6      	bhi.n	8005dec <_printf_i+0x28>
 8005dfe:	a101      	add	r1, pc, #4	; (adr r1, 8005e04 <_printf_i+0x40>)
 8005e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005ded 	.word	0x08005ded
 8005e10:	08005ded 	.word	0x08005ded
 8005e14:	08005ded 	.word	0x08005ded
 8005e18:	08005ded 	.word	0x08005ded
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005ded 	.word	0x08005ded
 8005e24:	08005ded 	.word	0x08005ded
 8005e28:	08005ded 	.word	0x08005ded
 8005e2c:	08005ded 	.word	0x08005ded
 8005e30:	08005f7d 	.word	0x08005f7d
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005f5f 	.word	0x08005f5f
 8005e3c:	08005ded 	.word	0x08005ded
 8005e40:	08005ded 	.word	0x08005ded
 8005e44:	08005f9f 	.word	0x08005f9f
 8005e48:	08005ded 	.word	0x08005ded
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005ded 	.word	0x08005ded
 8005e54:	08005ded 	.word	0x08005ded
 8005e58:	08005f67 	.word	0x08005f67
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	602a      	str	r2, [r5, #0]
 8005e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0a3      	b.n	8005fb8 <_printf_i+0x1f4>
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	6829      	ldr	r1, [r5, #0]
 8005e74:	0606      	lsls	r6, r0, #24
 8005e76:	f101 0304 	add.w	r3, r1, #4
 8005e7a:	d50a      	bpl.n	8005e92 <_printf_i+0xce>
 8005e7c:	680e      	ldr	r6, [r1, #0]
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	2e00      	cmp	r6, #0
 8005e82:	da03      	bge.n	8005e8c <_printf_i+0xc8>
 8005e84:	232d      	movs	r3, #45	; 0x2d
 8005e86:	4276      	negs	r6, r6
 8005e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8c:	485e      	ldr	r0, [pc, #376]	; (8006008 <_printf_i+0x244>)
 8005e8e:	230a      	movs	r3, #10
 8005e90:	e019      	b.n	8005ec6 <_printf_i+0x102>
 8005e92:	680e      	ldr	r6, [r1, #0]
 8005e94:	602b      	str	r3, [r5, #0]
 8005e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e9a:	bf18      	it	ne
 8005e9c:	b236      	sxthne	r6, r6
 8005e9e:	e7ef      	b.n	8005e80 <_printf_i+0xbc>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	6820      	ldr	r0, [r4, #0]
 8005ea4:	1d19      	adds	r1, r3, #4
 8005ea6:	6029      	str	r1, [r5, #0]
 8005ea8:	0601      	lsls	r1, r0, #24
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_i+0xec>
 8005eac:	681e      	ldr	r6, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <_printf_i+0xf2>
 8005eb0:	0646      	lsls	r6, r0, #25
 8005eb2:	d5fb      	bpl.n	8005eac <_printf_i+0xe8>
 8005eb4:	881e      	ldrh	r6, [r3, #0]
 8005eb6:	4854      	ldr	r0, [pc, #336]	; (8006008 <_printf_i+0x244>)
 8005eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8005eba:	bf0c      	ite	eq
 8005ebc:	2308      	moveq	r3, #8
 8005ebe:	230a      	movne	r3, #10
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ec6:	6865      	ldr	r5, [r4, #4]
 8005ec8:	60a5      	str	r5, [r4, #8]
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	bfa2      	ittt	ge
 8005ece:	6821      	ldrge	r1, [r4, #0]
 8005ed0:	f021 0104 	bicge.w	r1, r1, #4
 8005ed4:	6021      	strge	r1, [r4, #0]
 8005ed6:	b90e      	cbnz	r6, 8005edc <_printf_i+0x118>
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	d04d      	beq.n	8005f78 <_printf_i+0x1b4>
 8005edc:	4615      	mov	r5, r2
 8005ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ee6:	5dc7      	ldrb	r7, [r0, r7]
 8005ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005eec:	4637      	mov	r7, r6
 8005eee:	42bb      	cmp	r3, r7
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	d9f4      	bls.n	8005ede <_printf_i+0x11a>
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d10b      	bne.n	8005f10 <_printf_i+0x14c>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	07de      	lsls	r6, r3, #31
 8005efc:	d508      	bpl.n	8005f10 <_printf_i+0x14c>
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	6861      	ldr	r1, [r4, #4]
 8005f02:	4299      	cmp	r1, r3
 8005f04:	bfde      	ittt	le
 8005f06:	2330      	movle	r3, #48	; 0x30
 8005f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f10:	1b52      	subs	r2, r2, r5
 8005f12:	6122      	str	r2, [r4, #16]
 8005f14:	f8cd a000 	str.w	sl, [sp]
 8005f18:	464b      	mov	r3, r9
 8005f1a:	aa03      	add	r2, sp, #12
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f7ff fee2 	bl	8005ce8 <_printf_common>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d14c      	bne.n	8005fc2 <_printf_i+0x1fe>
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2c:	b004      	add	sp, #16
 8005f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f32:	4835      	ldr	r0, [pc, #212]	; (8006008 <_printf_i+0x244>)
 8005f34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f38:	6829      	ldr	r1, [r5, #0]
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f40:	6029      	str	r1, [r5, #0]
 8005f42:	061d      	lsls	r5, r3, #24
 8005f44:	d514      	bpl.n	8005f70 <_printf_i+0x1ac>
 8005f46:	07df      	lsls	r7, r3, #31
 8005f48:	bf44      	itt	mi
 8005f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f4e:	6023      	strmi	r3, [r4, #0]
 8005f50:	b91e      	cbnz	r6, 8005f5a <_printf_i+0x196>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f023 0320 	bic.w	r3, r3, #32
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	e7b0      	b.n	8005ec0 <_printf_i+0xfc>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	f043 0320 	orr.w	r3, r3, #32
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	2378      	movs	r3, #120	; 0x78
 8005f68:	4828      	ldr	r0, [pc, #160]	; (800600c <_printf_i+0x248>)
 8005f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f6e:	e7e3      	b.n	8005f38 <_printf_i+0x174>
 8005f70:	0659      	lsls	r1, r3, #25
 8005f72:	bf48      	it	mi
 8005f74:	b2b6      	uxthmi	r6, r6
 8005f76:	e7e6      	b.n	8005f46 <_printf_i+0x182>
 8005f78:	4615      	mov	r5, r2
 8005f7a:	e7bb      	b.n	8005ef4 <_printf_i+0x130>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	6826      	ldr	r6, [r4, #0]
 8005f80:	6961      	ldr	r1, [r4, #20]
 8005f82:	1d18      	adds	r0, r3, #4
 8005f84:	6028      	str	r0, [r5, #0]
 8005f86:	0635      	lsls	r5, r6, #24
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	d501      	bpl.n	8005f90 <_printf_i+0x1cc>
 8005f8c:	6019      	str	r1, [r3, #0]
 8005f8e:	e002      	b.n	8005f96 <_printf_i+0x1d2>
 8005f90:	0670      	lsls	r0, r6, #25
 8005f92:	d5fb      	bpl.n	8005f8c <_printf_i+0x1c8>
 8005f94:	8019      	strh	r1, [r3, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	4615      	mov	r5, r2
 8005f9c:	e7ba      	b.n	8005f14 <_printf_i+0x150>
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	1d1a      	adds	r2, r3, #4
 8005fa2:	602a      	str	r2, [r5, #0]
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	6862      	ldr	r2, [r4, #4]
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4628      	mov	r0, r5
 8005fac:	f7fa f920 	bl	80001f0 <memchr>
 8005fb0:	b108      	cbz	r0, 8005fb6 <_printf_i+0x1f2>
 8005fb2:	1b40      	subs	r0, r0, r5
 8005fb4:	6060      	str	r0, [r4, #4]
 8005fb6:	6863      	ldr	r3, [r4, #4]
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc0:	e7a8      	b.n	8005f14 <_printf_i+0x150>
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	4640      	mov	r0, r8
 8005fca:	47d0      	blx	sl
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d0ab      	beq.n	8005f28 <_printf_i+0x164>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	079b      	lsls	r3, r3, #30
 8005fd4:	d413      	bmi.n	8005ffe <_printf_i+0x23a>
 8005fd6:	68e0      	ldr	r0, [r4, #12]
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	4298      	cmp	r0, r3
 8005fdc:	bfb8      	it	lt
 8005fde:	4618      	movlt	r0, r3
 8005fe0:	e7a4      	b.n	8005f2c <_printf_i+0x168>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	47d0      	blx	sl
 8005fec:	3001      	adds	r0, #1
 8005fee:	d09b      	beq.n	8005f28 <_printf_i+0x164>
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	9903      	ldr	r1, [sp, #12]
 8005ff6:	1a5b      	subs	r3, r3, r1
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dcf2      	bgt.n	8005fe2 <_printf_i+0x21e>
 8005ffc:	e7eb      	b.n	8005fd6 <_printf_i+0x212>
 8005ffe:	2500      	movs	r5, #0
 8006000:	f104 0619 	add.w	r6, r4, #25
 8006004:	e7f5      	b.n	8005ff2 <_printf_i+0x22e>
 8006006:	bf00      	nop
 8006008:	080081ea 	.word	0x080081ea
 800600c:	080081fb 	.word	0x080081fb

08006010 <quorem>:
 8006010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	6903      	ldr	r3, [r0, #16]
 8006016:	690c      	ldr	r4, [r1, #16]
 8006018:	42a3      	cmp	r3, r4
 800601a:	4607      	mov	r7, r0
 800601c:	f2c0 8081 	blt.w	8006122 <quorem+0x112>
 8006020:	3c01      	subs	r4, #1
 8006022:	f101 0814 	add.w	r8, r1, #20
 8006026:	f100 0514 	add.w	r5, r0, #20
 800602a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006038:	3301      	adds	r3, #1
 800603a:	429a      	cmp	r2, r3
 800603c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006044:	fbb2 f6f3 	udiv	r6, r2, r3
 8006048:	d331      	bcc.n	80060ae <quorem+0x9e>
 800604a:	f04f 0e00 	mov.w	lr, #0
 800604e:	4640      	mov	r0, r8
 8006050:	46ac      	mov	ip, r5
 8006052:	46f2      	mov	sl, lr
 8006054:	f850 2b04 	ldr.w	r2, [r0], #4
 8006058:	b293      	uxth	r3, r2
 800605a:	fb06 e303 	mla	r3, r6, r3, lr
 800605e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006062:	b29b      	uxth	r3, r3
 8006064:	ebaa 0303 	sub.w	r3, sl, r3
 8006068:	f8dc a000 	ldr.w	sl, [ip]
 800606c:	0c12      	lsrs	r2, r2, #16
 800606e:	fa13 f38a 	uxtah	r3, r3, sl
 8006072:	fb06 e202 	mla	r2, r6, r2, lr
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800607e:	b292      	uxth	r2, r2
 8006080:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006088:	f8bd 3000 	ldrh.w	r3, [sp]
 800608c:	4581      	cmp	r9, r0
 800608e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006092:	f84c 3b04 	str.w	r3, [ip], #4
 8006096:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800609a:	d2db      	bcs.n	8006054 <quorem+0x44>
 800609c:	f855 300b 	ldr.w	r3, [r5, fp]
 80060a0:	b92b      	cbnz	r3, 80060ae <quorem+0x9e>
 80060a2:	9b01      	ldr	r3, [sp, #4]
 80060a4:	3b04      	subs	r3, #4
 80060a6:	429d      	cmp	r5, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	d32e      	bcc.n	800610a <quorem+0xfa>
 80060ac:	613c      	str	r4, [r7, #16]
 80060ae:	4638      	mov	r0, r7
 80060b0:	f001 f9be 	bl	8007430 <__mcmp>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	db24      	blt.n	8006102 <quorem+0xf2>
 80060b8:	3601      	adds	r6, #1
 80060ba:	4628      	mov	r0, r5
 80060bc:	f04f 0c00 	mov.w	ip, #0
 80060c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80060c4:	f8d0 e000 	ldr.w	lr, [r0]
 80060c8:	b293      	uxth	r3, r2
 80060ca:	ebac 0303 	sub.w	r3, ip, r3
 80060ce:	0c12      	lsrs	r2, r2, #16
 80060d0:	fa13 f38e 	uxtah	r3, r3, lr
 80060d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060dc:	b29b      	uxth	r3, r3
 80060de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060e2:	45c1      	cmp	r9, r8
 80060e4:	f840 3b04 	str.w	r3, [r0], #4
 80060e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060ec:	d2e8      	bcs.n	80060c0 <quorem+0xb0>
 80060ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f6:	b922      	cbnz	r2, 8006102 <quorem+0xf2>
 80060f8:	3b04      	subs	r3, #4
 80060fa:	429d      	cmp	r5, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	d30a      	bcc.n	8006116 <quorem+0x106>
 8006100:	613c      	str	r4, [r7, #16]
 8006102:	4630      	mov	r0, r6
 8006104:	b003      	add	sp, #12
 8006106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	3b04      	subs	r3, #4
 800610e:	2a00      	cmp	r2, #0
 8006110:	d1cc      	bne.n	80060ac <quorem+0x9c>
 8006112:	3c01      	subs	r4, #1
 8006114:	e7c7      	b.n	80060a6 <quorem+0x96>
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	3b04      	subs	r3, #4
 800611a:	2a00      	cmp	r2, #0
 800611c:	d1f0      	bne.n	8006100 <quorem+0xf0>
 800611e:	3c01      	subs	r4, #1
 8006120:	e7eb      	b.n	80060fa <quorem+0xea>
 8006122:	2000      	movs	r0, #0
 8006124:	e7ee      	b.n	8006104 <quorem+0xf4>
	...

08006128 <_dtoa_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	ed2d 8b04 	vpush	{d8-d9}
 8006130:	ec57 6b10 	vmov	r6, r7, d0
 8006134:	b093      	sub	sp, #76	; 0x4c
 8006136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800613c:	9106      	str	r1, [sp, #24]
 800613e:	ee10 aa10 	vmov	sl, s0
 8006142:	4604      	mov	r4, r0
 8006144:	9209      	str	r2, [sp, #36]	; 0x24
 8006146:	930c      	str	r3, [sp, #48]	; 0x30
 8006148:	46bb      	mov	fp, r7
 800614a:	b975      	cbnz	r5, 800616a <_dtoa_r+0x42>
 800614c:	2010      	movs	r0, #16
 800614e:	f000 fed7 	bl	8006f00 <malloc>
 8006152:	4602      	mov	r2, r0
 8006154:	6260      	str	r0, [r4, #36]	; 0x24
 8006156:	b920      	cbnz	r0, 8006162 <_dtoa_r+0x3a>
 8006158:	4ba7      	ldr	r3, [pc, #668]	; (80063f8 <_dtoa_r+0x2d0>)
 800615a:	21ea      	movs	r1, #234	; 0xea
 800615c:	48a7      	ldr	r0, [pc, #668]	; (80063fc <_dtoa_r+0x2d4>)
 800615e:	f001 fddf 	bl	8007d20 <__assert_func>
 8006162:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006166:	6005      	str	r5, [r0, #0]
 8006168:	60c5      	str	r5, [r0, #12]
 800616a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800616c:	6819      	ldr	r1, [r3, #0]
 800616e:	b151      	cbz	r1, 8006186 <_dtoa_r+0x5e>
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	604a      	str	r2, [r1, #4]
 8006174:	2301      	movs	r3, #1
 8006176:	4093      	lsls	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
 800617a:	4620      	mov	r0, r4
 800617c:	f000 ff16 	bl	8006fac <_Bfree>
 8006180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	1e3b      	subs	r3, r7, #0
 8006188:	bfaa      	itet	ge
 800618a:	2300      	movge	r3, #0
 800618c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006190:	f8c8 3000 	strge.w	r3, [r8]
 8006194:	4b9a      	ldr	r3, [pc, #616]	; (8006400 <_dtoa_r+0x2d8>)
 8006196:	bfbc      	itt	lt
 8006198:	2201      	movlt	r2, #1
 800619a:	f8c8 2000 	strlt.w	r2, [r8]
 800619e:	ea33 030b 	bics.w	r3, r3, fp
 80061a2:	d11b      	bne.n	80061dc <_dtoa_r+0xb4>
 80061a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061b0:	4333      	orrs	r3, r6
 80061b2:	f000 8592 	beq.w	8006cda <_dtoa_r+0xbb2>
 80061b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061b8:	b963      	cbnz	r3, 80061d4 <_dtoa_r+0xac>
 80061ba:	4b92      	ldr	r3, [pc, #584]	; (8006404 <_dtoa_r+0x2dc>)
 80061bc:	e022      	b.n	8006204 <_dtoa_r+0xdc>
 80061be:	4b92      	ldr	r3, [pc, #584]	; (8006408 <_dtoa_r+0x2e0>)
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	3308      	adds	r3, #8
 80061c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	9801      	ldr	r0, [sp, #4]
 80061ca:	b013      	add	sp, #76	; 0x4c
 80061cc:	ecbd 8b04 	vpop	{d8-d9}
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	4b8b      	ldr	r3, [pc, #556]	; (8006404 <_dtoa_r+0x2dc>)
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	3303      	adds	r3, #3
 80061da:	e7f3      	b.n	80061c4 <_dtoa_r+0x9c>
 80061dc:	2200      	movs	r2, #0
 80061de:	2300      	movs	r3, #0
 80061e0:	4650      	mov	r0, sl
 80061e2:	4659      	mov	r1, fp
 80061e4:	f7fa fc78 	bl	8000ad8 <__aeabi_dcmpeq>
 80061e8:	ec4b ab19 	vmov	d9, sl, fp
 80061ec:	4680      	mov	r8, r0
 80061ee:	b158      	cbz	r0, 8006208 <_dtoa_r+0xe0>
 80061f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f2:	2301      	movs	r3, #1
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 856b 	beq.w	8006cd4 <_dtoa_r+0xbac>
 80061fe:	4883      	ldr	r0, [pc, #524]	; (800640c <_dtoa_r+0x2e4>)
 8006200:	6018      	str	r0, [r3, #0]
 8006202:	1e43      	subs	r3, r0, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	e7df      	b.n	80061c8 <_dtoa_r+0xa0>
 8006208:	ec4b ab10 	vmov	d0, sl, fp
 800620c:	aa10      	add	r2, sp, #64	; 0x40
 800620e:	a911      	add	r1, sp, #68	; 0x44
 8006210:	4620      	mov	r0, r4
 8006212:	f001 f9b3 	bl	800757c <__d2b>
 8006216:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800621a:	ee08 0a10 	vmov	s16, r0
 800621e:	2d00      	cmp	r5, #0
 8006220:	f000 8084 	beq.w	800632c <_dtoa_r+0x204>
 8006224:	ee19 3a90 	vmov	r3, s19
 8006228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800622c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006230:	4656      	mov	r6, sl
 8006232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800623a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800623e:	4b74      	ldr	r3, [pc, #464]	; (8006410 <_dtoa_r+0x2e8>)
 8006240:	2200      	movs	r2, #0
 8006242:	4630      	mov	r0, r6
 8006244:	4639      	mov	r1, r7
 8006246:	f7fa f827 	bl	8000298 <__aeabi_dsub>
 800624a:	a365      	add	r3, pc, #404	; (adr r3, 80063e0 <_dtoa_r+0x2b8>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f9da 	bl	8000608 <__aeabi_dmul>
 8006254:	a364      	add	r3, pc, #400	; (adr r3, 80063e8 <_dtoa_r+0x2c0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f81f 	bl	800029c <__adddf3>
 800625e:	4606      	mov	r6, r0
 8006260:	4628      	mov	r0, r5
 8006262:	460f      	mov	r7, r1
 8006264:	f7fa f966 	bl	8000534 <__aeabi_i2d>
 8006268:	a361      	add	r3, pc, #388	; (adr r3, 80063f0 <_dtoa_r+0x2c8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f9cb 	bl	8000608 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4630      	mov	r0, r6
 8006278:	4639      	mov	r1, r7
 800627a:	f7fa f80f 	bl	800029c <__adddf3>
 800627e:	4606      	mov	r6, r0
 8006280:	460f      	mov	r7, r1
 8006282:	f7fa fc71 	bl	8000b68 <__aeabi_d2iz>
 8006286:	2200      	movs	r2, #0
 8006288:	9000      	str	r0, [sp, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	4630      	mov	r0, r6
 800628e:	4639      	mov	r1, r7
 8006290:	f7fa fc2c 	bl	8000aec <__aeabi_dcmplt>
 8006294:	b150      	cbz	r0, 80062ac <_dtoa_r+0x184>
 8006296:	9800      	ldr	r0, [sp, #0]
 8006298:	f7fa f94c 	bl	8000534 <__aeabi_i2d>
 800629c:	4632      	mov	r2, r6
 800629e:	463b      	mov	r3, r7
 80062a0:	f7fa fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80062a4:	b910      	cbnz	r0, 80062ac <_dtoa_r+0x184>
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	2b16      	cmp	r3, #22
 80062b0:	d85a      	bhi.n	8006368 <_dtoa_r+0x240>
 80062b2:	9a00      	ldr	r2, [sp, #0]
 80062b4:	4b57      	ldr	r3, [pc, #348]	; (8006414 <_dtoa_r+0x2ec>)
 80062b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	ec51 0b19 	vmov	r0, r1, d9
 80062c2:	f7fa fc13 	bl	8000aec <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d050      	beq.n	800636c <_dtoa_r+0x244>
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062d6:	1b5d      	subs	r5, r3, r5
 80062d8:	1e6b      	subs	r3, r5, #1
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	bf45      	ittet	mi
 80062de:	f1c5 0301 	rsbmi	r3, r5, #1
 80062e2:	9304      	strmi	r3, [sp, #16]
 80062e4:	2300      	movpl	r3, #0
 80062e6:	2300      	movmi	r3, #0
 80062e8:	bf4c      	ite	mi
 80062ea:	9305      	strmi	r3, [sp, #20]
 80062ec:	9304      	strpl	r3, [sp, #16]
 80062ee:	9b00      	ldr	r3, [sp, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	db3d      	blt.n	8006370 <_dtoa_r+0x248>
 80062f4:	9b05      	ldr	r3, [sp, #20]
 80062f6:	9a00      	ldr	r2, [sp, #0]
 80062f8:	920a      	str	r2, [sp, #40]	; 0x28
 80062fa:	4413      	add	r3, r2
 80062fc:	9305      	str	r3, [sp, #20]
 80062fe:	2300      	movs	r3, #0
 8006300:	9307      	str	r3, [sp, #28]
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	2b09      	cmp	r3, #9
 8006306:	f200 8089 	bhi.w	800641c <_dtoa_r+0x2f4>
 800630a:	2b05      	cmp	r3, #5
 800630c:	bfc4      	itt	gt
 800630e:	3b04      	subgt	r3, #4
 8006310:	9306      	strgt	r3, [sp, #24]
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	f1a3 0302 	sub.w	r3, r3, #2
 8006318:	bfcc      	ite	gt
 800631a:	2500      	movgt	r5, #0
 800631c:	2501      	movle	r5, #1
 800631e:	2b03      	cmp	r3, #3
 8006320:	f200 8087 	bhi.w	8006432 <_dtoa_r+0x30a>
 8006324:	e8df f003 	tbb	[pc, r3]
 8006328:	59383a2d 	.word	0x59383a2d
 800632c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006330:	441d      	add	r5, r3
 8006332:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006336:	2b20      	cmp	r3, #32
 8006338:	bfc1      	itttt	gt
 800633a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800633e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006342:	fa0b f303 	lslgt.w	r3, fp, r3
 8006346:	fa26 f000 	lsrgt.w	r0, r6, r0
 800634a:	bfda      	itte	le
 800634c:	f1c3 0320 	rsble	r3, r3, #32
 8006350:	fa06 f003 	lslle.w	r0, r6, r3
 8006354:	4318      	orrgt	r0, r3
 8006356:	f7fa f8dd 	bl	8000514 <__aeabi_ui2d>
 800635a:	2301      	movs	r3, #1
 800635c:	4606      	mov	r6, r0
 800635e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006362:	3d01      	subs	r5, #1
 8006364:	930e      	str	r3, [sp, #56]	; 0x38
 8006366:	e76a      	b.n	800623e <_dtoa_r+0x116>
 8006368:	2301      	movs	r3, #1
 800636a:	e7b2      	b.n	80062d2 <_dtoa_r+0x1aa>
 800636c:	900b      	str	r0, [sp, #44]	; 0x2c
 800636e:	e7b1      	b.n	80062d4 <_dtoa_r+0x1ac>
 8006370:	9b04      	ldr	r3, [sp, #16]
 8006372:	9a00      	ldr	r2, [sp, #0]
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	4253      	negs	r3, r2
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	2300      	movs	r3, #0
 800637e:	930a      	str	r3, [sp, #40]	; 0x28
 8006380:	e7bf      	b.n	8006302 <_dtoa_r+0x1da>
 8006382:	2300      	movs	r3, #0
 8006384:	9308      	str	r3, [sp, #32]
 8006386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	dc55      	bgt.n	8006438 <_dtoa_r+0x310>
 800638c:	2301      	movs	r3, #1
 800638e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006392:	461a      	mov	r2, r3
 8006394:	9209      	str	r2, [sp, #36]	; 0x24
 8006396:	e00c      	b.n	80063b2 <_dtoa_r+0x28a>
 8006398:	2301      	movs	r3, #1
 800639a:	e7f3      	b.n	8006384 <_dtoa_r+0x25c>
 800639c:	2300      	movs	r3, #0
 800639e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	9b00      	ldr	r3, [sp, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	3301      	adds	r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	bfb8      	it	lt
 80063b0:	2301      	movlt	r3, #1
 80063b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063b4:	2200      	movs	r2, #0
 80063b6:	6042      	str	r2, [r0, #4]
 80063b8:	2204      	movs	r2, #4
 80063ba:	f102 0614 	add.w	r6, r2, #20
 80063be:	429e      	cmp	r6, r3
 80063c0:	6841      	ldr	r1, [r0, #4]
 80063c2:	d93d      	bls.n	8006440 <_dtoa_r+0x318>
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fdb1 	bl	8006f2c <_Balloc>
 80063ca:	9001      	str	r0, [sp, #4]
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d13b      	bne.n	8006448 <_dtoa_r+0x320>
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <_dtoa_r+0x2f0>)
 80063d2:	4602      	mov	r2, r0
 80063d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063d8:	e6c0      	b.n	800615c <_dtoa_r+0x34>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7df      	b.n	800639e <_dtoa_r+0x276>
 80063de:	bf00      	nop
 80063e0:	636f4361 	.word	0x636f4361
 80063e4:	3fd287a7 	.word	0x3fd287a7
 80063e8:	8b60c8b3 	.word	0x8b60c8b3
 80063ec:	3fc68a28 	.word	0x3fc68a28
 80063f0:	509f79fb 	.word	0x509f79fb
 80063f4:	3fd34413 	.word	0x3fd34413
 80063f8:	08008219 	.word	0x08008219
 80063fc:	08008230 	.word	0x08008230
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	08008215 	.word	0x08008215
 8006408:	0800820c 	.word	0x0800820c
 800640c:	080081e9 	.word	0x080081e9
 8006410:	3ff80000 	.word	0x3ff80000
 8006414:	08008380 	.word	0x08008380
 8006418:	0800828b 	.word	0x0800828b
 800641c:	2501      	movs	r5, #1
 800641e:	2300      	movs	r3, #0
 8006420:	9306      	str	r3, [sp, #24]
 8006422:	9508      	str	r5, [sp, #32]
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800642c:	2200      	movs	r2, #0
 800642e:	2312      	movs	r3, #18
 8006430:	e7b0      	b.n	8006394 <_dtoa_r+0x26c>
 8006432:	2301      	movs	r3, #1
 8006434:	9308      	str	r3, [sp, #32]
 8006436:	e7f5      	b.n	8006424 <_dtoa_r+0x2fc>
 8006438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800643e:	e7b8      	b.n	80063b2 <_dtoa_r+0x28a>
 8006440:	3101      	adds	r1, #1
 8006442:	6041      	str	r1, [r0, #4]
 8006444:	0052      	lsls	r2, r2, #1
 8006446:	e7b8      	b.n	80063ba <_dtoa_r+0x292>
 8006448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644a:	9a01      	ldr	r2, [sp, #4]
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	2b0e      	cmp	r3, #14
 8006452:	f200 809d 	bhi.w	8006590 <_dtoa_r+0x468>
 8006456:	2d00      	cmp	r5, #0
 8006458:	f000 809a 	beq.w	8006590 <_dtoa_r+0x468>
 800645c:	9b00      	ldr	r3, [sp, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd32      	ble.n	80064c8 <_dtoa_r+0x3a0>
 8006462:	4ab7      	ldr	r2, [pc, #732]	; (8006740 <_dtoa_r+0x618>)
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800646c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006470:	9b00      	ldr	r3, [sp, #0]
 8006472:	05d8      	lsls	r0, r3, #23
 8006474:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006478:	d516      	bpl.n	80064a8 <_dtoa_r+0x380>
 800647a:	4bb2      	ldr	r3, [pc, #712]	; (8006744 <_dtoa_r+0x61c>)
 800647c:	ec51 0b19 	vmov	r0, r1, d9
 8006480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006484:	f7fa f9ea 	bl	800085c <__aeabi_ddiv>
 8006488:	f007 070f 	and.w	r7, r7, #15
 800648c:	4682      	mov	sl, r0
 800648e:	468b      	mov	fp, r1
 8006490:	2503      	movs	r5, #3
 8006492:	4eac      	ldr	r6, [pc, #688]	; (8006744 <_dtoa_r+0x61c>)
 8006494:	b957      	cbnz	r7, 80064ac <_dtoa_r+0x384>
 8006496:	4642      	mov	r2, r8
 8006498:	464b      	mov	r3, r9
 800649a:	4650      	mov	r0, sl
 800649c:	4659      	mov	r1, fp
 800649e:	f7fa f9dd 	bl	800085c <__aeabi_ddiv>
 80064a2:	4682      	mov	sl, r0
 80064a4:	468b      	mov	fp, r1
 80064a6:	e028      	b.n	80064fa <_dtoa_r+0x3d2>
 80064a8:	2502      	movs	r5, #2
 80064aa:	e7f2      	b.n	8006492 <_dtoa_r+0x36a>
 80064ac:	07f9      	lsls	r1, r7, #31
 80064ae:	d508      	bpl.n	80064c2 <_dtoa_r+0x39a>
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064b8:	f7fa f8a6 	bl	8000608 <__aeabi_dmul>
 80064bc:	3501      	adds	r5, #1
 80064be:	4680      	mov	r8, r0
 80064c0:	4689      	mov	r9, r1
 80064c2:	107f      	asrs	r7, r7, #1
 80064c4:	3608      	adds	r6, #8
 80064c6:	e7e5      	b.n	8006494 <_dtoa_r+0x36c>
 80064c8:	f000 809b 	beq.w	8006602 <_dtoa_r+0x4da>
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	4f9d      	ldr	r7, [pc, #628]	; (8006744 <_dtoa_r+0x61c>)
 80064d0:	425e      	negs	r6, r3
 80064d2:	4b9b      	ldr	r3, [pc, #620]	; (8006740 <_dtoa_r+0x618>)
 80064d4:	f006 020f 	and.w	r2, r6, #15
 80064d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	ec51 0b19 	vmov	r0, r1, d9
 80064e4:	f7fa f890 	bl	8000608 <__aeabi_dmul>
 80064e8:	1136      	asrs	r6, r6, #4
 80064ea:	4682      	mov	sl, r0
 80064ec:	468b      	mov	fp, r1
 80064ee:	2300      	movs	r3, #0
 80064f0:	2502      	movs	r5, #2
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d17a      	bne.n	80065ec <_dtoa_r+0x4c4>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d3      	bne.n	80064a2 <_dtoa_r+0x37a>
 80064fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8082 	beq.w	8006606 <_dtoa_r+0x4de>
 8006502:	4b91      	ldr	r3, [pc, #580]	; (8006748 <_dtoa_r+0x620>)
 8006504:	2200      	movs	r2, #0
 8006506:	4650      	mov	r0, sl
 8006508:	4659      	mov	r1, fp
 800650a:	f7fa faef 	bl	8000aec <__aeabi_dcmplt>
 800650e:	2800      	cmp	r0, #0
 8006510:	d079      	beq.n	8006606 <_dtoa_r+0x4de>
 8006512:	9b03      	ldr	r3, [sp, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d076      	beq.n	8006606 <_dtoa_r+0x4de>
 8006518:	9b02      	ldr	r3, [sp, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd36      	ble.n	800658c <_dtoa_r+0x464>
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	4650      	mov	r0, sl
 8006522:	4659      	mov	r1, fp
 8006524:	1e5f      	subs	r7, r3, #1
 8006526:	2200      	movs	r2, #0
 8006528:	4b88      	ldr	r3, [pc, #544]	; (800674c <_dtoa_r+0x624>)
 800652a:	f7fa f86d 	bl	8000608 <__aeabi_dmul>
 800652e:	9e02      	ldr	r6, [sp, #8]
 8006530:	4682      	mov	sl, r0
 8006532:	468b      	mov	fp, r1
 8006534:	3501      	adds	r5, #1
 8006536:	4628      	mov	r0, r5
 8006538:	f7f9 fffc 	bl	8000534 <__aeabi_i2d>
 800653c:	4652      	mov	r2, sl
 800653e:	465b      	mov	r3, fp
 8006540:	f7fa f862 	bl	8000608 <__aeabi_dmul>
 8006544:	4b82      	ldr	r3, [pc, #520]	; (8006750 <_dtoa_r+0x628>)
 8006546:	2200      	movs	r2, #0
 8006548:	f7f9 fea8 	bl	800029c <__adddf3>
 800654c:	46d0      	mov	r8, sl
 800654e:	46d9      	mov	r9, fp
 8006550:	4682      	mov	sl, r0
 8006552:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006556:	2e00      	cmp	r6, #0
 8006558:	d158      	bne.n	800660c <_dtoa_r+0x4e4>
 800655a:	4b7e      	ldr	r3, [pc, #504]	; (8006754 <_dtoa_r+0x62c>)
 800655c:	2200      	movs	r2, #0
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7f9 fe99 	bl	8000298 <__aeabi_dsub>
 8006566:	4652      	mov	r2, sl
 8006568:	465b      	mov	r3, fp
 800656a:	4680      	mov	r8, r0
 800656c:	4689      	mov	r9, r1
 800656e:	f7fa fadb 	bl	8000b28 <__aeabi_dcmpgt>
 8006572:	2800      	cmp	r0, #0
 8006574:	f040 8295 	bne.w	8006aa2 <_dtoa_r+0x97a>
 8006578:	4652      	mov	r2, sl
 800657a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa fab3 	bl	8000aec <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f040 8289 	bne.w	8006a9e <_dtoa_r+0x976>
 800658c:	ec5b ab19 	vmov	sl, fp, d9
 8006590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006592:	2b00      	cmp	r3, #0
 8006594:	f2c0 8148 	blt.w	8006828 <_dtoa_r+0x700>
 8006598:	9a00      	ldr	r2, [sp, #0]
 800659a:	2a0e      	cmp	r2, #14
 800659c:	f300 8144 	bgt.w	8006828 <_dtoa_r+0x700>
 80065a0:	4b67      	ldr	r3, [pc, #412]	; (8006740 <_dtoa_r+0x618>)
 80065a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f280 80d5 	bge.w	800675c <_dtoa_r+0x634>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f300 80d1 	bgt.w	800675c <_dtoa_r+0x634>
 80065ba:	f040 826f 	bne.w	8006a9c <_dtoa_r+0x974>
 80065be:	4b65      	ldr	r3, [pc, #404]	; (8006754 <_dtoa_r+0x62c>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7fa faa1 	bl	8000b14 <__aeabi_dcmpge>
 80065d2:	9e03      	ldr	r6, [sp, #12]
 80065d4:	4637      	mov	r7, r6
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 8245 	bne.w	8006a66 <_dtoa_r+0x93e>
 80065dc:	9d01      	ldr	r5, [sp, #4]
 80065de:	2331      	movs	r3, #49	; 0x31
 80065e0:	f805 3b01 	strb.w	r3, [r5], #1
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	e240      	b.n	8006a6e <_dtoa_r+0x946>
 80065ec:	07f2      	lsls	r2, r6, #31
 80065ee:	d505      	bpl.n	80065fc <_dtoa_r+0x4d4>
 80065f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f4:	f7fa f808 	bl	8000608 <__aeabi_dmul>
 80065f8:	3501      	adds	r5, #1
 80065fa:	2301      	movs	r3, #1
 80065fc:	1076      	asrs	r6, r6, #1
 80065fe:	3708      	adds	r7, #8
 8006600:	e777      	b.n	80064f2 <_dtoa_r+0x3ca>
 8006602:	2502      	movs	r5, #2
 8006604:	e779      	b.n	80064fa <_dtoa_r+0x3d2>
 8006606:	9f00      	ldr	r7, [sp, #0]
 8006608:	9e03      	ldr	r6, [sp, #12]
 800660a:	e794      	b.n	8006536 <_dtoa_r+0x40e>
 800660c:	9901      	ldr	r1, [sp, #4]
 800660e:	4b4c      	ldr	r3, [pc, #304]	; (8006740 <_dtoa_r+0x618>)
 8006610:	4431      	add	r1, r6
 8006612:	910d      	str	r1, [sp, #52]	; 0x34
 8006614:	9908      	ldr	r1, [sp, #32]
 8006616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800661a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800661e:	2900      	cmp	r1, #0
 8006620:	d043      	beq.n	80066aa <_dtoa_r+0x582>
 8006622:	494d      	ldr	r1, [pc, #308]	; (8006758 <_dtoa_r+0x630>)
 8006624:	2000      	movs	r0, #0
 8006626:	f7fa f919 	bl	800085c <__aeabi_ddiv>
 800662a:	4652      	mov	r2, sl
 800662c:	465b      	mov	r3, fp
 800662e:	f7f9 fe33 	bl	8000298 <__aeabi_dsub>
 8006632:	9d01      	ldr	r5, [sp, #4]
 8006634:	4682      	mov	sl, r0
 8006636:	468b      	mov	fp, r1
 8006638:	4649      	mov	r1, r9
 800663a:	4640      	mov	r0, r8
 800663c:	f7fa fa94 	bl	8000b68 <__aeabi_d2iz>
 8006640:	4606      	mov	r6, r0
 8006642:	f7f9 ff77 	bl	8000534 <__aeabi_i2d>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7f9 fe23 	bl	8000298 <__aeabi_dsub>
 8006652:	3630      	adds	r6, #48	; 0x30
 8006654:	f805 6b01 	strb.w	r6, [r5], #1
 8006658:	4652      	mov	r2, sl
 800665a:	465b      	mov	r3, fp
 800665c:	4680      	mov	r8, r0
 800665e:	4689      	mov	r9, r1
 8006660:	f7fa fa44 	bl	8000aec <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d163      	bne.n	8006730 <_dtoa_r+0x608>
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	4936      	ldr	r1, [pc, #216]	; (8006748 <_dtoa_r+0x620>)
 800666e:	2000      	movs	r0, #0
 8006670:	f7f9 fe12 	bl	8000298 <__aeabi_dsub>
 8006674:	4652      	mov	r2, sl
 8006676:	465b      	mov	r3, fp
 8006678:	f7fa fa38 	bl	8000aec <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f040 80b5 	bne.w	80067ec <_dtoa_r+0x6c4>
 8006682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006684:	429d      	cmp	r5, r3
 8006686:	d081      	beq.n	800658c <_dtoa_r+0x464>
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <_dtoa_r+0x624>)
 800668a:	2200      	movs	r2, #0
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 ffba 	bl	8000608 <__aeabi_dmul>
 8006694:	4b2d      	ldr	r3, [pc, #180]	; (800674c <_dtoa_r+0x624>)
 8006696:	4682      	mov	sl, r0
 8006698:	468b      	mov	fp, r1
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	2200      	movs	r2, #0
 80066a0:	f7f9 ffb2 	bl	8000608 <__aeabi_dmul>
 80066a4:	4680      	mov	r8, r0
 80066a6:	4689      	mov	r9, r1
 80066a8:	e7c6      	b.n	8006638 <_dtoa_r+0x510>
 80066aa:	4650      	mov	r0, sl
 80066ac:	4659      	mov	r1, fp
 80066ae:	f7f9 ffab 	bl	8000608 <__aeabi_dmul>
 80066b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066b4:	9d01      	ldr	r5, [sp, #4]
 80066b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066b8:	4682      	mov	sl, r0
 80066ba:	468b      	mov	fp, r1
 80066bc:	4649      	mov	r1, r9
 80066be:	4640      	mov	r0, r8
 80066c0:	f7fa fa52 	bl	8000b68 <__aeabi_d2iz>
 80066c4:	4606      	mov	r6, r0
 80066c6:	f7f9 ff35 	bl	8000534 <__aeabi_i2d>
 80066ca:	3630      	adds	r6, #48	; 0x30
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7f9 fde0 	bl	8000298 <__aeabi_dsub>
 80066d8:	f805 6b01 	strb.w	r6, [r5], #1
 80066dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066de:	429d      	cmp	r5, r3
 80066e0:	4680      	mov	r8, r0
 80066e2:	4689      	mov	r9, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	d124      	bne.n	8006734 <_dtoa_r+0x60c>
 80066ea:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <_dtoa_r+0x630>)
 80066ec:	4650      	mov	r0, sl
 80066ee:	4659      	mov	r1, fp
 80066f0:	f7f9 fdd4 	bl	800029c <__adddf3>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4640      	mov	r0, r8
 80066fa:	4649      	mov	r1, r9
 80066fc:	f7fa fa14 	bl	8000b28 <__aeabi_dcmpgt>
 8006700:	2800      	cmp	r0, #0
 8006702:	d173      	bne.n	80067ec <_dtoa_r+0x6c4>
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	4913      	ldr	r1, [pc, #76]	; (8006758 <_dtoa_r+0x630>)
 800670a:	2000      	movs	r0, #0
 800670c:	f7f9 fdc4 	bl	8000298 <__aeabi_dsub>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4640      	mov	r0, r8
 8006716:	4649      	mov	r1, r9
 8006718:	f7fa f9e8 	bl	8000aec <__aeabi_dcmplt>
 800671c:	2800      	cmp	r0, #0
 800671e:	f43f af35 	beq.w	800658c <_dtoa_r+0x464>
 8006722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006724:	1e6b      	subs	r3, r5, #1
 8006726:	930f      	str	r3, [sp, #60]	; 0x3c
 8006728:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800672c:	2b30      	cmp	r3, #48	; 0x30
 800672e:	d0f8      	beq.n	8006722 <_dtoa_r+0x5fa>
 8006730:	9700      	str	r7, [sp, #0]
 8006732:	e049      	b.n	80067c8 <_dtoa_r+0x6a0>
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <_dtoa_r+0x624>)
 8006736:	f7f9 ff67 	bl	8000608 <__aeabi_dmul>
 800673a:	4680      	mov	r8, r0
 800673c:	4689      	mov	r9, r1
 800673e:	e7bd      	b.n	80066bc <_dtoa_r+0x594>
 8006740:	08008380 	.word	0x08008380
 8006744:	08008358 	.word	0x08008358
 8006748:	3ff00000 	.word	0x3ff00000
 800674c:	40240000 	.word	0x40240000
 8006750:	401c0000 	.word	0x401c0000
 8006754:	40140000 	.word	0x40140000
 8006758:	3fe00000 	.word	0x3fe00000
 800675c:	9d01      	ldr	r5, [sp, #4]
 800675e:	4656      	mov	r6, sl
 8006760:	465f      	mov	r7, fp
 8006762:	4642      	mov	r2, r8
 8006764:	464b      	mov	r3, r9
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7fa f877 	bl	800085c <__aeabi_ddiv>
 800676e:	f7fa f9fb 	bl	8000b68 <__aeabi_d2iz>
 8006772:	4682      	mov	sl, r0
 8006774:	f7f9 fede 	bl	8000534 <__aeabi_i2d>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	f7f9 ff44 	bl	8000608 <__aeabi_dmul>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800678c:	f7f9 fd84 	bl	8000298 <__aeabi_dsub>
 8006790:	f805 6b01 	strb.w	r6, [r5], #1
 8006794:	9e01      	ldr	r6, [sp, #4]
 8006796:	9f03      	ldr	r7, [sp, #12]
 8006798:	1bae      	subs	r6, r5, r6
 800679a:	42b7      	cmp	r7, r6
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	d135      	bne.n	800680e <_dtoa_r+0x6e6>
 80067a2:	f7f9 fd7b 	bl	800029c <__adddf3>
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	f7fa f9bb 	bl	8000b28 <__aeabi_dcmpgt>
 80067b2:	b9d0      	cbnz	r0, 80067ea <_dtoa_r+0x6c2>
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c0:	b110      	cbz	r0, 80067c8 <_dtoa_r+0x6a0>
 80067c2:	f01a 0f01 	tst.w	sl, #1
 80067c6:	d110      	bne.n	80067ea <_dtoa_r+0x6c2>
 80067c8:	4620      	mov	r0, r4
 80067ca:	ee18 1a10 	vmov	r1, s16
 80067ce:	f000 fbed 	bl	8006fac <_Bfree>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9800      	ldr	r0, [sp, #0]
 80067d6:	702b      	strb	r3, [r5, #0]
 80067d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067da:	3001      	adds	r0, #1
 80067dc:	6018      	str	r0, [r3, #0]
 80067de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f43f acf1 	beq.w	80061c8 <_dtoa_r+0xa0>
 80067e6:	601d      	str	r5, [r3, #0]
 80067e8:	e4ee      	b.n	80061c8 <_dtoa_r+0xa0>
 80067ea:	9f00      	ldr	r7, [sp, #0]
 80067ec:	462b      	mov	r3, r5
 80067ee:	461d      	mov	r5, r3
 80067f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067f4:	2a39      	cmp	r2, #57	; 0x39
 80067f6:	d106      	bne.n	8006806 <_dtoa_r+0x6de>
 80067f8:	9a01      	ldr	r2, [sp, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d1f7      	bne.n	80067ee <_dtoa_r+0x6c6>
 80067fe:	9901      	ldr	r1, [sp, #4]
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	3701      	adds	r7, #1
 8006804:	700a      	strb	r2, [r1, #0]
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	3201      	adds	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e790      	b.n	8006730 <_dtoa_r+0x608>
 800680e:	4ba6      	ldr	r3, [pc, #664]	; (8006aa8 <_dtoa_r+0x980>)
 8006810:	2200      	movs	r2, #0
 8006812:	f7f9 fef9 	bl	8000608 <__aeabi_dmul>
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	4606      	mov	r6, r0
 800681c:	460f      	mov	r7, r1
 800681e:	f7fa f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006822:	2800      	cmp	r0, #0
 8006824:	d09d      	beq.n	8006762 <_dtoa_r+0x63a>
 8006826:	e7cf      	b.n	80067c8 <_dtoa_r+0x6a0>
 8006828:	9a08      	ldr	r2, [sp, #32]
 800682a:	2a00      	cmp	r2, #0
 800682c:	f000 80d7 	beq.w	80069de <_dtoa_r+0x8b6>
 8006830:	9a06      	ldr	r2, [sp, #24]
 8006832:	2a01      	cmp	r2, #1
 8006834:	f300 80ba 	bgt.w	80069ac <_dtoa_r+0x884>
 8006838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800683a:	2a00      	cmp	r2, #0
 800683c:	f000 80b2 	beq.w	80069a4 <_dtoa_r+0x87c>
 8006840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006844:	9e07      	ldr	r6, [sp, #28]
 8006846:	9d04      	ldr	r5, [sp, #16]
 8006848:	9a04      	ldr	r2, [sp, #16]
 800684a:	441a      	add	r2, r3
 800684c:	9204      	str	r2, [sp, #16]
 800684e:	9a05      	ldr	r2, [sp, #20]
 8006850:	2101      	movs	r1, #1
 8006852:	441a      	add	r2, r3
 8006854:	4620      	mov	r0, r4
 8006856:	9205      	str	r2, [sp, #20]
 8006858:	f000 fc60 	bl	800711c <__i2b>
 800685c:	4607      	mov	r7, r0
 800685e:	2d00      	cmp	r5, #0
 8006860:	dd0c      	ble.n	800687c <_dtoa_r+0x754>
 8006862:	9b05      	ldr	r3, [sp, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd09      	ble.n	800687c <_dtoa_r+0x754>
 8006868:	42ab      	cmp	r3, r5
 800686a:	9a04      	ldr	r2, [sp, #16]
 800686c:	bfa8      	it	ge
 800686e:	462b      	movge	r3, r5
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	9204      	str	r2, [sp, #16]
 8006874:	9a05      	ldr	r2, [sp, #20]
 8006876:	1aed      	subs	r5, r5, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	b31b      	cbz	r3, 80068c8 <_dtoa_r+0x7a0>
 8006880:	9b08      	ldr	r3, [sp, #32]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80af 	beq.w	80069e6 <_dtoa_r+0x8be>
 8006888:	2e00      	cmp	r6, #0
 800688a:	dd13      	ble.n	80068b4 <_dtoa_r+0x78c>
 800688c:	4639      	mov	r1, r7
 800688e:	4632      	mov	r2, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fd03 	bl	800729c <__pow5mult>
 8006896:	ee18 2a10 	vmov	r2, s16
 800689a:	4601      	mov	r1, r0
 800689c:	4607      	mov	r7, r0
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fc52 	bl	8007148 <__multiply>
 80068a4:	ee18 1a10 	vmov	r1, s16
 80068a8:	4680      	mov	r8, r0
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fb7e 	bl	8006fac <_Bfree>
 80068b0:	ee08 8a10 	vmov	s16, r8
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	1b9a      	subs	r2, r3, r6
 80068b8:	d006      	beq.n	80068c8 <_dtoa_r+0x7a0>
 80068ba:	ee18 1a10 	vmov	r1, s16
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fcec 	bl	800729c <__pow5mult>
 80068c4:	ee08 0a10 	vmov	s16, r0
 80068c8:	2101      	movs	r1, #1
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fc26 	bl	800711c <__i2b>
 80068d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	4606      	mov	r6, r0
 80068d6:	f340 8088 	ble.w	80069ea <_dtoa_r+0x8c2>
 80068da:	461a      	mov	r2, r3
 80068dc:	4601      	mov	r1, r0
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fcdc 	bl	800729c <__pow5mult>
 80068e4:	9b06      	ldr	r3, [sp, #24]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	4606      	mov	r6, r0
 80068ea:	f340 8081 	ble.w	80069f0 <_dtoa_r+0x8c8>
 80068ee:	f04f 0800 	mov.w	r8, #0
 80068f2:	6933      	ldr	r3, [r6, #16]
 80068f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068f8:	6918      	ldr	r0, [r3, #16]
 80068fa:	f000 fbbf 	bl	800707c <__hi0bits>
 80068fe:	f1c0 0020 	rsb	r0, r0, #32
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	4418      	add	r0, r3
 8006906:	f010 001f 	ands.w	r0, r0, #31
 800690a:	f000 8092 	beq.w	8006a32 <_dtoa_r+0x90a>
 800690e:	f1c0 0320 	rsb	r3, r0, #32
 8006912:	2b04      	cmp	r3, #4
 8006914:	f340 808a 	ble.w	8006a2c <_dtoa_r+0x904>
 8006918:	f1c0 001c 	rsb	r0, r0, #28
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	4403      	add	r3, r0
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	4403      	add	r3, r0
 8006926:	4405      	add	r5, r0
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd07      	ble.n	8006940 <_dtoa_r+0x818>
 8006930:	ee18 1a10 	vmov	r1, s16
 8006934:	461a      	mov	r2, r3
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fd0a 	bl	8007350 <__lshift>
 800693c:	ee08 0a10 	vmov	s16, r0
 8006940:	9b05      	ldr	r3, [sp, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	dd05      	ble.n	8006952 <_dtoa_r+0x82a>
 8006946:	4631      	mov	r1, r6
 8006948:	461a      	mov	r2, r3
 800694a:	4620      	mov	r0, r4
 800694c:	f000 fd00 	bl	8007350 <__lshift>
 8006950:	4606      	mov	r6, r0
 8006952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d06e      	beq.n	8006a36 <_dtoa_r+0x90e>
 8006958:	ee18 0a10 	vmov	r0, s16
 800695c:	4631      	mov	r1, r6
 800695e:	f000 fd67 	bl	8007430 <__mcmp>
 8006962:	2800      	cmp	r0, #0
 8006964:	da67      	bge.n	8006a36 <_dtoa_r+0x90e>
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	3b01      	subs	r3, #1
 800696a:	ee18 1a10 	vmov	r1, s16
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	220a      	movs	r2, #10
 8006972:	2300      	movs	r3, #0
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fb3b 	bl	8006ff0 <__multadd>
 800697a:	9b08      	ldr	r3, [sp, #32]
 800697c:	ee08 0a10 	vmov	s16, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 81b1 	beq.w	8006ce8 <_dtoa_r+0xbc0>
 8006986:	2300      	movs	r3, #0
 8006988:	4639      	mov	r1, r7
 800698a:	220a      	movs	r2, #10
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fb2f 	bl	8006ff0 <__multadd>
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	4607      	mov	r7, r0
 8006998:	f300 808e 	bgt.w	8006ab8 <_dtoa_r+0x990>
 800699c:	9b06      	ldr	r3, [sp, #24]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	dc51      	bgt.n	8006a46 <_dtoa_r+0x91e>
 80069a2:	e089      	b.n	8006ab8 <_dtoa_r+0x990>
 80069a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069aa:	e74b      	b.n	8006844 <_dtoa_r+0x71c>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	1e5e      	subs	r6, r3, #1
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	42b3      	cmp	r3, r6
 80069b4:	bfbf      	itttt	lt
 80069b6:	9b07      	ldrlt	r3, [sp, #28]
 80069b8:	9607      	strlt	r6, [sp, #28]
 80069ba:	1af2      	sublt	r2, r6, r3
 80069bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069be:	bfb6      	itet	lt
 80069c0:	189b      	addlt	r3, r3, r2
 80069c2:	1b9e      	subge	r6, r3, r6
 80069c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	bfb8      	it	lt
 80069ca:	2600      	movlt	r6, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bfb7      	itett	lt
 80069d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069d8:	1a9d      	sublt	r5, r3, r2
 80069da:	2300      	movlt	r3, #0
 80069dc:	e734      	b.n	8006848 <_dtoa_r+0x720>
 80069de:	9e07      	ldr	r6, [sp, #28]
 80069e0:	9d04      	ldr	r5, [sp, #16]
 80069e2:	9f08      	ldr	r7, [sp, #32]
 80069e4:	e73b      	b.n	800685e <_dtoa_r+0x736>
 80069e6:	9a07      	ldr	r2, [sp, #28]
 80069e8:	e767      	b.n	80068ba <_dtoa_r+0x792>
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	dc18      	bgt.n	8006a22 <_dtoa_r+0x8fa>
 80069f0:	f1ba 0f00 	cmp.w	sl, #0
 80069f4:	d115      	bne.n	8006a22 <_dtoa_r+0x8fa>
 80069f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069fa:	b993      	cbnz	r3, 8006a22 <_dtoa_r+0x8fa>
 80069fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	b183      	cbz	r3, 8006a28 <_dtoa_r+0x900>
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	9b05      	ldr	r3, [sp, #20]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	f04f 0801 	mov.w	r8, #1
 8006a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f47f af6a 	bne.w	80068f2 <_dtoa_r+0x7ca>
 8006a1e:	2001      	movs	r0, #1
 8006a20:	e76f      	b.n	8006902 <_dtoa_r+0x7da>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	e7f6      	b.n	8006a16 <_dtoa_r+0x8ee>
 8006a28:	4698      	mov	r8, r3
 8006a2a:	e7f4      	b.n	8006a16 <_dtoa_r+0x8ee>
 8006a2c:	f43f af7d 	beq.w	800692a <_dtoa_r+0x802>
 8006a30:	4618      	mov	r0, r3
 8006a32:	301c      	adds	r0, #28
 8006a34:	e772      	b.n	800691c <_dtoa_r+0x7f4>
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dc37      	bgt.n	8006aac <_dtoa_r+0x984>
 8006a3c:	9b06      	ldr	r3, [sp, #24]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dd34      	ble.n	8006aac <_dtoa_r+0x984>
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	9b02      	ldr	r3, [sp, #8]
 8006a48:	b96b      	cbnz	r3, 8006a66 <_dtoa_r+0x93e>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 face 	bl	8006ff0 <__multadd>
 8006a54:	4601      	mov	r1, r0
 8006a56:	4606      	mov	r6, r0
 8006a58:	ee18 0a10 	vmov	r0, s16
 8006a5c:	f000 fce8 	bl	8007430 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f73f adbb 	bgt.w	80065dc <_dtoa_r+0x4b4>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	9d01      	ldr	r5, [sp, #4]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	4631      	mov	r1, r6
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fa99 	bl	8006fac <_Bfree>
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	f43f aea4 	beq.w	80067c8 <_dtoa_r+0x6a0>
 8006a80:	f1b8 0f00 	cmp.w	r8, #0
 8006a84:	d005      	beq.n	8006a92 <_dtoa_r+0x96a>
 8006a86:	45b8      	cmp	r8, r7
 8006a88:	d003      	beq.n	8006a92 <_dtoa_r+0x96a>
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fa8d 	bl	8006fac <_Bfree>
 8006a92:	4639      	mov	r1, r7
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fa89 	bl	8006fac <_Bfree>
 8006a9a:	e695      	b.n	80067c8 <_dtoa_r+0x6a0>
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	4637      	mov	r7, r6
 8006aa0:	e7e1      	b.n	8006a66 <_dtoa_r+0x93e>
 8006aa2:	9700      	str	r7, [sp, #0]
 8006aa4:	4637      	mov	r7, r6
 8006aa6:	e599      	b.n	80065dc <_dtoa_r+0x4b4>
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	9b08      	ldr	r3, [sp, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80ca 	beq.w	8006c48 <_dtoa_r+0xb20>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	9302      	str	r3, [sp, #8]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x9a0>
 8006abc:	4639      	mov	r1, r7
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fc45 	bl	8007350 <__lshift>
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	f1b8 0f00 	cmp.w	r8, #0
 8006acc:	d05b      	beq.n	8006b86 <_dtoa_r+0xa5e>
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fa2b 	bl	8006f2c <_Balloc>
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	b928      	cbnz	r0, 8006ae6 <_dtoa_r+0x9be>
 8006ada:	4b87      	ldr	r3, [pc, #540]	; (8006cf8 <_dtoa_r+0xbd0>)
 8006adc:	4602      	mov	r2, r0
 8006ade:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ae2:	f7ff bb3b 	b.w	800615c <_dtoa_r+0x34>
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	3202      	adds	r2, #2
 8006aea:	0092      	lsls	r2, r2, #2
 8006aec:	f107 010c 	add.w	r1, r7, #12
 8006af0:	300c      	adds	r0, #12
 8006af2:	f000 fa0d 	bl	8006f10 <memcpy>
 8006af6:	2201      	movs	r2, #1
 8006af8:	4629      	mov	r1, r5
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fc28 	bl	8007350 <__lshift>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	f103 0901 	add.w	r9, r3, #1
 8006b06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	9305      	str	r3, [sp, #20]
 8006b0e:	f00a 0301 	and.w	r3, sl, #1
 8006b12:	46b8      	mov	r8, r7
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	4607      	mov	r7, r0
 8006b18:	4631      	mov	r1, r6
 8006b1a:	ee18 0a10 	vmov	r0, s16
 8006b1e:	f7ff fa77 	bl	8006010 <quorem>
 8006b22:	4641      	mov	r1, r8
 8006b24:	9002      	str	r0, [sp, #8]
 8006b26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b2a:	ee18 0a10 	vmov	r0, s16
 8006b2e:	f000 fc7f 	bl	8007430 <__mcmp>
 8006b32:	463a      	mov	r2, r7
 8006b34:	9003      	str	r0, [sp, #12]
 8006b36:	4631      	mov	r1, r6
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fc95 	bl	8007468 <__mdiff>
 8006b3e:	68c2      	ldr	r2, [r0, #12]
 8006b40:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b44:	4605      	mov	r5, r0
 8006b46:	bb02      	cbnz	r2, 8006b8a <_dtoa_r+0xa62>
 8006b48:	4601      	mov	r1, r0
 8006b4a:	ee18 0a10 	vmov	r0, s16
 8006b4e:	f000 fc6f 	bl	8007430 <__mcmp>
 8006b52:	4602      	mov	r2, r0
 8006b54:	4629      	mov	r1, r5
 8006b56:	4620      	mov	r0, r4
 8006b58:	9207      	str	r2, [sp, #28]
 8006b5a:	f000 fa27 	bl	8006fac <_Bfree>
 8006b5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b62:	ea43 0102 	orr.w	r1, r3, r2
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	464d      	mov	r5, r9
 8006b6c:	d10f      	bne.n	8006b8e <_dtoa_r+0xa66>
 8006b6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b72:	d02a      	beq.n	8006bca <_dtoa_r+0xaa2>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dd02      	ble.n	8006b80 <_dtoa_r+0xa58>
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b80:	f88b a000 	strb.w	sl, [fp]
 8006b84:	e775      	b.n	8006a72 <_dtoa_r+0x94a>
 8006b86:	4638      	mov	r0, r7
 8006b88:	e7ba      	b.n	8006b00 <_dtoa_r+0x9d8>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	e7e2      	b.n	8006b54 <_dtoa_r+0xa2c>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db04      	blt.n	8006b9e <_dtoa_r+0xa76>
 8006b94:	9906      	ldr	r1, [sp, #24]
 8006b96:	430b      	orrs	r3, r1
 8006b98:	9904      	ldr	r1, [sp, #16]
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	d122      	bne.n	8006be4 <_dtoa_r+0xabc>
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	ddee      	ble.n	8006b80 <_dtoa_r+0xa58>
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fbd1 	bl	8007350 <__lshift>
 8006bae:	4631      	mov	r1, r6
 8006bb0:	ee08 0a10 	vmov	s16, r0
 8006bb4:	f000 fc3c 	bl	8007430 <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dc03      	bgt.n	8006bc4 <_dtoa_r+0xa9c>
 8006bbc:	d1e0      	bne.n	8006b80 <_dtoa_r+0xa58>
 8006bbe:	f01a 0f01 	tst.w	sl, #1
 8006bc2:	d0dd      	beq.n	8006b80 <_dtoa_r+0xa58>
 8006bc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bc8:	d1d7      	bne.n	8006b7a <_dtoa_r+0xa52>
 8006bca:	2339      	movs	r3, #57	; 0x39
 8006bcc:	f88b 3000 	strb.w	r3, [fp]
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bda:	2a39      	cmp	r2, #57	; 0x39
 8006bdc:	d071      	beq.n	8006cc2 <_dtoa_r+0xb9a>
 8006bde:	3201      	adds	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e746      	b.n	8006a72 <_dtoa_r+0x94a>
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	dd07      	ble.n	8006bf8 <_dtoa_r+0xad0>
 8006be8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bec:	d0ed      	beq.n	8006bca <_dtoa_r+0xaa2>
 8006bee:	f10a 0301 	add.w	r3, sl, #1
 8006bf2:	f88b 3000 	strb.w	r3, [fp]
 8006bf6:	e73c      	b.n	8006a72 <_dtoa_r+0x94a>
 8006bf8:	9b05      	ldr	r3, [sp, #20]
 8006bfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006bfe:	4599      	cmp	r9, r3
 8006c00:	d047      	beq.n	8006c92 <_dtoa_r+0xb6a>
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	2300      	movs	r3, #0
 8006c08:	220a      	movs	r2, #10
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 f9f0 	bl	8006ff0 <__multadd>
 8006c10:	45b8      	cmp	r8, r7
 8006c12:	ee08 0a10 	vmov	s16, r0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	f04f 020a 	mov.w	r2, #10
 8006c1e:	4641      	mov	r1, r8
 8006c20:	4620      	mov	r0, r4
 8006c22:	d106      	bne.n	8006c32 <_dtoa_r+0xb0a>
 8006c24:	f000 f9e4 	bl	8006ff0 <__multadd>
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	f109 0901 	add.w	r9, r9, #1
 8006c30:	e772      	b.n	8006b18 <_dtoa_r+0x9f0>
 8006c32:	f000 f9dd 	bl	8006ff0 <__multadd>
 8006c36:	4639      	mov	r1, r7
 8006c38:	4680      	mov	r8, r0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f9d6 	bl	8006ff0 <__multadd>
 8006c44:	4607      	mov	r7, r0
 8006c46:	e7f1      	b.n	8006c2c <_dtoa_r+0xb04>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	9d01      	ldr	r5, [sp, #4]
 8006c4e:	ee18 0a10 	vmov	r0, s16
 8006c52:	4631      	mov	r1, r6
 8006c54:	f7ff f9dc 	bl	8006010 <quorem>
 8006c58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006c62:	1aea      	subs	r2, r5, r3
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	4293      	cmp	r3, r2
 8006c68:	dd09      	ble.n	8006c7e <_dtoa_r+0xb56>
 8006c6a:	ee18 1a10 	vmov	r1, s16
 8006c6e:	2300      	movs	r3, #0
 8006c70:	220a      	movs	r2, #10
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 f9bc 	bl	8006ff0 <__multadd>
 8006c78:	ee08 0a10 	vmov	s16, r0
 8006c7c:	e7e7      	b.n	8006c4e <_dtoa_r+0xb26>
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfc8      	it	gt
 8006c84:	461d      	movgt	r5, r3
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	bfd8      	it	le
 8006c8a:	2501      	movle	r5, #1
 8006c8c:	441d      	add	r5, r3
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	ee18 1a10 	vmov	r1, s16
 8006c96:	2201      	movs	r2, #1
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fb59 	bl	8007350 <__lshift>
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	ee08 0a10 	vmov	s16, r0
 8006ca4:	f000 fbc4 	bl	8007430 <__mcmp>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dc91      	bgt.n	8006bd0 <_dtoa_r+0xaa8>
 8006cac:	d102      	bne.n	8006cb4 <_dtoa_r+0xb8c>
 8006cae:	f01a 0f01 	tst.w	sl, #1
 8006cb2:	d18d      	bne.n	8006bd0 <_dtoa_r+0xaa8>
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbc:	2a30      	cmp	r2, #48	; 0x30
 8006cbe:	d0fa      	beq.n	8006cb6 <_dtoa_r+0xb8e>
 8006cc0:	e6d7      	b.n	8006a72 <_dtoa_r+0x94a>
 8006cc2:	9a01      	ldr	r2, [sp, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d184      	bne.n	8006bd2 <_dtoa_r+0xaaa>
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2331      	movs	r3, #49	; 0x31
 8006cd0:	7013      	strb	r3, [r2, #0]
 8006cd2:	e6ce      	b.n	8006a72 <_dtoa_r+0x94a>
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <_dtoa_r+0xbd4>)
 8006cd6:	f7ff ba95 	b.w	8006204 <_dtoa_r+0xdc>
 8006cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f47f aa6e 	bne.w	80061be <_dtoa_r+0x96>
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <_dtoa_r+0xbd8>)
 8006ce4:	f7ff ba8e 	b.w	8006204 <_dtoa_r+0xdc>
 8006ce8:	9b02      	ldr	r3, [sp, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dcae      	bgt.n	8006c4c <_dtoa_r+0xb24>
 8006cee:	9b06      	ldr	r3, [sp, #24]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	f73f aea8 	bgt.w	8006a46 <_dtoa_r+0x91e>
 8006cf6:	e7a9      	b.n	8006c4c <_dtoa_r+0xb24>
 8006cf8:	0800828b 	.word	0x0800828b
 8006cfc:	080081e8 	.word	0x080081e8
 8006d00:	0800820c 	.word	0x0800820c

08006d04 <std>:
 8006d04:	2300      	movs	r3, #0
 8006d06:	b510      	push	{r4, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d12:	6083      	str	r3, [r0, #8]
 8006d14:	8181      	strh	r1, [r0, #12]
 8006d16:	6643      	str	r3, [r0, #100]	; 0x64
 8006d18:	81c2      	strh	r2, [r0, #14]
 8006d1a:	6183      	str	r3, [r0, #24]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	2208      	movs	r2, #8
 8006d20:	305c      	adds	r0, #92	; 0x5c
 8006d22:	f7fe fd03 	bl	800572c <memset>
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x38>)
 8006d28:	6263      	str	r3, [r4, #36]	; 0x24
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <std+0x3c>)
 8006d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <std+0x40>)
 8006d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d32:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <std+0x44>)
 8006d34:	6224      	str	r4, [r4, #32]
 8006d36:	6323      	str	r3, [r4, #48]	; 0x30
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08007af5 	.word	0x08007af5
 8006d40:	08007b17 	.word	0x08007b17
 8006d44:	08007b4f 	.word	0x08007b4f
 8006d48:	08007b73 	.word	0x08007b73

08006d4c <_cleanup_r>:
 8006d4c:	4901      	ldr	r1, [pc, #4]	; (8006d54 <_cleanup_r+0x8>)
 8006d4e:	f000 b8af 	b.w	8006eb0 <_fwalk_reent>
 8006d52:	bf00      	nop
 8006d54:	08007e89 	.word	0x08007e89

08006d58 <__sfmoreglue>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	2268      	movs	r2, #104	; 0x68
 8006d5c:	1e4d      	subs	r5, r1, #1
 8006d5e:	4355      	muls	r5, r2
 8006d60:	460e      	mov	r6, r1
 8006d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d66:	f000 fce7 	bl	8007738 <_malloc_r>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	b140      	cbz	r0, 8006d80 <__sfmoreglue+0x28>
 8006d6e:	2100      	movs	r1, #0
 8006d70:	e9c0 1600 	strd	r1, r6, [r0]
 8006d74:	300c      	adds	r0, #12
 8006d76:	60a0      	str	r0, [r4, #8]
 8006d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d7c:	f7fe fcd6 	bl	800572c <memset>
 8006d80:	4620      	mov	r0, r4
 8006d82:	bd70      	pop	{r4, r5, r6, pc}

08006d84 <__sfp_lock_acquire>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__sfp_lock_acquire+0x8>)
 8006d86:	f000 b8b8 	b.w	8006efa <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000329 	.word	0x20000329

08006d90 <__sfp_lock_release>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__sfp_lock_release+0x8>)
 8006d92:	f000 b8b3 	b.w	8006efc <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	20000329 	.word	0x20000329

08006d9c <__sinit_lock_acquire>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__sinit_lock_acquire+0x8>)
 8006d9e:	f000 b8ac 	b.w	8006efa <__retarget_lock_acquire_recursive>
 8006da2:	bf00      	nop
 8006da4:	2000032a 	.word	0x2000032a

08006da8 <__sinit_lock_release>:
 8006da8:	4801      	ldr	r0, [pc, #4]	; (8006db0 <__sinit_lock_release+0x8>)
 8006daa:	f000 b8a7 	b.w	8006efc <__retarget_lock_release_recursive>
 8006dae:	bf00      	nop
 8006db0:	2000032a 	.word	0x2000032a

08006db4 <__sinit>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4604      	mov	r4, r0
 8006db8:	f7ff fff0 	bl	8006d9c <__sinit_lock_acquire>
 8006dbc:	69a3      	ldr	r3, [r4, #24]
 8006dbe:	b11b      	cbz	r3, 8006dc8 <__sinit+0x14>
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f7ff bff0 	b.w	8006da8 <__sinit_lock_release>
 8006dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <__sinit+0x68>)
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <__sinit+0x6c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	bf04      	itt	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	61a3      	streq	r3, [r4, #24]
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 f820 	bl	8006e24 <__sfp>
 8006de4:	6060      	str	r0, [r4, #4]
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 f81c 	bl	8006e24 <__sfp>
 8006dec:	60a0      	str	r0, [r4, #8]
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f818 	bl	8006e24 <__sfp>
 8006df4:	2200      	movs	r2, #0
 8006df6:	60e0      	str	r0, [r4, #12]
 8006df8:	2104      	movs	r1, #4
 8006dfa:	6860      	ldr	r0, [r4, #4]
 8006dfc:	f7ff ff82 	bl	8006d04 <std>
 8006e00:	68a0      	ldr	r0, [r4, #8]
 8006e02:	2201      	movs	r2, #1
 8006e04:	2109      	movs	r1, #9
 8006e06:	f7ff ff7d 	bl	8006d04 <std>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	2112      	movs	r1, #18
 8006e10:	f7ff ff78 	bl	8006d04 <std>
 8006e14:	2301      	movs	r3, #1
 8006e16:	61a3      	str	r3, [r4, #24]
 8006e18:	e7d2      	b.n	8006dc0 <__sinit+0xc>
 8006e1a:	bf00      	nop
 8006e1c:	080081d4 	.word	0x080081d4
 8006e20:	08006d4d 	.word	0x08006d4d

08006e24 <__sfp>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	4607      	mov	r7, r0
 8006e28:	f7ff ffac 	bl	8006d84 <__sfp_lock_acquire>
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <__sfp+0x84>)
 8006e2e:	681e      	ldr	r6, [r3, #0]
 8006e30:	69b3      	ldr	r3, [r6, #24]
 8006e32:	b913      	cbnz	r3, 8006e3a <__sfp+0x16>
 8006e34:	4630      	mov	r0, r6
 8006e36:	f7ff ffbd 	bl	8006db4 <__sinit>
 8006e3a:	3648      	adds	r6, #72	; 0x48
 8006e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	d503      	bpl.n	8006e4c <__sfp+0x28>
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	b30b      	cbz	r3, 8006e8c <__sfp+0x68>
 8006e48:	6836      	ldr	r6, [r6, #0]
 8006e4a:	e7f7      	b.n	8006e3c <__sfp+0x18>
 8006e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e50:	b9d5      	cbnz	r5, 8006e88 <__sfp+0x64>
 8006e52:	4b16      	ldr	r3, [pc, #88]	; (8006eac <__sfp+0x88>)
 8006e54:	60e3      	str	r3, [r4, #12]
 8006e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e5c:	f000 f84c 	bl	8006ef8 <__retarget_lock_init_recursive>
 8006e60:	f7ff ff96 	bl	8006d90 <__sfp_lock_release>
 8006e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e6c:	6025      	str	r5, [r4, #0]
 8006e6e:	61a5      	str	r5, [r4, #24]
 8006e70:	2208      	movs	r2, #8
 8006e72:	4629      	mov	r1, r5
 8006e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e78:	f7fe fc58 	bl	800572c <memset>
 8006e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e84:	4620      	mov	r0, r4
 8006e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e88:	3468      	adds	r4, #104	; 0x68
 8006e8a:	e7d9      	b.n	8006e40 <__sfp+0x1c>
 8006e8c:	2104      	movs	r1, #4
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f7ff ff62 	bl	8006d58 <__sfmoreglue>
 8006e94:	4604      	mov	r4, r0
 8006e96:	6030      	str	r0, [r6, #0]
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1d5      	bne.n	8006e48 <__sfp+0x24>
 8006e9c:	f7ff ff78 	bl	8006d90 <__sfp_lock_release>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	e7ee      	b.n	8006e84 <__sfp+0x60>
 8006ea6:	bf00      	nop
 8006ea8:	080081d4 	.word	0x080081d4
 8006eac:	ffff0001 	.word	0xffff0001

08006eb0 <_fwalk_reent>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	4688      	mov	r8, r1
 8006eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ebc:	2700      	movs	r7, #0
 8006ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ec6:	d505      	bpl.n	8006ed4 <_fwalk_reent+0x24>
 8006ec8:	6824      	ldr	r4, [r4, #0]
 8006eca:	2c00      	cmp	r4, #0
 8006ecc:	d1f7      	bne.n	8006ebe <_fwalk_reent+0xe>
 8006ece:	4638      	mov	r0, r7
 8006ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed4:	89ab      	ldrh	r3, [r5, #12]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d907      	bls.n	8006eea <_fwalk_reent+0x3a>
 8006eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	d003      	beq.n	8006eea <_fwalk_reent+0x3a>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	47c0      	blx	r8
 8006ee8:	4307      	orrs	r7, r0
 8006eea:	3568      	adds	r5, #104	; 0x68
 8006eec:	e7e9      	b.n	8006ec2 <_fwalk_reent+0x12>
	...

08006ef0 <_localeconv_r>:
 8006ef0:	4800      	ldr	r0, [pc, #0]	; (8006ef4 <_localeconv_r+0x4>)
 8006ef2:	4770      	bx	lr
 8006ef4:	20000160 	.word	0x20000160

08006ef8 <__retarget_lock_init_recursive>:
 8006ef8:	4770      	bx	lr

08006efa <__retarget_lock_acquire_recursive>:
 8006efa:	4770      	bx	lr

08006efc <__retarget_lock_release_recursive>:
 8006efc:	4770      	bx	lr
	...

08006f00 <malloc>:
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <malloc+0xc>)
 8006f02:	4601      	mov	r1, r0
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	f000 bc17 	b.w	8007738 <_malloc_r>
 8006f0a:	bf00      	nop
 8006f0c:	2000000c 	.word	0x2000000c

08006f10 <memcpy>:
 8006f10:	440a      	add	r2, r1
 8006f12:	4291      	cmp	r1, r2
 8006f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f18:	d100      	bne.n	8006f1c <memcpy+0xc>
 8006f1a:	4770      	bx	lr
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f26:	4291      	cmp	r1, r2
 8006f28:	d1f9      	bne.n	8006f1e <memcpy+0xe>
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <_Balloc>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	b976      	cbnz	r6, 8006f54 <_Balloc+0x28>
 8006f36:	2010      	movs	r0, #16
 8006f38:	f7ff ffe2 	bl	8006f00 <malloc>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f40:	b920      	cbnz	r0, 8006f4c <_Balloc+0x20>
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <_Balloc+0x78>)
 8006f44:	4818      	ldr	r0, [pc, #96]	; (8006fa8 <_Balloc+0x7c>)
 8006f46:	2166      	movs	r1, #102	; 0x66
 8006f48:	f000 feea 	bl	8007d20 <__assert_func>
 8006f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f50:	6006      	str	r6, [r0, #0]
 8006f52:	60c6      	str	r6, [r0, #12]
 8006f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f56:	68f3      	ldr	r3, [r6, #12]
 8006f58:	b183      	cbz	r3, 8006f7c <_Balloc+0x50>
 8006f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f62:	b9b8      	cbnz	r0, 8006f94 <_Balloc+0x68>
 8006f64:	2101      	movs	r1, #1
 8006f66:	fa01 f605 	lsl.w	r6, r1, r5
 8006f6a:	1d72      	adds	r2, r6, #5
 8006f6c:	0092      	lsls	r2, r2, #2
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 fb60 	bl	8007634 <_calloc_r>
 8006f74:	b160      	cbz	r0, 8006f90 <_Balloc+0x64>
 8006f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f7a:	e00e      	b.n	8006f9a <_Balloc+0x6e>
 8006f7c:	2221      	movs	r2, #33	; 0x21
 8006f7e:	2104      	movs	r1, #4
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fb57 	bl	8007634 <_calloc_r>
 8006f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f88:	60f0      	str	r0, [r6, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e4      	bne.n	8006f5a <_Balloc+0x2e>
 8006f90:	2000      	movs	r0, #0
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	6802      	ldr	r2, [r0, #0]
 8006f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fa0:	e7f7      	b.n	8006f92 <_Balloc+0x66>
 8006fa2:	bf00      	nop
 8006fa4:	08008219 	.word	0x08008219
 8006fa8:	080082fc 	.word	0x080082fc

08006fac <_Bfree>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	b976      	cbnz	r6, 8006fd4 <_Bfree+0x28>
 8006fb6:	2010      	movs	r0, #16
 8006fb8:	f7ff ffa2 	bl	8006f00 <malloc>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8006fc0:	b920      	cbnz	r0, 8006fcc <_Bfree+0x20>
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <_Bfree+0x3c>)
 8006fc4:	4809      	ldr	r0, [pc, #36]	; (8006fec <_Bfree+0x40>)
 8006fc6:	218a      	movs	r1, #138	; 0x8a
 8006fc8:	f000 feaa 	bl	8007d20 <__assert_func>
 8006fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fd0:	6006      	str	r6, [r0, #0]
 8006fd2:	60c6      	str	r6, [r0, #12]
 8006fd4:	b13c      	cbz	r4, 8006fe6 <_Bfree+0x3a>
 8006fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fd8:	6862      	ldr	r2, [r4, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe0:	6021      	str	r1, [r4, #0]
 8006fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	08008219 	.word	0x08008219
 8006fec:	080082fc 	.word	0x080082fc

08006ff0 <__multadd>:
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	690d      	ldr	r5, [r1, #16]
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	461e      	mov	r6, r3
 8006ffc:	f101 0c14 	add.w	ip, r1, #20
 8007000:	2000      	movs	r0, #0
 8007002:	f8dc 3000 	ldr.w	r3, [ip]
 8007006:	b299      	uxth	r1, r3
 8007008:	fb02 6101 	mla	r1, r2, r1, r6
 800700c:	0c1e      	lsrs	r6, r3, #16
 800700e:	0c0b      	lsrs	r3, r1, #16
 8007010:	fb02 3306 	mla	r3, r2, r6, r3
 8007014:	b289      	uxth	r1, r1
 8007016:	3001      	adds	r0, #1
 8007018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800701c:	4285      	cmp	r5, r0
 800701e:	f84c 1b04 	str.w	r1, [ip], #4
 8007022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007026:	dcec      	bgt.n	8007002 <__multadd+0x12>
 8007028:	b30e      	cbz	r6, 800706e <__multadd+0x7e>
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	42ab      	cmp	r3, r5
 800702e:	dc19      	bgt.n	8007064 <__multadd+0x74>
 8007030:	6861      	ldr	r1, [r4, #4]
 8007032:	4638      	mov	r0, r7
 8007034:	3101      	adds	r1, #1
 8007036:	f7ff ff79 	bl	8006f2c <_Balloc>
 800703a:	4680      	mov	r8, r0
 800703c:	b928      	cbnz	r0, 800704a <__multadd+0x5a>
 800703e:	4602      	mov	r2, r0
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <__multadd+0x84>)
 8007042:	480d      	ldr	r0, [pc, #52]	; (8007078 <__multadd+0x88>)
 8007044:	21b5      	movs	r1, #181	; 0xb5
 8007046:	f000 fe6b 	bl	8007d20 <__assert_func>
 800704a:	6922      	ldr	r2, [r4, #16]
 800704c:	3202      	adds	r2, #2
 800704e:	f104 010c 	add.w	r1, r4, #12
 8007052:	0092      	lsls	r2, r2, #2
 8007054:	300c      	adds	r0, #12
 8007056:	f7ff ff5b 	bl	8006f10 <memcpy>
 800705a:	4621      	mov	r1, r4
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ffa5 	bl	8006fac <_Bfree>
 8007062:	4644      	mov	r4, r8
 8007064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007068:	3501      	adds	r5, #1
 800706a:	615e      	str	r6, [r3, #20]
 800706c:	6125      	str	r5, [r4, #16]
 800706e:	4620      	mov	r0, r4
 8007070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007074:	0800828b 	.word	0x0800828b
 8007078:	080082fc 	.word	0x080082fc

0800707c <__hi0bits>:
 800707c:	0c03      	lsrs	r3, r0, #16
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	b9d3      	cbnz	r3, 80070b8 <__hi0bits+0x3c>
 8007082:	0400      	lsls	r0, r0, #16
 8007084:	2310      	movs	r3, #16
 8007086:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800708a:	bf04      	itt	eq
 800708c:	0200      	lsleq	r0, r0, #8
 800708e:	3308      	addeq	r3, #8
 8007090:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007094:	bf04      	itt	eq
 8007096:	0100      	lsleq	r0, r0, #4
 8007098:	3304      	addeq	r3, #4
 800709a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800709e:	bf04      	itt	eq
 80070a0:	0080      	lsleq	r0, r0, #2
 80070a2:	3302      	addeq	r3, #2
 80070a4:	2800      	cmp	r0, #0
 80070a6:	db05      	blt.n	80070b4 <__hi0bits+0x38>
 80070a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070ac:	f103 0301 	add.w	r3, r3, #1
 80070b0:	bf08      	it	eq
 80070b2:	2320      	moveq	r3, #32
 80070b4:	4618      	mov	r0, r3
 80070b6:	4770      	bx	lr
 80070b8:	2300      	movs	r3, #0
 80070ba:	e7e4      	b.n	8007086 <__hi0bits+0xa>

080070bc <__lo0bits>:
 80070bc:	6803      	ldr	r3, [r0, #0]
 80070be:	f013 0207 	ands.w	r2, r3, #7
 80070c2:	4601      	mov	r1, r0
 80070c4:	d00b      	beq.n	80070de <__lo0bits+0x22>
 80070c6:	07da      	lsls	r2, r3, #31
 80070c8:	d423      	bmi.n	8007112 <__lo0bits+0x56>
 80070ca:	0798      	lsls	r0, r3, #30
 80070cc:	bf49      	itett	mi
 80070ce:	085b      	lsrmi	r3, r3, #1
 80070d0:	089b      	lsrpl	r3, r3, #2
 80070d2:	2001      	movmi	r0, #1
 80070d4:	600b      	strmi	r3, [r1, #0]
 80070d6:	bf5c      	itt	pl
 80070d8:	600b      	strpl	r3, [r1, #0]
 80070da:	2002      	movpl	r0, #2
 80070dc:	4770      	bx	lr
 80070de:	b298      	uxth	r0, r3
 80070e0:	b9a8      	cbnz	r0, 800710e <__lo0bits+0x52>
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	2010      	movs	r0, #16
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	b90a      	cbnz	r2, 80070ee <__lo0bits+0x32>
 80070ea:	3008      	adds	r0, #8
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	071a      	lsls	r2, r3, #28
 80070f0:	bf04      	itt	eq
 80070f2:	091b      	lsreq	r3, r3, #4
 80070f4:	3004      	addeq	r0, #4
 80070f6:	079a      	lsls	r2, r3, #30
 80070f8:	bf04      	itt	eq
 80070fa:	089b      	lsreq	r3, r3, #2
 80070fc:	3002      	addeq	r0, #2
 80070fe:	07da      	lsls	r2, r3, #31
 8007100:	d403      	bmi.n	800710a <__lo0bits+0x4e>
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	f100 0001 	add.w	r0, r0, #1
 8007108:	d005      	beq.n	8007116 <__lo0bits+0x5a>
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	4770      	bx	lr
 800710e:	4610      	mov	r0, r2
 8007110:	e7e9      	b.n	80070e6 <__lo0bits+0x2a>
 8007112:	2000      	movs	r0, #0
 8007114:	4770      	bx	lr
 8007116:	2020      	movs	r0, #32
 8007118:	4770      	bx	lr
	...

0800711c <__i2b>:
 800711c:	b510      	push	{r4, lr}
 800711e:	460c      	mov	r4, r1
 8007120:	2101      	movs	r1, #1
 8007122:	f7ff ff03 	bl	8006f2c <_Balloc>
 8007126:	4602      	mov	r2, r0
 8007128:	b928      	cbnz	r0, 8007136 <__i2b+0x1a>
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <__i2b+0x24>)
 800712c:	4805      	ldr	r0, [pc, #20]	; (8007144 <__i2b+0x28>)
 800712e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007132:	f000 fdf5 	bl	8007d20 <__assert_func>
 8007136:	2301      	movs	r3, #1
 8007138:	6144      	str	r4, [r0, #20]
 800713a:	6103      	str	r3, [r0, #16]
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	0800828b 	.word	0x0800828b
 8007144:	080082fc 	.word	0x080082fc

08007148 <__multiply>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	4691      	mov	r9, r2
 800714e:	690a      	ldr	r2, [r1, #16]
 8007150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	bfb8      	it	lt
 8007158:	460b      	movlt	r3, r1
 800715a:	460c      	mov	r4, r1
 800715c:	bfbc      	itt	lt
 800715e:	464c      	movlt	r4, r9
 8007160:	4699      	movlt	r9, r3
 8007162:	6927      	ldr	r7, [r4, #16]
 8007164:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	6861      	ldr	r1, [r4, #4]
 800716c:	eb07 060a 	add.w	r6, r7, sl
 8007170:	42b3      	cmp	r3, r6
 8007172:	b085      	sub	sp, #20
 8007174:	bfb8      	it	lt
 8007176:	3101      	addlt	r1, #1
 8007178:	f7ff fed8 	bl	8006f2c <_Balloc>
 800717c:	b930      	cbnz	r0, 800718c <__multiply+0x44>
 800717e:	4602      	mov	r2, r0
 8007180:	4b44      	ldr	r3, [pc, #272]	; (8007294 <__multiply+0x14c>)
 8007182:	4845      	ldr	r0, [pc, #276]	; (8007298 <__multiply+0x150>)
 8007184:	f240 115d 	movw	r1, #349	; 0x15d
 8007188:	f000 fdca 	bl	8007d20 <__assert_func>
 800718c:	f100 0514 	add.w	r5, r0, #20
 8007190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007194:	462b      	mov	r3, r5
 8007196:	2200      	movs	r2, #0
 8007198:	4543      	cmp	r3, r8
 800719a:	d321      	bcc.n	80071e0 <__multiply+0x98>
 800719c:	f104 0314 	add.w	r3, r4, #20
 80071a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071a4:	f109 0314 	add.w	r3, r9, #20
 80071a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	1b3a      	subs	r2, r7, r4
 80071b0:	3a15      	subs	r2, #21
 80071b2:	f022 0203 	bic.w	r2, r2, #3
 80071b6:	3204      	adds	r2, #4
 80071b8:	f104 0115 	add.w	r1, r4, #21
 80071bc:	428f      	cmp	r7, r1
 80071be:	bf38      	it	cc
 80071c0:	2204      	movcc	r2, #4
 80071c2:	9201      	str	r2, [sp, #4]
 80071c4:	9a02      	ldr	r2, [sp, #8]
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d80c      	bhi.n	80071e6 <__multiply+0x9e>
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	dd03      	ble.n	80071d8 <__multiply+0x90>
 80071d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d05a      	beq.n	800728e <__multiply+0x146>
 80071d8:	6106      	str	r6, [r0, #16]
 80071da:	b005      	add	sp, #20
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	f843 2b04 	str.w	r2, [r3], #4
 80071e4:	e7d8      	b.n	8007198 <__multiply+0x50>
 80071e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80071ea:	f1ba 0f00 	cmp.w	sl, #0
 80071ee:	d024      	beq.n	800723a <__multiply+0xf2>
 80071f0:	f104 0e14 	add.w	lr, r4, #20
 80071f4:	46a9      	mov	r9, r5
 80071f6:	f04f 0c00 	mov.w	ip, #0
 80071fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007202:	fa1f fb82 	uxth.w	fp, r2
 8007206:	b289      	uxth	r1, r1
 8007208:	fb0a 110b 	mla	r1, sl, fp, r1
 800720c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007210:	f8d9 2000 	ldr.w	r2, [r9]
 8007214:	4461      	add	r1, ip
 8007216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800721a:	fb0a c20b 	mla	r2, sl, fp, ip
 800721e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007222:	b289      	uxth	r1, r1
 8007224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007228:	4577      	cmp	r7, lr
 800722a:	f849 1b04 	str.w	r1, [r9], #4
 800722e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007232:	d8e2      	bhi.n	80071fa <__multiply+0xb2>
 8007234:	9a01      	ldr	r2, [sp, #4]
 8007236:	f845 c002 	str.w	ip, [r5, r2]
 800723a:	9a03      	ldr	r2, [sp, #12]
 800723c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007240:	3304      	adds	r3, #4
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	d020      	beq.n	800728a <__multiply+0x142>
 8007248:	6829      	ldr	r1, [r5, #0]
 800724a:	f104 0c14 	add.w	ip, r4, #20
 800724e:	46ae      	mov	lr, r5
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	f8bc b000 	ldrh.w	fp, [ip]
 8007258:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800725c:	fb09 220b 	mla	r2, r9, fp, r2
 8007260:	4492      	add	sl, r2
 8007262:	b289      	uxth	r1, r1
 8007264:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007268:	f84e 1b04 	str.w	r1, [lr], #4
 800726c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007270:	f8be 1000 	ldrh.w	r1, [lr]
 8007274:	0c12      	lsrs	r2, r2, #16
 8007276:	fb09 1102 	mla	r1, r9, r2, r1
 800727a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800727e:	4567      	cmp	r7, ip
 8007280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007284:	d8e6      	bhi.n	8007254 <__multiply+0x10c>
 8007286:	9a01      	ldr	r2, [sp, #4]
 8007288:	50a9      	str	r1, [r5, r2]
 800728a:	3504      	adds	r5, #4
 800728c:	e79a      	b.n	80071c4 <__multiply+0x7c>
 800728e:	3e01      	subs	r6, #1
 8007290:	e79c      	b.n	80071cc <__multiply+0x84>
 8007292:	bf00      	nop
 8007294:	0800828b 	.word	0x0800828b
 8007298:	080082fc 	.word	0x080082fc

0800729c <__pow5mult>:
 800729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	4615      	mov	r5, r2
 80072a2:	f012 0203 	ands.w	r2, r2, #3
 80072a6:	4606      	mov	r6, r0
 80072a8:	460f      	mov	r7, r1
 80072aa:	d007      	beq.n	80072bc <__pow5mult+0x20>
 80072ac:	4c25      	ldr	r4, [pc, #148]	; (8007344 <__pow5mult+0xa8>)
 80072ae:	3a01      	subs	r2, #1
 80072b0:	2300      	movs	r3, #0
 80072b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072b6:	f7ff fe9b 	bl	8006ff0 <__multadd>
 80072ba:	4607      	mov	r7, r0
 80072bc:	10ad      	asrs	r5, r5, #2
 80072be:	d03d      	beq.n	800733c <__pow5mult+0xa0>
 80072c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072c2:	b97c      	cbnz	r4, 80072e4 <__pow5mult+0x48>
 80072c4:	2010      	movs	r0, #16
 80072c6:	f7ff fe1b 	bl	8006f00 <malloc>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6270      	str	r0, [r6, #36]	; 0x24
 80072ce:	b928      	cbnz	r0, 80072dc <__pow5mult+0x40>
 80072d0:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <__pow5mult+0xac>)
 80072d2:	481e      	ldr	r0, [pc, #120]	; (800734c <__pow5mult+0xb0>)
 80072d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072d8:	f000 fd22 	bl	8007d20 <__assert_func>
 80072dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072e0:	6004      	str	r4, [r0, #0]
 80072e2:	60c4      	str	r4, [r0, #12]
 80072e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072ec:	b94c      	cbnz	r4, 8007302 <__pow5mult+0x66>
 80072ee:	f240 2171 	movw	r1, #625	; 0x271
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff ff12 	bl	800711c <__i2b>
 80072f8:	2300      	movs	r3, #0
 80072fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80072fe:	4604      	mov	r4, r0
 8007300:	6003      	str	r3, [r0, #0]
 8007302:	f04f 0900 	mov.w	r9, #0
 8007306:	07eb      	lsls	r3, r5, #31
 8007308:	d50a      	bpl.n	8007320 <__pow5mult+0x84>
 800730a:	4639      	mov	r1, r7
 800730c:	4622      	mov	r2, r4
 800730e:	4630      	mov	r0, r6
 8007310:	f7ff ff1a 	bl	8007148 <__multiply>
 8007314:	4639      	mov	r1, r7
 8007316:	4680      	mov	r8, r0
 8007318:	4630      	mov	r0, r6
 800731a:	f7ff fe47 	bl	8006fac <_Bfree>
 800731e:	4647      	mov	r7, r8
 8007320:	106d      	asrs	r5, r5, #1
 8007322:	d00b      	beq.n	800733c <__pow5mult+0xa0>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	b938      	cbnz	r0, 8007338 <__pow5mult+0x9c>
 8007328:	4622      	mov	r2, r4
 800732a:	4621      	mov	r1, r4
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff ff0b 	bl	8007148 <__multiply>
 8007332:	6020      	str	r0, [r4, #0]
 8007334:	f8c0 9000 	str.w	r9, [r0]
 8007338:	4604      	mov	r4, r0
 800733a:	e7e4      	b.n	8007306 <__pow5mult+0x6a>
 800733c:	4638      	mov	r0, r7
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	bf00      	nop
 8007344:	08008448 	.word	0x08008448
 8007348:	08008219 	.word	0x08008219
 800734c:	080082fc 	.word	0x080082fc

08007350 <__lshift>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	6849      	ldr	r1, [r1, #4]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	4607      	mov	r7, r0
 8007362:	4691      	mov	r9, r2
 8007364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007368:	f108 0601 	add.w	r6, r8, #1
 800736c:	42b3      	cmp	r3, r6
 800736e:	db0b      	blt.n	8007388 <__lshift+0x38>
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff fddb 	bl	8006f2c <_Balloc>
 8007376:	4605      	mov	r5, r0
 8007378:	b948      	cbnz	r0, 800738e <__lshift+0x3e>
 800737a:	4602      	mov	r2, r0
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <__lshift+0xd8>)
 800737e:	482b      	ldr	r0, [pc, #172]	; (800742c <__lshift+0xdc>)
 8007380:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007384:	f000 fccc 	bl	8007d20 <__assert_func>
 8007388:	3101      	adds	r1, #1
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	e7ee      	b.n	800736c <__lshift+0x1c>
 800738e:	2300      	movs	r3, #0
 8007390:	f100 0114 	add.w	r1, r0, #20
 8007394:	f100 0210 	add.w	r2, r0, #16
 8007398:	4618      	mov	r0, r3
 800739a:	4553      	cmp	r3, sl
 800739c:	db37      	blt.n	800740e <__lshift+0xbe>
 800739e:	6920      	ldr	r0, [r4, #16]
 80073a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073a4:	f104 0314 	add.w	r3, r4, #20
 80073a8:	f019 091f 	ands.w	r9, r9, #31
 80073ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073b4:	d02f      	beq.n	8007416 <__lshift+0xc6>
 80073b6:	f1c9 0e20 	rsb	lr, r9, #32
 80073ba:	468a      	mov	sl, r1
 80073bc:	f04f 0c00 	mov.w	ip, #0
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	fa02 f209 	lsl.w	r2, r2, r9
 80073c6:	ea42 020c 	orr.w	r2, r2, ip
 80073ca:	f84a 2b04 	str.w	r2, [sl], #4
 80073ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d2:	4298      	cmp	r0, r3
 80073d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073d8:	d8f2      	bhi.n	80073c0 <__lshift+0x70>
 80073da:	1b03      	subs	r3, r0, r4
 80073dc:	3b15      	subs	r3, #21
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	3304      	adds	r3, #4
 80073e4:	f104 0215 	add.w	r2, r4, #21
 80073e8:	4290      	cmp	r0, r2
 80073ea:	bf38      	it	cc
 80073ec:	2304      	movcc	r3, #4
 80073ee:	f841 c003 	str.w	ip, [r1, r3]
 80073f2:	f1bc 0f00 	cmp.w	ip, #0
 80073f6:	d001      	beq.n	80073fc <__lshift+0xac>
 80073f8:	f108 0602 	add.w	r6, r8, #2
 80073fc:	3e01      	subs	r6, #1
 80073fe:	4638      	mov	r0, r7
 8007400:	612e      	str	r6, [r5, #16]
 8007402:	4621      	mov	r1, r4
 8007404:	f7ff fdd2 	bl	8006fac <_Bfree>
 8007408:	4628      	mov	r0, r5
 800740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007412:	3301      	adds	r3, #1
 8007414:	e7c1      	b.n	800739a <__lshift+0x4a>
 8007416:	3904      	subs	r1, #4
 8007418:	f853 2b04 	ldr.w	r2, [r3], #4
 800741c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007420:	4298      	cmp	r0, r3
 8007422:	d8f9      	bhi.n	8007418 <__lshift+0xc8>
 8007424:	e7ea      	b.n	80073fc <__lshift+0xac>
 8007426:	bf00      	nop
 8007428:	0800828b 	.word	0x0800828b
 800742c:	080082fc 	.word	0x080082fc

08007430 <__mcmp>:
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	6902      	ldr	r2, [r0, #16]
 8007434:	690c      	ldr	r4, [r1, #16]
 8007436:	1b12      	subs	r2, r2, r4
 8007438:	d10e      	bne.n	8007458 <__mcmp+0x28>
 800743a:	f100 0314 	add.w	r3, r0, #20
 800743e:	3114      	adds	r1, #20
 8007440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800744c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007450:	42a5      	cmp	r5, r4
 8007452:	d003      	beq.n	800745c <__mcmp+0x2c>
 8007454:	d305      	bcc.n	8007462 <__mcmp+0x32>
 8007456:	2201      	movs	r2, #1
 8007458:	4610      	mov	r0, r2
 800745a:	bd30      	pop	{r4, r5, pc}
 800745c:	4283      	cmp	r3, r0
 800745e:	d3f3      	bcc.n	8007448 <__mcmp+0x18>
 8007460:	e7fa      	b.n	8007458 <__mcmp+0x28>
 8007462:	f04f 32ff 	mov.w	r2, #4294967295
 8007466:	e7f7      	b.n	8007458 <__mcmp+0x28>

08007468 <__mdiff>:
 8007468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	460c      	mov	r4, r1
 800746e:	4606      	mov	r6, r0
 8007470:	4611      	mov	r1, r2
 8007472:	4620      	mov	r0, r4
 8007474:	4690      	mov	r8, r2
 8007476:	f7ff ffdb 	bl	8007430 <__mcmp>
 800747a:	1e05      	subs	r5, r0, #0
 800747c:	d110      	bne.n	80074a0 <__mdiff+0x38>
 800747e:	4629      	mov	r1, r5
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff fd53 	bl	8006f2c <_Balloc>
 8007486:	b930      	cbnz	r0, 8007496 <__mdiff+0x2e>
 8007488:	4b3a      	ldr	r3, [pc, #232]	; (8007574 <__mdiff+0x10c>)
 800748a:	4602      	mov	r2, r0
 800748c:	f240 2132 	movw	r1, #562	; 0x232
 8007490:	4839      	ldr	r0, [pc, #228]	; (8007578 <__mdiff+0x110>)
 8007492:	f000 fc45 	bl	8007d20 <__assert_func>
 8007496:	2301      	movs	r3, #1
 8007498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800749c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	bfa4      	itt	ge
 80074a2:	4643      	movge	r3, r8
 80074a4:	46a0      	movge	r8, r4
 80074a6:	4630      	mov	r0, r6
 80074a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074ac:	bfa6      	itte	ge
 80074ae:	461c      	movge	r4, r3
 80074b0:	2500      	movge	r5, #0
 80074b2:	2501      	movlt	r5, #1
 80074b4:	f7ff fd3a 	bl	8006f2c <_Balloc>
 80074b8:	b920      	cbnz	r0, 80074c4 <__mdiff+0x5c>
 80074ba:	4b2e      	ldr	r3, [pc, #184]	; (8007574 <__mdiff+0x10c>)
 80074bc:	4602      	mov	r2, r0
 80074be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074c2:	e7e5      	b.n	8007490 <__mdiff+0x28>
 80074c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074c8:	6926      	ldr	r6, [r4, #16]
 80074ca:	60c5      	str	r5, [r0, #12]
 80074cc:	f104 0914 	add.w	r9, r4, #20
 80074d0:	f108 0514 	add.w	r5, r8, #20
 80074d4:	f100 0e14 	add.w	lr, r0, #20
 80074d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074e0:	f108 0210 	add.w	r2, r8, #16
 80074e4:	46f2      	mov	sl, lr
 80074e6:	2100      	movs	r1, #0
 80074e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80074ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074f0:	fa1f f883 	uxth.w	r8, r3
 80074f4:	fa11 f18b 	uxtah	r1, r1, fp
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	eba1 0808 	sub.w	r8, r1, r8
 80074fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007506:	fa1f f888 	uxth.w	r8, r8
 800750a:	1419      	asrs	r1, r3, #16
 800750c:	454e      	cmp	r6, r9
 800750e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007512:	f84a 3b04 	str.w	r3, [sl], #4
 8007516:	d8e7      	bhi.n	80074e8 <__mdiff+0x80>
 8007518:	1b33      	subs	r3, r6, r4
 800751a:	3b15      	subs	r3, #21
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	3304      	adds	r3, #4
 8007522:	3415      	adds	r4, #21
 8007524:	42a6      	cmp	r6, r4
 8007526:	bf38      	it	cc
 8007528:	2304      	movcc	r3, #4
 800752a:	441d      	add	r5, r3
 800752c:	4473      	add	r3, lr
 800752e:	469e      	mov	lr, r3
 8007530:	462e      	mov	r6, r5
 8007532:	4566      	cmp	r6, ip
 8007534:	d30e      	bcc.n	8007554 <__mdiff+0xec>
 8007536:	f10c 0203 	add.w	r2, ip, #3
 800753a:	1b52      	subs	r2, r2, r5
 800753c:	f022 0203 	bic.w	r2, r2, #3
 8007540:	3d03      	subs	r5, #3
 8007542:	45ac      	cmp	ip, r5
 8007544:	bf38      	it	cc
 8007546:	2200      	movcc	r2, #0
 8007548:	441a      	add	r2, r3
 800754a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800754e:	b17b      	cbz	r3, 8007570 <__mdiff+0x108>
 8007550:	6107      	str	r7, [r0, #16]
 8007552:	e7a3      	b.n	800749c <__mdiff+0x34>
 8007554:	f856 8b04 	ldr.w	r8, [r6], #4
 8007558:	fa11 f288 	uxtah	r2, r1, r8
 800755c:	1414      	asrs	r4, r2, #16
 800755e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007562:	b292      	uxth	r2, r2
 8007564:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007568:	f84e 2b04 	str.w	r2, [lr], #4
 800756c:	1421      	asrs	r1, r4, #16
 800756e:	e7e0      	b.n	8007532 <__mdiff+0xca>
 8007570:	3f01      	subs	r7, #1
 8007572:	e7ea      	b.n	800754a <__mdiff+0xe2>
 8007574:	0800828b 	.word	0x0800828b
 8007578:	080082fc 	.word	0x080082fc

0800757c <__d2b>:
 800757c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007580:	4689      	mov	r9, r1
 8007582:	2101      	movs	r1, #1
 8007584:	ec57 6b10 	vmov	r6, r7, d0
 8007588:	4690      	mov	r8, r2
 800758a:	f7ff fccf 	bl	8006f2c <_Balloc>
 800758e:	4604      	mov	r4, r0
 8007590:	b930      	cbnz	r0, 80075a0 <__d2b+0x24>
 8007592:	4602      	mov	r2, r0
 8007594:	4b25      	ldr	r3, [pc, #148]	; (800762c <__d2b+0xb0>)
 8007596:	4826      	ldr	r0, [pc, #152]	; (8007630 <__d2b+0xb4>)
 8007598:	f240 310a 	movw	r1, #778	; 0x30a
 800759c:	f000 fbc0 	bl	8007d20 <__assert_func>
 80075a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075a8:	bb35      	cbnz	r5, 80075f8 <__d2b+0x7c>
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	d028      	beq.n	8007602 <__d2b+0x86>
 80075b0:	4668      	mov	r0, sp
 80075b2:	9600      	str	r6, [sp, #0]
 80075b4:	f7ff fd82 	bl	80070bc <__lo0bits>
 80075b8:	9900      	ldr	r1, [sp, #0]
 80075ba:	b300      	cbz	r0, 80075fe <__d2b+0x82>
 80075bc:	9a01      	ldr	r2, [sp, #4]
 80075be:	f1c0 0320 	rsb	r3, r0, #32
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	430b      	orrs	r3, r1
 80075c8:	40c2      	lsrs	r2, r0
 80075ca:	6163      	str	r3, [r4, #20]
 80075cc:	9201      	str	r2, [sp, #4]
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	61a3      	str	r3, [r4, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bf14      	ite	ne
 80075d6:	2202      	movne	r2, #2
 80075d8:	2201      	moveq	r2, #1
 80075da:	6122      	str	r2, [r4, #16]
 80075dc:	b1d5      	cbz	r5, 8007614 <__d2b+0x98>
 80075de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075e2:	4405      	add	r5, r0
 80075e4:	f8c9 5000 	str.w	r5, [r9]
 80075e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075ec:	f8c8 0000 	str.w	r0, [r8]
 80075f0:	4620      	mov	r0, r4
 80075f2:	b003      	add	sp, #12
 80075f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075fc:	e7d5      	b.n	80075aa <__d2b+0x2e>
 80075fe:	6161      	str	r1, [r4, #20]
 8007600:	e7e5      	b.n	80075ce <__d2b+0x52>
 8007602:	a801      	add	r0, sp, #4
 8007604:	f7ff fd5a 	bl	80070bc <__lo0bits>
 8007608:	9b01      	ldr	r3, [sp, #4]
 800760a:	6163      	str	r3, [r4, #20]
 800760c:	2201      	movs	r2, #1
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	3020      	adds	r0, #32
 8007612:	e7e3      	b.n	80075dc <__d2b+0x60>
 8007614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800761c:	f8c9 0000 	str.w	r0, [r9]
 8007620:	6918      	ldr	r0, [r3, #16]
 8007622:	f7ff fd2b 	bl	800707c <__hi0bits>
 8007626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800762a:	e7df      	b.n	80075ec <__d2b+0x70>
 800762c:	0800828b 	.word	0x0800828b
 8007630:	080082fc 	.word	0x080082fc

08007634 <_calloc_r>:
 8007634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007636:	fba1 2402 	umull	r2, r4, r1, r2
 800763a:	b94c      	cbnz	r4, 8007650 <_calloc_r+0x1c>
 800763c:	4611      	mov	r1, r2
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	f000 f87a 	bl	8007738 <_malloc_r>
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	4605      	mov	r5, r0
 8007648:	b930      	cbnz	r0, 8007658 <_calloc_r+0x24>
 800764a:	4628      	mov	r0, r5
 800764c:	b003      	add	sp, #12
 800764e:	bd30      	pop	{r4, r5, pc}
 8007650:	220c      	movs	r2, #12
 8007652:	6002      	str	r2, [r0, #0]
 8007654:	2500      	movs	r5, #0
 8007656:	e7f8      	b.n	800764a <_calloc_r+0x16>
 8007658:	4621      	mov	r1, r4
 800765a:	f7fe f867 	bl	800572c <memset>
 800765e:	e7f4      	b.n	800764a <_calloc_r+0x16>

08007660 <_free_r>:
 8007660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007662:	2900      	cmp	r1, #0
 8007664:	d044      	beq.n	80076f0 <_free_r+0x90>
 8007666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766a:	9001      	str	r0, [sp, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f1a1 0404 	sub.w	r4, r1, #4
 8007672:	bfb8      	it	lt
 8007674:	18e4      	addlt	r4, r4, r3
 8007676:	f000 fcdf 	bl	8008038 <__malloc_lock>
 800767a:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <_free_r+0x94>)
 800767c:	9801      	ldr	r0, [sp, #4]
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	b933      	cbnz	r3, 8007690 <_free_r+0x30>
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	6014      	str	r4, [r2, #0]
 8007686:	b003      	add	sp, #12
 8007688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800768c:	f000 bcda 	b.w	8008044 <__malloc_unlock>
 8007690:	42a3      	cmp	r3, r4
 8007692:	d908      	bls.n	80076a6 <_free_r+0x46>
 8007694:	6825      	ldr	r5, [r4, #0]
 8007696:	1961      	adds	r1, r4, r5
 8007698:	428b      	cmp	r3, r1
 800769a:	bf01      	itttt	eq
 800769c:	6819      	ldreq	r1, [r3, #0]
 800769e:	685b      	ldreq	r3, [r3, #4]
 80076a0:	1949      	addeq	r1, r1, r5
 80076a2:	6021      	streq	r1, [r4, #0]
 80076a4:	e7ed      	b.n	8007682 <_free_r+0x22>
 80076a6:	461a      	mov	r2, r3
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	b10b      	cbz	r3, 80076b0 <_free_r+0x50>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d9fa      	bls.n	80076a6 <_free_r+0x46>
 80076b0:	6811      	ldr	r1, [r2, #0]
 80076b2:	1855      	adds	r5, r2, r1
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d10b      	bne.n	80076d0 <_free_r+0x70>
 80076b8:	6824      	ldr	r4, [r4, #0]
 80076ba:	4421      	add	r1, r4
 80076bc:	1854      	adds	r4, r2, r1
 80076be:	42a3      	cmp	r3, r4
 80076c0:	6011      	str	r1, [r2, #0]
 80076c2:	d1e0      	bne.n	8007686 <_free_r+0x26>
 80076c4:	681c      	ldr	r4, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	4421      	add	r1, r4
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	e7da      	b.n	8007686 <_free_r+0x26>
 80076d0:	d902      	bls.n	80076d8 <_free_r+0x78>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	e7d6      	b.n	8007686 <_free_r+0x26>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf04      	itt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	bf04      	itt	eq
 80076e8:	1949      	addeq	r1, r1, r5
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	6054      	str	r4, [r2, #4]
 80076ee:	e7ca      	b.n	8007686 <_free_r+0x26>
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	2000032c 	.word	0x2000032c

080076f8 <sbrk_aligned>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	4e0e      	ldr	r6, [pc, #56]	; (8007734 <sbrk_aligned+0x3c>)
 80076fc:	460c      	mov	r4, r1
 80076fe:	6831      	ldr	r1, [r6, #0]
 8007700:	4605      	mov	r5, r0
 8007702:	b911      	cbnz	r1, 800770a <sbrk_aligned+0x12>
 8007704:	f000 f9e6 	bl	8007ad4 <_sbrk_r>
 8007708:	6030      	str	r0, [r6, #0]
 800770a:	4621      	mov	r1, r4
 800770c:	4628      	mov	r0, r5
 800770e:	f000 f9e1 	bl	8007ad4 <_sbrk_r>
 8007712:	1c43      	adds	r3, r0, #1
 8007714:	d00a      	beq.n	800772c <sbrk_aligned+0x34>
 8007716:	1cc4      	adds	r4, r0, #3
 8007718:	f024 0403 	bic.w	r4, r4, #3
 800771c:	42a0      	cmp	r0, r4
 800771e:	d007      	beq.n	8007730 <sbrk_aligned+0x38>
 8007720:	1a21      	subs	r1, r4, r0
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f9d6 	bl	8007ad4 <_sbrk_r>
 8007728:	3001      	adds	r0, #1
 800772a:	d101      	bne.n	8007730 <sbrk_aligned+0x38>
 800772c:	f04f 34ff 	mov.w	r4, #4294967295
 8007730:	4620      	mov	r0, r4
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	20000330 	.word	0x20000330

08007738 <_malloc_r>:
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	1ccd      	adds	r5, r1, #3
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	2d00      	cmp	r5, #0
 800774c:	4607      	mov	r7, r0
 800774e:	db01      	blt.n	8007754 <_malloc_r+0x1c>
 8007750:	42a9      	cmp	r1, r5
 8007752:	d905      	bls.n	8007760 <_malloc_r+0x28>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	2600      	movs	r6, #0
 800775a:	4630      	mov	r0, r6
 800775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007760:	4e2e      	ldr	r6, [pc, #184]	; (800781c <_malloc_r+0xe4>)
 8007762:	f000 fc69 	bl	8008038 <__malloc_lock>
 8007766:	6833      	ldr	r3, [r6, #0]
 8007768:	461c      	mov	r4, r3
 800776a:	bb34      	cbnz	r4, 80077ba <_malloc_r+0x82>
 800776c:	4629      	mov	r1, r5
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ffc2 	bl	80076f8 <sbrk_aligned>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	4604      	mov	r4, r0
 8007778:	d14d      	bne.n	8007816 <_malloc_r+0xde>
 800777a:	6834      	ldr	r4, [r6, #0]
 800777c:	4626      	mov	r6, r4
 800777e:	2e00      	cmp	r6, #0
 8007780:	d140      	bne.n	8007804 <_malloc_r+0xcc>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	4631      	mov	r1, r6
 8007786:	4638      	mov	r0, r7
 8007788:	eb04 0803 	add.w	r8, r4, r3
 800778c:	f000 f9a2 	bl	8007ad4 <_sbrk_r>
 8007790:	4580      	cmp	r8, r0
 8007792:	d13a      	bne.n	800780a <_malloc_r+0xd2>
 8007794:	6821      	ldr	r1, [r4, #0]
 8007796:	3503      	adds	r5, #3
 8007798:	1a6d      	subs	r5, r5, r1
 800779a:	f025 0503 	bic.w	r5, r5, #3
 800779e:	3508      	adds	r5, #8
 80077a0:	2d0c      	cmp	r5, #12
 80077a2:	bf38      	it	cc
 80077a4:	250c      	movcc	r5, #12
 80077a6:	4629      	mov	r1, r5
 80077a8:	4638      	mov	r0, r7
 80077aa:	f7ff ffa5 	bl	80076f8 <sbrk_aligned>
 80077ae:	3001      	adds	r0, #1
 80077b0:	d02b      	beq.n	800780a <_malloc_r+0xd2>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	442b      	add	r3, r5
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	e00e      	b.n	80077d8 <_malloc_r+0xa0>
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	1b52      	subs	r2, r2, r5
 80077be:	d41e      	bmi.n	80077fe <_malloc_r+0xc6>
 80077c0:	2a0b      	cmp	r2, #11
 80077c2:	d916      	bls.n	80077f2 <_malloc_r+0xba>
 80077c4:	1961      	adds	r1, r4, r5
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	6025      	str	r5, [r4, #0]
 80077ca:	bf18      	it	ne
 80077cc:	6059      	strne	r1, [r3, #4]
 80077ce:	6863      	ldr	r3, [r4, #4]
 80077d0:	bf08      	it	eq
 80077d2:	6031      	streq	r1, [r6, #0]
 80077d4:	5162      	str	r2, [r4, r5]
 80077d6:	604b      	str	r3, [r1, #4]
 80077d8:	4638      	mov	r0, r7
 80077da:	f104 060b 	add.w	r6, r4, #11
 80077de:	f000 fc31 	bl	8008044 <__malloc_unlock>
 80077e2:	f026 0607 	bic.w	r6, r6, #7
 80077e6:	1d23      	adds	r3, r4, #4
 80077e8:	1af2      	subs	r2, r6, r3
 80077ea:	d0b6      	beq.n	800775a <_malloc_r+0x22>
 80077ec:	1b9b      	subs	r3, r3, r6
 80077ee:	50a3      	str	r3, [r4, r2]
 80077f0:	e7b3      	b.n	800775a <_malloc_r+0x22>
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	bf0c      	ite	eq
 80077f8:	6032      	streq	r2, [r6, #0]
 80077fa:	605a      	strne	r2, [r3, #4]
 80077fc:	e7ec      	b.n	80077d8 <_malloc_r+0xa0>
 80077fe:	4623      	mov	r3, r4
 8007800:	6864      	ldr	r4, [r4, #4]
 8007802:	e7b2      	b.n	800776a <_malloc_r+0x32>
 8007804:	4634      	mov	r4, r6
 8007806:	6876      	ldr	r6, [r6, #4]
 8007808:	e7b9      	b.n	800777e <_malloc_r+0x46>
 800780a:	230c      	movs	r3, #12
 800780c:	603b      	str	r3, [r7, #0]
 800780e:	4638      	mov	r0, r7
 8007810:	f000 fc18 	bl	8008044 <__malloc_unlock>
 8007814:	e7a1      	b.n	800775a <_malloc_r+0x22>
 8007816:	6025      	str	r5, [r4, #0]
 8007818:	e7de      	b.n	80077d8 <_malloc_r+0xa0>
 800781a:	bf00      	nop
 800781c:	2000032c 	.word	0x2000032c

08007820 <__sfputc_r>:
 8007820:	6893      	ldr	r3, [r2, #8]
 8007822:	3b01      	subs	r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	b410      	push	{r4}
 8007828:	6093      	str	r3, [r2, #8]
 800782a:	da08      	bge.n	800783e <__sfputc_r+0x1e>
 800782c:	6994      	ldr	r4, [r2, #24]
 800782e:	42a3      	cmp	r3, r4
 8007830:	db01      	blt.n	8007836 <__sfputc_r+0x16>
 8007832:	290a      	cmp	r1, #10
 8007834:	d103      	bne.n	800783e <__sfputc_r+0x1e>
 8007836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800783a:	f000 b99f 	b.w	8007b7c <__swbuf_r>
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	1c58      	adds	r0, r3, #1
 8007842:	6010      	str	r0, [r2, #0]
 8007844:	7019      	strb	r1, [r3, #0]
 8007846:	4608      	mov	r0, r1
 8007848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784c:	4770      	bx	lr

0800784e <__sfputs_r>:
 800784e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	4614      	mov	r4, r2
 8007856:	18d5      	adds	r5, r2, r3
 8007858:	42ac      	cmp	r4, r5
 800785a:	d101      	bne.n	8007860 <__sfputs_r+0x12>
 800785c:	2000      	movs	r0, #0
 800785e:	e007      	b.n	8007870 <__sfputs_r+0x22>
 8007860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007864:	463a      	mov	r2, r7
 8007866:	4630      	mov	r0, r6
 8007868:	f7ff ffda 	bl	8007820 <__sfputc_r>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d1f3      	bne.n	8007858 <__sfputs_r+0xa>
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007874 <_vfiprintf_r>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	460d      	mov	r5, r1
 800787a:	b09d      	sub	sp, #116	; 0x74
 800787c:	4614      	mov	r4, r2
 800787e:	4698      	mov	r8, r3
 8007880:	4606      	mov	r6, r0
 8007882:	b118      	cbz	r0, 800788c <_vfiprintf_r+0x18>
 8007884:	6983      	ldr	r3, [r0, #24]
 8007886:	b90b      	cbnz	r3, 800788c <_vfiprintf_r+0x18>
 8007888:	f7ff fa94 	bl	8006db4 <__sinit>
 800788c:	4b89      	ldr	r3, [pc, #548]	; (8007ab4 <_vfiprintf_r+0x240>)
 800788e:	429d      	cmp	r5, r3
 8007890:	d11b      	bne.n	80078ca <_vfiprintf_r+0x56>
 8007892:	6875      	ldr	r5, [r6, #4]
 8007894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	d405      	bmi.n	80078a6 <_vfiprintf_r+0x32>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_vfiprintf_r+0x32>
 80078a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078a2:	f7ff fb2a 	bl	8006efa <__retarget_lock_acquire_recursive>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	d501      	bpl.n	80078b0 <_vfiprintf_r+0x3c>
 80078ac:	692b      	ldr	r3, [r5, #16]
 80078ae:	b9eb      	cbnz	r3, 80078ec <_vfiprintf_r+0x78>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 f9c6 	bl	8007c44 <__swsetup_r>
 80078b8:	b1c0      	cbz	r0, 80078ec <_vfiprintf_r+0x78>
 80078ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078bc:	07dc      	lsls	r4, r3, #31
 80078be:	d50e      	bpl.n	80078de <_vfiprintf_r+0x6a>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	b01d      	add	sp, #116	; 0x74
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	4b7b      	ldr	r3, [pc, #492]	; (8007ab8 <_vfiprintf_r+0x244>)
 80078cc:	429d      	cmp	r5, r3
 80078ce:	d101      	bne.n	80078d4 <_vfiprintf_r+0x60>
 80078d0:	68b5      	ldr	r5, [r6, #8]
 80078d2:	e7df      	b.n	8007894 <_vfiprintf_r+0x20>
 80078d4:	4b79      	ldr	r3, [pc, #484]	; (8007abc <_vfiprintf_r+0x248>)
 80078d6:	429d      	cmp	r5, r3
 80078d8:	bf08      	it	eq
 80078da:	68f5      	ldreq	r5, [r6, #12]
 80078dc:	e7da      	b.n	8007894 <_vfiprintf_r+0x20>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	0598      	lsls	r0, r3, #22
 80078e2:	d4ed      	bmi.n	80078c0 <_vfiprintf_r+0x4c>
 80078e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e6:	f7ff fb09 	bl	8006efc <__retarget_lock_release_recursive>
 80078ea:	e7e9      	b.n	80078c0 <_vfiprintf_r+0x4c>
 80078ec:	2300      	movs	r3, #0
 80078ee:	9309      	str	r3, [sp, #36]	; 0x24
 80078f0:	2320      	movs	r3, #32
 80078f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fa:	2330      	movs	r3, #48	; 0x30
 80078fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ac0 <_vfiprintf_r+0x24c>
 8007900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007904:	f04f 0901 	mov.w	r9, #1
 8007908:	4623      	mov	r3, r4
 800790a:	469a      	mov	sl, r3
 800790c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007910:	b10a      	cbz	r2, 8007916 <_vfiprintf_r+0xa2>
 8007912:	2a25      	cmp	r2, #37	; 0x25
 8007914:	d1f9      	bne.n	800790a <_vfiprintf_r+0x96>
 8007916:	ebba 0b04 	subs.w	fp, sl, r4
 800791a:	d00b      	beq.n	8007934 <_vfiprintf_r+0xc0>
 800791c:	465b      	mov	r3, fp
 800791e:	4622      	mov	r2, r4
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ff93 	bl	800784e <__sfputs_r>
 8007928:	3001      	adds	r0, #1
 800792a:	f000 80aa 	beq.w	8007a82 <_vfiprintf_r+0x20e>
 800792e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007930:	445a      	add	r2, fp
 8007932:	9209      	str	r2, [sp, #36]	; 0x24
 8007934:	f89a 3000 	ldrb.w	r3, [sl]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80a2 	beq.w	8007a82 <_vfiprintf_r+0x20e>
 800793e:	2300      	movs	r3, #0
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007948:	f10a 0a01 	add.w	sl, sl, #1
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	9307      	str	r3, [sp, #28]
 8007950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007954:	931a      	str	r3, [sp, #104]	; 0x68
 8007956:	4654      	mov	r4, sl
 8007958:	2205      	movs	r2, #5
 800795a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795e:	4858      	ldr	r0, [pc, #352]	; (8007ac0 <_vfiprintf_r+0x24c>)
 8007960:	f7f8 fc46 	bl	80001f0 <memchr>
 8007964:	9a04      	ldr	r2, [sp, #16]
 8007966:	b9d8      	cbnz	r0, 80079a0 <_vfiprintf_r+0x12c>
 8007968:	06d1      	lsls	r1, r2, #27
 800796a:	bf44      	itt	mi
 800796c:	2320      	movmi	r3, #32
 800796e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007972:	0713      	lsls	r3, r2, #28
 8007974:	bf44      	itt	mi
 8007976:	232b      	movmi	r3, #43	; 0x2b
 8007978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800797c:	f89a 3000 	ldrb.w	r3, [sl]
 8007980:	2b2a      	cmp	r3, #42	; 0x2a
 8007982:	d015      	beq.n	80079b0 <_vfiprintf_r+0x13c>
 8007984:	9a07      	ldr	r2, [sp, #28]
 8007986:	4654      	mov	r4, sl
 8007988:	2000      	movs	r0, #0
 800798a:	f04f 0c0a 	mov.w	ip, #10
 800798e:	4621      	mov	r1, r4
 8007990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007994:	3b30      	subs	r3, #48	; 0x30
 8007996:	2b09      	cmp	r3, #9
 8007998:	d94e      	bls.n	8007a38 <_vfiprintf_r+0x1c4>
 800799a:	b1b0      	cbz	r0, 80079ca <_vfiprintf_r+0x156>
 800799c:	9207      	str	r2, [sp, #28]
 800799e:	e014      	b.n	80079ca <_vfiprintf_r+0x156>
 80079a0:	eba0 0308 	sub.w	r3, r0, r8
 80079a4:	fa09 f303 	lsl.w	r3, r9, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	46a2      	mov	sl, r4
 80079ae:	e7d2      	b.n	8007956 <_vfiprintf_r+0xe2>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	1d19      	adds	r1, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	9103      	str	r1, [sp, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfbb      	ittet	lt
 80079bc:	425b      	neglt	r3, r3
 80079be:	f042 0202 	orrlt.w	r2, r2, #2
 80079c2:	9307      	strge	r3, [sp, #28]
 80079c4:	9307      	strlt	r3, [sp, #28]
 80079c6:	bfb8      	it	lt
 80079c8:	9204      	strlt	r2, [sp, #16]
 80079ca:	7823      	ldrb	r3, [r4, #0]
 80079cc:	2b2e      	cmp	r3, #46	; 0x2e
 80079ce:	d10c      	bne.n	80079ea <_vfiprintf_r+0x176>
 80079d0:	7863      	ldrb	r3, [r4, #1]
 80079d2:	2b2a      	cmp	r3, #42	; 0x2a
 80079d4:	d135      	bne.n	8007a42 <_vfiprintf_r+0x1ce>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	1d1a      	adds	r2, r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	9203      	str	r2, [sp, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfb8      	it	lt
 80079e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e6:	3402      	adds	r4, #2
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ad0 <_vfiprintf_r+0x25c>
 80079ee:	7821      	ldrb	r1, [r4, #0]
 80079f0:	2203      	movs	r2, #3
 80079f2:	4650      	mov	r0, sl
 80079f4:	f7f8 fbfc 	bl	80001f0 <memchr>
 80079f8:	b140      	cbz	r0, 8007a0c <_vfiprintf_r+0x198>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	eba0 000a 	sub.w	r0, r0, sl
 8007a00:	fa03 f000 	lsl.w	r0, r3, r0
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	4303      	orrs	r3, r0
 8007a08:	3401      	adds	r4, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	482c      	ldr	r0, [pc, #176]	; (8007ac4 <_vfiprintf_r+0x250>)
 8007a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a16:	2206      	movs	r2, #6
 8007a18:	f7f8 fbea 	bl	80001f0 <memchr>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d03f      	beq.n	8007aa0 <_vfiprintf_r+0x22c>
 8007a20:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <_vfiprintf_r+0x254>)
 8007a22:	bb1b      	cbnz	r3, 8007a6c <_vfiprintf_r+0x1f8>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	3307      	adds	r3, #7
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	443b      	add	r3, r7
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	e767      	b.n	8007908 <_vfiprintf_r+0x94>
 8007a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	2001      	movs	r0, #1
 8007a40:	e7a5      	b.n	800798e <_vfiprintf_r+0x11a>
 8007a42:	2300      	movs	r3, #0
 8007a44:	3401      	adds	r4, #1
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f04f 0c0a 	mov.w	ip, #10
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a54:	3a30      	subs	r2, #48	; 0x30
 8007a56:	2a09      	cmp	r2, #9
 8007a58:	d903      	bls.n	8007a62 <_vfiprintf_r+0x1ee>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0c5      	beq.n	80079ea <_vfiprintf_r+0x176>
 8007a5e:	9105      	str	r1, [sp, #20]
 8007a60:	e7c3      	b.n	80079ea <_vfiprintf_r+0x176>
 8007a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a66:	4604      	mov	r4, r0
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e7f0      	b.n	8007a4e <_vfiprintf_r+0x1da>
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	462a      	mov	r2, r5
 8007a72:	4b16      	ldr	r3, [pc, #88]	; (8007acc <_vfiprintf_r+0x258>)
 8007a74:	a904      	add	r1, sp, #16
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7fd ff00 	bl	800587c <_printf_float>
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	1c78      	adds	r0, r7, #1
 8007a80:	d1d6      	bne.n	8007a30 <_vfiprintf_r+0x1bc>
 8007a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	d405      	bmi.n	8007a94 <_vfiprintf_r+0x220>
 8007a88:	89ab      	ldrh	r3, [r5, #12]
 8007a8a:	059a      	lsls	r2, r3, #22
 8007a8c:	d402      	bmi.n	8007a94 <_vfiprintf_r+0x220>
 8007a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a90:	f7ff fa34 	bl	8006efc <__retarget_lock_release_recursive>
 8007a94:	89ab      	ldrh	r3, [r5, #12]
 8007a96:	065b      	lsls	r3, r3, #25
 8007a98:	f53f af12 	bmi.w	80078c0 <_vfiprintf_r+0x4c>
 8007a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a9e:	e711      	b.n	80078c4 <_vfiprintf_r+0x50>
 8007aa0:	ab03      	add	r3, sp, #12
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <_vfiprintf_r+0x258>)
 8007aa8:	a904      	add	r1, sp, #16
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7fe f98a 	bl	8005dc4 <_printf_i>
 8007ab0:	e7e4      	b.n	8007a7c <_vfiprintf_r+0x208>
 8007ab2:	bf00      	nop
 8007ab4:	080082bc 	.word	0x080082bc
 8007ab8:	080082dc 	.word	0x080082dc
 8007abc:	0800829c 	.word	0x0800829c
 8007ac0:	08008454 	.word	0x08008454
 8007ac4:	0800845e 	.word	0x0800845e
 8007ac8:	0800587d 	.word	0x0800587d
 8007acc:	0800784f 	.word	0x0800784f
 8007ad0:	0800845a 	.word	0x0800845a

08007ad4 <_sbrk_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d06      	ldr	r5, [pc, #24]	; (8007af0 <_sbrk_r+0x1c>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	f7f9 fd8a 	bl	80015f8 <_sbrk>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_sbrk_r+0x1a>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_sbrk_r+0x1a>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20000334 	.word	0x20000334

08007af4 <__sread>:
 8007af4:	b510      	push	{r4, lr}
 8007af6:	460c      	mov	r4, r1
 8007af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afc:	f000 faa8 	bl	8008050 <_read_r>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	bfab      	itete	ge
 8007b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b06:	89a3      	ldrhlt	r3, [r4, #12]
 8007b08:	181b      	addge	r3, r3, r0
 8007b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b0e:	bfac      	ite	ge
 8007b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b12:	81a3      	strhlt	r3, [r4, #12]
 8007b14:	bd10      	pop	{r4, pc}

08007b16 <__swrite>:
 8007b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1a:	461f      	mov	r7, r3
 8007b1c:	898b      	ldrh	r3, [r1, #12]
 8007b1e:	05db      	lsls	r3, r3, #23
 8007b20:	4605      	mov	r5, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	4616      	mov	r6, r2
 8007b26:	d505      	bpl.n	8007b34 <__swrite+0x1e>
 8007b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f000 f9f8 	bl	8007f24 <_lseek_r>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	4632      	mov	r2, r6
 8007b42:	463b      	mov	r3, r7
 8007b44:	4628      	mov	r0, r5
 8007b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4a:	f000 b869 	b.w	8007c20 <_write_r>

08007b4e <__sseek>:
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	460c      	mov	r4, r1
 8007b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b56:	f000 f9e5 	bl	8007f24 <_lseek_r>
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	bf15      	itete	ne
 8007b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b6a:	81a3      	strheq	r3, [r4, #12]
 8007b6c:	bf18      	it	ne
 8007b6e:	81a3      	strhne	r3, [r4, #12]
 8007b70:	bd10      	pop	{r4, pc}

08007b72 <__sclose>:
 8007b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b76:	f000 b8f1 	b.w	8007d5c <_close_r>
	...

08007b7c <__swbuf_r>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	460e      	mov	r6, r1
 8007b80:	4614      	mov	r4, r2
 8007b82:	4605      	mov	r5, r0
 8007b84:	b118      	cbz	r0, 8007b8e <__swbuf_r+0x12>
 8007b86:	6983      	ldr	r3, [r0, #24]
 8007b88:	b90b      	cbnz	r3, 8007b8e <__swbuf_r+0x12>
 8007b8a:	f7ff f913 	bl	8006db4 <__sinit>
 8007b8e:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <__swbuf_r+0x98>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	d12b      	bne.n	8007bec <__swbuf_r+0x70>
 8007b94:	686c      	ldr	r4, [r5, #4]
 8007b96:	69a3      	ldr	r3, [r4, #24]
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	071a      	lsls	r2, r3, #28
 8007b9e:	d52f      	bpl.n	8007c00 <__swbuf_r+0x84>
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	b36b      	cbz	r3, 8007c00 <__swbuf_r+0x84>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	6820      	ldr	r0, [r4, #0]
 8007ba8:	1ac0      	subs	r0, r0, r3
 8007baa:	6963      	ldr	r3, [r4, #20]
 8007bac:	b2f6      	uxtb	r6, r6
 8007bae:	4283      	cmp	r3, r0
 8007bb0:	4637      	mov	r7, r6
 8007bb2:	dc04      	bgt.n	8007bbe <__swbuf_r+0x42>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f966 	bl	8007e88 <_fflush_r>
 8007bbc:	bb30      	cbnz	r0, 8007c0c <__swbuf_r+0x90>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	701e      	strb	r6, [r3, #0]
 8007bcc:	6963      	ldr	r3, [r4, #20]
 8007bce:	3001      	adds	r0, #1
 8007bd0:	4283      	cmp	r3, r0
 8007bd2:	d004      	beq.n	8007bde <__swbuf_r+0x62>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	07db      	lsls	r3, r3, #31
 8007bd8:	d506      	bpl.n	8007be8 <__swbuf_r+0x6c>
 8007bda:	2e0a      	cmp	r6, #10
 8007bdc:	d104      	bne.n	8007be8 <__swbuf_r+0x6c>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f951 	bl	8007e88 <_fflush_r>
 8007be6:	b988      	cbnz	r0, 8007c0c <__swbuf_r+0x90>
 8007be8:	4638      	mov	r0, r7
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <__swbuf_r+0x9c>)
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d101      	bne.n	8007bf6 <__swbuf_r+0x7a>
 8007bf2:	68ac      	ldr	r4, [r5, #8]
 8007bf4:	e7cf      	b.n	8007b96 <__swbuf_r+0x1a>
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <__swbuf_r+0xa0>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	bf08      	it	eq
 8007bfc:	68ec      	ldreq	r4, [r5, #12]
 8007bfe:	e7ca      	b.n	8007b96 <__swbuf_r+0x1a>
 8007c00:	4621      	mov	r1, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f81e 	bl	8007c44 <__swsetup_r>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d0cb      	beq.n	8007ba4 <__swbuf_r+0x28>
 8007c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c10:	e7ea      	b.n	8007be8 <__swbuf_r+0x6c>
 8007c12:	bf00      	nop
 8007c14:	080082bc 	.word	0x080082bc
 8007c18:	080082dc 	.word	0x080082dc
 8007c1c:	0800829c 	.word	0x0800829c

08007c20 <_write_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <_write_r+0x20>)
 8007c24:	4604      	mov	r4, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	602a      	str	r2, [r5, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f7f9 fc91 	bl	8001556 <_write>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_write_r+0x1e>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_write_r+0x1e>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20000334 	.word	0x20000334

08007c44 <__swsetup_r>:
 8007c44:	4b32      	ldr	r3, [pc, #200]	; (8007d10 <__swsetup_r+0xcc>)
 8007c46:	b570      	push	{r4, r5, r6, lr}
 8007c48:	681d      	ldr	r5, [r3, #0]
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	b125      	cbz	r5, 8007c5a <__swsetup_r+0x16>
 8007c50:	69ab      	ldr	r3, [r5, #24]
 8007c52:	b913      	cbnz	r3, 8007c5a <__swsetup_r+0x16>
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff f8ad 	bl	8006db4 <__sinit>
 8007c5a:	4b2e      	ldr	r3, [pc, #184]	; (8007d14 <__swsetup_r+0xd0>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d10f      	bne.n	8007c80 <__swsetup_r+0x3c>
 8007c60:	686c      	ldr	r4, [r5, #4]
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c68:	0719      	lsls	r1, r3, #28
 8007c6a:	d42c      	bmi.n	8007cc6 <__swsetup_r+0x82>
 8007c6c:	06dd      	lsls	r5, r3, #27
 8007c6e:	d411      	bmi.n	8007c94 <__swsetup_r+0x50>
 8007c70:	2309      	movs	r3, #9
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	e03e      	b.n	8007cfe <__swsetup_r+0xba>
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <__swsetup_r+0xd4>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d101      	bne.n	8007c8a <__swsetup_r+0x46>
 8007c86:	68ac      	ldr	r4, [r5, #8]
 8007c88:	e7eb      	b.n	8007c62 <__swsetup_r+0x1e>
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <__swsetup_r+0xd8>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	bf08      	it	eq
 8007c90:	68ec      	ldreq	r4, [r5, #12]
 8007c92:	e7e6      	b.n	8007c62 <__swsetup_r+0x1e>
 8007c94:	0758      	lsls	r0, r3, #29
 8007c96:	d512      	bpl.n	8007cbe <__swsetup_r+0x7a>
 8007c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9a:	b141      	cbz	r1, 8007cae <__swsetup_r+0x6a>
 8007c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca0:	4299      	cmp	r1, r3
 8007ca2:	d002      	beq.n	8007caa <__swsetup_r+0x66>
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7ff fcdb 	bl	8007660 <_free_r>
 8007caa:	2300      	movs	r3, #0
 8007cac:	6363      	str	r3, [r4, #52]	; 0x34
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6063      	str	r3, [r4, #4]
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f043 0308 	orr.w	r3, r3, #8
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	b94b      	cbnz	r3, 8007cde <__swsetup_r+0x9a>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd4:	d003      	beq.n	8007cde <__swsetup_r+0x9a>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f000 f95b 	bl	8007f94 <__smakebuf_r>
 8007cde:	89a0      	ldrh	r0, [r4, #12]
 8007ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ce4:	f010 0301 	ands.w	r3, r0, #1
 8007ce8:	d00a      	beq.n	8007d00 <__swsetup_r+0xbc>
 8007cea:	2300      	movs	r3, #0
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6963      	ldr	r3, [r4, #20]
 8007cf0:	425b      	negs	r3, r3
 8007cf2:	61a3      	str	r3, [r4, #24]
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	b943      	cbnz	r3, 8007d0a <__swsetup_r+0xc6>
 8007cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cfc:	d1ba      	bne.n	8007c74 <__swsetup_r+0x30>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	0781      	lsls	r1, r0, #30
 8007d02:	bf58      	it	pl
 8007d04:	6963      	ldrpl	r3, [r4, #20]
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	e7f4      	b.n	8007cf4 <__swsetup_r+0xb0>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e7f7      	b.n	8007cfe <__swsetup_r+0xba>
 8007d0e:	bf00      	nop
 8007d10:	2000000c 	.word	0x2000000c
 8007d14:	080082bc 	.word	0x080082bc
 8007d18:	080082dc 	.word	0x080082dc
 8007d1c:	0800829c 	.word	0x0800829c

08007d20 <__assert_func>:
 8007d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d22:	4614      	mov	r4, r2
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <__assert_func+0x2c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	68d8      	ldr	r0, [r3, #12]
 8007d2e:	b14c      	cbz	r4, 8007d44 <__assert_func+0x24>
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <__assert_func+0x30>)
 8007d32:	9100      	str	r1, [sp, #0]
 8007d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d38:	4906      	ldr	r1, [pc, #24]	; (8007d54 <__assert_func+0x34>)
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	f000 f8e0 	bl	8007f00 <fiprintf>
 8007d40:	f000 f9a5 	bl	800808e <abort>
 8007d44:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <__assert_func+0x38>)
 8007d46:	461c      	mov	r4, r3
 8007d48:	e7f3      	b.n	8007d32 <__assert_func+0x12>
 8007d4a:	bf00      	nop
 8007d4c:	2000000c 	.word	0x2000000c
 8007d50:	08008465 	.word	0x08008465
 8007d54:	08008472 	.word	0x08008472
 8007d58:	080084a0 	.word	0x080084a0

08007d5c <_close_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_close_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 fc11 	bl	800158e <_close>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_close_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_close_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20000334 	.word	0x20000334

08007d7c <__sflush_r>:
 8007d7c:	898a      	ldrh	r2, [r1, #12]
 8007d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	0710      	lsls	r0, r2, #28
 8007d86:	460c      	mov	r4, r1
 8007d88:	d458      	bmi.n	8007e3c <__sflush_r+0xc0>
 8007d8a:	684b      	ldr	r3, [r1, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dc05      	bgt.n	8007d9c <__sflush_r+0x20>
 8007d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dc02      	bgt.n	8007d9c <__sflush_r+0x20>
 8007d96:	2000      	movs	r0, #0
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	d0f9      	beq.n	8007d96 <__sflush_r+0x1a>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007da8:	682f      	ldr	r7, [r5, #0]
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	d032      	beq.n	8007e14 <__sflush_r+0x98>
 8007dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	075a      	lsls	r2, r3, #29
 8007db4:	d505      	bpl.n	8007dc2 <__sflush_r+0x46>
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	1ac0      	subs	r0, r0, r3
 8007dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dbc:	b10b      	cbz	r3, 8007dc2 <__sflush_r+0x46>
 8007dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dc0:	1ac0      	subs	r0, r0, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc8:	6a21      	ldr	r1, [r4, #32]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b0      	blx	r6
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	d106      	bne.n	8007de2 <__sflush_r+0x66>
 8007dd4:	6829      	ldr	r1, [r5, #0]
 8007dd6:	291d      	cmp	r1, #29
 8007dd8:	d82c      	bhi.n	8007e34 <__sflush_r+0xb8>
 8007dda:	4a2a      	ldr	r2, [pc, #168]	; (8007e84 <__sflush_r+0x108>)
 8007ddc:	40ca      	lsrs	r2, r1
 8007dde:	07d6      	lsls	r6, r2, #31
 8007de0:	d528      	bpl.n	8007e34 <__sflush_r+0xb8>
 8007de2:	2200      	movs	r2, #0
 8007de4:	6062      	str	r2, [r4, #4]
 8007de6:	04d9      	lsls	r1, r3, #19
 8007de8:	6922      	ldr	r2, [r4, #16]
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	d504      	bpl.n	8007df8 <__sflush_r+0x7c>
 8007dee:	1c42      	adds	r2, r0, #1
 8007df0:	d101      	bne.n	8007df6 <__sflush_r+0x7a>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	b903      	cbnz	r3, 8007df8 <__sflush_r+0x7c>
 8007df6:	6560      	str	r0, [r4, #84]	; 0x54
 8007df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfa:	602f      	str	r7, [r5, #0]
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	d0ca      	beq.n	8007d96 <__sflush_r+0x1a>
 8007e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e04:	4299      	cmp	r1, r3
 8007e06:	d002      	beq.n	8007e0e <__sflush_r+0x92>
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f7ff fc29 	bl	8007660 <_free_r>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	6360      	str	r0, [r4, #52]	; 0x34
 8007e12:	e7c1      	b.n	8007d98 <__sflush_r+0x1c>
 8007e14:	6a21      	ldr	r1, [r4, #32]
 8007e16:	2301      	movs	r3, #1
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b0      	blx	r6
 8007e1c:	1c41      	adds	r1, r0, #1
 8007e1e:	d1c7      	bne.n	8007db0 <__sflush_r+0x34>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0c4      	beq.n	8007db0 <__sflush_r+0x34>
 8007e26:	2b1d      	cmp	r3, #29
 8007e28:	d001      	beq.n	8007e2e <__sflush_r+0xb2>
 8007e2a:	2b16      	cmp	r3, #22
 8007e2c:	d101      	bne.n	8007e32 <__sflush_r+0xb6>
 8007e2e:	602f      	str	r7, [r5, #0]
 8007e30:	e7b1      	b.n	8007d96 <__sflush_r+0x1a>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	e7ad      	b.n	8007d98 <__sflush_r+0x1c>
 8007e3c:	690f      	ldr	r7, [r1, #16]
 8007e3e:	2f00      	cmp	r7, #0
 8007e40:	d0a9      	beq.n	8007d96 <__sflush_r+0x1a>
 8007e42:	0793      	lsls	r3, r2, #30
 8007e44:	680e      	ldr	r6, [r1, #0]
 8007e46:	bf08      	it	eq
 8007e48:	694b      	ldreq	r3, [r1, #20]
 8007e4a:	600f      	str	r7, [r1, #0]
 8007e4c:	bf18      	it	ne
 8007e4e:	2300      	movne	r3, #0
 8007e50:	eba6 0807 	sub.w	r8, r6, r7
 8007e54:	608b      	str	r3, [r1, #8]
 8007e56:	f1b8 0f00 	cmp.w	r8, #0
 8007e5a:	dd9c      	ble.n	8007d96 <__sflush_r+0x1a>
 8007e5c:	6a21      	ldr	r1, [r4, #32]
 8007e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e60:	4643      	mov	r3, r8
 8007e62:	463a      	mov	r2, r7
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b0      	blx	r6
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	dc06      	bgt.n	8007e7a <__sflush_r+0xfe>
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	e78e      	b.n	8007d98 <__sflush_r+0x1c>
 8007e7a:	4407      	add	r7, r0
 8007e7c:	eba8 0800 	sub.w	r8, r8, r0
 8007e80:	e7e9      	b.n	8007e56 <__sflush_r+0xda>
 8007e82:	bf00      	nop
 8007e84:	20400001 	.word	0x20400001

08007e88 <_fflush_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	690b      	ldr	r3, [r1, #16]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b913      	cbnz	r3, 8007e98 <_fflush_r+0x10>
 8007e92:	2500      	movs	r5, #0
 8007e94:	4628      	mov	r0, r5
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	b118      	cbz	r0, 8007ea2 <_fflush_r+0x1a>
 8007e9a:	6983      	ldr	r3, [r0, #24]
 8007e9c:	b90b      	cbnz	r3, 8007ea2 <_fflush_r+0x1a>
 8007e9e:	f7fe ff89 	bl	8006db4 <__sinit>
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <_fflush_r+0x6c>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	d11b      	bne.n	8007ee0 <_fflush_r+0x58>
 8007ea8:	686c      	ldr	r4, [r5, #4]
 8007eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0ef      	beq.n	8007e92 <_fflush_r+0xa>
 8007eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007eb4:	07d0      	lsls	r0, r2, #31
 8007eb6:	d404      	bmi.n	8007ec2 <_fflush_r+0x3a>
 8007eb8:	0599      	lsls	r1, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_fflush_r+0x3a>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ebe:	f7ff f81c 	bl	8006efa <__retarget_lock_acquire_recursive>
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7ff ff59 	bl	8007d7c <__sflush_r>
 8007eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ecc:	07da      	lsls	r2, r3, #31
 8007ece:	4605      	mov	r5, r0
 8007ed0:	d4e0      	bmi.n	8007e94 <_fflush_r+0xc>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	059b      	lsls	r3, r3, #22
 8007ed6:	d4dd      	bmi.n	8007e94 <_fflush_r+0xc>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eda:	f7ff f80f 	bl	8006efc <__retarget_lock_release_recursive>
 8007ede:	e7d9      	b.n	8007e94 <_fflush_r+0xc>
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <_fflush_r+0x70>)
 8007ee2:	429c      	cmp	r4, r3
 8007ee4:	d101      	bne.n	8007eea <_fflush_r+0x62>
 8007ee6:	68ac      	ldr	r4, [r5, #8]
 8007ee8:	e7df      	b.n	8007eaa <_fflush_r+0x22>
 8007eea:	4b04      	ldr	r3, [pc, #16]	; (8007efc <_fflush_r+0x74>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	bf08      	it	eq
 8007ef0:	68ec      	ldreq	r4, [r5, #12]
 8007ef2:	e7da      	b.n	8007eaa <_fflush_r+0x22>
 8007ef4:	080082bc 	.word	0x080082bc
 8007ef8:	080082dc 	.word	0x080082dc
 8007efc:	0800829c 	.word	0x0800829c

08007f00 <fiprintf>:
 8007f00:	b40e      	push	{r1, r2, r3}
 8007f02:	b503      	push	{r0, r1, lr}
 8007f04:	4601      	mov	r1, r0
 8007f06:	ab03      	add	r3, sp, #12
 8007f08:	4805      	ldr	r0, [pc, #20]	; (8007f20 <fiprintf+0x20>)
 8007f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0e:	6800      	ldr	r0, [r0, #0]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	f7ff fcaf 	bl	8007874 <_vfiprintf_r>
 8007f16:	b002      	add	sp, #8
 8007f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f1c:	b003      	add	sp, #12
 8007f1e:	4770      	bx	lr
 8007f20:	2000000c 	.word	0x2000000c

08007f24 <_lseek_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d07      	ldr	r5, [pc, #28]	; (8007f44 <_lseek_r+0x20>)
 8007f28:	4604      	mov	r4, r0
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	602a      	str	r2, [r5, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f7f9 fb52 	bl	80015dc <_lseek>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_lseek_r+0x1e>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_lseek_r+0x1e>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	20000334 	.word	0x20000334

08007f48 <__swhatbuf_r>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	460e      	mov	r6, r1
 8007f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f50:	2900      	cmp	r1, #0
 8007f52:	b096      	sub	sp, #88	; 0x58
 8007f54:	4614      	mov	r4, r2
 8007f56:	461d      	mov	r5, r3
 8007f58:	da08      	bge.n	8007f6c <__swhatbuf_r+0x24>
 8007f5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	061a      	lsls	r2, r3, #24
 8007f64:	d410      	bmi.n	8007f88 <__swhatbuf_r+0x40>
 8007f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f6a:	e00e      	b.n	8007f8a <__swhatbuf_r+0x42>
 8007f6c:	466a      	mov	r2, sp
 8007f6e:	f000 f895 	bl	800809c <_fstat_r>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	dbf1      	blt.n	8007f5a <__swhatbuf_r+0x12>
 8007f76:	9a01      	ldr	r2, [sp, #4]
 8007f78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f80:	425a      	negs	r2, r3
 8007f82:	415a      	adcs	r2, r3
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	e7ee      	b.n	8007f66 <__swhatbuf_r+0x1e>
 8007f88:	2340      	movs	r3, #64	; 0x40
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	b016      	add	sp, #88	; 0x58
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f94 <__smakebuf_r>:
 8007f94:	898b      	ldrh	r3, [r1, #12]
 8007f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f98:	079d      	lsls	r5, r3, #30
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	d507      	bpl.n	8007fb0 <__smakebuf_r+0x1c>
 8007fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	2301      	movs	r3, #1
 8007faa:	6163      	str	r3, [r4, #20]
 8007fac:	b002      	add	sp, #8
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	ab01      	add	r3, sp, #4
 8007fb2:	466a      	mov	r2, sp
 8007fb4:	f7ff ffc8 	bl	8007f48 <__swhatbuf_r>
 8007fb8:	9900      	ldr	r1, [sp, #0]
 8007fba:	4605      	mov	r5, r0
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f7ff fbbb 	bl	8007738 <_malloc_r>
 8007fc2:	b948      	cbnz	r0, 8007fd8 <__smakebuf_r+0x44>
 8007fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc8:	059a      	lsls	r2, r3, #22
 8007fca:	d4ef      	bmi.n	8007fac <__smakebuf_r+0x18>
 8007fcc:	f023 0303 	bic.w	r3, r3, #3
 8007fd0:	f043 0302 	orr.w	r3, r3, #2
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	e7e3      	b.n	8007fa0 <__smakebuf_r+0xc>
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <__smakebuf_r+0x7c>)
 8007fda:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	6020      	str	r0, [r4, #0]
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	9b00      	ldr	r3, [sp, #0]
 8007fe8:	6163      	str	r3, [r4, #20]
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	6120      	str	r0, [r4, #16]
 8007fee:	b15b      	cbz	r3, 8008008 <__smakebuf_r+0x74>
 8007ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f000 f863 	bl	80080c0 <_isatty_r>
 8007ffa:	b128      	cbz	r0, 8008008 <__smakebuf_r+0x74>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f023 0303 	bic.w	r3, r3, #3
 8008002:	f043 0301 	orr.w	r3, r3, #1
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	89a0      	ldrh	r0, [r4, #12]
 800800a:	4305      	orrs	r5, r0
 800800c:	81a5      	strh	r5, [r4, #12]
 800800e:	e7cd      	b.n	8007fac <__smakebuf_r+0x18>
 8008010:	08006d4d 	.word	0x08006d4d

08008014 <__ascii_mbtowc>:
 8008014:	b082      	sub	sp, #8
 8008016:	b901      	cbnz	r1, 800801a <__ascii_mbtowc+0x6>
 8008018:	a901      	add	r1, sp, #4
 800801a:	b142      	cbz	r2, 800802e <__ascii_mbtowc+0x1a>
 800801c:	b14b      	cbz	r3, 8008032 <__ascii_mbtowc+0x1e>
 800801e:	7813      	ldrb	r3, [r2, #0]
 8008020:	600b      	str	r3, [r1, #0]
 8008022:	7812      	ldrb	r2, [r2, #0]
 8008024:	1e10      	subs	r0, r2, #0
 8008026:	bf18      	it	ne
 8008028:	2001      	movne	r0, #1
 800802a:	b002      	add	sp, #8
 800802c:	4770      	bx	lr
 800802e:	4610      	mov	r0, r2
 8008030:	e7fb      	b.n	800802a <__ascii_mbtowc+0x16>
 8008032:	f06f 0001 	mvn.w	r0, #1
 8008036:	e7f8      	b.n	800802a <__ascii_mbtowc+0x16>

08008038 <__malloc_lock>:
 8008038:	4801      	ldr	r0, [pc, #4]	; (8008040 <__malloc_lock+0x8>)
 800803a:	f7fe bf5e 	b.w	8006efa <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	20000328 	.word	0x20000328

08008044 <__malloc_unlock>:
 8008044:	4801      	ldr	r0, [pc, #4]	; (800804c <__malloc_unlock+0x8>)
 8008046:	f7fe bf59 	b.w	8006efc <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	20000328 	.word	0x20000328

08008050 <_read_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d07      	ldr	r5, [pc, #28]	; (8008070 <_read_r+0x20>)
 8008054:	4604      	mov	r4, r0
 8008056:	4608      	mov	r0, r1
 8008058:	4611      	mov	r1, r2
 800805a:	2200      	movs	r2, #0
 800805c:	602a      	str	r2, [r5, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f7f9 fa5c 	bl	800151c <_read>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_read_r+0x1e>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_read_r+0x1e>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	20000334 	.word	0x20000334

08008074 <__ascii_wctomb>:
 8008074:	b149      	cbz	r1, 800808a <__ascii_wctomb+0x16>
 8008076:	2aff      	cmp	r2, #255	; 0xff
 8008078:	bf85      	ittet	hi
 800807a:	238a      	movhi	r3, #138	; 0x8a
 800807c:	6003      	strhi	r3, [r0, #0]
 800807e:	700a      	strbls	r2, [r1, #0]
 8008080:	f04f 30ff 	movhi.w	r0, #4294967295
 8008084:	bf98      	it	ls
 8008086:	2001      	movls	r0, #1
 8008088:	4770      	bx	lr
 800808a:	4608      	mov	r0, r1
 800808c:	4770      	bx	lr

0800808e <abort>:
 800808e:	b508      	push	{r3, lr}
 8008090:	2006      	movs	r0, #6
 8008092:	f000 f84d 	bl	8008130 <raise>
 8008096:	2001      	movs	r0, #1
 8008098:	f7f9 fa36 	bl	8001508 <_exit>

0800809c <_fstat_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	; (80080bc <_fstat_r+0x20>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	f7f9 fa7c 	bl	80015a6 <_fstat>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	d102      	bne.n	80080b8 <_fstat_r+0x1c>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	b103      	cbz	r3, 80080b8 <_fstat_r+0x1c>
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	bd38      	pop	{r3, r4, r5, pc}
 80080ba:	bf00      	nop
 80080bc:	20000334 	.word	0x20000334

080080c0 <_isatty_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d06      	ldr	r5, [pc, #24]	; (80080dc <_isatty_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f9 fa7b 	bl	80015c6 <_isatty>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_isatty_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_isatty_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20000334 	.word	0x20000334

080080e0 <_raise_r>:
 80080e0:	291f      	cmp	r1, #31
 80080e2:	b538      	push	{r3, r4, r5, lr}
 80080e4:	4604      	mov	r4, r0
 80080e6:	460d      	mov	r5, r1
 80080e8:	d904      	bls.n	80080f4 <_raise_r+0x14>
 80080ea:	2316      	movs	r3, #22
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	f04f 30ff 	mov.w	r0, #4294967295
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080f6:	b112      	cbz	r2, 80080fe <_raise_r+0x1e>
 80080f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080fc:	b94b      	cbnz	r3, 8008112 <_raise_r+0x32>
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f830 	bl	8008164 <_getpid_r>
 8008104:	462a      	mov	r2, r5
 8008106:	4601      	mov	r1, r0
 8008108:	4620      	mov	r0, r4
 800810a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800810e:	f000 b817 	b.w	8008140 <_kill_r>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d00a      	beq.n	800812c <_raise_r+0x4c>
 8008116:	1c59      	adds	r1, r3, #1
 8008118:	d103      	bne.n	8008122 <_raise_r+0x42>
 800811a:	2316      	movs	r3, #22
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	2001      	movs	r0, #1
 8008120:	e7e7      	b.n	80080f2 <_raise_r+0x12>
 8008122:	2400      	movs	r4, #0
 8008124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008128:	4628      	mov	r0, r5
 800812a:	4798      	blx	r3
 800812c:	2000      	movs	r0, #0
 800812e:	e7e0      	b.n	80080f2 <_raise_r+0x12>

08008130 <raise>:
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <raise+0xc>)
 8008132:	4601      	mov	r1, r0
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	f7ff bfd3 	b.w	80080e0 <_raise_r>
 800813a:	bf00      	nop
 800813c:	2000000c 	.word	0x2000000c

08008140 <_kill_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	; (8008160 <_kill_r+0x20>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	4611      	mov	r1, r2
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	f7f9 f9cb 	bl	80014e8 <_kill>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d102      	bne.n	800815c <_kill_r+0x1c>
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	b103      	cbz	r3, 800815c <_kill_r+0x1c>
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	20000334 	.word	0x20000334

08008164 <_getpid_r>:
 8008164:	f7f9 b9b8 	b.w	80014d8 <_getpid>

08008168 <_init>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr

08008174 <_fini>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr
